
00_itm_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006020  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006520  08006520  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006520  08006520  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006520  08006520  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006524  08006524  00016524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001acc  2000007c  080065a4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b48  080065a4  00021b48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016860  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003830  00000000  00000000  00036905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0003a138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003b588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b261  00000000  00000000  0003c860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018615  00000000  00000000  00057ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095eaa  00000000  00000000  000700d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105f80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b40  00000000  00000000  00105fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006118 	.word	0x08006118

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08006118 	.word	0x08006118

08000150 <itm_send_char>:
#include "itm.h"

uint8_t itm_send_char(uint8_t ch, uint8_t channel)
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	460a      	mov	r2, r1
 800015a:	71fb      	strb	r3, [r7, #7]
 800015c:	4613      	mov	r3, r2
 800015e:	71bb      	strb	r3, [r7, #6]
  uint32_t port = 0;
 8000160:	2300      	movs	r3, #0
 8000162:	60fb      	str	r3, [r7, #12]

  // Check if ITM is enabled and the channel is enabled
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0 &&
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d022      	beq.n	80001ba <itm_send_char+0x6a>
      (ITM->TER & (1 << channel)) != 0)
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	79ba      	ldrb	r2, [r7, #6]
 800017e:	2101      	movs	r1, #1
 8000180:	fa01 f202 	lsl.w	r2, r1, r2
 8000184:	4013      	ands	r3, r2
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0 &&
 8000186:	2b00      	cmp	r3, #0
 8000188:	d017      	beq.n	80001ba <itm_send_char+0x6a>
  {
      // Get the stimulus port number for the channel
      port = ITM->TPR & ~(0x3);
 800018a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018e:	f8d3 3e40 	ldr.w	r3, [r3, #3648]	; 0xe40
 8000192:	f023 0303 	bic.w	r3, r3, #3
 8000196:	60fb      	str	r3, [r7, #12]
      port = channel;
 8000198:	79bb      	ldrb	r3, [r7, #6]
 800019a:	60fb      	str	r3, [r7, #12]

      // Wait until the stimulus port is ready to accept data
      while (ITM->PORT[port].u32 == 0){ __NOP();}
 800019c:	e000      	b.n	80001a0 <itm_send_char+0x50>
 800019e:	bf00      	nop
 80001a0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d0f7      	beq.n	800019e <itm_send_char+0x4e>

      // Write the character to the stimulus port for the channel
      ITM->PORT[port].u8 = (uint8_t)ch;
 80001ae:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	79fa      	ldrb	r2, [r7, #7]
 80001b6:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
  }

  return ch;
 80001ba:	79fb      	ldrb	r3, [r7, #7]
}
 80001bc:	4618      	mov	r0, r3
 80001be:	3714      	adds	r7, #20
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <itm_write_ch0>:

int itm_write_ch0(char *ptr, int len)
{
 80001c6:	b580      	push	{r7, lr}
 80001c8:	b084      	sub	sp, #16
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
  // Write character to ITM ch.0
  for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001d0:	2300      	movs	r3, #0
 80001d2:	60fb      	str	r3, [r7, #12]
 80001d4:	e00a      	b.n	80001ec <itm_write_ch0+0x26>
      itm_send_char(*ptr++, 0);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	1c5a      	adds	r2, r3, #1
 80001da:	607a      	str	r2, [r7, #4]
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	2100      	movs	r1, #0
 80001e0:	4618      	mov	r0, r3
 80001e2:	f7ff ffb5 	bl	8000150 <itm_send_char>
  for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	3301      	adds	r3, #1
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	dbf0      	blt.n	80001d6 <itm_write_ch0+0x10>
  }
  return len;
 80001f4:	683b      	ldr	r3, [r7, #0]
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	3710      	adds	r7, #16
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <_write>:

// Called from syscalls in printf implementation,
// it will override weak implementation
#if OVERWRITE_PRINTF_WRITE
int _write(int file, char *ptr, int len)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	607a      	str	r2, [r7, #4]
    return led_config._write(ptr, len);
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <_write+0x20>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	6879      	ldr	r1, [r7, #4]
 8000212:	68b8      	ldr	r0, [r7, #8]
 8000214:	4798      	blx	r3
 8000216:	4603      	mov	r3, r0
}
 8000218:	4618      	mov	r0, r3
 800021a:	3710      	adds	r7, #16
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	20000000 	.word	0x20000000

08000224 <log_get_level>:
    }
    return 1; 
}

log_level_t log_get_level(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
    return led_config.current_log_level;
 8000228:	4b02      	ldr	r3, [pc, #8]	; (8000234 <log_get_level+0x10>)
 800022a:	781b      	ldrb	r3, [r3, #0]
}
 800022c:	4618      	mov	r0, r3
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	20000000 	.word	0x20000000

08000238 <log_init>:

uint8_t log_init(log_level_t log_level, int (*_write)(char *ptr, int len))
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	6039      	str	r1, [r7, #0]
 8000242:	71fb      	strb	r3, [r7, #7]
    assert_param(_write == NULL);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d003      	beq.n	8000252 <log_init+0x1a>
 800024a:	2137      	movs	r1, #55	; 0x37
 800024c:	4806      	ldr	r0, [pc, #24]	; (8000268 <log_init+0x30>)
 800024e:	f000 f962 	bl	8000516 <assert_failed>
    led_config.current_log_level = log_level;
 8000252:	4a06      	ldr	r2, [pc, #24]	; (800026c <log_init+0x34>)
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	7013      	strb	r3, [r2, #0]
    led_config._write = _write;
 8000258:	4a04      	ldr	r2, [pc, #16]	; (800026c <log_init+0x34>)
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	6053      	str	r3, [r2, #4]
    return 0;
 800025e:	2300      	movs	r3, #0
};
 8000260:	4618      	mov	r0, r3
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	08006130 	.word	0x08006130
 800026c:	20000000 	.word	0x20000000

08000270 <blink_led_non_blocking>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void blink_led_non_blocking(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af02      	add	r7, sp, #8
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000276:	2120      	movs	r1, #32
 8000278:	4814      	ldr	r0, [pc, #80]	; (80002cc <blink_led_non_blocking+0x5c>)
 800027a:	f000 ff21 	bl	80010c0 <HAL_GPIO_TogglePin>
    log_message(LOG_LEVEL_DEBUG, "Led2 toogle!\n");
 800027e:	f7ff ffd1 	bl	8000224 <log_get_level>
 8000282:	4603      	mov	r3, r0
 8000284:	2b02      	cmp	r3, #2
 8000286:	d918      	bls.n	80002ba <blink_led_non_blocking+0x4a>
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <blink_led_non_blocking+0x60>)
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <blink_led_non_blocking+0x60>)
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <blink_led_non_blocking+0x64>)
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <blink_led_non_blocking+0x68>)
 8000296:	603b      	str	r3, [r7, #0]
 8000298:	bf00      	nop
 800029a:	f000 fb59 	bl	8000950 <HAL_GetTick>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <blink_led_non_blocking+0x60>)
 80002a2:	9200      	str	r2, [sp, #0]
 80002a4:	683a      	ldr	r2, [r7, #0]
 80002a6:	6879      	ldr	r1, [r7, #4]
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <blink_led_non_blocking+0x6c>)
 80002aa:	f005 f84d 	bl	8005348 <iprintf>
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <blink_led_non_blocking+0x70>)
 80002b0:	f005 f8d0 	bl	8005454 <puts>
 80002b4:	480b      	ldr	r0, [pc, #44]	; (80002e4 <blink_led_non_blocking+0x74>)
 80002b6:	f005 f847 	bl	8005348 <iprintf>
    osDelay(500);
 80002ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002be:	f002 fa7d 	bl	80027bc <osDelay>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010800 	.word	0x40010800
 80002d0:	08006248 	.word	0x08006248
 80002d4:	0800624c 	.word	0x0800624c
 80002d8:	08006254 	.word	0x08006254
 80002dc:	08006258 	.word	0x08006258
 80002e0:	08006268 	.word	0x08006268
 80002e4:	08006278 	.word	0x08006278

080002e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <MX_FREERTOS_Init+0x18>)
 80002ee:	2100      	movs	r1, #0
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <MX_FREERTOS_Init+0x1c>)
 80002f2:	f002 f9b9 	bl	8002668 <osThreadNew>
 80002f6:	4603      	mov	r3, r0
 80002f8:	4a03      	ldr	r2, [pc, #12]	; (8000308 <MX_FREERTOS_Init+0x20>)
 80002fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	0800644c 	.word	0x0800644c
 8000304:	0800030d 	.word	0x0800030d
 8000308:	20000098 	.word	0x20000098

0800030c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	blink_led_non_blocking();
 8000314:	f7ff ffac 	bl	8000270 <blink_led_non_blocking>
 8000318:	e7fc      	b.n	8000314 <StartDefaultTask+0x8>
	...

0800031c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000330:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <MX_GPIO_Init+0xcc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a2c      	ldr	r2, [pc, #176]	; (80003e8 <MX_GPIO_Init+0xcc>)
 8000336:	f043 0310 	orr.w	r3, r3, #16
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b2a      	ldr	r3, [pc, #168]	; (80003e8 <MX_GPIO_Init+0xcc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0310 	and.w	r3, r3, #16
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000348:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <MX_GPIO_Init+0xcc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a26      	ldr	r2, [pc, #152]	; (80003e8 <MX_GPIO_Init+0xcc>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <MX_GPIO_Init+0xcc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0320 	and.w	r3, r3, #32
 800035c:	60bb      	str	r3, [r7, #8]
 800035e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000360:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <MX_GPIO_Init+0xcc>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a20      	ldr	r2, [pc, #128]	; (80003e8 <MX_GPIO_Init+0xcc>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <MX_GPIO_Init+0xcc>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0304 	and.w	r3, r3, #4
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <MX_GPIO_Init+0xcc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a1a      	ldr	r2, [pc, #104]	; (80003e8 <MX_GPIO_Init+0xcc>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <MX_GPIO_Init+0xcc>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0308 	and.w	r3, r3, #8
 800038c:	603b      	str	r3, [r7, #0]
 800038e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2160      	movs	r1, #96	; 0x60
 8000394:	4815      	ldr	r0, [pc, #84]	; (80003ec <MX_GPIO_Init+0xd0>)
 8000396:	f000 fe61 	bl	800105c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800039a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003a0:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <MX_GPIO_Init+0xd4>)
 80003a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	4619      	mov	r1, r3
 80003ae:	4811      	ldr	r0, [pc, #68]	; (80003f4 <MX_GPIO_Init+0xd8>)
 80003b0:	f000 fbe6 	bl	8000b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 80003b4:	2360      	movs	r3, #96	; 0x60
 80003b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2302      	movs	r3, #2
 80003c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	4808      	ldr	r0, [pc, #32]	; (80003ec <MX_GPIO_Init+0xd0>)
 80003cc:	f000 fbd8 	bl	8000b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2105      	movs	r1, #5
 80003d4:	2028      	movs	r0, #40	; 0x28
 80003d6:	f000 fb8f 	bl	8000af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003da:	2028      	movs	r0, #40	; 0x28
 80003dc:	f000 fbb8 	bl	8000b50 <HAL_NVIC_EnableIRQ>

}
 80003e0:	bf00      	nop
 80003e2:	3720      	adds	r7, #32
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010800 	.word	0x40010800
 80003f0:	10110000 	.word	0x10110000
 80003f4:	40011000 	.word	0x40011000

080003f8 <print_startup_msg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_startup_msg(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	printf("************************************\r\n");
 80003fc:	4807      	ldr	r0, [pc, #28]	; (800041c <print_startup_msg+0x24>)
 80003fe:	f005 f829 	bl	8005454 <puts>
	printf("***** %s - %s ****/\r\n", __DATE__, __TIME__);
 8000402:	4a07      	ldr	r2, [pc, #28]	; (8000420 <print_startup_msg+0x28>)
 8000404:	4907      	ldr	r1, [pc, #28]	; (8000424 <print_startup_msg+0x2c>)
 8000406:	4808      	ldr	r0, [pc, #32]	; (8000428 <print_startup_msg+0x30>)
 8000408:	f004 ff9e 	bl	8005348 <iprintf>
	printf("***** Author : Bayron Cabrera ******\r\n");
 800040c:	4807      	ldr	r0, [pc, #28]	; (800042c <print_startup_msg+0x34>)
 800040e:	f005 f821 	bl	8005454 <puts>
	printf("************************************\r\n");
 8000412:	4802      	ldr	r0, [pc, #8]	; (800041c <print_startup_msg+0x24>)
 8000414:	f005 f81e 	bl	8005454 <puts>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	08006280 	.word	0x08006280
 8000420:	080062a8 	.word	0x080062a8
 8000424:	080062b4 	.word	0x080062b4
 8000428:	080062c0 	.word	0x080062c0
 800042c:	080062d8 	.word	0x080062d8

08000430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000434:	f000 fa64 	bl	8000900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000438:	f000 f814 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043c:	f7ff ff6e 	bl	800031c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000440:	f000 f9d0 	bl	80007e4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  log_init(LOG_LEVEL_TRACE, &itm_write_ch0);
 8000444:	4906      	ldr	r1, [pc, #24]	; (8000460 <main+0x30>)
 8000446:	2004      	movs	r0, #4
 8000448:	f7ff fef6 	bl	8000238 <log_init>
  print_startup_msg();
 800044c:	f7ff ffd4 	bl	80003f8 <print_startup_msg>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000450:	f002 f8a4 	bl	800259c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000454:	f7ff ff48 	bl	80002e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000458:	f002 f8d2 	bl	8002600 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800045c:	e7fe      	b.n	800045c <main+0x2c>
 800045e:	bf00      	nop
 8000460:	080001c7 	.word	0x080001c7

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b090      	sub	sp, #64	; 0x40
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	2228      	movs	r2, #40	; 0x28
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f004 fecb 	bl	800520e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000486:	2302      	movs	r3, #2
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048a:	2301      	movs	r3, #1
 800048c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048e:	2310      	movs	r3, #16
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	2302      	movs	r3, #2
 8000494:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000496:	2300      	movs	r3, #0
 8000498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800049a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800049e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a0:	f107 0318 	add.w	r3, r7, #24
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 fe55 	bl	8001154 <HAL_RCC_OscConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004b0:	f000 f82c 	bl	800050c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	230f      	movs	r3, #15
 80004b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	2302      	movs	r3, #2
 80004ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2102      	movs	r1, #2
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 f9ae 	bl	8001830 <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004da:	f000 f817 	bl	800050c <Error_Handler>
  }
}
 80004de:	bf00      	nop
 80004e0:	3740      	adds	r7, #64	; 0x40
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d101      	bne.n	80004fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004fa:	f000 fa17 	bl	800092c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40012c00 	.word	0x40012c00

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000510:	b672      	cpsid	i
}
 8000512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000514:	e7fe      	b.n	8000514 <Error_Handler+0x8>

08000516 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
	...

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <HAL_MspInit+0x68>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a17      	ldr	r2, [pc, #92]	; (8000594 <HAL_MspInit+0x68>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <HAL_MspInit+0x68>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_MspInit+0x68>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a11      	ldr	r2, [pc, #68]	; (8000594 <HAL_MspInit+0x68>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <HAL_MspInit+0x68>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	210f      	movs	r1, #15
 8000566:	f06f 0001 	mvn.w	r0, #1
 800056a:	f000 fac5 	bl	8000af8 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <HAL_MspInit+0x6c>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_MspInit+0x6c>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000
 8000598:	40010000 	.word	0x40010000

0800059c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08c      	sub	sp, #48	; 0x30
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80005a4:	2300      	movs	r3, #0
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005b2:	4b2e      	ldr	r3, [pc, #184]	; (800066c <HAL_InitTick+0xd0>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a2d      	ldr	r2, [pc, #180]	; (800066c <HAL_InitTick+0xd0>)
 80005b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <HAL_InitTick+0xd0>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005ca:	f107 020c 	add.w	r2, r7, #12
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	4611      	mov	r1, r2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fb4b 	bl	8001c70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005da:	f001 fb35 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 80005de:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e2:	4a23      	ldr	r2, [pc, #140]	; (8000670 <HAL_InitTick+0xd4>)
 80005e4:	fba2 2303 	umull	r2, r3, r2, r3
 80005e8:	0c9b      	lsrs	r3, r3, #18
 80005ea:	3b01      	subs	r3, #1
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <HAL_InitTick+0xd8>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <HAL_InitTick+0xdc>)
 80005f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <HAL_InitTick+0xd8>)
 80005f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005fa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005fc:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <HAL_InitTick+0xd8>)
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <HAL_InitTick+0xd8>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <HAL_InitTick+0xd8>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <HAL_InitTick+0xd8>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000614:	4817      	ldr	r0, [pc, #92]	; (8000674 <HAL_InitTick+0xd8>)
 8000616:	f001 fb8b 	bl	8001d30 <HAL_TIM_Base_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000624:	2b00      	cmp	r3, #0
 8000626:	d11b      	bne.n	8000660 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <HAL_InitTick+0xd8>)
 800062a:	f001 fc35 	bl	8001e98 <HAL_TIM_Base_Start_IT>
 800062e:	4603      	mov	r3, r0
 8000630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000638:	2b00      	cmp	r3, #0
 800063a:	d111      	bne.n	8000660 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800063c:	2019      	movs	r0, #25
 800063e:	f000 fa87 	bl	8000b50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	d808      	bhi.n	800065a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000648:	2200      	movs	r2, #0
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	2019      	movs	r0, #25
 800064e:	f000 fa53 	bl	8000af8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <HAL_InitTick+0xe0>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	e002      	b.n	8000660 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000660:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000664:	4618      	mov	r0, r3
 8000666:	3730      	adds	r7, #48	; 0x30
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000
 8000670:	431bde83 	.word	0x431bde83
 8000674:	2000009c 	.word	0x2000009c
 8000678:	40012c00 	.word	0x40012c00
 800067c:	2000000c 	.word	0x2000000c

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler+0x4>

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <MemManage_Handler+0x4>

08000692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <UsageFault_Handler+0x4>

0800069e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
	...

080006ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <TIM1_UP_IRQHandler+0x10>)
 80006b2:	f001 fc5d 	bl	8001f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000009c 	.word	0x2000009c

080006c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006c8:	f000 fd22 	bl	8001110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	e00a      	b.n	80006f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006e2:	f3af 8000 	nop.w
 80006e6:	4601      	mov	r1, r0
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	60ba      	str	r2, [r7, #8]
 80006ee:	b2ca      	uxtb	r2, r1
 80006f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3301      	adds	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	dbf0      	blt.n	80006e2 <_read+0x12>
  }

  return len;
 8000700:	687b      	ldr	r3, [r7, #4]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <_close>:
  }
  return len;
}

int _close(int file)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000730:	605a      	str	r2, [r3, #4]
  return 0;
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <_isatty>:

int _isatty(int file)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000752:	b480      	push	{r7}
 8000754:	b085      	sub	sp, #20
 8000756:	af00      	add	r7, sp, #0
 8000758:	60f8      	str	r0, [r7, #12]
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800075e:	2300      	movs	r3, #0
}
 8000760:	4618      	mov	r0, r3
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
	...

0800076c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000774:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <_sbrk+0x5c>)
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <_sbrk+0x60>)
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d102      	bne.n	800078e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <_sbrk+0x64>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <_sbrk+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <_sbrk+0x64>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	429a      	cmp	r2, r3
 800079a:	d207      	bcs.n	80007ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800079c:	f004 fc06 	bl	8004fac <__errno>
 80007a0:	4603      	mov	r3, r0
 80007a2:	220c      	movs	r2, #12
 80007a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	e009      	b.n	80007c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <_sbrk+0x64>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <_sbrk+0x64>)
 80007bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007be:	68fb      	ldr	r3, [r7, #12]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20005000 	.word	0x20005000
 80007cc:	00000400 	.word	0x00000400
 80007d0:	200000e4 	.word	0x200000e4
 80007d4:	20001b48 	.word	0x20001b48

080007d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART2_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800081c:	f001 fd48 	bl	80022b0 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f7ff fe71 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000e8 	.word	0x200000e8
 8000834:	40004400 	.word	0x40004400

08000838 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <HAL_UART_MspInit+0x70>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d123      	bne.n	80008a0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <HAL_UART_MspInit+0x74>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	4a13      	ldr	r2, [pc, #76]	; (80008ac <HAL_UART_MspInit+0x74>)
 800085e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000862:	61d3      	str	r3, [r2, #28]
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_UART_MspInit+0x74>)
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_UART_MspInit+0x74>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <HAL_UART_MspInit+0x74>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_UART_MspInit+0x74>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000888:	230c      	movs	r3, #12
 800088a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2302      	movs	r3, #2
 8000892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <HAL_UART_MspInit+0x78>)
 800089c:	f000 f970 	bl	8000b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40004400 	.word	0x40004400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800

080008b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008b6:	490d      	ldr	r1, [pc, #52]	; (80008ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008cc:	4c0a      	ldr	r4, [pc, #40]	; (80008f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008da:	f7ff ff7d 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008de:	f004 fc61 	bl	80051a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e2:	f7ff fda5 	bl	8000430 <main>
  bx lr
 80008e6:	4770      	bx	lr
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80008f0:	08006528 	.word	0x08006528
  ldr r2, =_sbss
 80008f4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80008f8:	20001b48 	.word	0x20001b48

080008fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_2_IRQHandler>
	...

08000900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_Init+0x28>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_Init+0x28>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f8d1 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	200f      	movs	r0, #15
 8000918:	f7ff fe40 	bl	800059c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff fe06 	bl	800052c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40022000 	.word	0x40022000

0800092c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x1c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x20>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <HAL_IncTick+0x20>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000010 	.word	0x20000010
 800094c:	2000012c 	.word	0x2000012c

08000950 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <HAL_GetTick+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	2000012c 	.word	0x2000012c

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	db0b      	blt.n	80009f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 021f 	and.w	r2, r3, #31
 80009e0:	4906      	ldr	r1, [pc, #24]	; (80009fc <__NVIC_EnableIRQ+0x34>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	095b      	lsrs	r3, r3, #5
 80009e8:	2001      	movs	r0, #1
 80009ea:	fa00 f202 	lsl.w	r2, r0, r2
 80009ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	; 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b07      	cmp	r3, #7
 8000ac4:	d00f      	beq.n	8000ae6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b06      	cmp	r3, #6
 8000aca:	d00c      	beq.n	8000ae6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d009      	beq.n	8000ae6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d006      	beq.n	8000ae6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d003      	beq.n	8000ae6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ade:	2192      	movs	r1, #146	; 0x92
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000ae2:	f7ff fd18 	bl	8000516 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ff3c 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	08006300 	.word	0x08006300

08000af8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d903      	bls.n	8000b18 <HAL_NVIC_SetPriority+0x20>
 8000b10:	21aa      	movs	r1, #170	; 0xaa
 8000b12:	480e      	ldr	r0, [pc, #56]	; (8000b4c <HAL_NVIC_SetPriority+0x54>)
 8000b14:	f7ff fcff 	bl	8000516 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2b0f      	cmp	r3, #15
 8000b1c:	d903      	bls.n	8000b26 <HAL_NVIC_SetPriority+0x2e>
 8000b1e:	21ab      	movs	r1, #171	; 0xab
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <HAL_NVIC_SetPriority+0x54>)
 8000b22:	f7ff fcf8 	bl	8000516 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b26:	f7ff ff41 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000b2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	68b9      	ldr	r1, [r7, #8]
 8000b30:	6978      	ldr	r0, [r7, #20]
 8000b32:	f7ff ff8f 	bl	8000a54 <NVIC_EncodePriority>
 8000b36:	4602      	mov	r2, r0
 8000b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff5e 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	08006300 	.word	0x08006300

08000b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	da03      	bge.n	8000b6a <HAL_NVIC_EnableIRQ+0x1a>
 8000b62:	21be      	movs	r1, #190	; 0xbe
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <HAL_NVIC_EnableIRQ+0x2c>)
 8000b66:	f7ff fcd6 	bl	8000516 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff2a 	bl	80009c8 <__NVIC_EnableIRQ>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	08006300 	.word	0x08006300

08000b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a96      	ldr	r2, [pc, #600]	; (8000df0 <HAL_GPIO_Init+0x270>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d013      	beq.n	8000bc2 <HAL_GPIO_Init+0x42>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a95      	ldr	r2, [pc, #596]	; (8000df4 <HAL_GPIO_Init+0x274>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d00f      	beq.n	8000bc2 <HAL_GPIO_Init+0x42>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a94      	ldr	r2, [pc, #592]	; (8000df8 <HAL_GPIO_Init+0x278>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d00b      	beq.n	8000bc2 <HAL_GPIO_Init+0x42>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a93      	ldr	r2, [pc, #588]	; (8000dfc <HAL_GPIO_Init+0x27c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d007      	beq.n	8000bc2 <HAL_GPIO_Init+0x42>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a92      	ldr	r2, [pc, #584]	; (8000e00 <HAL_GPIO_Init+0x280>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x42>
 8000bba:	21bd      	movs	r1, #189	; 0xbd
 8000bbc:	4891      	ldr	r0, [pc, #580]	; (8000e04 <HAL_GPIO_Init+0x284>)
 8000bbe:	f7ff fcaa 	bl	8000516 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d005      	beq.n	8000bd8 <HAL_GPIO_Init+0x58>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	0c1b      	lsrs	r3, r3, #16
 8000bd2:	041b      	lsls	r3, r3, #16
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x60>
 8000bd8:	21be      	movs	r1, #190	; 0xbe
 8000bda:	488a      	ldr	r0, [pc, #552]	; (8000e04 <HAL_GPIO_Init+0x284>)
 8000bdc:	f7ff fc9b 	bl	8000516 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	f000 821c 	beq.w	8001022 <HAL_GPIO_Init+0x4a2>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	f000 8217 	beq.w	8001022 <HAL_GPIO_Init+0x4a2>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b11      	cmp	r3, #17
 8000bfa:	f000 8212 	beq.w	8001022 <HAL_GPIO_Init+0x4a2>
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	f000 820d 	beq.w	8001022 <HAL_GPIO_Init+0x4a2>
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b12      	cmp	r3, #18
 8000c0e:	f000 8208 	beq.w	8001022 <HAL_GPIO_Init+0x4a2>
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4a7c      	ldr	r2, [pc, #496]	; (8000e08 <HAL_GPIO_Init+0x288>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	f000 8202 	beq.w	8001022 <HAL_GPIO_Init+0x4a2>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	4a7a      	ldr	r2, [pc, #488]	; (8000e0c <HAL_GPIO_Init+0x28c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	f000 81fc 	beq.w	8001022 <HAL_GPIO_Init+0x4a2>
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	4a78      	ldr	r2, [pc, #480]	; (8000e10 <HAL_GPIO_Init+0x290>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	f000 81f6 	beq.w	8001022 <HAL_GPIO_Init+0x4a2>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	4a76      	ldr	r2, [pc, #472]	; (8000e14 <HAL_GPIO_Init+0x294>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	f000 81f0 	beq.w	8001022 <HAL_GPIO_Init+0x4a2>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	4a74      	ldr	r2, [pc, #464]	; (8000e18 <HAL_GPIO_Init+0x298>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	f000 81ea 	beq.w	8001022 <HAL_GPIO_Init+0x4a2>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a72      	ldr	r2, [pc, #456]	; (8000e1c <HAL_GPIO_Init+0x29c>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	f000 81e4 	beq.w	8001022 <HAL_GPIO_Init+0x4a2>
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	f000 81df 	beq.w	8001022 <HAL_GPIO_Init+0x4a2>
 8000c64:	21bf      	movs	r1, #191	; 0xbf
 8000c66:	4867      	ldr	r0, [pc, #412]	; (8000e04 <HAL_GPIO_Init+0x284>)
 8000c68:	f7ff fc55 	bl	8000516 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6c:	e1d9      	b.n	8001022 <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	69fa      	ldr	r2, [r7, #28]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	f040 81c8 	bne.w	800101c <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a58      	ldr	r2, [pc, #352]	; (8000df0 <HAL_GPIO_Init+0x270>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d013      	beq.n	8000cbc <HAL_GPIO_Init+0x13c>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a57      	ldr	r2, [pc, #348]	; (8000df4 <HAL_GPIO_Init+0x274>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d00f      	beq.n	8000cbc <HAL_GPIO_Init+0x13c>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a56      	ldr	r2, [pc, #344]	; (8000df8 <HAL_GPIO_Init+0x278>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d00b      	beq.n	8000cbc <HAL_GPIO_Init+0x13c>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a55      	ldr	r2, [pc, #340]	; (8000dfc <HAL_GPIO_Init+0x27c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d007      	beq.n	8000cbc <HAL_GPIO_Init+0x13c>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a54      	ldr	r2, [pc, #336]	; (8000e00 <HAL_GPIO_Init+0x280>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x13c>
 8000cb4:	21cd      	movs	r1, #205	; 0xcd
 8000cb6:	4853      	ldr	r0, [pc, #332]	; (8000e04 <HAL_GPIO_Init+0x284>)
 8000cb8:	f7ff fc2d 	bl	8000516 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	4a56      	ldr	r2, [pc, #344]	; (8000e1c <HAL_GPIO_Init+0x29c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	f000 80c1 	beq.w	8000e4a <HAL_GPIO_Init+0x2ca>
 8000cc8:	4a54      	ldr	r2, [pc, #336]	; (8000e1c <HAL_GPIO_Init+0x29c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	f200 80e7 	bhi.w	8000e9e <HAL_GPIO_Init+0x31e>
 8000cd0:	4a4f      	ldr	r2, [pc, #316]	; (8000e10 <HAL_GPIO_Init+0x290>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	f000 80b9 	beq.w	8000e4a <HAL_GPIO_Init+0x2ca>
 8000cd8:	4a4d      	ldr	r2, [pc, #308]	; (8000e10 <HAL_GPIO_Init+0x290>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	f200 80df 	bhi.w	8000e9e <HAL_GPIO_Init+0x31e>
 8000ce0:	4a4d      	ldr	r2, [pc, #308]	; (8000e18 <HAL_GPIO_Init+0x298>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	f000 80b1 	beq.w	8000e4a <HAL_GPIO_Init+0x2ca>
 8000ce8:	4a4b      	ldr	r2, [pc, #300]	; (8000e18 <HAL_GPIO_Init+0x298>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	f200 80d7 	bhi.w	8000e9e <HAL_GPIO_Init+0x31e>
 8000cf0:	4a46      	ldr	r2, [pc, #280]	; (8000e0c <HAL_GPIO_Init+0x28c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	f000 80a9 	beq.w	8000e4a <HAL_GPIO_Init+0x2ca>
 8000cf8:	4a44      	ldr	r2, [pc, #272]	; (8000e0c <HAL_GPIO_Init+0x28c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	f200 80cf 	bhi.w	8000e9e <HAL_GPIO_Init+0x31e>
 8000d00:	4a44      	ldr	r2, [pc, #272]	; (8000e14 <HAL_GPIO_Init+0x294>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	f000 80a1 	beq.w	8000e4a <HAL_GPIO_Init+0x2ca>
 8000d08:	4a42      	ldr	r2, [pc, #264]	; (8000e14 <HAL_GPIO_Init+0x294>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	f200 80c7 	bhi.w	8000e9e <HAL_GPIO_Init+0x31e>
 8000d10:	2b12      	cmp	r3, #18
 8000d12:	d82b      	bhi.n	8000d6c <HAL_GPIO_Init+0x1ec>
 8000d14:	2b12      	cmp	r3, #18
 8000d16:	f200 80c2 	bhi.w	8000e9e <HAL_GPIO_Init+0x31e>
 8000d1a:	a201      	add	r2, pc, #4	; (adr r2, 8000d20 <HAL_GPIO_Init+0x1a0>)
 8000d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d20:	08000e4b 	.word	0x08000e4b
 8000d24:	08000d75 	.word	0x08000d75
 8000d28:	08000dc7 	.word	0x08000dc7
 8000d2c:	08000e99 	.word	0x08000e99
 8000d30:	08000e9f 	.word	0x08000e9f
 8000d34:	08000e9f 	.word	0x08000e9f
 8000d38:	08000e9f 	.word	0x08000e9f
 8000d3c:	08000e9f 	.word	0x08000e9f
 8000d40:	08000e9f 	.word	0x08000e9f
 8000d44:	08000e9f 	.word	0x08000e9f
 8000d48:	08000e9f 	.word	0x08000e9f
 8000d4c:	08000e9f 	.word	0x08000e9f
 8000d50:	08000e9f 	.word	0x08000e9f
 8000d54:	08000e9f 	.word	0x08000e9f
 8000d58:	08000e9f 	.word	0x08000e9f
 8000d5c:	08000e9f 	.word	0x08000e9f
 8000d60:	08000e9f 	.word	0x08000e9f
 8000d64:	08000d9d 	.word	0x08000d9d
 8000d68:	08000e21 	.word	0x08000e21
 8000d6c:	4a26      	ldr	r2, [pc, #152]	; (8000e08 <HAL_GPIO_Init+0x288>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d06b      	beq.n	8000e4a <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d72:	e094      	b.n	8000e9e <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d00b      	beq.n	8000d94 <HAL_GPIO_Init+0x214>
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d007      	beq.n	8000d94 <HAL_GPIO_Init+0x214>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x214>
 8000d8c:	21d5      	movs	r1, #213	; 0xd5
 8000d8e:	481d      	ldr	r0, [pc, #116]	; (8000e04 <HAL_GPIO_Init+0x284>)
 8000d90:	f7ff fbc1 	bl	8000516 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	623b      	str	r3, [r7, #32]
          break;
 8000d9a:	e081      	b.n	8000ea0 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d00b      	beq.n	8000dbc <HAL_GPIO_Init+0x23c>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d007      	beq.n	8000dbc <HAL_GPIO_Init+0x23c>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x23c>
 8000db4:	21dc      	movs	r1, #220	; 0xdc
 8000db6:	4813      	ldr	r0, [pc, #76]	; (8000e04 <HAL_GPIO_Init+0x284>)
 8000db8:	f7ff fbad 	bl	8000516 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	623b      	str	r3, [r7, #32]
          break;
 8000dc4:	e06c      	b.n	8000ea0 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d00b      	beq.n	8000de6 <HAL_GPIO_Init+0x266>
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d007      	beq.n	8000de6 <HAL_GPIO_Init+0x266>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x266>
 8000dde:	21e3      	movs	r1, #227	; 0xe3
 8000de0:	4808      	ldr	r0, [pc, #32]	; (8000e04 <HAL_GPIO_Init+0x284>)
 8000de2:	f7ff fb98 	bl	8000516 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	3308      	adds	r3, #8
 8000dec:	623b      	str	r3, [r7, #32]
          break;
 8000dee:	e057      	b.n	8000ea0 <HAL_GPIO_Init+0x320>
 8000df0:	40010800 	.word	0x40010800
 8000df4:	40010c00 	.word	0x40010c00
 8000df8:	40011000 	.word	0x40011000
 8000dfc:	40011400 	.word	0x40011400
 8000e00:	40011800 	.word	0x40011800
 8000e04:	0800633c 	.word	0x0800633c
 8000e08:	10110000 	.word	0x10110000
 8000e0c:	10210000 	.word	0x10210000
 8000e10:	10310000 	.word	0x10310000
 8000e14:	10120000 	.word	0x10120000
 8000e18:	10220000 	.word	0x10220000
 8000e1c:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d00b      	beq.n	8000e40 <HAL_GPIO_Init+0x2c0>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d007      	beq.n	8000e40 <HAL_GPIO_Init+0x2c0>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x2c0>
 8000e38:	21ea      	movs	r1, #234	; 0xea
 8000e3a:	4880      	ldr	r0, [pc, #512]	; (800103c <HAL_GPIO_Init+0x4bc>)
 8000e3c:	f7ff fb6b 	bl	8000516 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	330c      	adds	r3, #12
 8000e46:	623b      	str	r3, [r7, #32]
          break;
 8000e48:	e02a      	b.n	8000ea0 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <HAL_GPIO_Init+0x2ea>
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x2ea>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x2ea>
 8000e62:	21f7      	movs	r1, #247	; 0xf7
 8000e64:	4875      	ldr	r0, [pc, #468]	; (800103c <HAL_GPIO_Init+0x4bc>)
 8000e66:	f7ff fb56 	bl	8000516 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e72:	2304      	movs	r3, #4
 8000e74:	623b      	str	r3, [r7, #32]
          break;
 8000e76:	e013      	b.n	8000ea0 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d105      	bne.n	8000e8c <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e80:	2308      	movs	r3, #8
 8000e82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	611a      	str	r2, [r3, #16]
          break;
 8000e8a:	e009      	b.n	8000ea0 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	615a      	str	r2, [r3, #20]
          break;
 8000e96:	e003      	b.n	8000ea0 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
          break;
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x320>
          break;
 8000e9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2bff      	cmp	r3, #255	; 0xff
 8000ea4:	d801      	bhi.n	8000eaa <HAL_GPIO_Init+0x32a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	e001      	b.n	8000eae <HAL_GPIO_Init+0x32e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3304      	adds	r3, #4
 8000eae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2bff      	cmp	r3, #255	; 0xff
 8000eb4:	d802      	bhi.n	8000ebc <HAL_GPIO_Init+0x33c>
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_Init+0x342>
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	3b08      	subs	r3, #8
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	210f      	movs	r1, #15
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	6a39      	ldr	r1, [r7, #32]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	431a      	orrs	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 8096 	beq.w	800101c <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef0:	4b53      	ldr	r3, [pc, #332]	; (8001040 <HAL_GPIO_Init+0x4c0>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a52      	ldr	r2, [pc, #328]	; (8001040 <HAL_GPIO_Init+0x4c0>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <HAL_GPIO_Init+0x4c0>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f08:	4a4e      	ldr	r2, [pc, #312]	; (8001044 <HAL_GPIO_Init+0x4c4>)
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a46      	ldr	r2, [pc, #280]	; (8001048 <HAL_GPIO_Init+0x4c8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d013      	beq.n	8000f5c <HAL_GPIO_Init+0x3dc>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a45      	ldr	r2, [pc, #276]	; (800104c <HAL_GPIO_Init+0x4cc>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d00d      	beq.n	8000f58 <HAL_GPIO_Init+0x3d8>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a44      	ldr	r2, [pc, #272]	; (8001050 <HAL_GPIO_Init+0x4d0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d007      	beq.n	8000f54 <HAL_GPIO_Init+0x3d4>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a43      	ldr	r2, [pc, #268]	; (8001054 <HAL_GPIO_Init+0x4d4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d101      	bne.n	8000f50 <HAL_GPIO_Init+0x3d0>
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e006      	b.n	8000f5e <HAL_GPIO_Init+0x3de>
 8000f50:	2304      	movs	r3, #4
 8000f52:	e004      	b.n	8000f5e <HAL_GPIO_Init+0x3de>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x3de>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_GPIO_Init+0x3de>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f60:	f002 0203 	and.w	r2, r2, #3
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	4093      	lsls	r3, r2
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f6e:	4935      	ldr	r1, [pc, #212]	; (8001044 <HAL_GPIO_Init+0x4c4>)
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f88:	4b33      	ldr	r3, [pc, #204]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4932      	ldr	r1, [pc, #200]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	600b      	str	r3, [r1, #0]
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f96:	4b30      	ldr	r3, [pc, #192]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	492e      	ldr	r1, [pc, #184]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d006      	beq.n	8000fbe <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	4928      	ldr	r1, [pc, #160]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	4924      	ldr	r1, [pc, #144]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	491e      	ldr	r1, [pc, #120]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	608b      	str	r3, [r1, #8]
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	491a      	ldr	r1, [pc, #104]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	4914      	ldr	r1, [pc, #80]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	60cb      	str	r3, [r1, #12]
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	43db      	mvns	r3, r3
 8001016:	4910      	ldr	r1, [pc, #64]	; (8001058 <HAL_GPIO_Init+0x4d8>)
 8001018:	4013      	ands	r3, r2
 800101a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	3301      	adds	r3, #1
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	f47f ae1e 	bne.w	8000c6e <HAL_GPIO_Init+0xee>
  }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	0800633c 	.word	0x0800633c
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	40010800 	.word	0x40010800
 800104c:	40010c00 	.word	0x40010c00
 8001050:	40011000 	.word	0x40011000
 8001054:	40011400 	.word	0x40011400
 8001058:	40010400 	.word	0x40010400

0800105c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
 8001068:	4613      	mov	r3, r2
 800106a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <HAL_GPIO_WritePin+0x20>
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	0c1b      	lsrs	r3, r3, #16
 8001076:	041b      	lsls	r3, r3, #16
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <HAL_GPIO_WritePin+0x2a>
 800107c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <HAL_GPIO_WritePin+0x60>)
 8001082:	f7ff fa48 	bl	8000516 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001086:	787b      	ldrb	r3, [r7, #1]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d007      	beq.n	800109c <HAL_GPIO_WritePin+0x40>
 800108c:	787b      	ldrb	r3, [r7, #1]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d004      	beq.n	800109c <HAL_GPIO_WritePin+0x40>
 8001092:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <HAL_GPIO_WritePin+0x60>)
 8001098:	f7ff fa3d 	bl	8000516 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	611a      	str	r2, [r3, #16]
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	0800633c 	.word	0x0800633c

080010c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <HAL_GPIO_TogglePin+0x1c>
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	0c1b      	lsrs	r3, r3, #16
 80010d6:	041b      	lsls	r3, r3, #16
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d004      	beq.n	80010e6 <HAL_GPIO_TogglePin+0x26>
 80010dc:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80010e0:	480a      	ldr	r0, [pc, #40]	; (800110c <HAL_GPIO_TogglePin+0x4c>)
 80010e2:	f7ff fa18 	bl	8000516 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010ec:	887a      	ldrh	r2, [r7, #2]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4013      	ands	r3, r2
 80010f2:	041a      	lsls	r2, r3, #16
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	400b      	ands	r3, r1
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	611a      	str	r2, [r3, #16]
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	0800633c 	.word	0x0800633c

08001110 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d006      	beq.n	8001134 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f806 	bl	8001140 <HAL_GPIO_EXTI_Callback>
  }
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40010400 	.word	0x40010400

08001140 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e35a      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d01c      	beq.n	80011a8 <HAL_RCC_OscConfig+0x54>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d116      	bne.n	80011a8 <HAL_RCC_OscConfig+0x54>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d110      	bne.n	80011a8 <HAL_RCC_OscConfig+0x54>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10a      	bne.n	80011a8 <HAL_RCC_OscConfig+0x54>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	2b00      	cmp	r3, #0
 800119c:	d104      	bne.n	80011a8 <HAL_RCC_OscConfig+0x54>
 800119e:	f240 1167 	movw	r1, #359	; 0x167
 80011a2:	488f      	ldr	r0, [pc, #572]	; (80013e0 <HAL_RCC_OscConfig+0x28c>)
 80011a4:	f7ff f9b7 	bl	8000516 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 809a 	beq.w	80012ea <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00e      	beq.n	80011dc <HAL_RCC_OscConfig+0x88>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d009      	beq.n	80011dc <HAL_RCC_OscConfig+0x88>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d0:	d004      	beq.n	80011dc <HAL_RCC_OscConfig+0x88>
 80011d2:	f240 116d 	movw	r1, #365	; 0x16d
 80011d6:	4882      	ldr	r0, [pc, #520]	; (80013e0 <HAL_RCC_OscConfig+0x28c>)
 80011d8:	f7ff f99d 	bl	8000516 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011dc:	4b81      	ldr	r3, [pc, #516]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d00c      	beq.n	8001202 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e8:	4b7e      	ldr	r3, [pc, #504]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d112      	bne.n	800121a <HAL_RCC_OscConfig+0xc6>
 80011f4:	4b7b      	ldr	r3, [pc, #492]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001200:	d10b      	bne.n	800121a <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001202:	4b78      	ldr	r3, [pc, #480]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d06c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x194>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d168      	bne.n	80012e8 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e300      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001222:	d106      	bne.n	8001232 <HAL_RCC_OscConfig+0xde>
 8001224:	4b6f      	ldr	r3, [pc, #444]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a6e      	ldr	r2, [pc, #440]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 800122a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	e02e      	b.n	8001290 <HAL_RCC_OscConfig+0x13c>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0x100>
 800123a:	4b6a      	ldr	r3, [pc, #424]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a69      	ldr	r2, [pc, #420]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 8001240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b67      	ldr	r3, [pc, #412]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a66      	ldr	r2, [pc, #408]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 800124c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e01d      	b.n	8001290 <HAL_RCC_OscConfig+0x13c>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x124>
 800125e:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a60      	ldr	r2, [pc, #384]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b5e      	ldr	r3, [pc, #376]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a5d      	ldr	r2, [pc, #372]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0x13c>
 8001278:	4b5a      	ldr	r3, [pc, #360]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a59      	ldr	r2, [pc, #356]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 800127e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b57      	ldr	r3, [pc, #348]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a56      	ldr	r2, [pc, #344]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fb5a 	bl	8000950 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fb56 	bl	8000950 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e2b4      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x14c>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fb46 	bl	8000950 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fb42 	bl	8000950 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e2a0      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	4b42      	ldr	r3, [pc, #264]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x174>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8080 	beq.w	80013f8 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_RCC_OscConfig+0x1be>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d004      	beq.n	8001312 <HAL_RCC_OscConfig+0x1be>
 8001308:	f240 11a1 	movw	r1, #417	; 0x1a1
 800130c:	4834      	ldr	r0, [pc, #208]	; (80013e0 <HAL_RCC_OscConfig+0x28c>)
 800130e:	f7ff f902 	bl	8000516 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	2b1f      	cmp	r3, #31
 8001318:	d904      	bls.n	8001324 <HAL_RCC_OscConfig+0x1d0>
 800131a:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800131e:	4830      	ldr	r0, [pc, #192]	; (80013e0 <HAL_RCC_OscConfig+0x28c>)
 8001320:	f7ff f8f9 	bl	8000516 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00b      	beq.n	8001348 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b08      	cmp	r3, #8
 800133a:	d11c      	bne.n	8001376 <HAL_RCC_OscConfig+0x222>
 800133c:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d116      	bne.n	8001376 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001348:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_RCC_OscConfig+0x20c>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d001      	beq.n	8001360 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e25d      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	491d      	ldr	r1, [pc, #116]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001374:	e040      	b.n	80013f8 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d020      	beq.n	80013c0 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_RCC_OscConfig+0x294>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fae4 	bl	8000950 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138c:	f7ff fae0 	bl	8000950 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e23e      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	490a      	ldr	r1, [pc, #40]	; (80013e4 <HAL_RCC_OscConfig+0x290>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
 80013be:	e01b      	b.n	80013f8 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_RCC_OscConfig+0x294>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fac3 	bl	8000950 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013cc:	e00e      	b.n	80013ec <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fabf 	bl	8000950 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d907      	bls.n	80013ec <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e21d      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
 80013e0:	08006378 	.word	0x08006378
 80013e4:	40021000 	.word	0x40021000
 80013e8:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ec:	4b7d      	ldr	r3, [pc, #500]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1ea      	bne.n	80013ce <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d040      	beq.n	8001486 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d008      	beq.n	800141e <HAL_RCC_OscConfig+0x2ca>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d004      	beq.n	800141e <HAL_RCC_OscConfig+0x2ca>
 8001414:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001418:	4873      	ldr	r0, [pc, #460]	; (80015e8 <HAL_RCC_OscConfig+0x494>)
 800141a:	f7ff f87c 	bl	8000516 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d019      	beq.n	800145a <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b71      	ldr	r3, [pc, #452]	; (80015ec <HAL_RCC_OscConfig+0x498>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142c:	f7ff fa90 	bl	8000950 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fa8c 	bl	8000950 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1ea      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	4b67      	ldr	r3, [pc, #412]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001452:	2001      	movs	r0, #1
 8001454:	f000 fc4e 	bl	8001cf4 <RCC_Delay>
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145a:	4b64      	ldr	r3, [pc, #400]	; (80015ec <HAL_RCC_OscConfig+0x498>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001460:	f7ff fa76 	bl	8000950 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001468:	f7ff fa72 	bl	8000950 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1d0      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147a:	4b5a      	ldr	r3, [pc, #360]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80bf 	beq.w	8001612 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00c      	beq.n	80014ba <HAL_RCC_OscConfig+0x366>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d008      	beq.n	80014ba <HAL_RCC_OscConfig+0x366>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d004      	beq.n	80014ba <HAL_RCC_OscConfig+0x366>
 80014b0:	f240 2111 	movw	r1, #529	; 0x211
 80014b4:	484c      	ldr	r0, [pc, #304]	; (80015e8 <HAL_RCC_OscConfig+0x494>)
 80014b6:	f7ff f82e 	bl	8000516 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4b4a      	ldr	r3, [pc, #296]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10d      	bne.n	80014e2 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b47      	ldr	r3, [pc, #284]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a46      	ldr	r2, [pc, #280]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <HAL_RCC_OscConfig+0x49c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ee:	4b40      	ldr	r3, [pc, #256]	; (80015f0 <HAL_RCC_OscConfig+0x49c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a3f      	ldr	r2, [pc, #252]	; (80015f0 <HAL_RCC_OscConfig+0x49c>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fa29 	bl	8000950 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fa25 	bl	8000950 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b64      	cmp	r3, #100	; 0x64
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e183      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_RCC_OscConfig+0x49c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x3e2>
 8001528:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a2d      	ldr	r2, [pc, #180]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	e02d      	b.n	8001592 <HAL_RCC_OscConfig+0x43e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x404>
 800153e:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6213      	str	r3, [r2, #32]
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4a25      	ldr	r2, [pc, #148]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 8001550:	f023 0304 	bic.w	r3, r3, #4
 8001554:	6213      	str	r3, [r2, #32]
 8001556:	e01c      	b.n	8001592 <HAL_RCC_OscConfig+0x43e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b05      	cmp	r3, #5
 800155e:	d10c      	bne.n	800157a <HAL_RCC_OscConfig+0x426>
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6213      	str	r3, [r2, #32]
 8001578:	e00b      	b.n	8001592 <HAL_RCC_OscConfig+0x43e>
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6213      	str	r3, [r2, #32]
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 800158c:	f023 0304 	bic.w	r3, r3, #4
 8001590:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d015      	beq.n	80015c6 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff f9d9 	bl	8000950 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7ff f9d5 	bl	8000950 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e131      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_RCC_OscConfig+0x490>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0ee      	beq.n	80015a2 <HAL_RCC_OscConfig+0x44e>
 80015c4:	e01c      	b.n	8001600 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff f9c3 	bl	8000950 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	e012      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff f9bf 	bl	8000950 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d909      	bls.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e11b      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
 80015e4:	40021000 	.word	0x40021000
 80015e8:	08006378 	.word	0x08006378
 80015ec:	42420480 	.word	0x42420480
 80015f0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f4:	4b8b      	ldr	r3, [pc, #556]	; (8001824 <HAL_RCC_OscConfig+0x6d0>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e6      	bne.n	80015ce <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d105      	bne.n	8001612 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001606:	4b87      	ldr	r3, [pc, #540]	; (8001824 <HAL_RCC_OscConfig+0x6d0>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a86      	ldr	r2, [pc, #536]	; (8001824 <HAL_RCC_OscConfig+0x6d0>)
 800160c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00c      	beq.n	8001634 <HAL_RCC_OscConfig+0x4e0>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d008      	beq.n	8001634 <HAL_RCC_OscConfig+0x4e0>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d004      	beq.n	8001634 <HAL_RCC_OscConfig+0x4e0>
 800162a:	f240 21af 	movw	r1, #687	; 0x2af
 800162e:	487e      	ldr	r0, [pc, #504]	; (8001828 <HAL_RCC_OscConfig+0x6d4>)
 8001630:	f7fe ff71 	bl	8000516 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80ee 	beq.w	800181a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800163e:	4b79      	ldr	r3, [pc, #484]	; (8001824 <HAL_RCC_OscConfig+0x6d0>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b08      	cmp	r3, #8
 8001648:	f000 80ce 	beq.w	80017e8 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2b02      	cmp	r3, #2
 8001652:	f040 80b2 	bne.w	80017ba <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <HAL_RCC_OscConfig+0x51e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001666:	d004      	beq.n	8001672 <HAL_RCC_OscConfig+0x51e>
 8001668:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800166c:	486e      	ldr	r0, [pc, #440]	; (8001828 <HAL_RCC_OscConfig+0x6d4>)
 800166e:	f7fe ff52 	bl	8000516 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	2b00      	cmp	r3, #0
 8001678:	d04a      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001682:	d045      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800168c:	d040      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001696:	d03b      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016a0:	d036      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80016aa:	d031      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80016b4:	d02c      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80016be:	d027      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016c8:	d022      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80016d2:	d01d      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80016dc:	d018      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80016e6:	d013      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80016f0:	d00e      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80016fa:	d009      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001704:	d004      	beq.n	8001710 <HAL_RCC_OscConfig+0x5bc>
 8001706:	f240 21b9 	movw	r1, #697	; 0x2b9
 800170a:	4847      	ldr	r0, [pc, #284]	; (8001828 <HAL_RCC_OscConfig+0x6d4>)
 800170c:	f7fe ff03 	bl	8000516 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001710:	4b46      	ldr	r3, [pc, #280]	; (800182c <HAL_RCC_OscConfig+0x6d8>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff f91b 	bl	8000950 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171e:	f7ff f917 	bl	8000950 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e075      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001730:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <HAL_RCC_OscConfig+0x6d0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001744:	d116      	bne.n	8001774 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <HAL_RCC_OscConfig+0x60e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001756:	d004      	beq.n	8001762 <HAL_RCC_OscConfig+0x60e>
 8001758:	f240 21cf 	movw	r1, #719	; 0x2cf
 800175c:	4832      	ldr	r0, [pc, #200]	; (8001828 <HAL_RCC_OscConfig+0x6d4>)
 800175e:	f7fe feda 	bl	8000516 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001762:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_RCC_OscConfig+0x6d0>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	492d      	ldr	r1, [pc, #180]	; (8001824 <HAL_RCC_OscConfig+0x6d0>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001774:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <HAL_RCC_OscConfig+0x6d0>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a19      	ldr	r1, [r3, #32]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	430b      	orrs	r3, r1
 8001786:	4927      	ldr	r1, [pc, #156]	; (8001824 <HAL_RCC_OscConfig+0x6d0>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_RCC_OscConfig+0x6d8>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff f8dd 	bl	8000950 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179a:	f7ff f8d9 	bl	8000950 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e037      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_RCC_OscConfig+0x6d0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x646>
 80017b8:	e02f      	b.n	800181a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_RCC_OscConfig+0x6d8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff f8c6 	bl	8000950 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff f8c2 	bl	8000950 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e020      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_RCC_OscConfig+0x6d0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x674>
 80017e6:	e018      	b.n	800181a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e013      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_RCC_OscConfig+0x6d0>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	429a      	cmp	r2, r3
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000
 8001828:	08006378 	.word	0x08006378
 800182c:	42420060 	.word	0x42420060

08001830 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e176      	b.n	8001b32 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d116      	bne.n	800187e <HAL_RCC_ClockConfig+0x4e>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d110      	bne.n	800187e <HAL_RCC_ClockConfig+0x4e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10a      	bne.n	800187e <HAL_RCC_ClockConfig+0x4e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d104      	bne.n	800187e <HAL_RCC_ClockConfig+0x4e>
 8001874:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001878:	4874      	ldr	r0, [pc, #464]	; (8001a4c <HAL_RCC_ClockConfig+0x21c>)
 800187a:	f7fe fe4c 	bl	8000516 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00a      	beq.n	800189a <HAL_RCC_ClockConfig+0x6a>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d007      	beq.n	800189a <HAL_RCC_ClockConfig+0x6a>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d004      	beq.n	800189a <HAL_RCC_ClockConfig+0x6a>
 8001890:	f240 3139 	movw	r1, #825	; 0x339
 8001894:	486d      	ldr	r0, [pc, #436]	; (8001a4c <HAL_RCC_ClockConfig+0x21c>)
 8001896:	f7fe fe3e 	bl	8000516 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800189a:	4b6d      	ldr	r3, [pc, #436]	; (8001a50 <HAL_RCC_ClockConfig+0x220>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d910      	bls.n	80018ca <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a8:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <HAL_RCC_ClockConfig+0x220>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 0207 	bic.w	r2, r3, #7
 80018b0:	4967      	ldr	r1, [pc, #412]	; (8001a50 <HAL_RCC_ClockConfig+0x220>)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b8:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <HAL_RCC_ClockConfig+0x220>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e133      	b.n	8001b32 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d049      	beq.n	800196a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e2:	4b5c      	ldr	r3, [pc, #368]	; (8001a54 <HAL_RCC_ClockConfig+0x224>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4a5b      	ldr	r2, [pc, #364]	; (8001a54 <HAL_RCC_ClockConfig+0x224>)
 80018e8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ec:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018fa:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <HAL_RCC_ClockConfig+0x224>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4a55      	ldr	r2, [pc, #340]	; (8001a54 <HAL_RCC_ClockConfig+0x224>)
 8001900:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001904:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d024      	beq.n	8001958 <HAL_RCC_ClockConfig+0x128>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b80      	cmp	r3, #128	; 0x80
 8001914:	d020      	beq.n	8001958 <HAL_RCC_ClockConfig+0x128>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b90      	cmp	r3, #144	; 0x90
 800191c:	d01c      	beq.n	8001958 <HAL_RCC_ClockConfig+0x128>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2ba0      	cmp	r3, #160	; 0xa0
 8001924:	d018      	beq.n	8001958 <HAL_RCC_ClockConfig+0x128>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2bb0      	cmp	r3, #176	; 0xb0
 800192c:	d014      	beq.n	8001958 <HAL_RCC_ClockConfig+0x128>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2bc0      	cmp	r3, #192	; 0xc0
 8001934:	d010      	beq.n	8001958 <HAL_RCC_ClockConfig+0x128>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2bd0      	cmp	r3, #208	; 0xd0
 800193c:	d00c      	beq.n	8001958 <HAL_RCC_ClockConfig+0x128>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2be0      	cmp	r3, #224	; 0xe0
 8001944:	d008      	beq.n	8001958 <HAL_RCC_ClockConfig+0x128>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2bf0      	cmp	r3, #240	; 0xf0
 800194c:	d004      	beq.n	8001958 <HAL_RCC_ClockConfig+0x128>
 800194e:	f240 315f 	movw	r1, #863	; 0x35f
 8001952:	483e      	ldr	r0, [pc, #248]	; (8001a4c <HAL_RCC_ClockConfig+0x21c>)
 8001954:	f7fe fddf 	bl	8000516 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001958:	4b3e      	ldr	r3, [pc, #248]	; (8001a54 <HAL_RCC_ClockConfig+0x224>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	493b      	ldr	r1, [pc, #236]	; (8001a54 <HAL_RCC_ClockConfig+0x224>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d051      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00c      	beq.n	8001998 <HAL_RCC_ClockConfig+0x168>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d008      	beq.n	8001998 <HAL_RCC_ClockConfig+0x168>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d004      	beq.n	8001998 <HAL_RCC_ClockConfig+0x168>
 800198e:	f240 3166 	movw	r1, #870	; 0x366
 8001992:	482e      	ldr	r0, [pc, #184]	; (8001a4c <HAL_RCC_ClockConfig+0x21c>)
 8001994:	f7fe fdbf 	bl	8000516 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d107      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a0:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <HAL_RCC_ClockConfig+0x224>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d115      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0c0      	b.n	8001b32 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_RCC_ClockConfig+0x224>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0b4      	b.n	8001b32 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_RCC_ClockConfig+0x224>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0ac      	b.n	8001b32 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_RCC_ClockConfig+0x224>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f023 0203 	bic.w	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	491b      	ldr	r1, [pc, #108]	; (8001a54 <HAL_RCC_ClockConfig+0x224>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ea:	f7fe ffb1 	bl	8000950 <HAL_GetTick>
 80019ee:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f2:	f7fe ffad 	bl	8000950 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e094      	b.n	8001b32 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_ClockConfig+0x224>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 020c 	and.w	r2, r3, #12
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d1eb      	bne.n	80019f2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_RCC_ClockConfig+0x220>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d217      	bcs.n	8001a58 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x220>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 0207 	bic.w	r2, r3, #7
 8001a30:	4907      	ldr	r1, [pc, #28]	; (8001a50 <HAL_RCC_ClockConfig+0x220>)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_ClockConfig+0x220>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d008      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e073      	b.n	8001b32 <HAL_RCC_ClockConfig+0x302>
 8001a4a:	bf00      	nop
 8001a4c:	08006378 	.word	0x08006378
 8001a50:	40022000 	.word	0x40022000
 8001a54:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d025      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d018      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x26e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a74:	d013      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x26e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a7e:	d00e      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x26e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x26e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a92:	d004      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x26e>
 8001a94:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001a98:	4828      	ldr	r0, [pc, #160]	; (8001b3c <HAL_RCC_ClockConfig+0x30c>)
 8001a9a:	f7fe fd3c 	bl	8000516 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <HAL_RCC_ClockConfig+0x310>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	4925      	ldr	r1, [pc, #148]	; (8001b40 <HAL_RCC_ClockConfig+0x310>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d026      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d018      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x2c6>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001acc:	d013      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x2c6>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001ad6:	d00e      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x2c6>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x2c6>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001aea:	d004      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x2c6>
 8001aec:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001af0:	4812      	ldr	r0, [pc, #72]	; (8001b3c <HAL_RCC_ClockConfig+0x30c>)
 8001af2:	f7fe fd10 	bl	8000516 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_RCC_ClockConfig+0x310>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	490e      	ldr	r1, [pc, #56]	; (8001b40 <HAL_RCC_ClockConfig+0x310>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b0a:	f000 f821 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_ClockConfig+0x310>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	490a      	ldr	r1, [pc, #40]	; (8001b44 <HAL_RCC_ClockConfig+0x314>)
 8001b1c:	5ccb      	ldrb	r3, [r1, r3]
 8001b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x318>)
 8001b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_ClockConfig+0x31c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd36 	bl	800059c <HAL_InitTick>

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	08006378 	.word	0x08006378
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08006470 	.word	0x08006470
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	2000000c 	.word	0x2000000c

08001b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	b490      	push	{r4, r7}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b56:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xac>)
 8001b58:	1d3c      	adds	r4, r7, #4
 8001b5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b60:	f240 2301 	movw	r3, #513	; 0x201
 8001b64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x40>
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d003      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0x46>
 8001b8e:	e02b      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b92:	623b      	str	r3, [r7, #32]
      break;
 8001b94:	e02b      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	0c9b      	lsrs	r3, r3, #18
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3328      	adds	r3, #40	; 0x28
 8001ba0:	443b      	add	r3, r7
 8001ba2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ba6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d012      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	0c5b      	lsrs	r3, r3, #17
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	3328      	adds	r3, #40	; 0x28
 8001bbe:	443b      	add	r3, r7
 8001bc0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bc4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bca:	fb03 f202 	mul.w	r2, r3, r2
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd6:	e004      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	623b      	str	r3, [r7, #32]
      break;
 8001be6:	e002      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bea:	623b      	str	r3, [r7, #32]
      break;
 8001bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bee:	6a3b      	ldr	r3, [r7, #32]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc90      	pop	{r4, r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	080063b0 	.word	0x080063b0
 8001c00:	40021000 	.word	0x40021000
 8001c04:	007a1200 	.word	0x007a1200
 8001c08:	003d0900 	.word	0x003d0900

08001c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c10:	4b02      	ldr	r3, [pc, #8]	; (8001c1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	20000008 	.word	0x20000008

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c24:	f7ff fff2 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	0a1b      	lsrs	r3, r3, #8
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4903      	ldr	r1, [pc, #12]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	08006480 	.word	0x08006480

08001c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	0adb      	lsrs	r3, r3, #11
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	08006480 	.word	0x08006480

08001c70 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d104      	bne.n	8001c8a <HAL_RCC_GetClockConfig+0x1a>
 8001c80:	f240 5123 	movw	r1, #1315	; 0x523
 8001c84:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <HAL_RCC_GetClockConfig+0x78>)
 8001c86:	f7fe fc46 	bl	8000516 <assert_failed>
  assert_param(pFLatency != NULL);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d104      	bne.n	8001c9a <HAL_RCC_GetClockConfig+0x2a>
 8001c90:	f240 5124 	movw	r1, #1316	; 0x524
 8001c94:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <HAL_RCC_GetClockConfig+0x78>)
 8001c96:	f7fe fc3e 	bl	8000516 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_GetClockConfig+0x7c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_RCC_GetClockConfig+0x7c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_RCC_GetClockConfig+0x7c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_RCC_GetClockConfig+0x7c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_RCC_GetClockConfig+0x80>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0207 	and.w	r2, r3, #7
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	08006378 	.word	0x08006378
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <RCC_Delay+0x34>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <RCC_Delay+0x38>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	0a5b      	lsrs	r3, r3, #9
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d10:	bf00      	nop
  }
  while (Delay --);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	60fa      	str	r2, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f9      	bne.n	8001d10 <RCC_Delay+0x1c>
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	10624dd3 	.word	0x10624dd3

08001d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e093      	b.n	8001e6a <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a4b      	ldr	r2, [pc, #300]	; (8001e74 <HAL_TIM_Base_Init+0x144>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d013      	beq.n	8001d74 <HAL_TIM_Base_Init+0x44>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d00e      	beq.n	8001d74 <HAL_TIM_Base_Init+0x44>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a47      	ldr	r2, [pc, #284]	; (8001e78 <HAL_TIM_Base_Init+0x148>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d009      	beq.n	8001d74 <HAL_TIM_Base_Init+0x44>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a45      	ldr	r2, [pc, #276]	; (8001e7c <HAL_TIM_Base_Init+0x14c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d004      	beq.n	8001d74 <HAL_TIM_Base_Init+0x44>
 8001d6a:	f240 1113 	movw	r1, #275	; 0x113
 8001d6e:	4844      	ldr	r0, [pc, #272]	; (8001e80 <HAL_TIM_Base_Init+0x150>)
 8001d70:	f7fe fbd1 	bl	8000516 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d014      	beq.n	8001da6 <HAL_TIM_Base_Init+0x76>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d010      	beq.n	8001da6 <HAL_TIM_Base_Init+0x76>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d00c      	beq.n	8001da6 <HAL_TIM_Base_Init+0x76>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b40      	cmp	r3, #64	; 0x40
 8001d92:	d008      	beq.n	8001da6 <HAL_TIM_Base_Init+0x76>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b60      	cmp	r3, #96	; 0x60
 8001d9a:	d004      	beq.n	8001da6 <HAL_TIM_Base_Init+0x76>
 8001d9c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001da0:	4837      	ldr	r0, [pc, #220]	; (8001e80 <HAL_TIM_Base_Init+0x150>)
 8001da2:	f7fe fbb8 	bl	8000516 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00e      	beq.n	8001dcc <HAL_TIM_Base_Init+0x9c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db6:	d009      	beq.n	8001dcc <HAL_TIM_Base_Init+0x9c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc0:	d004      	beq.n	8001dcc <HAL_TIM_Base_Init+0x9c>
 8001dc2:	f240 1115 	movw	r1, #277	; 0x115
 8001dc6:	482e      	ldr	r0, [pc, #184]	; (8001e80 <HAL_TIM_Base_Init+0x150>)
 8001dc8:	f7fe fba5 	bl	8000516 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_TIM_Base_Init+0xb6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b80      	cmp	r3, #128	; 0x80
 8001dda:	d004      	beq.n	8001de6 <HAL_TIM_Base_Init+0xb6>
 8001ddc:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001de0:	4827      	ldr	r0, [pc, #156]	; (8001e80 <HAL_TIM_Base_Init+0x150>)
 8001de2:	f7fe fb98 	bl	8000516 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f842 	bl	8001e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f000 f9d8 	bl	80021c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40012c00 	.word	0x40012c00
 8001e78:	40000400 	.word	0x40000400
 8001e7c:	40000800 	.word	0x40000800
 8001e80:	080063c0 	.word	0x080063c0

08001e84 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2e      	ldr	r2, [pc, #184]	; (8001f60 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_TIM_Base_Start_IT+0x3a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb2:	d00e      	beq.n	8001ed2 <HAL_TIM_Base_Start_IT+0x3a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2a      	ldr	r2, [pc, #168]	; (8001f64 <HAL_TIM_Base_Start_IT+0xcc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <HAL_TIM_Base_Start_IT+0x3a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a29      	ldr	r2, [pc, #164]	; (8001f68 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d004      	beq.n	8001ed2 <HAL_TIM_Base_Start_IT+0x3a>
 8001ec8:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001ecc:	4827      	ldr	r0, [pc, #156]	; (8001f6c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ece:	f7fe fb22 	bl	8000516 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d001      	beq.n	8001ee2 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e03a      	b.n	8001f58 <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00e      	beq.n	8001f22 <HAL_TIM_Base_Start_IT+0x8a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0c:	d009      	beq.n	8001f22 <HAL_TIM_Base_Start_IT+0x8a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d004      	beq.n	8001f22 <HAL_TIM_Base_Start_IT+0x8a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d111      	bne.n	8001f46 <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b06      	cmp	r3, #6
 8001f32:	d010      	beq.n	8001f56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f44:	e007      	b.n	8001f56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0201 	orr.w	r2, r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40012c00 	.word	0x40012c00
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40000800 	.word	0x40000800
 8001f6c:	080063c0 	.word	0x080063c0

08001f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d122      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d11b      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0202 	mvn.w	r2, #2
 8001f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f8ed 	bl	8002192 <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8e0 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f8ef 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d122      	bne.n	8002020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d11b      	bne.n	8002020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0204 	mvn.w	r2, #4
 8001ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f8c3 	bl	8002192 <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f8b6 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f8c5 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b08      	cmp	r3, #8
 800202c:	d122      	bne.n	8002074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b08      	cmp	r3, #8
 800203a:	d11b      	bne.n	8002074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0208 	mvn.w	r2, #8
 8002044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2204      	movs	r2, #4
 800204a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f899 	bl	8002192 <HAL_TIM_IC_CaptureCallback>
 8002060:	e005      	b.n	800206e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f88c 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f89b 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b10      	cmp	r3, #16
 8002080:	d122      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b10      	cmp	r3, #16
 800208e:	d11b      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0210 	mvn.w	r2, #16
 8002098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2208      	movs	r2, #8
 800209e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f86f 	bl	8002192 <HAL_TIM_IC_CaptureCallback>
 80020b4:	e005      	b.n	80020c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f862 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f871 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10e      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d107      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0201 	mvn.w	r2, #1
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe f9fa 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fe:	2b80      	cmp	r3, #128	; 0x80
 8002100:	d10e      	bne.n	8002120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d107      	bne.n	8002120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8bf 	bl	800229e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d10e      	bne.n	800214c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002138:	2b40      	cmp	r3, #64	; 0x40
 800213a:	d107      	bne.n	800214c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f835 	bl	80021b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b20      	cmp	r3, #32
 8002158:	d10e      	bne.n	8002178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b20      	cmp	r3, #32
 8002166:	d107      	bne.n	8002178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0220 	mvn.w	r2, #32
 8002170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f88a 	bl	800228c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a29      	ldr	r2, [pc, #164]	; (8002280 <TIM_Base_SetConfig+0xb8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00b      	beq.n	80021f8 <TIM_Base_SetConfig+0x30>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e6:	d007      	beq.n	80021f8 <TIM_Base_SetConfig+0x30>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a26      	ldr	r2, [pc, #152]	; (8002284 <TIM_Base_SetConfig+0xbc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_Base_SetConfig+0x30>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a25      	ldr	r2, [pc, #148]	; (8002288 <TIM_Base_SetConfig+0xc0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d108      	bne.n	800220a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <TIM_Base_SetConfig+0xb8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00b      	beq.n	800222a <TIM_Base_SetConfig+0x62>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002218:	d007      	beq.n	800222a <TIM_Base_SetConfig+0x62>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a19      	ldr	r2, [pc, #100]	; (8002284 <TIM_Base_SetConfig+0xbc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d003      	beq.n	800222a <TIM_Base_SetConfig+0x62>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a18      	ldr	r2, [pc, #96]	; (8002288 <TIM_Base_SetConfig+0xc0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a07      	ldr	r2, [pc, #28]	; (8002280 <TIM_Base_SetConfig+0xb8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d103      	bne.n	8002270 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	615a      	str	r2, [r3, #20]
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	40012c00 	.word	0x40012c00
 8002284:	40000400 	.word	0x40000400
 8002288:	40000800 	.word	0x40000800

0800228c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e092      	b.n	80023e8 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d02c      	beq.n	8002324 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a48      	ldr	r2, [pc, #288]	; (80023f0 <HAL_UART_Init+0x140>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00e      	beq.n	80022f2 <HAL_UART_Init+0x42>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a46      	ldr	r2, [pc, #280]	; (80023f4 <HAL_UART_Init+0x144>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d009      	beq.n	80022f2 <HAL_UART_Init+0x42>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a45      	ldr	r2, [pc, #276]	; (80023f8 <HAL_UART_Init+0x148>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d004      	beq.n	80022f2 <HAL_UART_Init+0x42>
 80022e8:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80022ec:	4843      	ldr	r0, [pc, #268]	; (80023fc <HAL_UART_Init+0x14c>)
 80022ee:	f7fe f912 	bl	8000516 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d028      	beq.n	800234c <HAL_UART_Init+0x9c>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002302:	d023      	beq.n	800234c <HAL_UART_Init+0x9c>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230c:	d01e      	beq.n	800234c <HAL_UART_Init+0x9c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002316:	d019      	beq.n	800234c <HAL_UART_Init+0x9c>
 8002318:	f240 116d 	movw	r1, #365	; 0x16d
 800231c:	4837      	ldr	r0, [pc, #220]	; (80023fc <HAL_UART_Init+0x14c>)
 800231e:	f7fe f8fa 	bl	8000516 <assert_failed>
 8002322:	e013      	b.n	800234c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a31      	ldr	r2, [pc, #196]	; (80023f0 <HAL_UART_Init+0x140>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00e      	beq.n	800234c <HAL_UART_Init+0x9c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a30      	ldr	r2, [pc, #192]	; (80023f4 <HAL_UART_Init+0x144>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d009      	beq.n	800234c <HAL_UART_Init+0x9c>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <HAL_UART_Init+0x148>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d004      	beq.n	800234c <HAL_UART_Init+0x9c>
 8002342:	f240 1171 	movw	r1, #369	; 0x171
 8002346:	482d      	ldr	r0, [pc, #180]	; (80023fc <HAL_UART_Init+0x14c>)
 8002348:	f7fe f8e5 	bl	8000516 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d009      	beq.n	8002368 <HAL_UART_Init+0xb8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235c:	d004      	beq.n	8002368 <HAL_UART_Init+0xb8>
 800235e:	f240 1173 	movw	r1, #371	; 0x173
 8002362:	4826      	ldr	r0, [pc, #152]	; (80023fc <HAL_UART_Init+0x14c>)
 8002364:	f7fe f8d7 	bl	8000516 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7fe fa5b 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2224      	movs	r2, #36	; 0x24
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002398:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f830 	bl	8002400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40013800 	.word	0x40013800
 80023f4:	40004400 	.word	0x40004400
 80023f8:	40004800 	.word	0x40004800
 80023fc:	080063f8 	.word	0x080063f8

08002400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4a5f      	ldr	r2, [pc, #380]	; (800258c <UART_SetConfig+0x18c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d904      	bls.n	800241c <UART_SetConfig+0x1c>
 8002412:	f640 6153 	movw	r1, #3667	; 0xe53
 8002416:	485e      	ldr	r0, [pc, #376]	; (8002590 <UART_SetConfig+0x190>)
 8002418:	f7fe f87d 	bl	8000516 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d009      	beq.n	8002438 <UART_SetConfig+0x38>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242c:	d004      	beq.n	8002438 <UART_SetConfig+0x38>
 800242e:	f640 6154 	movw	r1, #3668	; 0xe54
 8002432:	4857      	ldr	r0, [pc, #348]	; (8002590 <UART_SetConfig+0x190>)
 8002434:	f7fe f86f 	bl	8000516 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00e      	beq.n	800245e <UART_SetConfig+0x5e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002448:	d009      	beq.n	800245e <UART_SetConfig+0x5e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002452:	d004      	beq.n	800245e <UART_SetConfig+0x5e>
 8002454:	f640 6155 	movw	r1, #3669	; 0xe55
 8002458:	484d      	ldr	r0, [pc, #308]	; (8002590 <UART_SetConfig+0x190>)
 800245a:	f7fe f85c 	bl	8000516 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d103      	bne.n	8002474 <UART_SetConfig+0x74>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <UART_SetConfig+0x7e>
 8002474:	f640 6156 	movw	r1, #3670	; 0xe56
 8002478:	4845      	ldr	r0, [pc, #276]	; (8002590 <UART_SetConfig+0x190>)
 800247a:	f7fe f84c 	bl	8000516 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024b0:	f023 030c 	bic.w	r3, r3, #12
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	430b      	orrs	r3, r1
 80024bc:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a2e      	ldr	r2, [pc, #184]	; (8002594 <UART_SetConfig+0x194>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d103      	bne.n	80024e6 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024de:	f7ff fbb3 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	e002      	b.n	80024ec <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024e6:	f7ff fb9b 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 80024ea:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	009a      	lsls	r2, r3, #2
 80024f6:	441a      	add	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	4a25      	ldr	r2, [pc, #148]	; (8002598 <UART_SetConfig+0x198>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	0119      	lsls	r1, r3, #4
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009a      	lsls	r2, r3, #2
 8002516:	441a      	add	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <UART_SetConfig+0x198>)
 8002524:	fba3 0302 	umull	r0, r3, r3, r2
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	2064      	movs	r0, #100	; 0x64
 800252c:	fb00 f303 	mul.w	r3, r0, r3
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	3332      	adds	r3, #50	; 0x32
 8002536:	4a18      	ldr	r2, [pc, #96]	; (8002598 <UART_SetConfig+0x198>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002542:	4419      	add	r1, r3
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	009a      	lsls	r2, r3, #2
 800254e:	441a      	add	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	fbb2 f2f3 	udiv	r2, r2, r3
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <UART_SetConfig+0x198>)
 800255c:	fba3 0302 	umull	r0, r3, r3, r2
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	2064      	movs	r0, #100	; 0x64
 8002564:	fb00 f303 	mul.w	r3, r0, r3
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	3332      	adds	r3, #50	; 0x32
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <UART_SetConfig+0x198>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	f003 020f 	and.w	r2, r3, #15
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	440a      	add	r2, r1
 8002580:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	0044aa20 	.word	0x0044aa20
 8002590:	080063f8 	.word	0x080063f8
 8002594:	40013800 	.word	0x40013800
 8002598:	51eb851f 	.word	0x51eb851f

0800259c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025a2:	f3ef 8305 	mrs	r3, IPSR
 80025a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80025a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ae:	f3ef 8310 	mrs	r3, PRIMASK
 80025b2:	607b      	str	r3, [r7, #4]
  return(result);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <osKernelInitialize+0x32>
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <osKernelInitialize+0x60>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d109      	bne.n	80025d6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025c2:	f3ef 8311 	mrs	r3, BASEPRI
 80025c6:	603b      	str	r3, [r7, #0]
  return(result);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80025ce:	f06f 0305 	mvn.w	r3, #5
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e00c      	b.n	80025f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <osKernelInitialize+0x60>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <osKernelInitialize+0x60>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e002      	b.n	80025f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80025f0:	68fb      	ldr	r3, [r7, #12]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	20000130 	.word	0x20000130

08002600 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002606:	f3ef 8305 	mrs	r3, IPSR
 800260a:	60bb      	str	r3, [r7, #8]
  return(result);
 800260c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10f      	bne.n	8002632 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002612:	f3ef 8310 	mrs	r3, PRIMASK
 8002616:	607b      	str	r3, [r7, #4]
  return(result);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <osKernelStart+0x32>
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <osKernelStart+0x64>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d109      	bne.n	800263a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002626:	f3ef 8311 	mrs	r3, BASEPRI
 800262a:	603b      	str	r3, [r7, #0]
  return(result);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002632:	f06f 0305 	mvn.w	r3, #5
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	e00e      	b.n	8002658 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <osKernelStart+0x64>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d107      	bne.n	8002652 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <osKernelStart+0x64>)
 8002644:	2202      	movs	r2, #2
 8002646:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002648:	f001 f890 	bl	800376c <vTaskStartScheduler>
      stat = osOK;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e002      	b.n	8002658 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002652:	f04f 33ff 	mov.w	r3, #4294967295
 8002656:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002658:	68fb      	ldr	r3, [r7, #12]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000130 	.word	0x20000130

08002668 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b092      	sub	sp, #72	; 0x48
 800266c:	af04      	add	r7, sp, #16
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002678:	f3ef 8305 	mrs	r3, IPSR
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 8094 	bne.w	80027ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002686:	f3ef 8310 	mrs	r3, PRIMASK
 800268a:	623b      	str	r3, [r7, #32]
  return(result);
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 808d 	bne.w	80027ae <osThreadNew+0x146>
 8002694:	4b48      	ldr	r3, [pc, #288]	; (80027b8 <osThreadNew+0x150>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d106      	bne.n	80026aa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800269c:	f3ef 8311 	mrs	r3, BASEPRI
 80026a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f040 8082 	bne.w	80027ae <osThreadNew+0x146>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d07e      	beq.n	80027ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80026b4:	2318      	movs	r3, #24
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80026b8:	2300      	movs	r3, #0
 80026ba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80026bc:	f107 031b 	add.w	r3, r7, #27
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d045      	beq.n	800275a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <osThreadNew+0x74>
        name = attr->name;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <osThreadNew+0x9a>
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	2b38      	cmp	r3, #56	; 0x38
 80026f4:	d805      	bhi.n	8002702 <osThreadNew+0x9a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <osThreadNew+0x9e>
        return (NULL);
 8002702:	2300      	movs	r3, #0
 8002704:	e054      	b.n	80027b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00e      	beq.n	800273c <osThreadNew+0xd4>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2bbb      	cmp	r3, #187	; 0xbb
 8002724:	d90a      	bls.n	800273c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <osThreadNew+0xd4>
        mem = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
 800273a:	e010      	b.n	800275e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10c      	bne.n	800275e <osThreadNew+0xf6>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d108      	bne.n	800275e <osThreadNew+0xf6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d104      	bne.n	800275e <osThreadNew+0xf6>
          mem = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
 8002758:	e001      	b.n	800275e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	2b01      	cmp	r3, #1
 8002762:	d110      	bne.n	8002786 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800276c:	9202      	str	r2, [sp, #8]
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002778:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fe12 	bl	80033a4 <xTaskCreateStatic>
 8002780:	4603      	mov	r3, r0
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e013      	b.n	80027ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	2b00      	cmp	r3, #0
 800278a:	d110      	bne.n	80027ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	b29a      	uxth	r2, r3
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fe5c 	bl	800345c <xTaskCreate>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <osThreadNew+0x146>
          hTask = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80027ae:	697b      	ldr	r3, [r7, #20]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3738      	adds	r7, #56	; 0x38
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000130 	.word	0x20000130

080027bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027c4:	f3ef 8305 	mrs	r3, IPSR
 80027c8:	613b      	str	r3, [r7, #16]
  return(result);
 80027ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10f      	bne.n	80027f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d0:	f3ef 8310 	mrs	r3, PRIMASK
 80027d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <osDelay+0x34>
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <osDelay+0x58>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d109      	bne.n	80027f8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027e4:	f3ef 8311 	mrs	r3, BASEPRI
 80027e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <osDelay+0x3c>
    stat = osErrorISR;
 80027f0:	f06f 0305 	mvn.w	r3, #5
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e007      	b.n	8002808 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 ff7e 	bl	8003704 <vTaskDelay>
    }
  }

  return (stat);
 8002808:	697b      	ldr	r3, [r7, #20]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000130 	.word	0x20000130

08002818 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a06      	ldr	r2, [pc, #24]	; (8002840 <vApplicationGetIdleTaskMemory+0x28>)
 8002828:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4a05      	ldr	r2, [pc, #20]	; (8002844 <vApplicationGetIdleTaskMemory+0x2c>)
 800282e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	601a      	str	r2, [r3, #0]
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	20000134 	.word	0x20000134
 8002844:	200001f0 	.word	0x200001f0

08002848 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a07      	ldr	r2, [pc, #28]	; (8002874 <vApplicationGetTimerTaskMemory+0x2c>)
 8002858:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4a06      	ldr	r2, [pc, #24]	; (8002878 <vApplicationGetTimerTaskMemory+0x30>)
 800285e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002866:	601a      	str	r2, [r3, #0]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	200003f0 	.word	0x200003f0
 8002878:	200004ac 	.word	0x200004ac

0800287c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f103 0208 	add.w	r2, r3, #8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f04f 32ff 	mov.w	r2, #4294967295
 8002894:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f103 0208 	add.w	r2, r3, #8
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f103 0208 	add.w	r2, r3, #8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	601a      	str	r2, [r3, #0]
}
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292e:	d103      	bne.n	8002938 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	e00c      	b.n	8002952 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3308      	adds	r3, #8
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	e002      	b.n	8002946 <vListInsert+0x2e>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	429a      	cmp	r2, r3
 8002950:	d2f6      	bcs.n	8002940 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	601a      	str	r2, [r3, #0]
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6892      	ldr	r2, [r2, #8]
 800299e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6852      	ldr	r2, [r2, #4]
 80029a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d103      	bne.n	80029bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1e5a      	subs	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
	...

080029dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a06:	f001 fff9 	bl	80049fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	68f9      	ldr	r1, [r7, #12]
 8002a14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	441a      	add	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	3b01      	subs	r3, #1
 8002a38:	68f9      	ldr	r1, [r7, #12]
 8002a3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	441a      	add	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	22ff      	movs	r2, #255	; 0xff
 8002a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	22ff      	movs	r2, #255	; 0xff
 8002a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d114      	bne.n	8002a86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01a      	beq.n	8002a9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3310      	adds	r3, #16
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 f91b 	bl	8003ca4 <xTaskRemoveFromEventList>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d012      	beq.n	8002a9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <xQueueGenericReset+0xcc>)
 8002a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	e009      	b.n	8002a9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3310      	adds	r3, #16
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fef6 	bl	800287c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3324      	adds	r3, #36	; 0x24
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fef1 	bl	800287c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a9a:	f001 ffdf 	bl	8004a5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	e000ed04 	.word	0xe000ed04

08002aac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08e      	sub	sp, #56	; 0x38
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ad2:	bf00      	nop
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10a      	bne.n	8002af2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002aee:	bf00      	nop
 8002af0:	e7fe      	b.n	8002af0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <xQueueGenericCreateStatic+0x52>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <xQueueGenericCreateStatic+0x56>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <xQueueGenericCreateStatic+0x58>
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	623b      	str	r3, [r7, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <xQueueGenericCreateStatic+0x7e>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <xQueueGenericCreateStatic+0x82>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <xQueueGenericCreateStatic+0x84>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	61fb      	str	r3, [r7, #28]
}
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b4a:	2350      	movs	r3, #80	; 0x50
 8002b4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b50      	cmp	r3, #80	; 0x50
 8002b52:	d00a      	beq.n	8002b6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	61bb      	str	r3, [r7, #24]
}
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00d      	beq.n	8002b90 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b7c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f805 	bl	8002b9a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3730      	adds	r7, #48	; 0x30
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e002      	b.n	8002bbc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bc8:	2101      	movs	r1, #1
 8002bca:	69b8      	ldr	r0, [r7, #24]
 8002bcc:	f7ff ff06 	bl	80029dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08e      	sub	sp, #56	; 0x38
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <xQueueGenericSend+0x32>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d103      	bne.n	8002c20 <xQueueGenericSend+0x40>
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <xQueueGenericSend+0x44>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <xQueueGenericSend+0x46>
 8002c24:	2300      	movs	r3, #0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <xQueueGenericSend+0x60>
	__asm volatile
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c3c:	bf00      	nop
 8002c3e:	e7fe      	b.n	8002c3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d103      	bne.n	8002c4e <xQueueGenericSend+0x6e>
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <xQueueGenericSend+0x72>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <xQueueGenericSend+0x74>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <xQueueGenericSend+0x8e>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	623b      	str	r3, [r7, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c6e:	f001 f9df 	bl	8004030 <xTaskGetSchedulerState>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <xQueueGenericSend+0x9e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <xQueueGenericSend+0xa2>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <xQueueGenericSend+0xa4>
 8002c82:	2300      	movs	r3, #0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <xQueueGenericSend+0xbe>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	61fb      	str	r3, [r7, #28]
}
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c9e:	f001 fead 	bl	80049fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d302      	bcc.n	8002cb4 <xQueueGenericSend+0xd4>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d129      	bne.n	8002d08 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cba:	f000 fa07 	bl	80030cc <prvCopyDataToQueue>
 8002cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	3324      	adds	r3, #36	; 0x24
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 ffe9 	bl	8003ca4 <xTaskRemoveFromEventList>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d013      	beq.n	8002d00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002cd8:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <xQueueGenericSend+0x1f8>)
 8002cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	e00a      	b.n	8002d00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cf0:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <xQueueGenericSend+0x1f8>)
 8002cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d00:	f001 feac 	bl	8004a5c <vPortExitCritical>
				return pdPASS;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e063      	b.n	8002dd0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d0e:	f001 fea5 	bl	8004a5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e05c      	b.n	8002dd0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d106      	bne.n	8002d2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4618      	mov	r0, r3
 8002d22:	f001 f823 	bl	8003d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d26:	2301      	movs	r3, #1
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d2a:	f001 fe97 	bl	8004a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d2e:	f000 fd8d 	bl	800384c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d32:	f001 fe63 	bl	80049fc <vPortEnterCritical>
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d3c:	b25b      	sxtb	r3, r3
 8002d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d42:	d103      	bne.n	8002d4c <xQueueGenericSend+0x16c>
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d103      	bne.n	8002d62 <xQueueGenericSend+0x182>
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d62:	f001 fe7b 	bl	8004a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d66:	1d3a      	adds	r2, r7, #4
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 f812 	bl	8003d98 <xTaskCheckForTimeOut>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d124      	bne.n	8002dc4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d7c:	f000 fa9e 	bl	80032bc <prvIsQueueFull>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d018      	beq.n	8002db8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	3310      	adds	r3, #16
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 ff38 	bl	8003c04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d96:	f000 fa29 	bl	80031ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d9a:	f000 fd65 	bl	8003868 <xTaskResumeAll>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f47f af7c 	bne.w	8002c9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <xQueueGenericSend+0x1f8>)
 8002da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	e772      	b.n	8002c9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dba:	f000 fa17 	bl	80031ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dbe:	f000 fd53 	bl	8003868 <xTaskResumeAll>
 8002dc2:	e76c      	b.n	8002c9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc6:	f000 fa11 	bl	80031ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dca:	f000 fd4d 	bl	8003868 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002dce:	2300      	movs	r3, #0
		}
	}
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3738      	adds	r7, #56	; 0x38
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	e000ed04 	.word	0xe000ed04

08002ddc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08e      	sub	sp, #56	; 0x38
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10a      	bne.n	8002e0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d103      	bne.n	8002e18 <xQueueGenericSendFromISR+0x3c>
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <xQueueGenericSendFromISR+0x40>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <xQueueGenericSendFromISR+0x42>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10a      	bne.n	8002e38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	623b      	str	r3, [r7, #32]
}
 8002e34:	bf00      	nop
 8002e36:	e7fe      	b.n	8002e36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d103      	bne.n	8002e46 <xQueueGenericSendFromISR+0x6a>
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <xQueueGenericSendFromISR+0x6e>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <xQueueGenericSendFromISR+0x70>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	61fb      	str	r3, [r7, #28]
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e66:	f001 fe8b 	bl	8004b80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e6a:	f3ef 8211 	mrs	r2, BASEPRI
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	61ba      	str	r2, [r7, #24]
 8002e80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d302      	bcc.n	8002e98 <xQueueGenericSendFromISR+0xbc>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d12c      	bne.n	8002ef2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ea8:	f000 f910 	bl	80030cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002eac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d112      	bne.n	8002edc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	3324      	adds	r3, #36	; 0x24
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 feee 	bl	8003ca4 <xTaskRemoveFromEventList>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00e      	beq.n	8002eec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e007      	b.n	8002eec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002edc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	b25a      	sxtb	r2, r3
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002eec:	2301      	movs	r3, #1
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002ef0:	e001      	b.n	8002ef6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3738      	adds	r7, #56	; 0x38
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	; 0x30
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10a      	bne.n	8002f3c <xQueueReceive+0x30>
	__asm volatile
 8002f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	623b      	str	r3, [r7, #32]
}
 8002f38:	bf00      	nop
 8002f3a:	e7fe      	b.n	8002f3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d103      	bne.n	8002f4a <xQueueReceive+0x3e>
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <xQueueReceive+0x42>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <xQueueReceive+0x44>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <xQueueReceive+0x5e>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	61fb      	str	r3, [r7, #28]
}
 8002f66:	bf00      	nop
 8002f68:	e7fe      	b.n	8002f68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f6a:	f001 f861 	bl	8004030 <xTaskGetSchedulerState>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <xQueueReceive+0x6e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <xQueueReceive+0x72>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <xQueueReceive+0x74>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <xQueueReceive+0x8e>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	61bb      	str	r3, [r7, #24]
}
 8002f96:	bf00      	nop
 8002f98:	e7fe      	b.n	8002f98 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f9a:	f001 fd2f 	bl	80049fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01f      	beq.n	8002fea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fae:	f000 f8f7 	bl	80031a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	1e5a      	subs	r2, r3, #1
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00f      	beq.n	8002fe2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	3310      	adds	r3, #16
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fe6c 	bl	8003ca4 <xTaskRemoveFromEventList>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d007      	beq.n	8002fe2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fd2:	4b3d      	ldr	r3, [pc, #244]	; (80030c8 <xQueueReceive+0x1bc>)
 8002fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fe2:	f001 fd3b 	bl	8004a5c <vPortExitCritical>
				return pdPASS;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e069      	b.n	80030be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d103      	bne.n	8002ff8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ff0:	f001 fd34 	bl	8004a5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e062      	b.n	80030be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ffe:	f107 0310 	add.w	r3, r7, #16
 8003002:	4618      	mov	r0, r3
 8003004:	f000 feb2 	bl	8003d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003008:	2301      	movs	r3, #1
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800300c:	f001 fd26 	bl	8004a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003010:	f000 fc1c 	bl	800384c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003014:	f001 fcf2 	bl	80049fc <vPortEnterCritical>
 8003018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800301e:	b25b      	sxtb	r3, r3
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d103      	bne.n	800302e <xQueueReceive+0x122>
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003034:	b25b      	sxtb	r3, r3
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303a:	d103      	bne.n	8003044 <xQueueReceive+0x138>
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003044:	f001 fd0a 	bl	8004a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003048:	1d3a      	adds	r2, r7, #4
 800304a:	f107 0310 	add.w	r3, r7, #16
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fea1 	bl	8003d98 <xTaskCheckForTimeOut>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d123      	bne.n	80030a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800305c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800305e:	f000 f917 	bl	8003290 <prvIsQueueEmpty>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d017      	beq.n	8003098 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	3324      	adds	r3, #36	; 0x24
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fdc7 	bl	8003c04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003078:	f000 f8b8 	bl	80031ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800307c:	f000 fbf4 	bl	8003868 <xTaskResumeAll>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d189      	bne.n	8002f9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003086:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <xQueueReceive+0x1bc>)
 8003088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	e780      	b.n	8002f9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800309a:	f000 f8a7 	bl	80031ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800309e:	f000 fbe3 	bl	8003868 <xTaskResumeAll>
 80030a2:	e77a      	b.n	8002f9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030a6:	f000 f8a1 	bl	80031ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030aa:	f000 fbdd 	bl	8003868 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030b0:	f000 f8ee 	bl	8003290 <prvIsQueueEmpty>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f43f af6f 	beq.w	8002f9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3730      	adds	r7, #48	; 0x30
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	e000ed04 	.word	0xe000ed04

080030cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10d      	bne.n	8003106 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d14d      	bne.n	800318e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 ffb8 	bl	800406c <xTaskPriorityDisinherit>
 80030fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	e043      	b.n	800318e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d119      	bne.n	8003140 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6898      	ldr	r0, [r3, #8]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	461a      	mov	r2, r3
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	f002 f86b 	bl	80051f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	441a      	add	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	429a      	cmp	r2, r3
 8003134:	d32b      	bcc.n	800318e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	e026      	b.n	800318e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68d8      	ldr	r0, [r3, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	461a      	mov	r2, r3
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	f002 f851 	bl	80051f2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	425b      	negs	r3, r3
 800315a:	441a      	add	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d207      	bcs.n	800317c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	425b      	negs	r3, r3
 8003176:	441a      	add	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d105      	bne.n	800318e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	3b01      	subs	r3, #1
 800318c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003196:	697b      	ldr	r3, [r7, #20]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d018      	beq.n	80031e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	441a      	add	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d303      	bcc.n	80031d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68d9      	ldr	r1, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	461a      	mov	r2, r3
 80031de:	6838      	ldr	r0, [r7, #0]
 80031e0:	f002 f807 	bl	80051f2 <memcpy>
	}
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031f4:	f001 fc02 	bl	80049fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003200:	e011      	b.n	8003226 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	2b00      	cmp	r3, #0
 8003208:	d012      	beq.n	8003230 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3324      	adds	r3, #36	; 0x24
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fd48 	bl	8003ca4 <xTaskRemoveFromEventList>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800321a:	f000 fe1f 	bl	8003e5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	3b01      	subs	r3, #1
 8003222:	b2db      	uxtb	r3, r3
 8003224:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	dce9      	bgt.n	8003202 <prvUnlockQueue+0x16>
 800322e:	e000      	b.n	8003232 <prvUnlockQueue+0x46>
					break;
 8003230:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	22ff      	movs	r2, #255	; 0xff
 8003236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800323a:	f001 fc0f 	bl	8004a5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800323e:	f001 fbdd 	bl	80049fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003248:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800324a:	e011      	b.n	8003270 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d012      	beq.n	800327a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3310      	adds	r3, #16
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fd23 	bl	8003ca4 <xTaskRemoveFromEventList>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003264:	f000 fdfa 	bl	8003e5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003268:	7bbb      	ldrb	r3, [r7, #14]
 800326a:	3b01      	subs	r3, #1
 800326c:	b2db      	uxtb	r3, r3
 800326e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003274:	2b00      	cmp	r3, #0
 8003276:	dce9      	bgt.n	800324c <prvUnlockQueue+0x60>
 8003278:	e000      	b.n	800327c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800327a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	22ff      	movs	r2, #255	; 0xff
 8003280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003284:	f001 fbea 	bl	8004a5c <vPortExitCritical>
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003298:	f001 fbb0 	bl	80049fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032a4:	2301      	movs	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e001      	b.n	80032ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032ae:	f001 fbd5 	bl	8004a5c <vPortExitCritical>

	return xReturn;
 80032b2:	68fb      	ldr	r3, [r7, #12]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032c4:	f001 fb9a 	bl	80049fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d102      	bne.n	80032da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032d4:	2301      	movs	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e001      	b.n	80032de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032de:	f001 fbbd 	bl	8004a5c <vPortExitCritical>

	return xReturn;
 80032e2:	68fb      	ldr	r3, [r7, #12]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	e014      	b.n	8003326 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032fc:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <vQueueAddToRegistry+0x4c>)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10b      	bne.n	8003320 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003308:	490b      	ldr	r1, [pc, #44]	; (8003338 <vQueueAddToRegistry+0x4c>)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003312:	4a09      	ldr	r2, [pc, #36]	; (8003338 <vQueueAddToRegistry+0x4c>)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800331e:	e006      	b.n	800332e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3301      	adds	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b07      	cmp	r3, #7
 800332a:	d9e7      	bls.n	80032fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	200008ac 	.word	0x200008ac

0800333c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800334c:	f001 fb56 	bl	80049fc <vPortEnterCritical>
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003356:	b25b      	sxtb	r3, r3
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d103      	bne.n	8003366 <vQueueWaitForMessageRestricted+0x2a>
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800336c:	b25b      	sxtb	r3, r3
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003372:	d103      	bne.n	800337c <vQueueWaitForMessageRestricted+0x40>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800337c:	f001 fb6e 	bl	8004a5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	3324      	adds	r3, #36	; 0x24
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fc5b 	bl	8003c4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003396:	6978      	ldr	r0, [r7, #20]
 8003398:	f7ff ff28 	bl	80031ec <prvUnlockQueue>
	}
 800339c:	bf00      	nop
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08e      	sub	sp, #56	; 0x38
 80033a8:	af04      	add	r7, sp, #16
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	623b      	str	r3, [r7, #32]
}
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <xTaskCreateStatic+0x46>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	61fb      	str	r3, [r7, #28]
}
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033ea:	23bc      	movs	r3, #188	; 0xbc
 80033ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2bbc      	cmp	r3, #188	; 0xbc
 80033f2:	d00a      	beq.n	800340a <xTaskCreateStatic+0x66>
	__asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	61bb      	str	r3, [r7, #24]
}
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01e      	beq.n	800344e <xTaskCreateStatic+0xaa>
 8003410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01b      	beq.n	800344e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800341e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	2202      	movs	r2, #2
 8003424:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003428:	2300      	movs	r3, #0
 800342a:	9303      	str	r3, [sp, #12]
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	9302      	str	r3, [sp, #8]
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f851 	bl	80034e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003448:	f000 f8ec 	bl	8003624 <prvAddNewTaskToReadyList>
 800344c:	e001      	b.n	8003452 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003452:	697b      	ldr	r3, [r7, #20]
	}
 8003454:	4618      	mov	r0, r3
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08c      	sub	sp, #48	; 0x30
 8003460:	af04      	add	r7, sp, #16
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4618      	mov	r0, r3
 8003472:	f001 fbc3 	bl	8004bfc <pvPortMalloc>
 8003476:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00e      	beq.n	800349c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800347e:	20bc      	movs	r0, #188	; 0xbc
 8003480:	f001 fbbc 	bl	8004bfc <pvPortMalloc>
 8003484:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
 8003492:	e005      	b.n	80034a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003494:	6978      	ldr	r0, [r7, #20]
 8003496:	f001 fc75 	bl	8004d84 <vPortFree>
 800349a:	e001      	b.n	80034a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d017      	beq.n	80034d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	2300      	movs	r3, #0
 80034b2:	9303      	str	r3, [sp, #12]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f80f 	bl	80034e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034ca:	69f8      	ldr	r0, [r7, #28]
 80034cc:	f000 f8aa 	bl	8003624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034d0:	2301      	movs	r3, #1
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	e002      	b.n	80034dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
 80034da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034dc:	69bb      	ldr	r3, [r7, #24]
	}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	461a      	mov	r2, r3
 8003500:	21a5      	movs	r1, #165	; 0xa5
 8003502:	f001 fe84 	bl	800520e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003510:	3b01      	subs	r3, #1
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f023 0307 	bic.w	r3, r3, #7
 800351e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <prvInitialiseNewTask+0x58>
	__asm volatile
 800352a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	617b      	str	r3, [r7, #20]
}
 800353c:	bf00      	nop
 800353e:	e7fe      	b.n	800353e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003540:	2300      	movs	r3, #0
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	e012      	b.n	800356c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	7819      	ldrb	r1, [r3, #0]
 800354e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	4413      	add	r3, r2
 8003554:	3334      	adds	r3, #52	; 0x34
 8003556:	460a      	mov	r2, r1
 8003558:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3301      	adds	r3, #1
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	d9e9      	bls.n	8003546 <prvInitialiseNewTask+0x5e>
 8003572:	e000      	b.n	8003576 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003574:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	2b37      	cmp	r3, #55	; 0x37
 8003582:	d901      	bls.n	8003588 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003584:	2337      	movs	r3, #55	; 0x37
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800358c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003592:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	2200      	movs	r2, #0
 8003598:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	3304      	adds	r3, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff f98b 	bl	80028ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	3318      	adds	r3, #24
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff f986 	bl	80028ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	3354      	adds	r3, #84	; 0x54
 80035d8:	2260      	movs	r2, #96	; 0x60
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 fe16 	bl	800520e <memset>
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <prvInitialiseNewTask+0x130>)
 80035e6:	659a      	str	r2, [r3, #88]	; 0x58
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	4a0c      	ldr	r2, [pc, #48]	; (800361c <prvInitialiseNewTask+0x134>)
 80035ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	4a0b      	ldr	r2, [pc, #44]	; (8003620 <prvInitialiseNewTask+0x138>)
 80035f2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	68f9      	ldr	r1, [r7, #12]
 80035f8:	69b8      	ldr	r0, [r7, #24]
 80035fa:	f001 f90b 	bl	8004814 <pxPortInitialiseStack>
 80035fe:	4602      	mov	r2, r0
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003610:	bf00      	nop
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	080064a8 	.word	0x080064a8
 800361c:	080064c8 	.word	0x080064c8
 8003620:	08006488 	.word	0x08006488

08003624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800362c:	f001 f9e6 	bl	80049fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003630:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <prvAddNewTaskToReadyList+0xc4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	4a2c      	ldr	r2, [pc, #176]	; (80036e8 <prvAddNewTaskToReadyList+0xc4>)
 8003638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800363a:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <prvAddNewTaskToReadyList+0xc8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003642:	4a2a      	ldr	r2, [pc, #168]	; (80036ec <prvAddNewTaskToReadyList+0xc8>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003648:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <prvAddNewTaskToReadyList+0xc4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d110      	bne.n	8003672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003650:	f000 fc28 	bl	8003ea4 <prvInitialiseTaskLists>
 8003654:	e00d      	b.n	8003672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003656:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <prvAddNewTaskToReadyList+0xcc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800365e:	4b23      	ldr	r3, [pc, #140]	; (80036ec <prvAddNewTaskToReadyList+0xc8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	429a      	cmp	r2, r3
 800366a:	d802      	bhi.n	8003672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800366c:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <prvAddNewTaskToReadyList+0xc8>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <prvAddNewTaskToReadyList+0xd0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3301      	adds	r3, #1
 8003678:	4a1e      	ldr	r2, [pc, #120]	; (80036f4 <prvAddNewTaskToReadyList+0xd0>)
 800367a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <prvAddNewTaskToReadyList+0xd0>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <prvAddNewTaskToReadyList+0xd4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d903      	bls.n	8003698 <prvAddNewTaskToReadyList+0x74>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <prvAddNewTaskToReadyList+0xd4>)
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4a15      	ldr	r2, [pc, #84]	; (80036fc <prvAddNewTaskToReadyList+0xd8>)
 80036a6:	441a      	add	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f7ff f90f 	bl	80028d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036b4:	f001 f9d2 	bl	8004a5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <prvAddNewTaskToReadyList+0xcc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00e      	beq.n	80036de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <prvAddNewTaskToReadyList+0xc8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d207      	bcs.n	80036de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <prvAddNewTaskToReadyList+0xdc>)
 80036d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000dc0 	.word	0x20000dc0
 80036ec:	200008ec 	.word	0x200008ec
 80036f0:	20000dcc 	.word	0x20000dcc
 80036f4:	20000ddc 	.word	0x20000ddc
 80036f8:	20000dc8 	.word	0x20000dc8
 80036fc:	200008f0 	.word	0x200008f0
 8003700:	e000ed04 	.word	0xe000ed04

08003704 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d017      	beq.n	8003746 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <vTaskDelay+0x60>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <vTaskDelay+0x30>
	__asm volatile
 800371e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	60bb      	str	r3, [r7, #8]
}
 8003730:	bf00      	nop
 8003732:	e7fe      	b.n	8003732 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003734:	f000 f88a 	bl	800384c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003738:	2100      	movs	r1, #0
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fd04 	bl	8004148 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003740:	f000 f892 	bl	8003868 <xTaskResumeAll>
 8003744:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <vTaskDelay+0x64>)
 800374e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000de8 	.word	0x20000de8
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08a      	sub	sp, #40	; 0x28
 8003770:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003776:	2300      	movs	r3, #0
 8003778:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800377a:	463a      	mov	r2, r7
 800377c:	1d39      	adds	r1, r7, #4
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff f848 	bl	8002818 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	9202      	str	r2, [sp, #8]
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	2300      	movs	r3, #0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	2300      	movs	r3, #0
 8003798:	460a      	mov	r2, r1
 800379a:	4924      	ldr	r1, [pc, #144]	; (800382c <vTaskStartScheduler+0xc0>)
 800379c:	4824      	ldr	r0, [pc, #144]	; (8003830 <vTaskStartScheduler+0xc4>)
 800379e:	f7ff fe01 	bl	80033a4 <xTaskCreateStatic>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4a23      	ldr	r2, [pc, #140]	; (8003834 <vTaskStartScheduler+0xc8>)
 80037a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037a8:	4b22      	ldr	r3, [pc, #136]	; (8003834 <vTaskStartScheduler+0xc8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037b0:	2301      	movs	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	e001      	b.n	80037ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d102      	bne.n	80037c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80037c0:	f000 fd16 	bl	80041f0 <xTimerCreateTimerTask>
 80037c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d11b      	bne.n	8003804 <vTaskStartScheduler+0x98>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	613b      	str	r3, [r7, #16]
}
 80037de:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80037e0:	4b15      	ldr	r3, [pc, #84]	; (8003838 <vTaskStartScheduler+0xcc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3354      	adds	r3, #84	; 0x54
 80037e6:	4a15      	ldr	r2, [pc, #84]	; (800383c <vTaskStartScheduler+0xd0>)
 80037e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <vTaskStartScheduler+0xd4>)
 80037ec:	f04f 32ff 	mov.w	r2, #4294967295
 80037f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037f2:	4b14      	ldr	r3, [pc, #80]	; (8003844 <vTaskStartScheduler+0xd8>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80037f8:	4b13      	ldr	r3, [pc, #76]	; (8003848 <vTaskStartScheduler+0xdc>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037fe:	f001 f88b 	bl	8004918 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003802:	e00e      	b.n	8003822 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d10a      	bne.n	8003822 <vTaskStartScheduler+0xb6>
	__asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	60fb      	str	r3, [r7, #12]
}
 800381e:	bf00      	nop
 8003820:	e7fe      	b.n	8003820 <vTaskStartScheduler+0xb4>
}
 8003822:	bf00      	nop
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	08006434 	.word	0x08006434
 8003830:	08003e75 	.word	0x08003e75
 8003834:	20000de4 	.word	0x20000de4
 8003838:	200008ec 	.word	0x200008ec
 800383c:	20000018 	.word	0x20000018
 8003840:	20000de0 	.word	0x20000de0
 8003844:	20000dcc 	.word	0x20000dcc
 8003848:	20000dc4 	.word	0x20000dc4

0800384c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <vTaskSuspendAll+0x18>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	4a03      	ldr	r2, [pc, #12]	; (8003864 <vTaskSuspendAll+0x18>)
 8003858:	6013      	str	r3, [r2, #0]
}
 800385a:	bf00      	nop
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000de8 	.word	0x20000de8

08003868 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003876:	4b42      	ldr	r3, [pc, #264]	; (8003980 <xTaskResumeAll+0x118>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <xTaskResumeAll+0x2c>
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	603b      	str	r3, [r7, #0]
}
 8003890:	bf00      	nop
 8003892:	e7fe      	b.n	8003892 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003894:	f001 f8b2 	bl	80049fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003898:	4b39      	ldr	r3, [pc, #228]	; (8003980 <xTaskResumeAll+0x118>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3b01      	subs	r3, #1
 800389e:	4a38      	ldr	r2, [pc, #224]	; (8003980 <xTaskResumeAll+0x118>)
 80038a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038a2:	4b37      	ldr	r3, [pc, #220]	; (8003980 <xTaskResumeAll+0x118>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d162      	bne.n	8003970 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038aa:	4b36      	ldr	r3, [pc, #216]	; (8003984 <xTaskResumeAll+0x11c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d05e      	beq.n	8003970 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038b2:	e02f      	b.n	8003914 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80038b4:	4b34      	ldr	r3, [pc, #208]	; (8003988 <xTaskResumeAll+0x120>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3318      	adds	r3, #24
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff f861 	bl	8002988 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff f85c 	bl	8002988 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d4:	4b2d      	ldr	r3, [pc, #180]	; (800398c <xTaskResumeAll+0x124>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d903      	bls.n	80038e4 <xTaskResumeAll+0x7c>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	4a2a      	ldr	r2, [pc, #168]	; (800398c <xTaskResumeAll+0x124>)
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4a27      	ldr	r2, [pc, #156]	; (8003990 <xTaskResumeAll+0x128>)
 80038f2:	441a      	add	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f7fe ffe9 	bl	80028d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	4b23      	ldr	r3, [pc, #140]	; (8003994 <xTaskResumeAll+0x12c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800390e:	4b22      	ldr	r3, [pc, #136]	; (8003998 <xTaskResumeAll+0x130>)
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003914:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <xTaskResumeAll+0x120>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1cb      	bne.n	80038b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003922:	f000 fb61 	bl	8003fe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003926:	4b1d      	ldr	r3, [pc, #116]	; (800399c <xTaskResumeAll+0x134>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d010      	beq.n	8003954 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003932:	f000 f845 	bl	80039c0 <xTaskIncrementTick>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800393c:	4b16      	ldr	r3, [pc, #88]	; (8003998 <xTaskResumeAll+0x130>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3b01      	subs	r3, #1
 8003946:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f1      	bne.n	8003932 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <xTaskResumeAll+0x134>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003954:	4b10      	ldr	r3, [pc, #64]	; (8003998 <xTaskResumeAll+0x130>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d009      	beq.n	8003970 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800395c:	2301      	movs	r3, #1
 800395e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <xTaskResumeAll+0x138>)
 8003962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003970:	f001 f874 	bl	8004a5c <vPortExitCritical>

	return xAlreadyYielded;
 8003974:	68bb      	ldr	r3, [r7, #8]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000de8 	.word	0x20000de8
 8003984:	20000dc0 	.word	0x20000dc0
 8003988:	20000d80 	.word	0x20000d80
 800398c:	20000dc8 	.word	0x20000dc8
 8003990:	200008f0 	.word	0x200008f0
 8003994:	200008ec 	.word	0x200008ec
 8003998:	20000dd4 	.word	0x20000dd4
 800399c:	20000dd0 	.word	0x20000dd0
 80039a0:	e000ed04 	.word	0xe000ed04

080039a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039aa:	4b04      	ldr	r3, [pc, #16]	; (80039bc <xTaskGetTickCount+0x18>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039b0:	687b      	ldr	r3, [r7, #4]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr
 80039bc:	20000dc4 	.word	0x20000dc4

080039c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ca:	4b51      	ldr	r3, [pc, #324]	; (8003b10 <xTaskIncrementTick+0x150>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 808e 	bne.w	8003af0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039d4:	4b4f      	ldr	r3, [pc, #316]	; (8003b14 <xTaskIncrementTick+0x154>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039dc:	4a4d      	ldr	r2, [pc, #308]	; (8003b14 <xTaskIncrementTick+0x154>)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d120      	bne.n	8003a2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80039e8:	4b4b      	ldr	r3, [pc, #300]	; (8003b18 <xTaskIncrementTick+0x158>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <xTaskIncrementTick+0x48>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	603b      	str	r3, [r7, #0]
}
 8003a04:	bf00      	nop
 8003a06:	e7fe      	b.n	8003a06 <xTaskIncrementTick+0x46>
 8003a08:	4b43      	ldr	r3, [pc, #268]	; (8003b18 <xTaskIncrementTick+0x158>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <xTaskIncrementTick+0x15c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a41      	ldr	r2, [pc, #260]	; (8003b18 <xTaskIncrementTick+0x158>)
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4a41      	ldr	r2, [pc, #260]	; (8003b1c <xTaskIncrementTick+0x15c>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b40      	ldr	r3, [pc, #256]	; (8003b20 <xTaskIncrementTick+0x160>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	4a3f      	ldr	r2, [pc, #252]	; (8003b20 <xTaskIncrementTick+0x160>)
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	f000 fadf 	bl	8003fe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a2a:	4b3e      	ldr	r3, [pc, #248]	; (8003b24 <xTaskIncrementTick+0x164>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d34e      	bcc.n	8003ad2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a34:	4b38      	ldr	r3, [pc, #224]	; (8003b18 <xTaskIncrementTick+0x158>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <xTaskIncrementTick+0x82>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <xTaskIncrementTick+0x84>
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a48:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <xTaskIncrementTick+0x164>)
 8003a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4e:	601a      	str	r2, [r3, #0]
					break;
 8003a50:	e03f      	b.n	8003ad2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a52:	4b31      	ldr	r3, [pc, #196]	; (8003b18 <xTaskIncrementTick+0x158>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d203      	bcs.n	8003a72 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a6a:	4a2e      	ldr	r2, [pc, #184]	; (8003b24 <xTaskIncrementTick+0x164>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6013      	str	r3, [r2, #0]
						break;
 8003a70:	e02f      	b.n	8003ad2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3304      	adds	r3, #4
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe ff86 	bl	8002988 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d004      	beq.n	8003a8e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3318      	adds	r3, #24
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe ff7d 	bl	8002988 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a92:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <xTaskIncrementTick+0x168>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d903      	bls.n	8003aa2 <xTaskIncrementTick+0xe2>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	4a22      	ldr	r2, [pc, #136]	; (8003b28 <xTaskIncrementTick+0x168>)
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4a1f      	ldr	r2, [pc, #124]	; (8003b2c <xTaskIncrementTick+0x16c>)
 8003ab0:	441a      	add	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	f7fe ff0a 	bl	80028d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac2:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <xTaskIncrementTick+0x170>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d3b3      	bcc.n	8003a34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad0:	e7b0      	b.n	8003a34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ad2:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <xTaskIncrementTick+0x170>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	4914      	ldr	r1, [pc, #80]	; (8003b2c <xTaskIncrementTick+0x16c>)
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d907      	bls.n	8003afa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003aea:	2301      	movs	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e004      	b.n	8003afa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003af0:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <xTaskIncrementTick+0x174>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	4a0f      	ldr	r2, [pc, #60]	; (8003b34 <xTaskIncrementTick+0x174>)
 8003af8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003afa:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <xTaskIncrementTick+0x178>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003b02:	2301      	movs	r3, #1
 8003b04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b06:	697b      	ldr	r3, [r7, #20]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000de8 	.word	0x20000de8
 8003b14:	20000dc4 	.word	0x20000dc4
 8003b18:	20000d78 	.word	0x20000d78
 8003b1c:	20000d7c 	.word	0x20000d7c
 8003b20:	20000dd8 	.word	0x20000dd8
 8003b24:	20000de0 	.word	0x20000de0
 8003b28:	20000dc8 	.word	0x20000dc8
 8003b2c:	200008f0 	.word	0x200008f0
 8003b30:	200008ec 	.word	0x200008ec
 8003b34:	20000dd0 	.word	0x20000dd0
 8003b38:	20000dd4 	.word	0x20000dd4

08003b3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b42:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <vTaskSwitchContext+0xb0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b4a:	4b29      	ldr	r3, [pc, #164]	; (8003bf0 <vTaskSwitchContext+0xb4>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b50:	e046      	b.n	8003be0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003b52:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <vTaskSwitchContext+0xb4>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b58:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <vTaskSwitchContext+0xb8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e010      	b.n	8003b82 <vTaskSwitchContext+0x46>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <vTaskSwitchContext+0x40>
	__asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	607b      	str	r3, [r7, #4]
}
 8003b78:	bf00      	nop
 8003b7a:	e7fe      	b.n	8003b7a <vTaskSwitchContext+0x3e>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	491d      	ldr	r1, [pc, #116]	; (8003bf8 <vTaskSwitchContext+0xbc>)
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0e4      	beq.n	8003b60 <vTaskSwitchContext+0x24>
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4a15      	ldr	r2, [pc, #84]	; (8003bf8 <vTaskSwitchContext+0xbc>)
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d104      	bne.n	8003bc6 <vTaskSwitchContext+0x8a>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a0b      	ldr	r2, [pc, #44]	; (8003bfc <vTaskSwitchContext+0xc0>)
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	4a08      	ldr	r2, [pc, #32]	; (8003bf4 <vTaskSwitchContext+0xb8>)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <vTaskSwitchContext+0xc0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3354      	adds	r3, #84	; 0x54
 8003bdc:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <vTaskSwitchContext+0xc4>)
 8003bde:	6013      	str	r3, [r2, #0]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000de8 	.word	0x20000de8
 8003bf0:	20000dd4 	.word	0x20000dd4
 8003bf4:	20000dc8 	.word	0x20000dc8
 8003bf8:	200008f0 	.word	0x200008f0
 8003bfc:	200008ec 	.word	0x200008ec
 8003c00:	20000018 	.word	0x20000018

08003c04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	60fb      	str	r3, [r7, #12]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <vTaskPlaceOnEventList+0x44>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3318      	adds	r3, #24
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fe fe70 	bl	8002918 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c38:	2101      	movs	r1, #1
 8003c3a:	6838      	ldr	r0, [r7, #0]
 8003c3c:	f000 fa84 	bl	8004148 <prvAddCurrentTaskToDelayedList>
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	200008ec 	.word	0x200008ec

08003c4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	617b      	str	r3, [r7, #20]
}
 8003c70:	bf00      	nop
 8003c72:	e7fe      	b.n	8003c72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3318      	adds	r3, #24
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7fe fe28 	bl	80028d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	68b8      	ldr	r0, [r7, #8]
 8003c92:	f000 fa59 	bl	8004148 <prvAddCurrentTaskToDelayedList>
	}
 8003c96:	bf00      	nop
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	200008ec 	.word	0x200008ec

08003ca4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	60fb      	str	r3, [r7, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	3318      	adds	r3, #24
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe fe57 	bl	8002988 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <xTaskRemoveFromEventList+0xb0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d11d      	bne.n	8003d1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe fe4e 	bl	8002988 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <xTaskRemoveFromEventList+0xb4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d903      	bls.n	8003d00 <xTaskRemoveFromEventList+0x5c>
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <xTaskRemoveFromEventList+0xb4>)
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4a13      	ldr	r2, [pc, #76]	; (8003d5c <xTaskRemoveFromEventList+0xb8>)
 8003d0e:	441a      	add	r2, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f7fe fddb 	bl	80028d2 <vListInsertEnd>
 8003d1c:	e005      	b.n	8003d2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	3318      	adds	r3, #24
 8003d22:	4619      	mov	r1, r3
 8003d24:	480e      	ldr	r0, [pc, #56]	; (8003d60 <xTaskRemoveFromEventList+0xbc>)
 8003d26:	f7fe fdd4 	bl	80028d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <xTaskRemoveFromEventList+0xc0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d905      	bls.n	8003d44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <xTaskRemoveFromEventList+0xc4>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e001      	b.n	8003d48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003d48:	697b      	ldr	r3, [r7, #20]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000de8 	.word	0x20000de8
 8003d58:	20000dc8 	.word	0x20000dc8
 8003d5c:	200008f0 	.word	0x200008f0
 8003d60:	20000d80 	.word	0x20000d80
 8003d64:	200008ec 	.word	0x200008ec
 8003d68:	20000dd4 	.word	0x20000dd4

08003d6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <vTaskInternalSetTimeOutState+0x24>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <vTaskInternalSetTimeOutState+0x28>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	605a      	str	r2, [r3, #4]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000dd8 	.word	0x20000dd8
 8003d94:	20000dc4 	.word	0x20000dc4

08003d98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	613b      	str	r3, [r7, #16]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10a      	bne.n	8003dda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	60fb      	str	r3, [r7, #12]
}
 8003dd6:	bf00      	nop
 8003dd8:	e7fe      	b.n	8003dd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003dda:	f000 fe0f 	bl	80049fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <xTaskCheckForTimeOut+0xbc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d102      	bne.n	8003dfe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	e023      	b.n	8003e46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <xTaskCheckForTimeOut+0xc0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d007      	beq.n	8003e1a <xTaskCheckForTimeOut+0x82>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d302      	bcc.n	8003e1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	e015      	b.n	8003e46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d20b      	bcs.n	8003e3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	1ad2      	subs	r2, r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff9b 	bl	8003d6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	e004      	b.n	8003e46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e46:	f000 fe09 	bl	8004a5c <vPortExitCritical>

	return xReturn;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000dc4 	.word	0x20000dc4
 8003e58:	20000dd8 	.word	0x20000dd8

08003e5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <vTaskMissedYield+0x14>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000dd4 	.word	0x20000dd4

08003e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e7c:	f000 f852 	bl	8003f24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <prvIdleTask+0x28>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d9f9      	bls.n	8003e7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <prvIdleTask+0x2c>)
 8003e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e98:	e7f0      	b.n	8003e7c <prvIdleTask+0x8>
 8003e9a:	bf00      	nop
 8003e9c:	200008f0 	.word	0x200008f0
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	e00c      	b.n	8003eca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <prvInitialiseTaskLists+0x60>)
 8003ebc:	4413      	add	r3, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fcdc 	bl	800287c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b37      	cmp	r3, #55	; 0x37
 8003ece:	d9ef      	bls.n	8003eb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ed0:	480d      	ldr	r0, [pc, #52]	; (8003f08 <prvInitialiseTaskLists+0x64>)
 8003ed2:	f7fe fcd3 	bl	800287c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ed6:	480d      	ldr	r0, [pc, #52]	; (8003f0c <prvInitialiseTaskLists+0x68>)
 8003ed8:	f7fe fcd0 	bl	800287c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003edc:	480c      	ldr	r0, [pc, #48]	; (8003f10 <prvInitialiseTaskLists+0x6c>)
 8003ede:	f7fe fccd 	bl	800287c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ee2:	480c      	ldr	r0, [pc, #48]	; (8003f14 <prvInitialiseTaskLists+0x70>)
 8003ee4:	f7fe fcca 	bl	800287c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ee8:	480b      	ldr	r0, [pc, #44]	; (8003f18 <prvInitialiseTaskLists+0x74>)
 8003eea:	f7fe fcc7 	bl	800287c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <prvInitialiseTaskLists+0x78>)
 8003ef0:	4a05      	ldr	r2, [pc, #20]	; (8003f08 <prvInitialiseTaskLists+0x64>)
 8003ef2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <prvInitialiseTaskLists+0x7c>)
 8003ef6:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <prvInitialiseTaskLists+0x68>)
 8003ef8:	601a      	str	r2, [r3, #0]
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200008f0 	.word	0x200008f0
 8003f08:	20000d50 	.word	0x20000d50
 8003f0c:	20000d64 	.word	0x20000d64
 8003f10:	20000d80 	.word	0x20000d80
 8003f14:	20000d94 	.word	0x20000d94
 8003f18:	20000dac 	.word	0x20000dac
 8003f1c:	20000d78 	.word	0x20000d78
 8003f20:	20000d7c 	.word	0x20000d7c

08003f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f2a:	e019      	b.n	8003f60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f2c:	f000 fd66 	bl	80049fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <prvCheckTasksWaitingTermination+0x50>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe fd23 	bl	8002988 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f42:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <prvCheckTasksWaitingTermination+0x54>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	4a0b      	ldr	r2, [pc, #44]	; (8003f78 <prvCheckTasksWaitingTermination+0x54>)
 8003f4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <prvCheckTasksWaitingTermination+0x58>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <prvCheckTasksWaitingTermination+0x58>)
 8003f54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f56:	f000 fd81 	bl	8004a5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f810 	bl	8003f80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <prvCheckTasksWaitingTermination+0x58>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e1      	bne.n	8003f2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000d94 	.word	0x20000d94
 8003f78:	20000dc0 	.word	0x20000dc0
 8003f7c:	20000da8 	.word	0x20000da8

08003f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3354      	adds	r3, #84	; 0x54
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 fa77 	bl	8005480 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d108      	bne.n	8003fae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 feef 	bl	8004d84 <vPortFree>
				vPortFree( pxTCB );
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 feec 	bl	8004d84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fac:	e018      	b.n	8003fe0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d103      	bne.n	8003fc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fee3 	bl	8004d84 <vPortFree>
	}
 8003fbe:	e00f      	b.n	8003fe0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d00a      	beq.n	8003fe0 <prvDeleteTCB+0x60>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	60fb      	str	r3, [r7, #12]
}
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <prvDeleteTCB+0x5e>
	}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <prvResetNextTaskUnblockTime+0x40>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <prvResetNextTaskUnblockTime+0x14>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <prvResetNextTaskUnblockTime+0x16>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d004      	beq.n	800400c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004002:	4b0a      	ldr	r3, [pc, #40]	; (800402c <prvResetNextTaskUnblockTime+0x44>)
 8004004:	f04f 32ff 	mov.w	r2, #4294967295
 8004008:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800400a:	e008      	b.n	800401e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <prvResetNextTaskUnblockTime+0x40>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4a04      	ldr	r2, [pc, #16]	; (800402c <prvResetNextTaskUnblockTime+0x44>)
 800401c:	6013      	str	r3, [r2, #0]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr
 8004028:	20000d78 	.word	0x20000d78
 800402c:	20000de0 	.word	0x20000de0

08004030 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <xTaskGetSchedulerState+0x34>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d102      	bne.n	8004044 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800403e:	2301      	movs	r3, #1
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	e008      	b.n	8004056 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004044:	4b08      	ldr	r3, [pc, #32]	; (8004068 <xTaskGetSchedulerState+0x38>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d102      	bne.n	8004052 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800404c:	2302      	movs	r3, #2
 800404e:	607b      	str	r3, [r7, #4]
 8004050:	e001      	b.n	8004056 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004056:	687b      	ldr	r3, [r7, #4]
	}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000dcc 	.word	0x20000dcc
 8004068:	20000de8 	.word	0x20000de8

0800406c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d056      	beq.n	8004130 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004082:	4b2e      	ldr	r3, [pc, #184]	; (800413c <xTaskPriorityDisinherit+0xd0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	429a      	cmp	r2, r3
 800408a:	d00a      	beq.n	80040a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	60fb      	str	r3, [r7, #12]
}
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	60bb      	str	r3, [r7, #8]
}
 80040bc:	bf00      	nop
 80040be:	e7fe      	b.n	80040be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c4:	1e5a      	subs	r2, r3, #1
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d02c      	beq.n	8004130 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d128      	bne.n	8004130 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fc50 	bl	8002988 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <xTaskPriorityDisinherit+0xd4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d903      	bls.n	8004110 <xTaskPriorityDisinherit+0xa4>
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	4a0c      	ldr	r2, [pc, #48]	; (8004140 <xTaskPriorityDisinherit+0xd4>)
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4a09      	ldr	r2, [pc, #36]	; (8004144 <xTaskPriorityDisinherit+0xd8>)
 800411e:	441a      	add	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	3304      	adds	r3, #4
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f7fe fbd3 	bl	80028d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800412c:	2301      	movs	r3, #1
 800412e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004130:	697b      	ldr	r3, [r7, #20]
	}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	200008ec 	.word	0x200008ec
 8004140:	20000dc8 	.word	0x20000dc8
 8004144:	200008f0 	.word	0x200008f0

08004148 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004152:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004158:	4b20      	ldr	r3, [pc, #128]	; (80041dc <prvAddCurrentTaskToDelayedList+0x94>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3304      	adds	r3, #4
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe fc12 	bl	8002988 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d10a      	bne.n	8004182 <prvAddCurrentTaskToDelayedList+0x3a>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d007      	beq.n	8004182 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004172:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <prvAddCurrentTaskToDelayedList+0x94>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3304      	adds	r3, #4
 8004178:	4619      	mov	r1, r3
 800417a:	4819      	ldr	r0, [pc, #100]	; (80041e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800417c:	f7fe fba9 	bl	80028d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004180:	e026      	b.n	80041d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4413      	add	r3, r2
 8004188:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800418a:	4b14      	ldr	r3, [pc, #80]	; (80041dc <prvAddCurrentTaskToDelayedList+0x94>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	429a      	cmp	r2, r3
 8004198:	d209      	bcs.n	80041ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <prvAddCurrentTaskToDelayedList+0x94>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f7fe fbb6 	bl	8002918 <vListInsert>
}
 80041ac:	e010      	b.n	80041d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <prvAddCurrentTaskToDelayedList+0x94>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f7fe fbac 	bl	8002918 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d202      	bcs.n	80041d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80041ca:	4a08      	ldr	r2, [pc, #32]	; (80041ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	6013      	str	r3, [r2, #0]
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000dc4 	.word	0x20000dc4
 80041dc:	200008ec 	.word	0x200008ec
 80041e0:	20000dac 	.word	0x20000dac
 80041e4:	20000d7c 	.word	0x20000d7c
 80041e8:	20000d78 	.word	0x20000d78
 80041ec:	20000de0 	.word	0x20000de0

080041f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	; 0x28
 80041f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80041fa:	f000 facb 	bl	8004794 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80041fe:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <xTimerCreateTimerTask+0x80>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d021      	beq.n	800424a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800420e:	1d3a      	adds	r2, r7, #4
 8004210:	f107 0108 	add.w	r1, r7, #8
 8004214:	f107 030c 	add.w	r3, r7, #12
 8004218:	4618      	mov	r0, r3
 800421a:	f7fe fb15 	bl	8002848 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	9202      	str	r2, [sp, #8]
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	2302      	movs	r3, #2
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	2300      	movs	r3, #0
 800422e:	460a      	mov	r2, r1
 8004230:	4910      	ldr	r1, [pc, #64]	; (8004274 <xTimerCreateTimerTask+0x84>)
 8004232:	4811      	ldr	r0, [pc, #68]	; (8004278 <xTimerCreateTimerTask+0x88>)
 8004234:	f7ff f8b6 	bl	80033a4 <xTaskCreateStatic>
 8004238:	4603      	mov	r3, r0
 800423a:	4a10      	ldr	r2, [pc, #64]	; (800427c <xTimerCreateTimerTask+0x8c>)
 800423c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800423e:	4b0f      	ldr	r3, [pc, #60]	; (800427c <xTimerCreateTimerTask+0x8c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004246:	2301      	movs	r3, #1
 8004248:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	613b      	str	r3, [r7, #16]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004266:	697b      	ldr	r3, [r7, #20]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000e1c 	.word	0x20000e1c
 8004274:	0800643c 	.word	0x0800643c
 8004278:	0800439d 	.word	0x0800439d
 800427c:	20000e20 	.word	0x20000e20

08004280 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	; 0x28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	623b      	str	r3, [r7, #32]
}
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80042ae:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <xTimerGenericCommand+0x98>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d02a      	beq.n	800430c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	dc18      	bgt.n	80042fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042c8:	f7ff feb2 	bl	8004030 <xTaskGetSchedulerState>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d109      	bne.n	80042e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <xTimerGenericCommand+0x98>)
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	f107 0110 	add.w	r1, r7, #16
 80042da:	2300      	movs	r3, #0
 80042dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042de:	f7fe fc7f 	bl	8002be0 <xQueueGenericSend>
 80042e2:	6278      	str	r0, [r7, #36]	; 0x24
 80042e4:	e012      	b.n	800430c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80042e6:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <xTimerGenericCommand+0x98>)
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	f107 0110 	add.w	r1, r7, #16
 80042ee:	2300      	movs	r3, #0
 80042f0:	2200      	movs	r2, #0
 80042f2:	f7fe fc75 	bl	8002be0 <xQueueGenericSend>
 80042f6:	6278      	str	r0, [r7, #36]	; 0x24
 80042f8:	e008      	b.n	800430c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <xTimerGenericCommand+0x98>)
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	f107 0110 	add.w	r1, r7, #16
 8004302:	2300      	movs	r3, #0
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	f7fe fd69 	bl	8002ddc <xQueueGenericSendFromISR>
 800430a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800430e:	4618      	mov	r0, r3
 8004310:	3728      	adds	r7, #40	; 0x28
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000e1c 	.word	0x20000e1c

0800431c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af02      	add	r7, sp, #8
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004326:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <prvProcessExpiredTimer+0x7c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3304      	adds	r3, #4
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe fb27 	bl	8002988 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d122      	bne.n	8004388 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	18d1      	adds	r1, r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	6978      	ldr	r0, [r7, #20]
 8004350:	f000 f8c8 	bl	80044e4 <prvInsertTimerInActiveList>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800435a:	2300      	movs	r3, #0
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2300      	movs	r3, #0
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	2100      	movs	r1, #0
 8004364:	6978      	ldr	r0, [r7, #20]
 8004366:	f7ff ff8b 	bl	8004280 <xTimerGenericCommand>
 800436a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	60fb      	str	r3, [r7, #12]
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	6978      	ldr	r0, [r7, #20]
 800438e:	4798      	blx	r3
}
 8004390:	bf00      	nop
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000e14 	.word	0x20000e14

0800439c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043a4:	f107 0308 	add.w	r3, r7, #8
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f857 	bl	800445c <prvGetNextExpireTime>
 80043ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4619      	mov	r1, r3
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f803 	bl	80043c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80043ba:	f000 f8d5 	bl	8004568 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043be:	e7f1      	b.n	80043a4 <prvTimerTask+0x8>

080043c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80043ca:	f7ff fa3f 	bl	800384c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043ce:	f107 0308 	add.w	r3, r7, #8
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f866 	bl	80044a4 <prvSampleTimeNow>
 80043d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d130      	bne.n	8004442 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <prvProcessTimerOrBlockTask+0x3c>
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d806      	bhi.n	80043fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80043ee:	f7ff fa3b 	bl	8003868 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ff91 	bl	800431c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80043fa:	e024      	b.n	8004446 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004402:	4b13      	ldr	r3, [pc, #76]	; (8004450 <prvProcessTimerOrBlockTask+0x90>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf0c      	ite	eq
 800440c:	2301      	moveq	r3, #1
 800440e:	2300      	movne	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <prvProcessTimerOrBlockTask+0x94>)
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	4619      	mov	r1, r3
 8004422:	f7fe ff8b 	bl	800333c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004426:	f7ff fa1f 	bl	8003868 <xTaskResumeAll>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <prvProcessTimerOrBlockTask+0x98>)
 8004432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	f3bf 8f6f 	isb	sy
}
 8004440:	e001      	b.n	8004446 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004442:	f7ff fa11 	bl	8003868 <xTaskResumeAll>
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000e18 	.word	0x20000e18
 8004454:	20000e1c 	.word	0x20000e1c
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004464:	4b0e      	ldr	r3, [pc, #56]	; (80044a0 <prvGetNextExpireTime+0x44>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	bf0c      	ite	eq
 800446e:	2301      	moveq	r3, #1
 8004470:	2300      	movne	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d105      	bne.n	800448e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004482:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <prvGetNextExpireTime+0x44>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e001      	b.n	8004492 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004492:	68fb      	ldr	r3, [r7, #12]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	20000e14 	.word	0x20000e14

080044a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80044ac:	f7ff fa7a 	bl	80039a4 <xTaskGetTickCount>
 80044b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <prvSampleTimeNow+0x3c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d205      	bcs.n	80044c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80044bc:	f000 f908 	bl	80046d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e002      	b.n	80044ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80044ce:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <prvSampleTimeNow+0x3c>)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80044d4:	68fb      	ldr	r3, [r7, #12]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000e24 	.word	0x20000e24

080044e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	429a      	cmp	r2, r3
 8004508:	d812      	bhi.n	8004530 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	1ad2      	subs	r2, r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	429a      	cmp	r2, r3
 8004516:	d302      	bcc.n	800451e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004518:	2301      	movs	r3, #1
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	e01b      	b.n	8004556 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <prvInsertTimerInActiveList+0x7c>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3304      	adds	r3, #4
 8004526:	4619      	mov	r1, r3
 8004528:	4610      	mov	r0, r2
 800452a:	f7fe f9f5 	bl	8002918 <vListInsert>
 800452e:	e012      	b.n	8004556 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d206      	bcs.n	8004546 <prvInsertTimerInActiveList+0x62>
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d302      	bcc.n	8004546 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004540:	2301      	movs	r3, #1
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	e007      	b.n	8004556 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004546:	4b07      	ldr	r3, [pc, #28]	; (8004564 <prvInsertTimerInActiveList+0x80>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3304      	adds	r3, #4
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f7fe f9e1 	bl	8002918 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004556:	697b      	ldr	r3, [r7, #20]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000e18 	.word	0x20000e18
 8004564:	20000e14 	.word	0x20000e14

08004568 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08e      	sub	sp, #56	; 0x38
 800456c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800456e:	e09d      	b.n	80046ac <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	da18      	bge.n	80045a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004576:	1d3b      	adds	r3, r7, #4
 8004578:	3304      	adds	r3, #4
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	61fb      	str	r3, [r7, #28]
}
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800459e:	6850      	ldr	r0, [r2, #4]
 80045a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a2:	6892      	ldr	r2, [r2, #8]
 80045a4:	4611      	mov	r1, r2
 80045a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	db7d      	blt.n	80046aa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d004      	beq.n	80045c4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	3304      	adds	r3, #4
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe f9e2 	bl	8002988 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045c4:	463b      	mov	r3, r7
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff ff6c 	bl	80044a4 <prvSampleTimeNow>
 80045cc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b09      	cmp	r3, #9
 80045d2:	d86b      	bhi.n	80046ac <prvProcessReceivedCommands+0x144>
 80045d4:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <prvProcessReceivedCommands+0x74>)
 80045d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045da:	bf00      	nop
 80045dc:	08004605 	.word	0x08004605
 80045e0:	08004605 	.word	0x08004605
 80045e4:	08004605 	.word	0x08004605
 80045e8:	080046ad 	.word	0x080046ad
 80045ec:	08004661 	.word	0x08004661
 80045f0:	08004699 	.word	0x08004699
 80045f4:	08004605 	.word	0x08004605
 80045f8:	08004605 	.word	0x08004605
 80045fc:	080046ad 	.word	0x080046ad
 8004600:	08004661 	.word	0x08004661
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	18d1      	adds	r1, r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004612:	f7ff ff67 	bl	80044e4 <prvInsertTimerInActiveList>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d047      	beq.n	80046ac <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004622:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d13f      	bne.n	80046ac <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	441a      	add	r2, r3
 8004634:	2300      	movs	r3, #0
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	2300      	movs	r3, #0
 800463a:	2100      	movs	r1, #0
 800463c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800463e:	f7ff fe1f 	bl	8004280 <xTimerGenericCommand>
 8004642:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d130      	bne.n	80046ac <prvProcessReceivedCommands+0x144>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	61bb      	str	r3, [r7, #24]
}
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	617b      	str	r3, [r7, #20]
}
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	18d1      	adds	r1, r2, r3
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004692:	f7ff ff27 	bl	80044e4 <prvInsertTimerInActiveList>
					break;
 8004696:	e009      	b.n	80046ac <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d104      	bne.n	80046ac <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80046a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046a4:	f000 fb6e 	bl	8004d84 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80046a8:	e000      	b.n	80046ac <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80046aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046ac:	4b07      	ldr	r3, [pc, #28]	; (80046cc <prvProcessReceivedCommands+0x164>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	1d39      	adds	r1, r7, #4
 80046b2:	2200      	movs	r2, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe fc29 	bl	8002f0c <xQueueReceive>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f47f af57 	bne.w	8004570 <prvProcessReceivedCommands+0x8>
	}
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	3730      	adds	r7, #48	; 0x30
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000e1c 	.word	0x20000e1c

080046d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046d6:	e045      	b.n	8004764 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046d8:	4b2c      	ldr	r3, [pc, #176]	; (800478c <prvSwitchTimerLists+0xbc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046e2:	4b2a      	ldr	r3, [pc, #168]	; (800478c <prvSwitchTimerLists+0xbc>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe f949 	bl	8002988 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d12e      	bne.n	8004764 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	429a      	cmp	r2, r3
 8004716:	d90e      	bls.n	8004736 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004724:	4b19      	ldr	r3, [pc, #100]	; (800478c <prvSwitchTimerLists+0xbc>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f7fe f8f2 	bl	8002918 <vListInsert>
 8004734:	e016      	b.n	8004764 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004736:	2300      	movs	r3, #0
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	2300      	movs	r3, #0
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	2100      	movs	r1, #0
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f7ff fd9d 	bl	8004280 <xTimerGenericCommand>
 8004746:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <prvSwitchTimerLists+0x94>
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	603b      	str	r3, [r7, #0]
}
 8004760:	bf00      	nop
 8004762:	e7fe      	b.n	8004762 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <prvSwitchTimerLists+0xbc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1b4      	bne.n	80046d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800476e:	4b07      	ldr	r3, [pc, #28]	; (800478c <prvSwitchTimerLists+0xbc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004774:	4b06      	ldr	r3, [pc, #24]	; (8004790 <prvSwitchTimerLists+0xc0>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a04      	ldr	r2, [pc, #16]	; (800478c <prvSwitchTimerLists+0xbc>)
 800477a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <prvSwitchTimerLists+0xc0>)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	6013      	str	r3, [r2, #0]
}
 8004782:	bf00      	nop
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000e14 	.word	0x20000e14
 8004790:	20000e18 	.word	0x20000e18

08004794 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800479a:	f000 f92f 	bl	80049fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800479e:	4b15      	ldr	r3, [pc, #84]	; (80047f4 <prvCheckForValidListAndQueue+0x60>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d120      	bne.n	80047e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80047a6:	4814      	ldr	r0, [pc, #80]	; (80047f8 <prvCheckForValidListAndQueue+0x64>)
 80047a8:	f7fe f868 	bl	800287c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80047ac:	4813      	ldr	r0, [pc, #76]	; (80047fc <prvCheckForValidListAndQueue+0x68>)
 80047ae:	f7fe f865 	bl	800287c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <prvCheckForValidListAndQueue+0x6c>)
 80047b4:	4a10      	ldr	r2, [pc, #64]	; (80047f8 <prvCheckForValidListAndQueue+0x64>)
 80047b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <prvCheckForValidListAndQueue+0x70>)
 80047ba:	4a10      	ldr	r2, [pc, #64]	; (80047fc <prvCheckForValidListAndQueue+0x68>)
 80047bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80047be:	2300      	movs	r3, #0
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	4b11      	ldr	r3, [pc, #68]	; (8004808 <prvCheckForValidListAndQueue+0x74>)
 80047c4:	4a11      	ldr	r2, [pc, #68]	; (800480c <prvCheckForValidListAndQueue+0x78>)
 80047c6:	2110      	movs	r1, #16
 80047c8:	200a      	movs	r0, #10
 80047ca:	f7fe f96f 	bl	8002aac <xQueueGenericCreateStatic>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <prvCheckForValidListAndQueue+0x60>)
 80047d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80047d4:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <prvCheckForValidListAndQueue+0x60>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <prvCheckForValidListAndQueue+0x60>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	490b      	ldr	r1, [pc, #44]	; (8004810 <prvCheckForValidListAndQueue+0x7c>)
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe fd82 	bl	80032ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047e8:	f000 f938 	bl	8004a5c <vPortExitCritical>
}
 80047ec:	bf00      	nop
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000e1c 	.word	0x20000e1c
 80047f8:	20000dec 	.word	0x20000dec
 80047fc:	20000e00 	.word	0x20000e00
 8004800:	20000e14 	.word	0x20000e14
 8004804:	20000e18 	.word	0x20000e18
 8004808:	20000ec8 	.word	0x20000ec8
 800480c:	20000e28 	.word	0x20000e28
 8004810:	08006444 	.word	0x08006444

08004814 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3b04      	subs	r3, #4
 8004824:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800482c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3b04      	subs	r3, #4
 8004832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f023 0201 	bic.w	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3b04      	subs	r3, #4
 8004842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004844:	4a08      	ldr	r2, [pc, #32]	; (8004868 <pxPortInitialiseStack+0x54>)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3b14      	subs	r3, #20
 800484e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3b20      	subs	r3, #32
 800485a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800485c:	68fb      	ldr	r3, [r7, #12]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr
 8004868:	0800486d 	.word	0x0800486d

0800486c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004872:	2300      	movs	r3, #0
 8004874:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004876:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <prvTaskExitError+0x54>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d00a      	beq.n	8004896 <prvTaskExitError+0x2a>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	60fb      	str	r3, [r7, #12]
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <prvTaskExitError+0x28>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	60bb      	str	r3, [r7, #8]
}
 80048a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048aa:	bf00      	nop
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0fc      	beq.n	80048ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048b2:	bf00      	nop
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000014 	.word	0x20000014
	...

080048d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <pxCurrentTCBConst2>)
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	6808      	ldr	r0, [r1, #0]
 80048d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048da:	f380 8809 	msr	PSP, r0
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f380 8811 	msr	BASEPRI, r0
 80048ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80048ee:	4770      	bx	lr

080048f0 <pxCurrentTCBConst2>:
 80048f0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop

080048f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80048f8:	4806      	ldr	r0, [pc, #24]	; (8004914 <prvPortStartFirstTask+0x1c>)
 80048fa:	6800      	ldr	r0, [r0, #0]
 80048fc:	6800      	ldr	r0, [r0, #0]
 80048fe:	f380 8808 	msr	MSP, r0
 8004902:	b662      	cpsie	i
 8004904:	b661      	cpsie	f
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	df00      	svc	0
 8004910:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004912:	bf00      	nop
 8004914:	e000ed08 	.word	0xe000ed08

08004918 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800491e:	4b32      	ldr	r3, [pc, #200]	; (80049e8 <xPortStartScheduler+0xd0>)
 8004920:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	22ff      	movs	r2, #255	; 0xff
 800492e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004940:	b2da      	uxtb	r2, r3
 8004942:	4b2a      	ldr	r3, [pc, #168]	; (80049ec <xPortStartScheduler+0xd4>)
 8004944:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004946:	4b2a      	ldr	r3, [pc, #168]	; (80049f0 <xPortStartScheduler+0xd8>)
 8004948:	2207      	movs	r2, #7
 800494a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800494c:	e009      	b.n	8004962 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800494e:	4b28      	ldr	r3, [pc, #160]	; (80049f0 <xPortStartScheduler+0xd8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3b01      	subs	r3, #1
 8004954:	4a26      	ldr	r2, [pc, #152]	; (80049f0 <xPortStartScheduler+0xd8>)
 8004956:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d0ef      	beq.n	800494e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800496e:	4b20      	ldr	r3, [pc, #128]	; (80049f0 <xPortStartScheduler+0xd8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1c3 0307 	rsb	r3, r3, #7
 8004976:	2b04      	cmp	r3, #4
 8004978:	d00a      	beq.n	8004990 <xPortStartScheduler+0x78>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	60bb      	str	r3, [r7, #8]
}
 800498c:	bf00      	nop
 800498e:	e7fe      	b.n	800498e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004990:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <xPortStartScheduler+0xd8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <xPortStartScheduler+0xd8>)
 8004998:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800499a:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <xPortStartScheduler+0xd8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049a2:	4a13      	ldr	r2, [pc, #76]	; (80049f0 <xPortStartScheduler+0xd8>)
 80049a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <xPortStartScheduler+0xdc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a10      	ldr	r2, [pc, #64]	; (80049f4 <xPortStartScheduler+0xdc>)
 80049b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049ba:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <xPortStartScheduler+0xdc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <xPortStartScheduler+0xdc>)
 80049c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049c6:	f000 f8b9 	bl	8004b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <xPortStartScheduler+0xe0>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049d0:	f7ff ff92 	bl	80048f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049d4:	f7ff f8b2 	bl	8003b3c <vTaskSwitchContext>
	prvTaskExitError();
 80049d8:	f7ff ff48 	bl	800486c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	e000e400 	.word	0xe000e400
 80049ec:	20000f18 	.word	0x20000f18
 80049f0:	20000f1c 	.word	0x20000f1c
 80049f4:	e000ed20 	.word	0xe000ed20
 80049f8:	20000014 	.word	0x20000014

080049fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	607b      	str	r3, [r7, #4]
}
 8004a14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <vPortEnterCritical+0x58>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	4a0d      	ldr	r2, [pc, #52]	; (8004a54 <vPortEnterCritical+0x58>)
 8004a1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <vPortEnterCritical+0x58>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d10f      	bne.n	8004a48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <vPortEnterCritical+0x5c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	603b      	str	r3, [r7, #0]
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <vPortEnterCritical+0x4a>
	}
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	20000014 	.word	0x20000014
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a62:	4b11      	ldr	r3, [pc, #68]	; (8004aa8 <vPortExitCritical+0x4c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <vPortExitCritical+0x24>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	607b      	str	r3, [r7, #4]
}
 8004a7c:	bf00      	nop
 8004a7e:	e7fe      	b.n	8004a7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <vPortExitCritical+0x4c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <vPortExitCritical+0x4c>)
 8004a88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <vPortExitCritical+0x4c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d105      	bne.n	8004a9e <vPortExitCritical+0x42>
 8004a92:	2300      	movs	r3, #0
 8004a94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	f383 8811 	msr	BASEPRI, r3
}
 8004a9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr
 8004aa8:	20000014 	.word	0x20000014
 8004aac:	00000000 	.word	0x00000000

08004ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ab0:	f3ef 8009 	mrs	r0, PSP
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <pxCurrentTCBConst>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ac0:	6010      	str	r0, [r2, #0]
 8004ac2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ac6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004aca:	f380 8811 	msr	BASEPRI, r0
 8004ace:	f7ff f835 	bl	8003b3c <vTaskSwitchContext>
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f380 8811 	msr	BASEPRI, r0
 8004ada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004ade:	6819      	ldr	r1, [r3, #0]
 8004ae0:	6808      	ldr	r0, [r1, #0]
 8004ae2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ae6:	f380 8809 	msr	PSP, r0
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	4770      	bx	lr

08004af0 <pxCurrentTCBConst>:
 8004af0:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop

08004af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	607b      	str	r3, [r7, #4]
}
 8004b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b12:	f7fe ff55 	bl	80039c0 <xTaskIncrementTick>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <SysTick_Handler+0x40>)
 8004b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	2300      	movs	r3, #0
 8004b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f383 8811 	msr	BASEPRI, r3
}
 8004b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <vPortSetupTimerInterrupt+0x30>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b46:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <vPortSetupTimerInterrupt+0x34>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <vPortSetupTimerInterrupt+0x38>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <vPortSetupTimerInterrupt+0x3c>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	099b      	lsrs	r3, r3, #6
 8004b58:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <vPortSetupTimerInterrupt+0x40>)
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b5e:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <vPortSetupTimerInterrupt+0x30>)
 8004b60:	2207      	movs	r2, #7
 8004b62:	601a      	str	r2, [r3, #0]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr
 8004b6c:	e000e010 	.word	0xe000e010
 8004b70:	e000e018 	.word	0xe000e018
 8004b74:	20000008 	.word	0x20000008
 8004b78:	10624dd3 	.word	0x10624dd3
 8004b7c:	e000e014 	.word	0xe000e014

08004b80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b86:	f3ef 8305 	mrs	r3, IPSR
 8004b8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b0f      	cmp	r3, #15
 8004b90:	d914      	bls.n	8004bbc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b92:	4a16      	ldr	r2, [pc, #88]	; (8004bec <vPortValidateInterruptPriority+0x6c>)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b9c:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <vPortValidateInterruptPriority+0x70>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	7afa      	ldrb	r2, [r7, #11]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d20a      	bcs.n	8004bbc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	607b      	str	r3, [r7, #4]
}
 8004bb8:	bf00      	nop
 8004bba:	e7fe      	b.n	8004bba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <vPortValidateInterruptPriority+0x74>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <vPortValidateInterruptPriority+0x78>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d90a      	bls.n	8004be2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	603b      	str	r3, [r7, #0]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <vPortValidateInterruptPriority+0x60>
	}
 8004be2:	bf00      	nop
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr
 8004bec:	e000e3f0 	.word	0xe000e3f0
 8004bf0:	20000f18 	.word	0x20000f18
 8004bf4:	e000ed0c 	.word	0xe000ed0c
 8004bf8:	20000f1c 	.word	0x20000f1c

08004bfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c08:	f7fe fe20 	bl	800384c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c0c:	4b58      	ldr	r3, [pc, #352]	; (8004d70 <pvPortMalloc+0x174>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c14:	f000 f910 	bl	8004e38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c18:	4b56      	ldr	r3, [pc, #344]	; (8004d74 <pvPortMalloc+0x178>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f040 808e 	bne.w	8004d42 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01d      	beq.n	8004c68 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d014      	beq.n	8004c68 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f023 0307 	bic.w	r3, r3, #7
 8004c44:	3308      	adds	r3, #8
 8004c46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <pvPortMalloc+0x6c>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	617b      	str	r3, [r7, #20]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d069      	beq.n	8004d42 <pvPortMalloc+0x146>
 8004c6e:	4b42      	ldr	r3, [pc, #264]	; (8004d78 <pvPortMalloc+0x17c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d864      	bhi.n	8004d42 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c78:	4b40      	ldr	r3, [pc, #256]	; (8004d7c <pvPortMalloc+0x180>)
 8004c7a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c7c:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <pvPortMalloc+0x180>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c82:	e004      	b.n	8004c8e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d903      	bls.n	8004ca0 <pvPortMalloc+0xa4>
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f1      	bne.n	8004c84 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ca0:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <pvPortMalloc+0x174>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d04b      	beq.n	8004d42 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2208      	movs	r2, #8
 8004cb0:	4413      	add	r3, r2
 8004cb2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	1ad2      	subs	r2, r2, r3
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d91f      	bls.n	8004d0c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <pvPortMalloc+0xf8>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	613b      	str	r3, [r7, #16]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	1ad2      	subs	r2, r2, r3
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d06:	69b8      	ldr	r0, [r7, #24]
 8004d08:	f000 f8f8 	bl	8004efc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <pvPortMalloc+0x17c>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	4a18      	ldr	r2, [pc, #96]	; (8004d78 <pvPortMalloc+0x17c>)
 8004d18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d1a:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <pvPortMalloc+0x17c>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b18      	ldr	r3, [pc, #96]	; (8004d80 <pvPortMalloc+0x184>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d203      	bcs.n	8004d2e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d26:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <pvPortMalloc+0x17c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <pvPortMalloc+0x184>)
 8004d2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <pvPortMalloc+0x178>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d42:	f7fe fd91 	bl	8003868 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <pvPortMalloc+0x16a>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	60fb      	str	r3, [r7, #12]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <pvPortMalloc+0x168>
	return pvReturn;
 8004d66:	69fb      	ldr	r3, [r7, #28]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3728      	adds	r7, #40	; 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20001b28 	.word	0x20001b28
 8004d74:	20001b34 	.word	0x20001b34
 8004d78:	20001b2c 	.word	0x20001b2c
 8004d7c:	20001b20 	.word	0x20001b20
 8004d80:	20001b30 	.word	0x20001b30

08004d84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d048      	beq.n	8004e28 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d96:	2308      	movs	r3, #8
 8004d98:	425b      	negs	r3, r3
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	4b21      	ldr	r3, [pc, #132]	; (8004e30 <vPortFree+0xac>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <vPortFree+0x44>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60fb      	str	r3, [r7, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <vPortFree+0x62>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	60bb      	str	r3, [r7, #8]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <vPortFree+0xac>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d019      	beq.n	8004e28 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d115      	bne.n	8004e28 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <vPortFree+0xac>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	401a      	ands	r2, r3
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e0c:	f7fe fd1e 	bl	800384c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <vPortFree+0xb0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4413      	add	r3, r2
 8004e1a:	4a06      	ldr	r2, [pc, #24]	; (8004e34 <vPortFree+0xb0>)
 8004e1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e1e:	6938      	ldr	r0, [r7, #16]
 8004e20:	f000 f86c 	bl	8004efc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e24:	f7fe fd20 	bl	8003868 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e28:	bf00      	nop
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20001b34 	.word	0x20001b34
 8004e34:	20001b2c 	.word	0x20001b2c

08004e38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e44:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <prvHeapInit+0xac>)
 8004e46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00c      	beq.n	8004e6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3307      	adds	r3, #7
 8004e56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0307 	bic.w	r3, r3, #7
 8004e5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <prvHeapInit+0xac>)
 8004e68:	4413      	add	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e70:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <prvHeapInit+0xb0>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e76:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <prvHeapInit+0xb0>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	4413      	add	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e84:	2208      	movs	r2, #8
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0307 	bic.w	r3, r3, #7
 8004e92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4a15      	ldr	r2, [pc, #84]	; (8004eec <prvHeapInit+0xb4>)
 8004e98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e9a:	4b14      	ldr	r3, [pc, #80]	; (8004eec <prvHeapInit+0xb4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ea2:	4b12      	ldr	r3, [pc, #72]	; (8004eec <prvHeapInit+0xb4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	1ad2      	subs	r2, r2, r3
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <prvHeapInit+0xb4>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4a0a      	ldr	r2, [pc, #40]	; (8004ef0 <prvHeapInit+0xb8>)
 8004ec6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4a09      	ldr	r2, [pc, #36]	; (8004ef4 <prvHeapInit+0xbc>)
 8004ece:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ed0:	4b09      	ldr	r3, [pc, #36]	; (8004ef8 <prvHeapInit+0xc0>)
 8004ed2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ed6:	601a      	str	r2, [r3, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000f20 	.word	0x20000f20
 8004ee8:	20001b20 	.word	0x20001b20
 8004eec:	20001b28 	.word	0x20001b28
 8004ef0:	20001b30 	.word	0x20001b30
 8004ef4:	20001b2c 	.word	0x20001b2c
 8004ef8:	20001b34 	.word	0x20001b34

08004efc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f04:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <prvInsertBlockIntoFreeList+0xa8>)
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	e002      	b.n	8004f10 <prvInsertBlockIntoFreeList+0x14>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d8f7      	bhi.n	8004f0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	4413      	add	r3, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d108      	bne.n	8004f3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	441a      	add	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	441a      	add	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d118      	bne.n	8004f84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <prvInsertBlockIntoFreeList+0xac>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d00d      	beq.n	8004f7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	441a      	add	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	e008      	b.n	8004f8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <prvInsertBlockIntoFreeList+0xac>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e003      	b.n	8004f8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d002      	beq.n	8004f9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr
 8004fa4:	20001b20 	.word	0x20001b20
 8004fa8:	20001b28 	.word	0x20001b28

08004fac <__errno>:
 8004fac:	4b01      	ldr	r3, [pc, #4]	; (8004fb4 <__errno+0x8>)
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000018 	.word	0x20000018

08004fb8 <std>:
 8004fb8:	2300      	movs	r3, #0
 8004fba:	b510      	push	{r4, lr}
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8004fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fc6:	6083      	str	r3, [r0, #8]
 8004fc8:	8181      	strh	r1, [r0, #12]
 8004fca:	6643      	str	r3, [r0, #100]	; 0x64
 8004fcc:	81c2      	strh	r2, [r0, #14]
 8004fce:	6183      	str	r3, [r0, #24]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	305c      	adds	r0, #92	; 0x5c
 8004fd6:	f000 f91a 	bl	800520e <memset>
 8004fda:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <std+0x38>)
 8004fdc:	6224      	str	r4, [r4, #32]
 8004fde:	6263      	str	r3, [r4, #36]	; 0x24
 8004fe0:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <std+0x3c>)
 8004fe2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fe4:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <std+0x40>)
 8004fe6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <std+0x44>)
 8004fea:	6323      	str	r3, [r4, #48]	; 0x30
 8004fec:	bd10      	pop	{r4, pc}
 8004fee:	bf00      	nop
 8004ff0:	08005559 	.word	0x08005559
 8004ff4:	0800557b 	.word	0x0800557b
 8004ff8:	080055b3 	.word	0x080055b3
 8004ffc:	080055d7 	.word	0x080055d7

08005000 <_cleanup_r>:
 8005000:	4901      	ldr	r1, [pc, #4]	; (8005008 <_cleanup_r+0x8>)
 8005002:	f000 b8af 	b.w	8005164 <_fwalk_reent>
 8005006:	bf00      	nop
 8005008:	080058a9 	.word	0x080058a9

0800500c <__sfmoreglue>:
 800500c:	2268      	movs	r2, #104	; 0x68
 800500e:	b570      	push	{r4, r5, r6, lr}
 8005010:	1e4d      	subs	r5, r1, #1
 8005012:	4355      	muls	r5, r2
 8005014:	460e      	mov	r6, r1
 8005016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800501a:	f000 f921 	bl	8005260 <_malloc_r>
 800501e:	4604      	mov	r4, r0
 8005020:	b140      	cbz	r0, 8005034 <__sfmoreglue+0x28>
 8005022:	2100      	movs	r1, #0
 8005024:	e9c0 1600 	strd	r1, r6, [r0]
 8005028:	300c      	adds	r0, #12
 800502a:	60a0      	str	r0, [r4, #8]
 800502c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005030:	f000 f8ed 	bl	800520e <memset>
 8005034:	4620      	mov	r0, r4
 8005036:	bd70      	pop	{r4, r5, r6, pc}

08005038 <__sfp_lock_acquire>:
 8005038:	4801      	ldr	r0, [pc, #4]	; (8005040 <__sfp_lock_acquire+0x8>)
 800503a:	f000 b8d8 	b.w	80051ee <__retarget_lock_acquire_recursive>
 800503e:	bf00      	nop
 8005040:	20001b39 	.word	0x20001b39

08005044 <__sfp_lock_release>:
 8005044:	4801      	ldr	r0, [pc, #4]	; (800504c <__sfp_lock_release+0x8>)
 8005046:	f000 b8d3 	b.w	80051f0 <__retarget_lock_release_recursive>
 800504a:	bf00      	nop
 800504c:	20001b39 	.word	0x20001b39

08005050 <__sinit_lock_acquire>:
 8005050:	4801      	ldr	r0, [pc, #4]	; (8005058 <__sinit_lock_acquire+0x8>)
 8005052:	f000 b8cc 	b.w	80051ee <__retarget_lock_acquire_recursive>
 8005056:	bf00      	nop
 8005058:	20001b3a 	.word	0x20001b3a

0800505c <__sinit_lock_release>:
 800505c:	4801      	ldr	r0, [pc, #4]	; (8005064 <__sinit_lock_release+0x8>)
 800505e:	f000 b8c7 	b.w	80051f0 <__retarget_lock_release_recursive>
 8005062:	bf00      	nop
 8005064:	20001b3a 	.word	0x20001b3a

08005068 <__sinit>:
 8005068:	b510      	push	{r4, lr}
 800506a:	4604      	mov	r4, r0
 800506c:	f7ff fff0 	bl	8005050 <__sinit_lock_acquire>
 8005070:	69a3      	ldr	r3, [r4, #24]
 8005072:	b11b      	cbz	r3, 800507c <__sinit+0x14>
 8005074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005078:	f7ff bff0 	b.w	800505c <__sinit_lock_release>
 800507c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005080:	6523      	str	r3, [r4, #80]	; 0x50
 8005082:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <__sinit+0x68>)
 8005084:	4a13      	ldr	r2, [pc, #76]	; (80050d4 <__sinit+0x6c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	62a2      	str	r2, [r4, #40]	; 0x28
 800508a:	42a3      	cmp	r3, r4
 800508c:	bf08      	it	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	4620      	mov	r0, r4
 8005092:	bf08      	it	eq
 8005094:	61a3      	streq	r3, [r4, #24]
 8005096:	f000 f81f 	bl	80050d8 <__sfp>
 800509a:	6060      	str	r0, [r4, #4]
 800509c:	4620      	mov	r0, r4
 800509e:	f000 f81b 	bl	80050d8 <__sfp>
 80050a2:	60a0      	str	r0, [r4, #8]
 80050a4:	4620      	mov	r0, r4
 80050a6:	f000 f817 	bl	80050d8 <__sfp>
 80050aa:	2200      	movs	r2, #0
 80050ac:	2104      	movs	r1, #4
 80050ae:	60e0      	str	r0, [r4, #12]
 80050b0:	6860      	ldr	r0, [r4, #4]
 80050b2:	f7ff ff81 	bl	8004fb8 <std>
 80050b6:	2201      	movs	r2, #1
 80050b8:	2109      	movs	r1, #9
 80050ba:	68a0      	ldr	r0, [r4, #8]
 80050bc:	f7ff ff7c 	bl	8004fb8 <std>
 80050c0:	2202      	movs	r2, #2
 80050c2:	2112      	movs	r1, #18
 80050c4:	68e0      	ldr	r0, [r4, #12]
 80050c6:	f7ff ff77 	bl	8004fb8 <std>
 80050ca:	2301      	movs	r3, #1
 80050cc:	61a3      	str	r3, [r4, #24]
 80050ce:	e7d1      	b.n	8005074 <__sinit+0xc>
 80050d0:	080064e8 	.word	0x080064e8
 80050d4:	08005001 	.word	0x08005001

080050d8 <__sfp>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	4607      	mov	r7, r0
 80050dc:	f7ff ffac 	bl	8005038 <__sfp_lock_acquire>
 80050e0:	4b1e      	ldr	r3, [pc, #120]	; (800515c <__sfp+0x84>)
 80050e2:	681e      	ldr	r6, [r3, #0]
 80050e4:	69b3      	ldr	r3, [r6, #24]
 80050e6:	b913      	cbnz	r3, 80050ee <__sfp+0x16>
 80050e8:	4630      	mov	r0, r6
 80050ea:	f7ff ffbd 	bl	8005068 <__sinit>
 80050ee:	3648      	adds	r6, #72	; 0x48
 80050f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	d503      	bpl.n	8005100 <__sfp+0x28>
 80050f8:	6833      	ldr	r3, [r6, #0]
 80050fa:	b30b      	cbz	r3, 8005140 <__sfp+0x68>
 80050fc:	6836      	ldr	r6, [r6, #0]
 80050fe:	e7f7      	b.n	80050f0 <__sfp+0x18>
 8005100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005104:	b9d5      	cbnz	r5, 800513c <__sfp+0x64>
 8005106:	4b16      	ldr	r3, [pc, #88]	; (8005160 <__sfp+0x88>)
 8005108:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800510c:	60e3      	str	r3, [r4, #12]
 800510e:	6665      	str	r5, [r4, #100]	; 0x64
 8005110:	f000 f86c 	bl	80051ec <__retarget_lock_init_recursive>
 8005114:	f7ff ff96 	bl	8005044 <__sfp_lock_release>
 8005118:	2208      	movs	r2, #8
 800511a:	4629      	mov	r1, r5
 800511c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005120:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005124:	6025      	str	r5, [r4, #0]
 8005126:	61a5      	str	r5, [r4, #24]
 8005128:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800512c:	f000 f86f 	bl	800520e <memset>
 8005130:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005134:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005138:	4620      	mov	r0, r4
 800513a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800513c:	3468      	adds	r4, #104	; 0x68
 800513e:	e7d9      	b.n	80050f4 <__sfp+0x1c>
 8005140:	2104      	movs	r1, #4
 8005142:	4638      	mov	r0, r7
 8005144:	f7ff ff62 	bl	800500c <__sfmoreglue>
 8005148:	4604      	mov	r4, r0
 800514a:	6030      	str	r0, [r6, #0]
 800514c:	2800      	cmp	r0, #0
 800514e:	d1d5      	bne.n	80050fc <__sfp+0x24>
 8005150:	f7ff ff78 	bl	8005044 <__sfp_lock_release>
 8005154:	230c      	movs	r3, #12
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	e7ee      	b.n	8005138 <__sfp+0x60>
 800515a:	bf00      	nop
 800515c:	080064e8 	.word	0x080064e8
 8005160:	ffff0001 	.word	0xffff0001

08005164 <_fwalk_reent>:
 8005164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005168:	4606      	mov	r6, r0
 800516a:	4688      	mov	r8, r1
 800516c:	2700      	movs	r7, #0
 800516e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005172:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005176:	f1b9 0901 	subs.w	r9, r9, #1
 800517a:	d505      	bpl.n	8005188 <_fwalk_reent+0x24>
 800517c:	6824      	ldr	r4, [r4, #0]
 800517e:	2c00      	cmp	r4, #0
 8005180:	d1f7      	bne.n	8005172 <_fwalk_reent+0xe>
 8005182:	4638      	mov	r0, r7
 8005184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005188:	89ab      	ldrh	r3, [r5, #12]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d907      	bls.n	800519e <_fwalk_reent+0x3a>
 800518e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005192:	3301      	adds	r3, #1
 8005194:	d003      	beq.n	800519e <_fwalk_reent+0x3a>
 8005196:	4629      	mov	r1, r5
 8005198:	4630      	mov	r0, r6
 800519a:	47c0      	blx	r8
 800519c:	4307      	orrs	r7, r0
 800519e:	3568      	adds	r5, #104	; 0x68
 80051a0:	e7e9      	b.n	8005176 <_fwalk_reent+0x12>
	...

080051a4 <__libc_init_array>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	2600      	movs	r6, #0
 80051a8:	4d0c      	ldr	r5, [pc, #48]	; (80051dc <__libc_init_array+0x38>)
 80051aa:	4c0d      	ldr	r4, [pc, #52]	; (80051e0 <__libc_init_array+0x3c>)
 80051ac:	1b64      	subs	r4, r4, r5
 80051ae:	10a4      	asrs	r4, r4, #2
 80051b0:	42a6      	cmp	r6, r4
 80051b2:	d109      	bne.n	80051c8 <__libc_init_array+0x24>
 80051b4:	f000 ffb0 	bl	8006118 <_init>
 80051b8:	2600      	movs	r6, #0
 80051ba:	4d0a      	ldr	r5, [pc, #40]	; (80051e4 <__libc_init_array+0x40>)
 80051bc:	4c0a      	ldr	r4, [pc, #40]	; (80051e8 <__libc_init_array+0x44>)
 80051be:	1b64      	subs	r4, r4, r5
 80051c0:	10a4      	asrs	r4, r4, #2
 80051c2:	42a6      	cmp	r6, r4
 80051c4:	d105      	bne.n	80051d2 <__libc_init_array+0x2e>
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051cc:	4798      	blx	r3
 80051ce:	3601      	adds	r6, #1
 80051d0:	e7ee      	b.n	80051b0 <__libc_init_array+0xc>
 80051d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d6:	4798      	blx	r3
 80051d8:	3601      	adds	r6, #1
 80051da:	e7f2      	b.n	80051c2 <__libc_init_array+0x1e>
 80051dc:	08006520 	.word	0x08006520
 80051e0:	08006520 	.word	0x08006520
 80051e4:	08006520 	.word	0x08006520
 80051e8:	08006524 	.word	0x08006524

080051ec <__retarget_lock_init_recursive>:
 80051ec:	4770      	bx	lr

080051ee <__retarget_lock_acquire_recursive>:
 80051ee:	4770      	bx	lr

080051f0 <__retarget_lock_release_recursive>:
 80051f0:	4770      	bx	lr

080051f2 <memcpy>:
 80051f2:	440a      	add	r2, r1
 80051f4:	4291      	cmp	r1, r2
 80051f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80051fa:	d100      	bne.n	80051fe <memcpy+0xc>
 80051fc:	4770      	bx	lr
 80051fe:	b510      	push	{r4, lr}
 8005200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005204:	4291      	cmp	r1, r2
 8005206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800520a:	d1f9      	bne.n	8005200 <memcpy+0xe>
 800520c:	bd10      	pop	{r4, pc}

0800520e <memset>:
 800520e:	4603      	mov	r3, r0
 8005210:	4402      	add	r2, r0
 8005212:	4293      	cmp	r3, r2
 8005214:	d100      	bne.n	8005218 <memset+0xa>
 8005216:	4770      	bx	lr
 8005218:	f803 1b01 	strb.w	r1, [r3], #1
 800521c:	e7f9      	b.n	8005212 <memset+0x4>
	...

08005220 <sbrk_aligned>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	4e0e      	ldr	r6, [pc, #56]	; (800525c <sbrk_aligned+0x3c>)
 8005224:	460c      	mov	r4, r1
 8005226:	6831      	ldr	r1, [r6, #0]
 8005228:	4605      	mov	r5, r0
 800522a:	b911      	cbnz	r1, 8005232 <sbrk_aligned+0x12>
 800522c:	f000 f984 	bl	8005538 <_sbrk_r>
 8005230:	6030      	str	r0, [r6, #0]
 8005232:	4621      	mov	r1, r4
 8005234:	4628      	mov	r0, r5
 8005236:	f000 f97f 	bl	8005538 <_sbrk_r>
 800523a:	1c43      	adds	r3, r0, #1
 800523c:	d00a      	beq.n	8005254 <sbrk_aligned+0x34>
 800523e:	1cc4      	adds	r4, r0, #3
 8005240:	f024 0403 	bic.w	r4, r4, #3
 8005244:	42a0      	cmp	r0, r4
 8005246:	d007      	beq.n	8005258 <sbrk_aligned+0x38>
 8005248:	1a21      	subs	r1, r4, r0
 800524a:	4628      	mov	r0, r5
 800524c:	f000 f974 	bl	8005538 <_sbrk_r>
 8005250:	3001      	adds	r0, #1
 8005252:	d101      	bne.n	8005258 <sbrk_aligned+0x38>
 8005254:	f04f 34ff 	mov.w	r4, #4294967295
 8005258:	4620      	mov	r0, r4
 800525a:	bd70      	pop	{r4, r5, r6, pc}
 800525c:	20001b40 	.word	0x20001b40

08005260 <_malloc_r>:
 8005260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005264:	1ccd      	adds	r5, r1, #3
 8005266:	f025 0503 	bic.w	r5, r5, #3
 800526a:	3508      	adds	r5, #8
 800526c:	2d0c      	cmp	r5, #12
 800526e:	bf38      	it	cc
 8005270:	250c      	movcc	r5, #12
 8005272:	2d00      	cmp	r5, #0
 8005274:	4607      	mov	r7, r0
 8005276:	db01      	blt.n	800527c <_malloc_r+0x1c>
 8005278:	42a9      	cmp	r1, r5
 800527a:	d905      	bls.n	8005288 <_malloc_r+0x28>
 800527c:	230c      	movs	r3, #12
 800527e:	2600      	movs	r6, #0
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	4630      	mov	r0, r6
 8005284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005288:	4e2e      	ldr	r6, [pc, #184]	; (8005344 <_malloc_r+0xe4>)
 800528a:	f000 fbc1 	bl	8005a10 <__malloc_lock>
 800528e:	6833      	ldr	r3, [r6, #0]
 8005290:	461c      	mov	r4, r3
 8005292:	bb34      	cbnz	r4, 80052e2 <_malloc_r+0x82>
 8005294:	4629      	mov	r1, r5
 8005296:	4638      	mov	r0, r7
 8005298:	f7ff ffc2 	bl	8005220 <sbrk_aligned>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	4604      	mov	r4, r0
 80052a0:	d14d      	bne.n	800533e <_malloc_r+0xde>
 80052a2:	6834      	ldr	r4, [r6, #0]
 80052a4:	4626      	mov	r6, r4
 80052a6:	2e00      	cmp	r6, #0
 80052a8:	d140      	bne.n	800532c <_malloc_r+0xcc>
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	4631      	mov	r1, r6
 80052ae:	4638      	mov	r0, r7
 80052b0:	eb04 0803 	add.w	r8, r4, r3
 80052b4:	f000 f940 	bl	8005538 <_sbrk_r>
 80052b8:	4580      	cmp	r8, r0
 80052ba:	d13a      	bne.n	8005332 <_malloc_r+0xd2>
 80052bc:	6821      	ldr	r1, [r4, #0]
 80052be:	3503      	adds	r5, #3
 80052c0:	1a6d      	subs	r5, r5, r1
 80052c2:	f025 0503 	bic.w	r5, r5, #3
 80052c6:	3508      	adds	r5, #8
 80052c8:	2d0c      	cmp	r5, #12
 80052ca:	bf38      	it	cc
 80052cc:	250c      	movcc	r5, #12
 80052ce:	4638      	mov	r0, r7
 80052d0:	4629      	mov	r1, r5
 80052d2:	f7ff ffa5 	bl	8005220 <sbrk_aligned>
 80052d6:	3001      	adds	r0, #1
 80052d8:	d02b      	beq.n	8005332 <_malloc_r+0xd2>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	442b      	add	r3, r5
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	e00e      	b.n	8005300 <_malloc_r+0xa0>
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	1b52      	subs	r2, r2, r5
 80052e6:	d41e      	bmi.n	8005326 <_malloc_r+0xc6>
 80052e8:	2a0b      	cmp	r2, #11
 80052ea:	d916      	bls.n	800531a <_malloc_r+0xba>
 80052ec:	1961      	adds	r1, r4, r5
 80052ee:	42a3      	cmp	r3, r4
 80052f0:	6025      	str	r5, [r4, #0]
 80052f2:	bf18      	it	ne
 80052f4:	6059      	strne	r1, [r3, #4]
 80052f6:	6863      	ldr	r3, [r4, #4]
 80052f8:	bf08      	it	eq
 80052fa:	6031      	streq	r1, [r6, #0]
 80052fc:	5162      	str	r2, [r4, r5]
 80052fe:	604b      	str	r3, [r1, #4]
 8005300:	4638      	mov	r0, r7
 8005302:	f104 060b 	add.w	r6, r4, #11
 8005306:	f000 fb89 	bl	8005a1c <__malloc_unlock>
 800530a:	f026 0607 	bic.w	r6, r6, #7
 800530e:	1d23      	adds	r3, r4, #4
 8005310:	1af2      	subs	r2, r6, r3
 8005312:	d0b6      	beq.n	8005282 <_malloc_r+0x22>
 8005314:	1b9b      	subs	r3, r3, r6
 8005316:	50a3      	str	r3, [r4, r2]
 8005318:	e7b3      	b.n	8005282 <_malloc_r+0x22>
 800531a:	6862      	ldr	r2, [r4, #4]
 800531c:	42a3      	cmp	r3, r4
 800531e:	bf0c      	ite	eq
 8005320:	6032      	streq	r2, [r6, #0]
 8005322:	605a      	strne	r2, [r3, #4]
 8005324:	e7ec      	b.n	8005300 <_malloc_r+0xa0>
 8005326:	4623      	mov	r3, r4
 8005328:	6864      	ldr	r4, [r4, #4]
 800532a:	e7b2      	b.n	8005292 <_malloc_r+0x32>
 800532c:	4634      	mov	r4, r6
 800532e:	6876      	ldr	r6, [r6, #4]
 8005330:	e7b9      	b.n	80052a6 <_malloc_r+0x46>
 8005332:	230c      	movs	r3, #12
 8005334:	4638      	mov	r0, r7
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	f000 fb70 	bl	8005a1c <__malloc_unlock>
 800533c:	e7a1      	b.n	8005282 <_malloc_r+0x22>
 800533e:	6025      	str	r5, [r4, #0]
 8005340:	e7de      	b.n	8005300 <_malloc_r+0xa0>
 8005342:	bf00      	nop
 8005344:	20001b3c 	.word	0x20001b3c

08005348 <iprintf>:
 8005348:	b40f      	push	{r0, r1, r2, r3}
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <iprintf+0x2c>)
 800534c:	b513      	push	{r0, r1, r4, lr}
 800534e:	681c      	ldr	r4, [r3, #0]
 8005350:	b124      	cbz	r4, 800535c <iprintf+0x14>
 8005352:	69a3      	ldr	r3, [r4, #24]
 8005354:	b913      	cbnz	r3, 800535c <iprintf+0x14>
 8005356:	4620      	mov	r0, r4
 8005358:	f7ff fe86 	bl	8005068 <__sinit>
 800535c:	ab05      	add	r3, sp, #20
 800535e:	4620      	mov	r0, r4
 8005360:	9a04      	ldr	r2, [sp, #16]
 8005362:	68a1      	ldr	r1, [r4, #8]
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	f000 fbcf 	bl	8005b08 <_vfiprintf_r>
 800536a:	b002      	add	sp, #8
 800536c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005370:	b004      	add	sp, #16
 8005372:	4770      	bx	lr
 8005374:	20000018 	.word	0x20000018

08005378 <_puts_r>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	460e      	mov	r6, r1
 800537c:	4605      	mov	r5, r0
 800537e:	b118      	cbz	r0, 8005388 <_puts_r+0x10>
 8005380:	6983      	ldr	r3, [r0, #24]
 8005382:	b90b      	cbnz	r3, 8005388 <_puts_r+0x10>
 8005384:	f7ff fe70 	bl	8005068 <__sinit>
 8005388:	69ab      	ldr	r3, [r5, #24]
 800538a:	68ac      	ldr	r4, [r5, #8]
 800538c:	b913      	cbnz	r3, 8005394 <_puts_r+0x1c>
 800538e:	4628      	mov	r0, r5
 8005390:	f7ff fe6a 	bl	8005068 <__sinit>
 8005394:	4b2c      	ldr	r3, [pc, #176]	; (8005448 <_puts_r+0xd0>)
 8005396:	429c      	cmp	r4, r3
 8005398:	d120      	bne.n	80053dc <_puts_r+0x64>
 800539a:	686c      	ldr	r4, [r5, #4]
 800539c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800539e:	07db      	lsls	r3, r3, #31
 80053a0:	d405      	bmi.n	80053ae <_puts_r+0x36>
 80053a2:	89a3      	ldrh	r3, [r4, #12]
 80053a4:	0598      	lsls	r0, r3, #22
 80053a6:	d402      	bmi.n	80053ae <_puts_r+0x36>
 80053a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053aa:	f7ff ff20 	bl	80051ee <__retarget_lock_acquire_recursive>
 80053ae:	89a3      	ldrh	r3, [r4, #12]
 80053b0:	0719      	lsls	r1, r3, #28
 80053b2:	d51d      	bpl.n	80053f0 <_puts_r+0x78>
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	b1db      	cbz	r3, 80053f0 <_puts_r+0x78>
 80053b8:	3e01      	subs	r6, #1
 80053ba:	68a3      	ldr	r3, [r4, #8]
 80053bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053c0:	3b01      	subs	r3, #1
 80053c2:	60a3      	str	r3, [r4, #8]
 80053c4:	bb39      	cbnz	r1, 8005416 <_puts_r+0x9e>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	da38      	bge.n	800543c <_puts_r+0xc4>
 80053ca:	4622      	mov	r2, r4
 80053cc:	210a      	movs	r1, #10
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 f906 	bl	80055e0 <__swbuf_r>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d011      	beq.n	80053fc <_puts_r+0x84>
 80053d8:	250a      	movs	r5, #10
 80053da:	e011      	b.n	8005400 <_puts_r+0x88>
 80053dc:	4b1b      	ldr	r3, [pc, #108]	; (800544c <_puts_r+0xd4>)
 80053de:	429c      	cmp	r4, r3
 80053e0:	d101      	bne.n	80053e6 <_puts_r+0x6e>
 80053e2:	68ac      	ldr	r4, [r5, #8]
 80053e4:	e7da      	b.n	800539c <_puts_r+0x24>
 80053e6:	4b1a      	ldr	r3, [pc, #104]	; (8005450 <_puts_r+0xd8>)
 80053e8:	429c      	cmp	r4, r3
 80053ea:	bf08      	it	eq
 80053ec:	68ec      	ldreq	r4, [r5, #12]
 80053ee:	e7d5      	b.n	800539c <_puts_r+0x24>
 80053f0:	4621      	mov	r1, r4
 80053f2:	4628      	mov	r0, r5
 80053f4:	f000 f958 	bl	80056a8 <__swsetup_r>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d0dd      	beq.n	80053b8 <_puts_r+0x40>
 80053fc:	f04f 35ff 	mov.w	r5, #4294967295
 8005400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005402:	07da      	lsls	r2, r3, #31
 8005404:	d405      	bmi.n	8005412 <_puts_r+0x9a>
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	059b      	lsls	r3, r3, #22
 800540a:	d402      	bmi.n	8005412 <_puts_r+0x9a>
 800540c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800540e:	f7ff feef 	bl	80051f0 <__retarget_lock_release_recursive>
 8005412:	4628      	mov	r0, r5
 8005414:	bd70      	pop	{r4, r5, r6, pc}
 8005416:	2b00      	cmp	r3, #0
 8005418:	da04      	bge.n	8005424 <_puts_r+0xac>
 800541a:	69a2      	ldr	r2, [r4, #24]
 800541c:	429a      	cmp	r2, r3
 800541e:	dc06      	bgt.n	800542e <_puts_r+0xb6>
 8005420:	290a      	cmp	r1, #10
 8005422:	d004      	beq.n	800542e <_puts_r+0xb6>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	6022      	str	r2, [r4, #0]
 800542a:	7019      	strb	r1, [r3, #0]
 800542c:	e7c5      	b.n	80053ba <_puts_r+0x42>
 800542e:	4622      	mov	r2, r4
 8005430:	4628      	mov	r0, r5
 8005432:	f000 f8d5 	bl	80055e0 <__swbuf_r>
 8005436:	3001      	adds	r0, #1
 8005438:	d1bf      	bne.n	80053ba <_puts_r+0x42>
 800543a:	e7df      	b.n	80053fc <_puts_r+0x84>
 800543c:	250a      	movs	r5, #10
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	6022      	str	r2, [r4, #0]
 8005444:	701d      	strb	r5, [r3, #0]
 8005446:	e7db      	b.n	8005400 <_puts_r+0x88>
 8005448:	080064a8 	.word	0x080064a8
 800544c:	080064c8 	.word	0x080064c8
 8005450:	08006488 	.word	0x08006488

08005454 <puts>:
 8005454:	4b02      	ldr	r3, [pc, #8]	; (8005460 <puts+0xc>)
 8005456:	4601      	mov	r1, r0
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	f7ff bf8d 	b.w	8005378 <_puts_r>
 800545e:	bf00      	nop
 8005460:	20000018 	.word	0x20000018

08005464 <cleanup_glue>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	460c      	mov	r4, r1
 8005468:	6809      	ldr	r1, [r1, #0]
 800546a:	4605      	mov	r5, r0
 800546c:	b109      	cbz	r1, 8005472 <cleanup_glue+0xe>
 800546e:	f7ff fff9 	bl	8005464 <cleanup_glue>
 8005472:	4621      	mov	r1, r4
 8005474:	4628      	mov	r0, r5
 8005476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800547a:	f000 bad5 	b.w	8005a28 <_free_r>
	...

08005480 <_reclaim_reent>:
 8005480:	4b2c      	ldr	r3, [pc, #176]	; (8005534 <_reclaim_reent+0xb4>)
 8005482:	b570      	push	{r4, r5, r6, lr}
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4604      	mov	r4, r0
 8005488:	4283      	cmp	r3, r0
 800548a:	d051      	beq.n	8005530 <_reclaim_reent+0xb0>
 800548c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800548e:	b143      	cbz	r3, 80054a2 <_reclaim_reent+0x22>
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d14a      	bne.n	800552c <_reclaim_reent+0xac>
 8005496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005498:	6819      	ldr	r1, [r3, #0]
 800549a:	b111      	cbz	r1, 80054a2 <_reclaim_reent+0x22>
 800549c:	4620      	mov	r0, r4
 800549e:	f000 fac3 	bl	8005a28 <_free_r>
 80054a2:	6961      	ldr	r1, [r4, #20]
 80054a4:	b111      	cbz	r1, 80054ac <_reclaim_reent+0x2c>
 80054a6:	4620      	mov	r0, r4
 80054a8:	f000 fabe 	bl	8005a28 <_free_r>
 80054ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054ae:	b111      	cbz	r1, 80054b6 <_reclaim_reent+0x36>
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 fab9 	bl	8005a28 <_free_r>
 80054b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054b8:	b111      	cbz	r1, 80054c0 <_reclaim_reent+0x40>
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 fab4 	bl	8005a28 <_free_r>
 80054c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80054c2:	b111      	cbz	r1, 80054ca <_reclaim_reent+0x4a>
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 faaf 	bl	8005a28 <_free_r>
 80054ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80054cc:	b111      	cbz	r1, 80054d4 <_reclaim_reent+0x54>
 80054ce:	4620      	mov	r0, r4
 80054d0:	f000 faaa 	bl	8005a28 <_free_r>
 80054d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80054d6:	b111      	cbz	r1, 80054de <_reclaim_reent+0x5e>
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 faa5 	bl	8005a28 <_free_r>
 80054de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80054e0:	b111      	cbz	r1, 80054e8 <_reclaim_reent+0x68>
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 faa0 	bl	8005a28 <_free_r>
 80054e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ea:	b111      	cbz	r1, 80054f2 <_reclaim_reent+0x72>
 80054ec:	4620      	mov	r0, r4
 80054ee:	f000 fa9b 	bl	8005a28 <_free_r>
 80054f2:	69a3      	ldr	r3, [r4, #24]
 80054f4:	b1e3      	cbz	r3, 8005530 <_reclaim_reent+0xb0>
 80054f6:	4620      	mov	r0, r4
 80054f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054fa:	4798      	blx	r3
 80054fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80054fe:	b1b9      	cbz	r1, 8005530 <_reclaim_reent+0xb0>
 8005500:	4620      	mov	r0, r4
 8005502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005506:	f7ff bfad 	b.w	8005464 <cleanup_glue>
 800550a:	5949      	ldr	r1, [r1, r5]
 800550c:	b941      	cbnz	r1, 8005520 <_reclaim_reent+0xa0>
 800550e:	3504      	adds	r5, #4
 8005510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005512:	2d80      	cmp	r5, #128	; 0x80
 8005514:	68d9      	ldr	r1, [r3, #12]
 8005516:	d1f8      	bne.n	800550a <_reclaim_reent+0x8a>
 8005518:	4620      	mov	r0, r4
 800551a:	f000 fa85 	bl	8005a28 <_free_r>
 800551e:	e7ba      	b.n	8005496 <_reclaim_reent+0x16>
 8005520:	680e      	ldr	r6, [r1, #0]
 8005522:	4620      	mov	r0, r4
 8005524:	f000 fa80 	bl	8005a28 <_free_r>
 8005528:	4631      	mov	r1, r6
 800552a:	e7ef      	b.n	800550c <_reclaim_reent+0x8c>
 800552c:	2500      	movs	r5, #0
 800552e:	e7ef      	b.n	8005510 <_reclaim_reent+0x90>
 8005530:	bd70      	pop	{r4, r5, r6, pc}
 8005532:	bf00      	nop
 8005534:	20000018 	.word	0x20000018

08005538 <_sbrk_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	2300      	movs	r3, #0
 800553c:	4d05      	ldr	r5, [pc, #20]	; (8005554 <_sbrk_r+0x1c>)
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fb f912 	bl	800076c <_sbrk>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_sbrk_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_sbrk_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20001b44 	.word	0x20001b44

08005558 <__sread>:
 8005558:	b510      	push	{r4, lr}
 800555a:	460c      	mov	r4, r1
 800555c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005560:	f000 fd98 	bl	8006094 <_read_r>
 8005564:	2800      	cmp	r0, #0
 8005566:	bfab      	itete	ge
 8005568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800556a:	89a3      	ldrhlt	r3, [r4, #12]
 800556c:	181b      	addge	r3, r3, r0
 800556e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005572:	bfac      	ite	ge
 8005574:	6563      	strge	r3, [r4, #84]	; 0x54
 8005576:	81a3      	strhlt	r3, [r4, #12]
 8005578:	bd10      	pop	{r4, pc}

0800557a <__swrite>:
 800557a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800557e:	461f      	mov	r7, r3
 8005580:	898b      	ldrh	r3, [r1, #12]
 8005582:	4605      	mov	r5, r0
 8005584:	05db      	lsls	r3, r3, #23
 8005586:	460c      	mov	r4, r1
 8005588:	4616      	mov	r6, r2
 800558a:	d505      	bpl.n	8005598 <__swrite+0x1e>
 800558c:	2302      	movs	r3, #2
 800558e:	2200      	movs	r2, #0
 8005590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005594:	f000 f9c4 	bl	8005920 <_lseek_r>
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	4632      	mov	r2, r6
 800559c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055a0:	81a3      	strh	r3, [r4, #12]
 80055a2:	4628      	mov	r0, r5
 80055a4:	463b      	mov	r3, r7
 80055a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ae:	f000 b869 	b.w	8005684 <_write_r>

080055b2 <__sseek>:
 80055b2:	b510      	push	{r4, lr}
 80055b4:	460c      	mov	r4, r1
 80055b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ba:	f000 f9b1 	bl	8005920 <_lseek_r>
 80055be:	1c43      	adds	r3, r0, #1
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	bf15      	itete	ne
 80055c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80055c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055ce:	81a3      	strheq	r3, [r4, #12]
 80055d0:	bf18      	it	ne
 80055d2:	81a3      	strhne	r3, [r4, #12]
 80055d4:	bd10      	pop	{r4, pc}

080055d6 <__sclose>:
 80055d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055da:	f000 b8d3 	b.w	8005784 <_close_r>
	...

080055e0 <__swbuf_r>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	460e      	mov	r6, r1
 80055e4:	4614      	mov	r4, r2
 80055e6:	4605      	mov	r5, r0
 80055e8:	b118      	cbz	r0, 80055f2 <__swbuf_r+0x12>
 80055ea:	6983      	ldr	r3, [r0, #24]
 80055ec:	b90b      	cbnz	r3, 80055f2 <__swbuf_r+0x12>
 80055ee:	f7ff fd3b 	bl	8005068 <__sinit>
 80055f2:	4b21      	ldr	r3, [pc, #132]	; (8005678 <__swbuf_r+0x98>)
 80055f4:	429c      	cmp	r4, r3
 80055f6:	d12b      	bne.n	8005650 <__swbuf_r+0x70>
 80055f8:	686c      	ldr	r4, [r5, #4]
 80055fa:	69a3      	ldr	r3, [r4, #24]
 80055fc:	60a3      	str	r3, [r4, #8]
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	071a      	lsls	r2, r3, #28
 8005602:	d52f      	bpl.n	8005664 <__swbuf_r+0x84>
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	b36b      	cbz	r3, 8005664 <__swbuf_r+0x84>
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	6820      	ldr	r0, [r4, #0]
 800560c:	b2f6      	uxtb	r6, r6
 800560e:	1ac0      	subs	r0, r0, r3
 8005610:	6963      	ldr	r3, [r4, #20]
 8005612:	4637      	mov	r7, r6
 8005614:	4283      	cmp	r3, r0
 8005616:	dc04      	bgt.n	8005622 <__swbuf_r+0x42>
 8005618:	4621      	mov	r1, r4
 800561a:	4628      	mov	r0, r5
 800561c:	f000 f944 	bl	80058a8 <_fflush_r>
 8005620:	bb30      	cbnz	r0, 8005670 <__swbuf_r+0x90>
 8005622:	68a3      	ldr	r3, [r4, #8]
 8005624:	3001      	adds	r0, #1
 8005626:	3b01      	subs	r3, #1
 8005628:	60a3      	str	r3, [r4, #8]
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	6022      	str	r2, [r4, #0]
 8005630:	701e      	strb	r6, [r3, #0]
 8005632:	6963      	ldr	r3, [r4, #20]
 8005634:	4283      	cmp	r3, r0
 8005636:	d004      	beq.n	8005642 <__swbuf_r+0x62>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	07db      	lsls	r3, r3, #31
 800563c:	d506      	bpl.n	800564c <__swbuf_r+0x6c>
 800563e:	2e0a      	cmp	r6, #10
 8005640:	d104      	bne.n	800564c <__swbuf_r+0x6c>
 8005642:	4621      	mov	r1, r4
 8005644:	4628      	mov	r0, r5
 8005646:	f000 f92f 	bl	80058a8 <_fflush_r>
 800564a:	b988      	cbnz	r0, 8005670 <__swbuf_r+0x90>
 800564c:	4638      	mov	r0, r7
 800564e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <__swbuf_r+0x9c>)
 8005652:	429c      	cmp	r4, r3
 8005654:	d101      	bne.n	800565a <__swbuf_r+0x7a>
 8005656:	68ac      	ldr	r4, [r5, #8]
 8005658:	e7cf      	b.n	80055fa <__swbuf_r+0x1a>
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <__swbuf_r+0xa0>)
 800565c:	429c      	cmp	r4, r3
 800565e:	bf08      	it	eq
 8005660:	68ec      	ldreq	r4, [r5, #12]
 8005662:	e7ca      	b.n	80055fa <__swbuf_r+0x1a>
 8005664:	4621      	mov	r1, r4
 8005666:	4628      	mov	r0, r5
 8005668:	f000 f81e 	bl	80056a8 <__swsetup_r>
 800566c:	2800      	cmp	r0, #0
 800566e:	d0cb      	beq.n	8005608 <__swbuf_r+0x28>
 8005670:	f04f 37ff 	mov.w	r7, #4294967295
 8005674:	e7ea      	b.n	800564c <__swbuf_r+0x6c>
 8005676:	bf00      	nop
 8005678:	080064a8 	.word	0x080064a8
 800567c:	080064c8 	.word	0x080064c8
 8005680:	08006488 	.word	0x08006488

08005684 <_write_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4604      	mov	r4, r0
 8005688:	4608      	mov	r0, r1
 800568a:	4611      	mov	r1, r2
 800568c:	2200      	movs	r2, #0
 800568e:	4d05      	ldr	r5, [pc, #20]	; (80056a4 <_write_r+0x20>)
 8005690:	602a      	str	r2, [r5, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	f7fa fdb4 	bl	8000200 <_write>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_write_r+0x1e>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_write_r+0x1e>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	20001b44 	.word	0x20001b44

080056a8 <__swsetup_r>:
 80056a8:	4b32      	ldr	r3, [pc, #200]	; (8005774 <__swsetup_r+0xcc>)
 80056aa:	b570      	push	{r4, r5, r6, lr}
 80056ac:	681d      	ldr	r5, [r3, #0]
 80056ae:	4606      	mov	r6, r0
 80056b0:	460c      	mov	r4, r1
 80056b2:	b125      	cbz	r5, 80056be <__swsetup_r+0x16>
 80056b4:	69ab      	ldr	r3, [r5, #24]
 80056b6:	b913      	cbnz	r3, 80056be <__swsetup_r+0x16>
 80056b8:	4628      	mov	r0, r5
 80056ba:	f7ff fcd5 	bl	8005068 <__sinit>
 80056be:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <__swsetup_r+0xd0>)
 80056c0:	429c      	cmp	r4, r3
 80056c2:	d10f      	bne.n	80056e4 <__swsetup_r+0x3c>
 80056c4:	686c      	ldr	r4, [r5, #4]
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056cc:	0719      	lsls	r1, r3, #28
 80056ce:	d42c      	bmi.n	800572a <__swsetup_r+0x82>
 80056d0:	06dd      	lsls	r5, r3, #27
 80056d2:	d411      	bmi.n	80056f8 <__swsetup_r+0x50>
 80056d4:	2309      	movs	r3, #9
 80056d6:	6033      	str	r3, [r6, #0]
 80056d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	81a3      	strh	r3, [r4, #12]
 80056e2:	e03e      	b.n	8005762 <__swsetup_r+0xba>
 80056e4:	4b25      	ldr	r3, [pc, #148]	; (800577c <__swsetup_r+0xd4>)
 80056e6:	429c      	cmp	r4, r3
 80056e8:	d101      	bne.n	80056ee <__swsetup_r+0x46>
 80056ea:	68ac      	ldr	r4, [r5, #8]
 80056ec:	e7eb      	b.n	80056c6 <__swsetup_r+0x1e>
 80056ee:	4b24      	ldr	r3, [pc, #144]	; (8005780 <__swsetup_r+0xd8>)
 80056f0:	429c      	cmp	r4, r3
 80056f2:	bf08      	it	eq
 80056f4:	68ec      	ldreq	r4, [r5, #12]
 80056f6:	e7e6      	b.n	80056c6 <__swsetup_r+0x1e>
 80056f8:	0758      	lsls	r0, r3, #29
 80056fa:	d512      	bpl.n	8005722 <__swsetup_r+0x7a>
 80056fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056fe:	b141      	cbz	r1, 8005712 <__swsetup_r+0x6a>
 8005700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005704:	4299      	cmp	r1, r3
 8005706:	d002      	beq.n	800570e <__swsetup_r+0x66>
 8005708:	4630      	mov	r0, r6
 800570a:	f000 f98d 	bl	8005a28 <_free_r>
 800570e:	2300      	movs	r3, #0
 8005710:	6363      	str	r3, [r4, #52]	; 0x34
 8005712:	89a3      	ldrh	r3, [r4, #12]
 8005714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005718:	81a3      	strh	r3, [r4, #12]
 800571a:	2300      	movs	r3, #0
 800571c:	6063      	str	r3, [r4, #4]
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	f043 0308 	orr.w	r3, r3, #8
 8005728:	81a3      	strh	r3, [r4, #12]
 800572a:	6923      	ldr	r3, [r4, #16]
 800572c:	b94b      	cbnz	r3, 8005742 <__swsetup_r+0x9a>
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005738:	d003      	beq.n	8005742 <__swsetup_r+0x9a>
 800573a:	4621      	mov	r1, r4
 800573c:	4630      	mov	r0, r6
 800573e:	f000 f927 	bl	8005990 <__smakebuf_r>
 8005742:	89a0      	ldrh	r0, [r4, #12]
 8005744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005748:	f010 0301 	ands.w	r3, r0, #1
 800574c:	d00a      	beq.n	8005764 <__swsetup_r+0xbc>
 800574e:	2300      	movs	r3, #0
 8005750:	60a3      	str	r3, [r4, #8]
 8005752:	6963      	ldr	r3, [r4, #20]
 8005754:	425b      	negs	r3, r3
 8005756:	61a3      	str	r3, [r4, #24]
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	b943      	cbnz	r3, 800576e <__swsetup_r+0xc6>
 800575c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005760:	d1ba      	bne.n	80056d8 <__swsetup_r+0x30>
 8005762:	bd70      	pop	{r4, r5, r6, pc}
 8005764:	0781      	lsls	r1, r0, #30
 8005766:	bf58      	it	pl
 8005768:	6963      	ldrpl	r3, [r4, #20]
 800576a:	60a3      	str	r3, [r4, #8]
 800576c:	e7f4      	b.n	8005758 <__swsetup_r+0xb0>
 800576e:	2000      	movs	r0, #0
 8005770:	e7f7      	b.n	8005762 <__swsetup_r+0xba>
 8005772:	bf00      	nop
 8005774:	20000018 	.word	0x20000018
 8005778:	080064a8 	.word	0x080064a8
 800577c:	080064c8 	.word	0x080064c8
 8005780:	08006488 	.word	0x08006488

08005784 <_close_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	2300      	movs	r3, #0
 8005788:	4d05      	ldr	r5, [pc, #20]	; (80057a0 <_close_r+0x1c>)
 800578a:	4604      	mov	r4, r0
 800578c:	4608      	mov	r0, r1
 800578e:	602b      	str	r3, [r5, #0]
 8005790:	f7fa ffbb 	bl	800070a <_close>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_close_r+0x1a>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b103      	cbz	r3, 800579e <_close_r+0x1a>
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	20001b44 	.word	0x20001b44

080057a4 <__sflush_r>:
 80057a4:	898a      	ldrh	r2, [r1, #12]
 80057a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a8:	4605      	mov	r5, r0
 80057aa:	0710      	lsls	r0, r2, #28
 80057ac:	460c      	mov	r4, r1
 80057ae:	d457      	bmi.n	8005860 <__sflush_r+0xbc>
 80057b0:	684b      	ldr	r3, [r1, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	dc04      	bgt.n	80057c0 <__sflush_r+0x1c>
 80057b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	dc01      	bgt.n	80057c0 <__sflush_r+0x1c>
 80057bc:	2000      	movs	r0, #0
 80057be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	d0fa      	beq.n	80057bc <__sflush_r+0x18>
 80057c6:	2300      	movs	r3, #0
 80057c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057cc:	682f      	ldr	r7, [r5, #0]
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	d032      	beq.n	8005838 <__sflush_r+0x94>
 80057d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	075a      	lsls	r2, r3, #29
 80057d8:	d505      	bpl.n	80057e6 <__sflush_r+0x42>
 80057da:	6863      	ldr	r3, [r4, #4]
 80057dc:	1ac0      	subs	r0, r0, r3
 80057de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057e0:	b10b      	cbz	r3, 80057e6 <__sflush_r+0x42>
 80057e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057e4:	1ac0      	subs	r0, r0, r3
 80057e6:	2300      	movs	r3, #0
 80057e8:	4602      	mov	r2, r0
 80057ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ec:	4628      	mov	r0, r5
 80057ee:	6a21      	ldr	r1, [r4, #32]
 80057f0:	47b0      	blx	r6
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	d106      	bne.n	8005806 <__sflush_r+0x62>
 80057f8:	6829      	ldr	r1, [r5, #0]
 80057fa:	291d      	cmp	r1, #29
 80057fc:	d82c      	bhi.n	8005858 <__sflush_r+0xb4>
 80057fe:	4a29      	ldr	r2, [pc, #164]	; (80058a4 <__sflush_r+0x100>)
 8005800:	40ca      	lsrs	r2, r1
 8005802:	07d6      	lsls	r6, r2, #31
 8005804:	d528      	bpl.n	8005858 <__sflush_r+0xb4>
 8005806:	2200      	movs	r2, #0
 8005808:	6062      	str	r2, [r4, #4]
 800580a:	6922      	ldr	r2, [r4, #16]
 800580c:	04d9      	lsls	r1, r3, #19
 800580e:	6022      	str	r2, [r4, #0]
 8005810:	d504      	bpl.n	800581c <__sflush_r+0x78>
 8005812:	1c42      	adds	r2, r0, #1
 8005814:	d101      	bne.n	800581a <__sflush_r+0x76>
 8005816:	682b      	ldr	r3, [r5, #0]
 8005818:	b903      	cbnz	r3, 800581c <__sflush_r+0x78>
 800581a:	6560      	str	r0, [r4, #84]	; 0x54
 800581c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800581e:	602f      	str	r7, [r5, #0]
 8005820:	2900      	cmp	r1, #0
 8005822:	d0cb      	beq.n	80057bc <__sflush_r+0x18>
 8005824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005828:	4299      	cmp	r1, r3
 800582a:	d002      	beq.n	8005832 <__sflush_r+0x8e>
 800582c:	4628      	mov	r0, r5
 800582e:	f000 f8fb 	bl	8005a28 <_free_r>
 8005832:	2000      	movs	r0, #0
 8005834:	6360      	str	r0, [r4, #52]	; 0x34
 8005836:	e7c2      	b.n	80057be <__sflush_r+0x1a>
 8005838:	6a21      	ldr	r1, [r4, #32]
 800583a:	2301      	movs	r3, #1
 800583c:	4628      	mov	r0, r5
 800583e:	47b0      	blx	r6
 8005840:	1c41      	adds	r1, r0, #1
 8005842:	d1c7      	bne.n	80057d4 <__sflush_r+0x30>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0c4      	beq.n	80057d4 <__sflush_r+0x30>
 800584a:	2b1d      	cmp	r3, #29
 800584c:	d001      	beq.n	8005852 <__sflush_r+0xae>
 800584e:	2b16      	cmp	r3, #22
 8005850:	d101      	bne.n	8005856 <__sflush_r+0xb2>
 8005852:	602f      	str	r7, [r5, #0]
 8005854:	e7b2      	b.n	80057bc <__sflush_r+0x18>
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	e7ae      	b.n	80057be <__sflush_r+0x1a>
 8005860:	690f      	ldr	r7, [r1, #16]
 8005862:	2f00      	cmp	r7, #0
 8005864:	d0aa      	beq.n	80057bc <__sflush_r+0x18>
 8005866:	0793      	lsls	r3, r2, #30
 8005868:	bf18      	it	ne
 800586a:	2300      	movne	r3, #0
 800586c:	680e      	ldr	r6, [r1, #0]
 800586e:	bf08      	it	eq
 8005870:	694b      	ldreq	r3, [r1, #20]
 8005872:	1bf6      	subs	r6, r6, r7
 8005874:	600f      	str	r7, [r1, #0]
 8005876:	608b      	str	r3, [r1, #8]
 8005878:	2e00      	cmp	r6, #0
 800587a:	dd9f      	ble.n	80057bc <__sflush_r+0x18>
 800587c:	4633      	mov	r3, r6
 800587e:	463a      	mov	r2, r7
 8005880:	4628      	mov	r0, r5
 8005882:	6a21      	ldr	r1, [r4, #32]
 8005884:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005888:	47e0      	blx	ip
 800588a:	2800      	cmp	r0, #0
 800588c:	dc06      	bgt.n	800589c <__sflush_r+0xf8>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005898:	81a3      	strh	r3, [r4, #12]
 800589a:	e790      	b.n	80057be <__sflush_r+0x1a>
 800589c:	4407      	add	r7, r0
 800589e:	1a36      	subs	r6, r6, r0
 80058a0:	e7ea      	b.n	8005878 <__sflush_r+0xd4>
 80058a2:	bf00      	nop
 80058a4:	20400001 	.word	0x20400001

080058a8 <_fflush_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	690b      	ldr	r3, [r1, #16]
 80058ac:	4605      	mov	r5, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	b913      	cbnz	r3, 80058b8 <_fflush_r+0x10>
 80058b2:	2500      	movs	r5, #0
 80058b4:	4628      	mov	r0, r5
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	b118      	cbz	r0, 80058c2 <_fflush_r+0x1a>
 80058ba:	6983      	ldr	r3, [r0, #24]
 80058bc:	b90b      	cbnz	r3, 80058c2 <_fflush_r+0x1a>
 80058be:	f7ff fbd3 	bl	8005068 <__sinit>
 80058c2:	4b14      	ldr	r3, [pc, #80]	; (8005914 <_fflush_r+0x6c>)
 80058c4:	429c      	cmp	r4, r3
 80058c6:	d11b      	bne.n	8005900 <_fflush_r+0x58>
 80058c8:	686c      	ldr	r4, [r5, #4]
 80058ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0ef      	beq.n	80058b2 <_fflush_r+0xa>
 80058d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058d4:	07d0      	lsls	r0, r2, #31
 80058d6:	d404      	bmi.n	80058e2 <_fflush_r+0x3a>
 80058d8:	0599      	lsls	r1, r3, #22
 80058da:	d402      	bmi.n	80058e2 <_fflush_r+0x3a>
 80058dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058de:	f7ff fc86 	bl	80051ee <__retarget_lock_acquire_recursive>
 80058e2:	4628      	mov	r0, r5
 80058e4:	4621      	mov	r1, r4
 80058e6:	f7ff ff5d 	bl	80057a4 <__sflush_r>
 80058ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ec:	4605      	mov	r5, r0
 80058ee:	07da      	lsls	r2, r3, #31
 80058f0:	d4e0      	bmi.n	80058b4 <_fflush_r+0xc>
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	059b      	lsls	r3, r3, #22
 80058f6:	d4dd      	bmi.n	80058b4 <_fflush_r+0xc>
 80058f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058fa:	f7ff fc79 	bl	80051f0 <__retarget_lock_release_recursive>
 80058fe:	e7d9      	b.n	80058b4 <_fflush_r+0xc>
 8005900:	4b05      	ldr	r3, [pc, #20]	; (8005918 <_fflush_r+0x70>)
 8005902:	429c      	cmp	r4, r3
 8005904:	d101      	bne.n	800590a <_fflush_r+0x62>
 8005906:	68ac      	ldr	r4, [r5, #8]
 8005908:	e7df      	b.n	80058ca <_fflush_r+0x22>
 800590a:	4b04      	ldr	r3, [pc, #16]	; (800591c <_fflush_r+0x74>)
 800590c:	429c      	cmp	r4, r3
 800590e:	bf08      	it	eq
 8005910:	68ec      	ldreq	r4, [r5, #12]
 8005912:	e7da      	b.n	80058ca <_fflush_r+0x22>
 8005914:	080064a8 	.word	0x080064a8
 8005918:	080064c8 	.word	0x080064c8
 800591c:	08006488 	.word	0x08006488

08005920 <_lseek_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	4604      	mov	r4, r0
 8005924:	4608      	mov	r0, r1
 8005926:	4611      	mov	r1, r2
 8005928:	2200      	movs	r2, #0
 800592a:	4d05      	ldr	r5, [pc, #20]	; (8005940 <_lseek_r+0x20>)
 800592c:	602a      	str	r2, [r5, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	f7fa ff0f 	bl	8000752 <_lseek>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	d102      	bne.n	800593e <_lseek_r+0x1e>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	b103      	cbz	r3, 800593e <_lseek_r+0x1e>
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	20001b44 	.word	0x20001b44

08005944 <__swhatbuf_r>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	460e      	mov	r6, r1
 8005948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800594c:	4614      	mov	r4, r2
 800594e:	2900      	cmp	r1, #0
 8005950:	461d      	mov	r5, r3
 8005952:	b096      	sub	sp, #88	; 0x58
 8005954:	da08      	bge.n	8005968 <__swhatbuf_r+0x24>
 8005956:	2200      	movs	r2, #0
 8005958:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800595c:	602a      	str	r2, [r5, #0]
 800595e:	061a      	lsls	r2, r3, #24
 8005960:	d410      	bmi.n	8005984 <__swhatbuf_r+0x40>
 8005962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005966:	e00e      	b.n	8005986 <__swhatbuf_r+0x42>
 8005968:	466a      	mov	r2, sp
 800596a:	f000 fba5 	bl	80060b8 <_fstat_r>
 800596e:	2800      	cmp	r0, #0
 8005970:	dbf1      	blt.n	8005956 <__swhatbuf_r+0x12>
 8005972:	9a01      	ldr	r2, [sp, #4]
 8005974:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005978:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800597c:	425a      	negs	r2, r3
 800597e:	415a      	adcs	r2, r3
 8005980:	602a      	str	r2, [r5, #0]
 8005982:	e7ee      	b.n	8005962 <__swhatbuf_r+0x1e>
 8005984:	2340      	movs	r3, #64	; 0x40
 8005986:	2000      	movs	r0, #0
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	b016      	add	sp, #88	; 0x58
 800598c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005990 <__smakebuf_r>:
 8005990:	898b      	ldrh	r3, [r1, #12]
 8005992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005994:	079d      	lsls	r5, r3, #30
 8005996:	4606      	mov	r6, r0
 8005998:	460c      	mov	r4, r1
 800599a:	d507      	bpl.n	80059ac <__smakebuf_r+0x1c>
 800599c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	6123      	str	r3, [r4, #16]
 80059a4:	2301      	movs	r3, #1
 80059a6:	6163      	str	r3, [r4, #20]
 80059a8:	b002      	add	sp, #8
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	466a      	mov	r2, sp
 80059ae:	ab01      	add	r3, sp, #4
 80059b0:	f7ff ffc8 	bl	8005944 <__swhatbuf_r>
 80059b4:	9900      	ldr	r1, [sp, #0]
 80059b6:	4605      	mov	r5, r0
 80059b8:	4630      	mov	r0, r6
 80059ba:	f7ff fc51 	bl	8005260 <_malloc_r>
 80059be:	b948      	cbnz	r0, 80059d4 <__smakebuf_r+0x44>
 80059c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c4:	059a      	lsls	r2, r3, #22
 80059c6:	d4ef      	bmi.n	80059a8 <__smakebuf_r+0x18>
 80059c8:	f023 0303 	bic.w	r3, r3, #3
 80059cc:	f043 0302 	orr.w	r3, r3, #2
 80059d0:	81a3      	strh	r3, [r4, #12]
 80059d2:	e7e3      	b.n	800599c <__smakebuf_r+0xc>
 80059d4:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <__smakebuf_r+0x7c>)
 80059d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	6020      	str	r0, [r4, #0]
 80059dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e0:	81a3      	strh	r3, [r4, #12]
 80059e2:	9b00      	ldr	r3, [sp, #0]
 80059e4:	6120      	str	r0, [r4, #16]
 80059e6:	6163      	str	r3, [r4, #20]
 80059e8:	9b01      	ldr	r3, [sp, #4]
 80059ea:	b15b      	cbz	r3, 8005a04 <__smakebuf_r+0x74>
 80059ec:	4630      	mov	r0, r6
 80059ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f2:	f000 fb73 	bl	80060dc <_isatty_r>
 80059f6:	b128      	cbz	r0, 8005a04 <__smakebuf_r+0x74>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f023 0303 	bic.w	r3, r3, #3
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	89a0      	ldrh	r0, [r4, #12]
 8005a06:	4305      	orrs	r5, r0
 8005a08:	81a5      	strh	r5, [r4, #12]
 8005a0a:	e7cd      	b.n	80059a8 <__smakebuf_r+0x18>
 8005a0c:	08005001 	.word	0x08005001

08005a10 <__malloc_lock>:
 8005a10:	4801      	ldr	r0, [pc, #4]	; (8005a18 <__malloc_lock+0x8>)
 8005a12:	f7ff bbec 	b.w	80051ee <__retarget_lock_acquire_recursive>
 8005a16:	bf00      	nop
 8005a18:	20001b38 	.word	0x20001b38

08005a1c <__malloc_unlock>:
 8005a1c:	4801      	ldr	r0, [pc, #4]	; (8005a24 <__malloc_unlock+0x8>)
 8005a1e:	f7ff bbe7 	b.w	80051f0 <__retarget_lock_release_recursive>
 8005a22:	bf00      	nop
 8005a24:	20001b38 	.word	0x20001b38

08005a28 <_free_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	d040      	beq.n	8005ab2 <_free_r+0x8a>
 8005a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a34:	1f0c      	subs	r4, r1, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bfb8      	it	lt
 8005a3a:	18e4      	addlt	r4, r4, r3
 8005a3c:	f7ff ffe8 	bl	8005a10 <__malloc_lock>
 8005a40:	4a1c      	ldr	r2, [pc, #112]	; (8005ab4 <_free_r+0x8c>)
 8005a42:	6813      	ldr	r3, [r2, #0]
 8005a44:	b933      	cbnz	r3, 8005a54 <_free_r+0x2c>
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	6014      	str	r4, [r2, #0]
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a50:	f7ff bfe4 	b.w	8005a1c <__malloc_unlock>
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	d908      	bls.n	8005a6a <_free_r+0x42>
 8005a58:	6820      	ldr	r0, [r4, #0]
 8005a5a:	1821      	adds	r1, r4, r0
 8005a5c:	428b      	cmp	r3, r1
 8005a5e:	bf01      	itttt	eq
 8005a60:	6819      	ldreq	r1, [r3, #0]
 8005a62:	685b      	ldreq	r3, [r3, #4]
 8005a64:	1809      	addeq	r1, r1, r0
 8005a66:	6021      	streq	r1, [r4, #0]
 8005a68:	e7ed      	b.n	8005a46 <_free_r+0x1e>
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	b10b      	cbz	r3, 8005a74 <_free_r+0x4c>
 8005a70:	42a3      	cmp	r3, r4
 8005a72:	d9fa      	bls.n	8005a6a <_free_r+0x42>
 8005a74:	6811      	ldr	r1, [r2, #0]
 8005a76:	1850      	adds	r0, r2, r1
 8005a78:	42a0      	cmp	r0, r4
 8005a7a:	d10b      	bne.n	8005a94 <_free_r+0x6c>
 8005a7c:	6820      	ldr	r0, [r4, #0]
 8005a7e:	4401      	add	r1, r0
 8005a80:	1850      	adds	r0, r2, r1
 8005a82:	4283      	cmp	r3, r0
 8005a84:	6011      	str	r1, [r2, #0]
 8005a86:	d1e0      	bne.n	8005a4a <_free_r+0x22>
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4401      	add	r1, r0
 8005a8e:	6011      	str	r1, [r2, #0]
 8005a90:	6053      	str	r3, [r2, #4]
 8005a92:	e7da      	b.n	8005a4a <_free_r+0x22>
 8005a94:	d902      	bls.n	8005a9c <_free_r+0x74>
 8005a96:	230c      	movs	r3, #12
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	e7d6      	b.n	8005a4a <_free_r+0x22>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	1821      	adds	r1, r4, r0
 8005aa0:	428b      	cmp	r3, r1
 8005aa2:	bf01      	itttt	eq
 8005aa4:	6819      	ldreq	r1, [r3, #0]
 8005aa6:	685b      	ldreq	r3, [r3, #4]
 8005aa8:	1809      	addeq	r1, r1, r0
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	6063      	str	r3, [r4, #4]
 8005aae:	6054      	str	r4, [r2, #4]
 8005ab0:	e7cb      	b.n	8005a4a <_free_r+0x22>
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20001b3c 	.word	0x20001b3c

08005ab8 <__sfputc_r>:
 8005ab8:	6893      	ldr	r3, [r2, #8]
 8005aba:	b410      	push	{r4}
 8005abc:	3b01      	subs	r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	6093      	str	r3, [r2, #8]
 8005ac2:	da07      	bge.n	8005ad4 <__sfputc_r+0x1c>
 8005ac4:	6994      	ldr	r4, [r2, #24]
 8005ac6:	42a3      	cmp	r3, r4
 8005ac8:	db01      	blt.n	8005ace <__sfputc_r+0x16>
 8005aca:	290a      	cmp	r1, #10
 8005acc:	d102      	bne.n	8005ad4 <__sfputc_r+0x1c>
 8005ace:	bc10      	pop	{r4}
 8005ad0:	f7ff bd86 	b.w	80055e0 <__swbuf_r>
 8005ad4:	6813      	ldr	r3, [r2, #0]
 8005ad6:	1c58      	adds	r0, r3, #1
 8005ad8:	6010      	str	r0, [r2, #0]
 8005ada:	7019      	strb	r1, [r3, #0]
 8005adc:	4608      	mov	r0, r1
 8005ade:	bc10      	pop	{r4}
 8005ae0:	4770      	bx	lr

08005ae2 <__sfputs_r>:
 8005ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae4:	4606      	mov	r6, r0
 8005ae6:	460f      	mov	r7, r1
 8005ae8:	4614      	mov	r4, r2
 8005aea:	18d5      	adds	r5, r2, r3
 8005aec:	42ac      	cmp	r4, r5
 8005aee:	d101      	bne.n	8005af4 <__sfputs_r+0x12>
 8005af0:	2000      	movs	r0, #0
 8005af2:	e007      	b.n	8005b04 <__sfputs_r+0x22>
 8005af4:	463a      	mov	r2, r7
 8005af6:	4630      	mov	r0, r6
 8005af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afc:	f7ff ffdc 	bl	8005ab8 <__sfputc_r>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d1f3      	bne.n	8005aec <__sfputs_r+0xa>
 8005b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b08 <_vfiprintf_r>:
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	460d      	mov	r5, r1
 8005b0e:	4614      	mov	r4, r2
 8005b10:	4698      	mov	r8, r3
 8005b12:	4606      	mov	r6, r0
 8005b14:	b09d      	sub	sp, #116	; 0x74
 8005b16:	b118      	cbz	r0, 8005b20 <_vfiprintf_r+0x18>
 8005b18:	6983      	ldr	r3, [r0, #24]
 8005b1a:	b90b      	cbnz	r3, 8005b20 <_vfiprintf_r+0x18>
 8005b1c:	f7ff faa4 	bl	8005068 <__sinit>
 8005b20:	4b89      	ldr	r3, [pc, #548]	; (8005d48 <_vfiprintf_r+0x240>)
 8005b22:	429d      	cmp	r5, r3
 8005b24:	d11b      	bne.n	8005b5e <_vfiprintf_r+0x56>
 8005b26:	6875      	ldr	r5, [r6, #4]
 8005b28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b2a:	07d9      	lsls	r1, r3, #31
 8005b2c:	d405      	bmi.n	8005b3a <_vfiprintf_r+0x32>
 8005b2e:	89ab      	ldrh	r3, [r5, #12]
 8005b30:	059a      	lsls	r2, r3, #22
 8005b32:	d402      	bmi.n	8005b3a <_vfiprintf_r+0x32>
 8005b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b36:	f7ff fb5a 	bl	80051ee <__retarget_lock_acquire_recursive>
 8005b3a:	89ab      	ldrh	r3, [r5, #12]
 8005b3c:	071b      	lsls	r3, r3, #28
 8005b3e:	d501      	bpl.n	8005b44 <_vfiprintf_r+0x3c>
 8005b40:	692b      	ldr	r3, [r5, #16]
 8005b42:	b9eb      	cbnz	r3, 8005b80 <_vfiprintf_r+0x78>
 8005b44:	4629      	mov	r1, r5
 8005b46:	4630      	mov	r0, r6
 8005b48:	f7ff fdae 	bl	80056a8 <__swsetup_r>
 8005b4c:	b1c0      	cbz	r0, 8005b80 <_vfiprintf_r+0x78>
 8005b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b50:	07dc      	lsls	r4, r3, #31
 8005b52:	d50e      	bpl.n	8005b72 <_vfiprintf_r+0x6a>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	b01d      	add	sp, #116	; 0x74
 8005b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5e:	4b7b      	ldr	r3, [pc, #492]	; (8005d4c <_vfiprintf_r+0x244>)
 8005b60:	429d      	cmp	r5, r3
 8005b62:	d101      	bne.n	8005b68 <_vfiprintf_r+0x60>
 8005b64:	68b5      	ldr	r5, [r6, #8]
 8005b66:	e7df      	b.n	8005b28 <_vfiprintf_r+0x20>
 8005b68:	4b79      	ldr	r3, [pc, #484]	; (8005d50 <_vfiprintf_r+0x248>)
 8005b6a:	429d      	cmp	r5, r3
 8005b6c:	bf08      	it	eq
 8005b6e:	68f5      	ldreq	r5, [r6, #12]
 8005b70:	e7da      	b.n	8005b28 <_vfiprintf_r+0x20>
 8005b72:	89ab      	ldrh	r3, [r5, #12]
 8005b74:	0598      	lsls	r0, r3, #22
 8005b76:	d4ed      	bmi.n	8005b54 <_vfiprintf_r+0x4c>
 8005b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b7a:	f7ff fb39 	bl	80051f0 <__retarget_lock_release_recursive>
 8005b7e:	e7e9      	b.n	8005b54 <_vfiprintf_r+0x4c>
 8005b80:	2300      	movs	r3, #0
 8005b82:	9309      	str	r3, [sp, #36]	; 0x24
 8005b84:	2320      	movs	r3, #32
 8005b86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b8a:	2330      	movs	r3, #48	; 0x30
 8005b8c:	f04f 0901 	mov.w	r9, #1
 8005b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b94:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005d54 <_vfiprintf_r+0x24c>
 8005b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b9c:	4623      	mov	r3, r4
 8005b9e:	469a      	mov	sl, r3
 8005ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ba4:	b10a      	cbz	r2, 8005baa <_vfiprintf_r+0xa2>
 8005ba6:	2a25      	cmp	r2, #37	; 0x25
 8005ba8:	d1f9      	bne.n	8005b9e <_vfiprintf_r+0x96>
 8005baa:	ebba 0b04 	subs.w	fp, sl, r4
 8005bae:	d00b      	beq.n	8005bc8 <_vfiprintf_r+0xc0>
 8005bb0:	465b      	mov	r3, fp
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f7ff ff93 	bl	8005ae2 <__sfputs_r>
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f000 80aa 	beq.w	8005d16 <_vfiprintf_r+0x20e>
 8005bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc4:	445a      	add	r2, fp
 8005bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8005bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80a2 	beq.w	8005d16 <_vfiprintf_r+0x20e>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bdc:	f10a 0a01 	add.w	sl, sl, #1
 8005be0:	9304      	str	r3, [sp, #16]
 8005be2:	9307      	str	r3, [sp, #28]
 8005be4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005be8:	931a      	str	r3, [sp, #104]	; 0x68
 8005bea:	4654      	mov	r4, sl
 8005bec:	2205      	movs	r2, #5
 8005bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf2:	4858      	ldr	r0, [pc, #352]	; (8005d54 <_vfiprintf_r+0x24c>)
 8005bf4:	f000 fa82 	bl	80060fc <memchr>
 8005bf8:	9a04      	ldr	r2, [sp, #16]
 8005bfa:	b9d8      	cbnz	r0, 8005c34 <_vfiprintf_r+0x12c>
 8005bfc:	06d1      	lsls	r1, r2, #27
 8005bfe:	bf44      	itt	mi
 8005c00:	2320      	movmi	r3, #32
 8005c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c06:	0713      	lsls	r3, r2, #28
 8005c08:	bf44      	itt	mi
 8005c0a:	232b      	movmi	r3, #43	; 0x2b
 8005c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c10:	f89a 3000 	ldrb.w	r3, [sl]
 8005c14:	2b2a      	cmp	r3, #42	; 0x2a
 8005c16:	d015      	beq.n	8005c44 <_vfiprintf_r+0x13c>
 8005c18:	4654      	mov	r4, sl
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	f04f 0c0a 	mov.w	ip, #10
 8005c20:	9a07      	ldr	r2, [sp, #28]
 8005c22:	4621      	mov	r1, r4
 8005c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c28:	3b30      	subs	r3, #48	; 0x30
 8005c2a:	2b09      	cmp	r3, #9
 8005c2c:	d94e      	bls.n	8005ccc <_vfiprintf_r+0x1c4>
 8005c2e:	b1b0      	cbz	r0, 8005c5e <_vfiprintf_r+0x156>
 8005c30:	9207      	str	r2, [sp, #28]
 8005c32:	e014      	b.n	8005c5e <_vfiprintf_r+0x156>
 8005c34:	eba0 0308 	sub.w	r3, r0, r8
 8005c38:	fa09 f303 	lsl.w	r3, r9, r3
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	46a2      	mov	sl, r4
 8005c40:	9304      	str	r3, [sp, #16]
 8005c42:	e7d2      	b.n	8005bea <_vfiprintf_r+0xe2>
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	1d19      	adds	r1, r3, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	9103      	str	r1, [sp, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bfbb      	ittet	lt
 8005c50:	425b      	neglt	r3, r3
 8005c52:	f042 0202 	orrlt.w	r2, r2, #2
 8005c56:	9307      	strge	r3, [sp, #28]
 8005c58:	9307      	strlt	r3, [sp, #28]
 8005c5a:	bfb8      	it	lt
 8005c5c:	9204      	strlt	r2, [sp, #16]
 8005c5e:	7823      	ldrb	r3, [r4, #0]
 8005c60:	2b2e      	cmp	r3, #46	; 0x2e
 8005c62:	d10c      	bne.n	8005c7e <_vfiprintf_r+0x176>
 8005c64:	7863      	ldrb	r3, [r4, #1]
 8005c66:	2b2a      	cmp	r3, #42	; 0x2a
 8005c68:	d135      	bne.n	8005cd6 <_vfiprintf_r+0x1ce>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	3402      	adds	r4, #2
 8005c6e:	1d1a      	adds	r2, r3, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	9203      	str	r2, [sp, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bfb8      	it	lt
 8005c78:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c7c:	9305      	str	r3, [sp, #20]
 8005c7e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005d58 <_vfiprintf_r+0x250>
 8005c82:	2203      	movs	r2, #3
 8005c84:	4650      	mov	r0, sl
 8005c86:	7821      	ldrb	r1, [r4, #0]
 8005c88:	f000 fa38 	bl	80060fc <memchr>
 8005c8c:	b140      	cbz	r0, 8005ca0 <_vfiprintf_r+0x198>
 8005c8e:	2340      	movs	r3, #64	; 0x40
 8005c90:	eba0 000a 	sub.w	r0, r0, sl
 8005c94:	fa03 f000 	lsl.w	r0, r3, r0
 8005c98:	9b04      	ldr	r3, [sp, #16]
 8005c9a:	3401      	adds	r4, #1
 8005c9c:	4303      	orrs	r3, r0
 8005c9e:	9304      	str	r3, [sp, #16]
 8005ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca4:	2206      	movs	r2, #6
 8005ca6:	482d      	ldr	r0, [pc, #180]	; (8005d5c <_vfiprintf_r+0x254>)
 8005ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cac:	f000 fa26 	bl	80060fc <memchr>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d03f      	beq.n	8005d34 <_vfiprintf_r+0x22c>
 8005cb4:	4b2a      	ldr	r3, [pc, #168]	; (8005d60 <_vfiprintf_r+0x258>)
 8005cb6:	bb1b      	cbnz	r3, 8005d00 <_vfiprintf_r+0x1f8>
 8005cb8:	9b03      	ldr	r3, [sp, #12]
 8005cba:	3307      	adds	r3, #7
 8005cbc:	f023 0307 	bic.w	r3, r3, #7
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	9303      	str	r3, [sp, #12]
 8005cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc6:	443b      	add	r3, r7
 8005cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005cca:	e767      	b.n	8005b9c <_vfiprintf_r+0x94>
 8005ccc:	460c      	mov	r4, r1
 8005cce:	2001      	movs	r0, #1
 8005cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cd4:	e7a5      	b.n	8005c22 <_vfiprintf_r+0x11a>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f04f 0c0a 	mov.w	ip, #10
 8005cdc:	4619      	mov	r1, r3
 8005cde:	3401      	adds	r4, #1
 8005ce0:	9305      	str	r3, [sp, #20]
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ce8:	3a30      	subs	r2, #48	; 0x30
 8005cea:	2a09      	cmp	r2, #9
 8005cec:	d903      	bls.n	8005cf6 <_vfiprintf_r+0x1ee>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0c5      	beq.n	8005c7e <_vfiprintf_r+0x176>
 8005cf2:	9105      	str	r1, [sp, #20]
 8005cf4:	e7c3      	b.n	8005c7e <_vfiprintf_r+0x176>
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cfe:	e7f0      	b.n	8005ce2 <_vfiprintf_r+0x1da>
 8005d00:	ab03      	add	r3, sp, #12
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	462a      	mov	r2, r5
 8005d06:	4630      	mov	r0, r6
 8005d08:	4b16      	ldr	r3, [pc, #88]	; (8005d64 <_vfiprintf_r+0x25c>)
 8005d0a:	a904      	add	r1, sp, #16
 8005d0c:	f3af 8000 	nop.w
 8005d10:	4607      	mov	r7, r0
 8005d12:	1c78      	adds	r0, r7, #1
 8005d14:	d1d6      	bne.n	8005cc4 <_vfiprintf_r+0x1bc>
 8005d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d18:	07d9      	lsls	r1, r3, #31
 8005d1a:	d405      	bmi.n	8005d28 <_vfiprintf_r+0x220>
 8005d1c:	89ab      	ldrh	r3, [r5, #12]
 8005d1e:	059a      	lsls	r2, r3, #22
 8005d20:	d402      	bmi.n	8005d28 <_vfiprintf_r+0x220>
 8005d22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d24:	f7ff fa64 	bl	80051f0 <__retarget_lock_release_recursive>
 8005d28:	89ab      	ldrh	r3, [r5, #12]
 8005d2a:	065b      	lsls	r3, r3, #25
 8005d2c:	f53f af12 	bmi.w	8005b54 <_vfiprintf_r+0x4c>
 8005d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d32:	e711      	b.n	8005b58 <_vfiprintf_r+0x50>
 8005d34:	ab03      	add	r3, sp, #12
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	462a      	mov	r2, r5
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <_vfiprintf_r+0x25c>)
 8005d3e:	a904      	add	r1, sp, #16
 8005d40:	f000 f882 	bl	8005e48 <_printf_i>
 8005d44:	e7e4      	b.n	8005d10 <_vfiprintf_r+0x208>
 8005d46:	bf00      	nop
 8005d48:	080064a8 	.word	0x080064a8
 8005d4c:	080064c8 	.word	0x080064c8
 8005d50:	08006488 	.word	0x08006488
 8005d54:	080064ec 	.word	0x080064ec
 8005d58:	080064f2 	.word	0x080064f2
 8005d5c:	080064f6 	.word	0x080064f6
 8005d60:	00000000 	.word	0x00000000
 8005d64:	08005ae3 	.word	0x08005ae3

08005d68 <_printf_common>:
 8005d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	4699      	mov	r9, r3
 8005d70:	688a      	ldr	r2, [r1, #8]
 8005d72:	690b      	ldr	r3, [r1, #16]
 8005d74:	4607      	mov	r7, r0
 8005d76:	4293      	cmp	r3, r2
 8005d78:	bfb8      	it	lt
 8005d7a:	4613      	movlt	r3, r2
 8005d7c:	6033      	str	r3, [r6, #0]
 8005d7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d82:	460c      	mov	r4, r1
 8005d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d88:	b10a      	cbz	r2, 8005d8e <_printf_common+0x26>
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	6033      	str	r3, [r6, #0]
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	0699      	lsls	r1, r3, #26
 8005d92:	bf42      	ittt	mi
 8005d94:	6833      	ldrmi	r3, [r6, #0]
 8005d96:	3302      	addmi	r3, #2
 8005d98:	6033      	strmi	r3, [r6, #0]
 8005d9a:	6825      	ldr	r5, [r4, #0]
 8005d9c:	f015 0506 	ands.w	r5, r5, #6
 8005da0:	d106      	bne.n	8005db0 <_printf_common+0x48>
 8005da2:	f104 0a19 	add.w	sl, r4, #25
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	6832      	ldr	r2, [r6, #0]
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dc28      	bgt.n	8005e02 <_printf_common+0x9a>
 8005db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005db4:	1e13      	subs	r3, r2, #0
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	bf18      	it	ne
 8005dba:	2301      	movne	r3, #1
 8005dbc:	0692      	lsls	r2, r2, #26
 8005dbe:	d42d      	bmi.n	8005e1c <_printf_common+0xb4>
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dc8:	47c0      	blx	r8
 8005dca:	3001      	adds	r0, #1
 8005dcc:	d020      	beq.n	8005e10 <_printf_common+0xa8>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	68e5      	ldr	r5, [r4, #12]
 8005dd2:	f003 0306 	and.w	r3, r3, #6
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	bf18      	it	ne
 8005dda:	2500      	movne	r5, #0
 8005ddc:	6832      	ldr	r2, [r6, #0]
 8005dde:	f04f 0600 	mov.w	r6, #0
 8005de2:	68a3      	ldr	r3, [r4, #8]
 8005de4:	bf08      	it	eq
 8005de6:	1aad      	subeq	r5, r5, r2
 8005de8:	6922      	ldr	r2, [r4, #16]
 8005dea:	bf08      	it	eq
 8005dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df0:	4293      	cmp	r3, r2
 8005df2:	bfc4      	itt	gt
 8005df4:	1a9b      	subgt	r3, r3, r2
 8005df6:	18ed      	addgt	r5, r5, r3
 8005df8:	341a      	adds	r4, #26
 8005dfa:	42b5      	cmp	r5, r6
 8005dfc:	d11a      	bne.n	8005e34 <_printf_common+0xcc>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e008      	b.n	8005e14 <_printf_common+0xac>
 8005e02:	2301      	movs	r3, #1
 8005e04:	4652      	mov	r2, sl
 8005e06:	4649      	mov	r1, r9
 8005e08:	4638      	mov	r0, r7
 8005e0a:	47c0      	blx	r8
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d103      	bne.n	8005e18 <_printf_common+0xb0>
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295
 8005e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e18:	3501      	adds	r5, #1
 8005e1a:	e7c4      	b.n	8005da6 <_printf_common+0x3e>
 8005e1c:	2030      	movs	r0, #48	; 0x30
 8005e1e:	18e1      	adds	r1, r4, r3
 8005e20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e2a:	4422      	add	r2, r4
 8005e2c:	3302      	adds	r3, #2
 8005e2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e32:	e7c5      	b.n	8005dc0 <_printf_common+0x58>
 8005e34:	2301      	movs	r3, #1
 8005e36:	4622      	mov	r2, r4
 8005e38:	4649      	mov	r1, r9
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	47c0      	blx	r8
 8005e3e:	3001      	adds	r0, #1
 8005e40:	d0e6      	beq.n	8005e10 <_printf_common+0xa8>
 8005e42:	3601      	adds	r6, #1
 8005e44:	e7d9      	b.n	8005dfa <_printf_common+0x92>
	...

08005e48 <_printf_i>:
 8005e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	7e0f      	ldrb	r7, [r1, #24]
 8005e4e:	4691      	mov	r9, r2
 8005e50:	2f78      	cmp	r7, #120	; 0x78
 8005e52:	4680      	mov	r8, r0
 8005e54:	460c      	mov	r4, r1
 8005e56:	469a      	mov	sl, r3
 8005e58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e5e:	d807      	bhi.n	8005e70 <_printf_i+0x28>
 8005e60:	2f62      	cmp	r7, #98	; 0x62
 8005e62:	d80a      	bhi.n	8005e7a <_printf_i+0x32>
 8005e64:	2f00      	cmp	r7, #0
 8005e66:	f000 80d9 	beq.w	800601c <_printf_i+0x1d4>
 8005e6a:	2f58      	cmp	r7, #88	; 0x58
 8005e6c:	f000 80a4 	beq.w	8005fb8 <_printf_i+0x170>
 8005e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e78:	e03a      	b.n	8005ef0 <_printf_i+0xa8>
 8005e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e7e:	2b15      	cmp	r3, #21
 8005e80:	d8f6      	bhi.n	8005e70 <_printf_i+0x28>
 8005e82:	a101      	add	r1, pc, #4	; (adr r1, 8005e88 <_printf_i+0x40>)
 8005e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e88:	08005ee1 	.word	0x08005ee1
 8005e8c:	08005ef5 	.word	0x08005ef5
 8005e90:	08005e71 	.word	0x08005e71
 8005e94:	08005e71 	.word	0x08005e71
 8005e98:	08005e71 	.word	0x08005e71
 8005e9c:	08005e71 	.word	0x08005e71
 8005ea0:	08005ef5 	.word	0x08005ef5
 8005ea4:	08005e71 	.word	0x08005e71
 8005ea8:	08005e71 	.word	0x08005e71
 8005eac:	08005e71 	.word	0x08005e71
 8005eb0:	08005e71 	.word	0x08005e71
 8005eb4:	08006003 	.word	0x08006003
 8005eb8:	08005f25 	.word	0x08005f25
 8005ebc:	08005fe5 	.word	0x08005fe5
 8005ec0:	08005e71 	.word	0x08005e71
 8005ec4:	08005e71 	.word	0x08005e71
 8005ec8:	08006025 	.word	0x08006025
 8005ecc:	08005e71 	.word	0x08005e71
 8005ed0:	08005f25 	.word	0x08005f25
 8005ed4:	08005e71 	.word	0x08005e71
 8005ed8:	08005e71 	.word	0x08005e71
 8005edc:	08005fed 	.word	0x08005fed
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	1d1a      	adds	r2, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	602a      	str	r2, [r5, #0]
 8005ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e0a4      	b.n	800603e <_printf_i+0x1f6>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	6829      	ldr	r1, [r5, #0]
 8005ef8:	0606      	lsls	r6, r0, #24
 8005efa:	f101 0304 	add.w	r3, r1, #4
 8005efe:	d50a      	bpl.n	8005f16 <_printf_i+0xce>
 8005f00:	680e      	ldr	r6, [r1, #0]
 8005f02:	602b      	str	r3, [r5, #0]
 8005f04:	2e00      	cmp	r6, #0
 8005f06:	da03      	bge.n	8005f10 <_printf_i+0xc8>
 8005f08:	232d      	movs	r3, #45	; 0x2d
 8005f0a:	4276      	negs	r6, r6
 8005f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f10:	230a      	movs	r3, #10
 8005f12:	485e      	ldr	r0, [pc, #376]	; (800608c <_printf_i+0x244>)
 8005f14:	e019      	b.n	8005f4a <_printf_i+0x102>
 8005f16:	680e      	ldr	r6, [r1, #0]
 8005f18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f1c:	602b      	str	r3, [r5, #0]
 8005f1e:	bf18      	it	ne
 8005f20:	b236      	sxthne	r6, r6
 8005f22:	e7ef      	b.n	8005f04 <_printf_i+0xbc>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	6820      	ldr	r0, [r4, #0]
 8005f28:	1d19      	adds	r1, r3, #4
 8005f2a:	6029      	str	r1, [r5, #0]
 8005f2c:	0601      	lsls	r1, r0, #24
 8005f2e:	d501      	bpl.n	8005f34 <_printf_i+0xec>
 8005f30:	681e      	ldr	r6, [r3, #0]
 8005f32:	e002      	b.n	8005f3a <_printf_i+0xf2>
 8005f34:	0646      	lsls	r6, r0, #25
 8005f36:	d5fb      	bpl.n	8005f30 <_printf_i+0xe8>
 8005f38:	881e      	ldrh	r6, [r3, #0]
 8005f3a:	2f6f      	cmp	r7, #111	; 0x6f
 8005f3c:	bf0c      	ite	eq
 8005f3e:	2308      	moveq	r3, #8
 8005f40:	230a      	movne	r3, #10
 8005f42:	4852      	ldr	r0, [pc, #328]	; (800608c <_printf_i+0x244>)
 8005f44:	2100      	movs	r1, #0
 8005f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f4a:	6865      	ldr	r5, [r4, #4]
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	bfa8      	it	ge
 8005f50:	6821      	ldrge	r1, [r4, #0]
 8005f52:	60a5      	str	r5, [r4, #8]
 8005f54:	bfa4      	itt	ge
 8005f56:	f021 0104 	bicge.w	r1, r1, #4
 8005f5a:	6021      	strge	r1, [r4, #0]
 8005f5c:	b90e      	cbnz	r6, 8005f62 <_printf_i+0x11a>
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	d04d      	beq.n	8005ffe <_printf_i+0x1b6>
 8005f62:	4615      	mov	r5, r2
 8005f64:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f68:	fb03 6711 	mls	r7, r3, r1, r6
 8005f6c:	5dc7      	ldrb	r7, [r0, r7]
 8005f6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f72:	4637      	mov	r7, r6
 8005f74:	42bb      	cmp	r3, r7
 8005f76:	460e      	mov	r6, r1
 8005f78:	d9f4      	bls.n	8005f64 <_printf_i+0x11c>
 8005f7a:	2b08      	cmp	r3, #8
 8005f7c:	d10b      	bne.n	8005f96 <_printf_i+0x14e>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	07de      	lsls	r6, r3, #31
 8005f82:	d508      	bpl.n	8005f96 <_printf_i+0x14e>
 8005f84:	6923      	ldr	r3, [r4, #16]
 8005f86:	6861      	ldr	r1, [r4, #4]
 8005f88:	4299      	cmp	r1, r3
 8005f8a:	bfde      	ittt	le
 8005f8c:	2330      	movle	r3, #48	; 0x30
 8005f8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f96:	1b52      	subs	r2, r2, r5
 8005f98:	6122      	str	r2, [r4, #16]
 8005f9a:	464b      	mov	r3, r9
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	f8cd a000 	str.w	sl, [sp]
 8005fa4:	aa03      	add	r2, sp, #12
 8005fa6:	f7ff fedf 	bl	8005d68 <_printf_common>
 8005faa:	3001      	adds	r0, #1
 8005fac:	d14c      	bne.n	8006048 <_printf_i+0x200>
 8005fae:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb2:	b004      	add	sp, #16
 8005fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb8:	4834      	ldr	r0, [pc, #208]	; (800608c <_printf_i+0x244>)
 8005fba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fbe:	6829      	ldr	r1, [r5, #0]
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fc6:	6029      	str	r1, [r5, #0]
 8005fc8:	061d      	lsls	r5, r3, #24
 8005fca:	d514      	bpl.n	8005ff6 <_printf_i+0x1ae>
 8005fcc:	07df      	lsls	r7, r3, #31
 8005fce:	bf44      	itt	mi
 8005fd0:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd4:	6023      	strmi	r3, [r4, #0]
 8005fd6:	b91e      	cbnz	r6, 8005fe0 <_printf_i+0x198>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	f023 0320 	bic.w	r3, r3, #32
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	e7af      	b.n	8005f44 <_printf_i+0xfc>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	f043 0320 	orr.w	r3, r3, #32
 8005fea:	6023      	str	r3, [r4, #0]
 8005fec:	2378      	movs	r3, #120	; 0x78
 8005fee:	4828      	ldr	r0, [pc, #160]	; (8006090 <_printf_i+0x248>)
 8005ff0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ff4:	e7e3      	b.n	8005fbe <_printf_i+0x176>
 8005ff6:	0659      	lsls	r1, r3, #25
 8005ff8:	bf48      	it	mi
 8005ffa:	b2b6      	uxthmi	r6, r6
 8005ffc:	e7e6      	b.n	8005fcc <_printf_i+0x184>
 8005ffe:	4615      	mov	r5, r2
 8006000:	e7bb      	b.n	8005f7a <_printf_i+0x132>
 8006002:	682b      	ldr	r3, [r5, #0]
 8006004:	6826      	ldr	r6, [r4, #0]
 8006006:	1d18      	adds	r0, r3, #4
 8006008:	6961      	ldr	r1, [r4, #20]
 800600a:	6028      	str	r0, [r5, #0]
 800600c:	0635      	lsls	r5, r6, #24
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	d501      	bpl.n	8006016 <_printf_i+0x1ce>
 8006012:	6019      	str	r1, [r3, #0]
 8006014:	e002      	b.n	800601c <_printf_i+0x1d4>
 8006016:	0670      	lsls	r0, r6, #25
 8006018:	d5fb      	bpl.n	8006012 <_printf_i+0x1ca>
 800601a:	8019      	strh	r1, [r3, #0]
 800601c:	2300      	movs	r3, #0
 800601e:	4615      	mov	r5, r2
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	e7ba      	b.n	8005f9a <_printf_i+0x152>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	2100      	movs	r1, #0
 8006028:	1d1a      	adds	r2, r3, #4
 800602a:	602a      	str	r2, [r5, #0]
 800602c:	681d      	ldr	r5, [r3, #0]
 800602e:	6862      	ldr	r2, [r4, #4]
 8006030:	4628      	mov	r0, r5
 8006032:	f000 f863 	bl	80060fc <memchr>
 8006036:	b108      	cbz	r0, 800603c <_printf_i+0x1f4>
 8006038:	1b40      	subs	r0, r0, r5
 800603a:	6060      	str	r0, [r4, #4]
 800603c:	6863      	ldr	r3, [r4, #4]
 800603e:	6123      	str	r3, [r4, #16]
 8006040:	2300      	movs	r3, #0
 8006042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006046:	e7a8      	b.n	8005f9a <_printf_i+0x152>
 8006048:	462a      	mov	r2, r5
 800604a:	4649      	mov	r1, r9
 800604c:	4640      	mov	r0, r8
 800604e:	6923      	ldr	r3, [r4, #16]
 8006050:	47d0      	blx	sl
 8006052:	3001      	adds	r0, #1
 8006054:	d0ab      	beq.n	8005fae <_printf_i+0x166>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	079b      	lsls	r3, r3, #30
 800605a:	d413      	bmi.n	8006084 <_printf_i+0x23c>
 800605c:	68e0      	ldr	r0, [r4, #12]
 800605e:	9b03      	ldr	r3, [sp, #12]
 8006060:	4298      	cmp	r0, r3
 8006062:	bfb8      	it	lt
 8006064:	4618      	movlt	r0, r3
 8006066:	e7a4      	b.n	8005fb2 <_printf_i+0x16a>
 8006068:	2301      	movs	r3, #1
 800606a:	4632      	mov	r2, r6
 800606c:	4649      	mov	r1, r9
 800606e:	4640      	mov	r0, r8
 8006070:	47d0      	blx	sl
 8006072:	3001      	adds	r0, #1
 8006074:	d09b      	beq.n	8005fae <_printf_i+0x166>
 8006076:	3501      	adds	r5, #1
 8006078:	68e3      	ldr	r3, [r4, #12]
 800607a:	9903      	ldr	r1, [sp, #12]
 800607c:	1a5b      	subs	r3, r3, r1
 800607e:	42ab      	cmp	r3, r5
 8006080:	dcf2      	bgt.n	8006068 <_printf_i+0x220>
 8006082:	e7eb      	b.n	800605c <_printf_i+0x214>
 8006084:	2500      	movs	r5, #0
 8006086:	f104 0619 	add.w	r6, r4, #25
 800608a:	e7f5      	b.n	8006078 <_printf_i+0x230>
 800608c:	080064fd 	.word	0x080064fd
 8006090:	0800650e 	.word	0x0800650e

08006094 <_read_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4604      	mov	r4, r0
 8006098:	4608      	mov	r0, r1
 800609a:	4611      	mov	r1, r2
 800609c:	2200      	movs	r2, #0
 800609e:	4d05      	ldr	r5, [pc, #20]	; (80060b4 <_read_r+0x20>)
 80060a0:	602a      	str	r2, [r5, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	f7fa fb14 	bl	80006d0 <_read>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_read_r+0x1e>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_read_r+0x1e>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20001b44 	.word	0x20001b44

080060b8 <_fstat_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	2300      	movs	r3, #0
 80060bc:	4d06      	ldr	r5, [pc, #24]	; (80060d8 <_fstat_r+0x20>)
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	4611      	mov	r1, r2
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	f7fa fb2b 	bl	8000720 <_fstat>
 80060ca:	1c43      	adds	r3, r0, #1
 80060cc:	d102      	bne.n	80060d4 <_fstat_r+0x1c>
 80060ce:	682b      	ldr	r3, [r5, #0]
 80060d0:	b103      	cbz	r3, 80060d4 <_fstat_r+0x1c>
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	bd38      	pop	{r3, r4, r5, pc}
 80060d6:	bf00      	nop
 80060d8:	20001b44 	.word	0x20001b44

080060dc <_isatty_r>:
 80060dc:	b538      	push	{r3, r4, r5, lr}
 80060de:	2300      	movs	r3, #0
 80060e0:	4d05      	ldr	r5, [pc, #20]	; (80060f8 <_isatty_r+0x1c>)
 80060e2:	4604      	mov	r4, r0
 80060e4:	4608      	mov	r0, r1
 80060e6:	602b      	str	r3, [r5, #0]
 80060e8:	f7fa fb29 	bl	800073e <_isatty>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_isatty_r+0x1a>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_isatty_r+0x1a>
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	20001b44 	.word	0x20001b44

080060fc <memchr>:
 80060fc:	4603      	mov	r3, r0
 80060fe:	b510      	push	{r4, lr}
 8006100:	b2c9      	uxtb	r1, r1
 8006102:	4402      	add	r2, r0
 8006104:	4293      	cmp	r3, r2
 8006106:	4618      	mov	r0, r3
 8006108:	d101      	bne.n	800610e <memchr+0x12>
 800610a:	2000      	movs	r0, #0
 800610c:	e003      	b.n	8006116 <memchr+0x1a>
 800610e:	7804      	ldrb	r4, [r0, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	428c      	cmp	r4, r1
 8006114:	d1f6      	bne.n	8006104 <memchr+0x8>
 8006116:	bd10      	pop	{r4, pc}

08006118 <_init>:
 8006118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611a:	bf00      	nop
 800611c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611e:	bc08      	pop	{r3}
 8006120:	469e      	mov	lr, r3
 8006122:	4770      	bx	lr

08006124 <_fini>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	bf00      	nop
 8006128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612a:	bc08      	pop	{r3}
 800612c:	469e      	mov	lr, r3
 800612e:	4770      	bx	lr
