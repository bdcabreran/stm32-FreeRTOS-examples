
00_itm_project_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f88  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800853c  0800853c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800853c  0800853c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800853c  0800853c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800853c  0800853c  0001853c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008540  08008540  00018540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002548  20000078  080085bc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025c0  080085bc  000225c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc9a  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000406d  00000000  00000000  0003bd3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  0003fda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  00041600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3b6  00000000  00000000  00042c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8b7  00000000  00000000  0005f036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b66d  00000000  00000000  0007b8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116f5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c88  00000000  00000000  00116fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08008080 	.word	0x08008080

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08008080 	.word	0x08008080

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20001b38 	.word	0x20001b38

080001dc <log_message_set_level>:
    return (ch);
}


uint8_t log_message_set_level(log_level_t level)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
    if (IS_VALID_LOG_LEVEL(level))
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b04      	cmp	r3, #4
 80001ea:	d804      	bhi.n	80001f6 <log_message_set_level+0x1a>
    {
        current_log_level = level;
 80001ec:	4a05      	ldr	r2, [pc, #20]	; (8000204 <log_message_set_level+0x28>)
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	7013      	strb	r3, [r2, #0]
        return 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	e000      	b.n	80001f8 <log_message_set_level+0x1c>
    }
    return 1; 
 80001f6:	2301      	movs	r3, #1
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	20000000 	.word	0x20000000

08000208 <log_message_get_level>:

log_level_t log_message_get_level(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
    return current_log_level;
 800020c:	4b02      	ldr	r3, [pc, #8]	; (8000218 <log_message_get_level+0x10>)
 800020e:	781b      	ldrb	r3, [r3, #0]
}
 8000210:	4618      	mov	r0, r3
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	20000000 	.word	0x20000000

0800021c <log_test>:
    va_end(args);
}
#endif 

void log_test(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0
    log_message(LOG_LEVEL_ERROR, "Error: Something went wrong!\r\n");
 8000222:	f7ff fff1 	bl	8000208 <log_message_get_level>
 8000226:	4b2f      	ldr	r3, [pc, #188]	; (80002e4 <log_test+0xc8>)
 8000228:	617b      	str	r3, [r7, #20]
 800022a:	4b2f      	ldr	r3, [pc, #188]	; (80002e8 <log_test+0xcc>)
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	bf00      	nop
 8000230:	6978      	ldr	r0, [r7, #20]
 8000232:	f007 f84f 	bl	80072d4 <iprintf>
 8000236:	482d      	ldr	r0, [pc, #180]	; (80002ec <log_test+0xd0>)
 8000238:	f007 f8d2 	bl	80073e0 <puts>
 800023c:	482c      	ldr	r0, [pc, #176]	; (80002f0 <log_test+0xd4>)
 800023e:	f007 f849 	bl	80072d4 <iprintf>
    log_message(LOG_LEVEL_WARNING, "Warning: Something might be wrong...\r\n");
 8000242:	f7ff ffe1 	bl	8000208 <log_message_get_level>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d00d      	beq.n	8000268 <log_test+0x4c>
 800024c:	4b25      	ldr	r3, [pc, #148]	; (80002e4 <log_test+0xc8>)
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	4b28      	ldr	r3, [pc, #160]	; (80002f4 <log_test+0xd8>)
 8000252:	613b      	str	r3, [r7, #16]
 8000254:	bf00      	nop
 8000256:	6938      	ldr	r0, [r7, #16]
 8000258:	f007 f83c 	bl	80072d4 <iprintf>
 800025c:	4826      	ldr	r0, [pc, #152]	; (80002f8 <log_test+0xdc>)
 800025e:	f007 f8bf 	bl	80073e0 <puts>
 8000262:	4823      	ldr	r0, [pc, #140]	; (80002f0 <log_test+0xd4>)
 8000264:	f007 f836 	bl	80072d4 <iprintf>
    log_message(LOG_LEVEL_INFO, "Starting program...\r\n");
 8000268:	f7ff ffce 	bl	8000208 <log_message_get_level>
 800026c:	4603      	mov	r3, r0
 800026e:	2b01      	cmp	r3, #1
 8000270:	d90d      	bls.n	800028e <log_test+0x72>
 8000272:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <log_test+0xc8>)
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	4b21      	ldr	r3, [pc, #132]	; (80002fc <log_test+0xe0>)
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	bf00      	nop
 800027c:	68f8      	ldr	r0, [r7, #12]
 800027e:	f007 f829 	bl	80072d4 <iprintf>
 8000282:	481f      	ldr	r0, [pc, #124]	; (8000300 <log_test+0xe4>)
 8000284:	f007 f8ac 	bl	80073e0 <puts>
 8000288:	4819      	ldr	r0, [pc, #100]	; (80002f0 <log_test+0xd4>)
 800028a:	f007 f823 	bl	80072d4 <iprintf>
    log_message(LOG_LEVEL_DEBUG, "Debugging information...\r\n");
 800028e:	f7ff ffbb 	bl	8000208 <log_message_get_level>
 8000292:	4603      	mov	r3, r0
 8000294:	2b02      	cmp	r3, #2
 8000296:	d90d      	bls.n	80002b4 <log_test+0x98>
 8000298:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <log_test+0xc8>)
 800029a:	60bb      	str	r3, [r7, #8]
 800029c:	4b19      	ldr	r3, [pc, #100]	; (8000304 <log_test+0xe8>)
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	bf00      	nop
 80002a2:	68b8      	ldr	r0, [r7, #8]
 80002a4:	f007 f816 	bl	80072d4 <iprintf>
 80002a8:	4817      	ldr	r0, [pc, #92]	; (8000308 <log_test+0xec>)
 80002aa:	f007 f899 	bl	80073e0 <puts>
 80002ae:	4810      	ldr	r0, [pc, #64]	; (80002f0 <log_test+0xd4>)
 80002b0:	f007 f810 	bl	80072d4 <iprintf>
    log_message(LOG_LEVEL_TRACE, "Trace: acquiring some data!\r\n");
 80002b4:	f7ff ffa8 	bl	8000208 <log_message_get_level>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b03      	cmp	r3, #3
 80002bc:	d90d      	bls.n	80002da <log_test+0xbe>
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <log_test+0xc8>)
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	4b12      	ldr	r3, [pc, #72]	; (800030c <log_test+0xf0>)
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	bf00      	nop
 80002c8:	6878      	ldr	r0, [r7, #4]
 80002ca:	f007 f803 	bl	80072d4 <iprintf>
 80002ce:	4810      	ldr	r0, [pc, #64]	; (8000310 <log_test+0xf4>)
 80002d0:	f007 f886 	bl	80073e0 <puts>
 80002d4:	4806      	ldr	r0, [pc, #24]	; (80002f0 <log_test+0xd4>)
 80002d6:	f006 fffd 	bl	80072d4 <iprintf>
}
 80002da:	bf00      	nop
 80002dc:	3718      	adds	r7, #24
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	08008098 	.word	0x08008098
 80002e8:	0800809c 	.word	0x0800809c
 80002ec:	080080a4 	.word	0x080080a4
 80002f0:	080080c4 	.word	0x080080c4
 80002f4:	080080cc 	.word	0x080080cc
 80002f8:	080080d4 	.word	0x080080d4
 80002fc:	080080fc 	.word	0x080080fc
 8000300:	08008104 	.word	0x08008104
 8000304:	0800811c 	.word	0x0800811c
 8000308:	08008124 	.word	0x08008124
 800030c:	08008140 	.word	0x08008140
 8000310:	08008148 	.word	0x08008148

08000314 <blink_led_non_blocking>:
uint8_t counter = 0;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void blink_led_non_blocking(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800031a:	2120      	movs	r1, #32
 800031c:	4813      	ldr	r0, [pc, #76]	; (800036c <blink_led_non_blocking+0x58>)
 800031e:	f000 ff69 	bl	80011f4 <HAL_GPIO_TogglePin>
    log_message(LOG_LEVEL_INFO, "Led2 toggle! -> [%d]\r\n", counter++);
 8000322:	f7ff ff71 	bl	8000208 <log_message_get_level>
 8000326:	4603      	mov	r3, r0
 8000328:	2b01      	cmp	r3, #1
 800032a:	d914      	bls.n	8000356 <blink_led_non_blocking+0x42>
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <blink_led_non_blocking+0x5c>)
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <blink_led_non_blocking+0x60>)
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	bf00      	nop
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f006 ffcc 	bl	80072d4 <iprintf>
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <blink_led_non_blocking+0x64>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	1c5a      	adds	r2, r3, #1
 8000342:	b2d1      	uxtb	r1, r2
 8000344:	4a0c      	ldr	r2, [pc, #48]	; (8000378 <blink_led_non_blocking+0x64>)
 8000346:	7011      	strb	r1, [r2, #0]
 8000348:	4619      	mov	r1, r3
 800034a:	480c      	ldr	r0, [pc, #48]	; (800037c <blink_led_non_blocking+0x68>)
 800034c:	f006 ffc2 	bl	80072d4 <iprintf>
 8000350:	480b      	ldr	r0, [pc, #44]	; (8000380 <blink_led_non_blocking+0x6c>)
 8000352:	f006 ffbf 	bl	80072d4 <iprintf>
    SEGGER_SYSVIEW_PrintfHost("Sysview : Led2 toggle!");
 8000356:	480b      	ldr	r0, [pc, #44]	; (8000384 <blink_led_non_blocking+0x70>)
 8000358:	f006 fc1e 	bl	8006b98 <SEGGER_SYSVIEW_PrintfHost>

    osDelay(1000);
 800035c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000360:	f002 fac6 	bl	80028f0 <osDelay>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40010800 	.word	0x40010800
 8000370:	08008174 	.word	0x08008174
 8000374:	08008178 	.word	0x08008178
 8000378:	20000098 	.word	0x20000098
 800037c:	08008180 	.word	0x08008180
 8000380:	08008198 	.word	0x08008198
 8000384:	080081a0 	.word	0x080081a0

08000388 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Init */
    SEGGER_SYSVIEW_Conf();
 800038c:	f006 fc82 	bl	8006c94 <SEGGER_SYSVIEW_Conf>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of defaultTask */
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <MX_FREERTOS_Init+0x1c>)
 8000392:	2100      	movs	r1, #0
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <MX_FREERTOS_Init+0x20>)
 8000396:	f002 fa01 	bl	800279c <osThreadNew>
 800039a:	4603      	mov	r3, r0
 800039c:	4a03      	ldr	r2, [pc, #12]	; (80003ac <MX_FREERTOS_Init+0x24>)
 800039e:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	08008454 	.word	0x08008454
 80003a8:	080003b1 	.word	0x080003b1
 80003ac:	20000094 	.word	0x20000094

080003b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	blink_led_non_blocking();
 80003b8:	f7ff ffac 	bl	8000314 <blink_led_non_blocking>
 80003bc:	e7fc      	b.n	80003b8 <StartDefaultTask+0x8>
	...

080003c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d4:	4b2d      	ldr	r3, [pc, #180]	; (800048c <MX_GPIO_Init+0xcc>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a2c      	ldr	r2, [pc, #176]	; (800048c <MX_GPIO_Init+0xcc>)
 80003da:	f043 0310 	orr.w	r3, r3, #16
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b2a      	ldr	r3, [pc, #168]	; (800048c <MX_GPIO_Init+0xcc>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0310 	and.w	r3, r3, #16
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ec:	4b27      	ldr	r3, [pc, #156]	; (800048c <MX_GPIO_Init+0xcc>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a26      	ldr	r2, [pc, #152]	; (800048c <MX_GPIO_Init+0xcc>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b24      	ldr	r3, [pc, #144]	; (800048c <MX_GPIO_Init+0xcc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0320 	and.w	r3, r3, #32
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b21      	ldr	r3, [pc, #132]	; (800048c <MX_GPIO_Init+0xcc>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a20      	ldr	r2, [pc, #128]	; (800048c <MX_GPIO_Init+0xcc>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <MX_GPIO_Init+0xcc>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <MX_GPIO_Init+0xcc>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a1a      	ldr	r2, [pc, #104]	; (800048c <MX_GPIO_Init+0xcc>)
 8000422:	f043 0308 	orr.w	r3, r3, #8
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <MX_GPIO_Init+0xcc>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0308 	and.w	r3, r3, #8
 8000430:	603b      	str	r3, [r7, #0]
 8000432:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2160      	movs	r1, #96	; 0x60
 8000438:	4815      	ldr	r0, [pc, #84]	; (8000490 <MX_GPIO_Init+0xd0>)
 800043a:	f000 fea9 	bl	8001190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800043e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <MX_GPIO_Init+0xd4>)
 8000446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	4811      	ldr	r0, [pc, #68]	; (8000498 <MX_GPIO_Init+0xd8>)
 8000454:	f000 fc2e 	bl	8000cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 8000458:	2360      	movs	r3, #96	; 0x60
 800045a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2302      	movs	r3, #2
 8000466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	4808      	ldr	r0, [pc, #32]	; (8000490 <MX_GPIO_Init+0xd0>)
 8000470:	f000 fc20 	bl	8000cb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	2105      	movs	r1, #5
 8000478:	2028      	movs	r0, #40	; 0x28
 800047a:	f000 fbd7 	bl	8000c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800047e:	2028      	movs	r0, #40	; 0x28
 8000480:	f000 fc00 	bl	8000c84 <HAL_NVIC_EnableIRQ>

}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40021000 	.word	0x40021000
 8000490:	40010800 	.word	0x40010800
 8000494:	10110000 	.word	0x10110000
 8000498:	40011000 	.word	0x40011000

0800049c <print_startup_msg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_startup_msg(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
	log_message(LOG_LEVEL_INFO,"************************************\r\n");
 80004a2:	f7ff feb1 	bl	8000208 <log_message_get_level>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d90d      	bls.n	80004c8 <print_startup_msg+0x2c>
 80004ac:	4b26      	ldr	r3, [pc, #152]	; (8000548 <print_startup_msg+0xac>)
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	4b26      	ldr	r3, [pc, #152]	; (800054c <print_startup_msg+0xb0>)
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	bf00      	nop
 80004b6:	68f8      	ldr	r0, [r7, #12]
 80004b8:	f006 ff0c 	bl	80072d4 <iprintf>
 80004bc:	4824      	ldr	r0, [pc, #144]	; (8000550 <print_startup_msg+0xb4>)
 80004be:	f006 ff8f 	bl	80073e0 <puts>
 80004c2:	4824      	ldr	r0, [pc, #144]	; (8000554 <print_startup_msg+0xb8>)
 80004c4:	f006 ff06 	bl	80072d4 <iprintf>
	log_message(LOG_LEVEL_INFO,"***** %s - %s ****/\r\n", __DATE__, __TIME__);
 80004c8:	f7ff fe9e 	bl	8000208 <log_message_get_level>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d90f      	bls.n	80004f2 <print_startup_msg+0x56>
 80004d2:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <print_startup_msg+0xac>)
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	4b1d      	ldr	r3, [pc, #116]	; (800054c <print_startup_msg+0xb0>)
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	bf00      	nop
 80004dc:	68b8      	ldr	r0, [r7, #8]
 80004de:	f006 fef9 	bl	80072d4 <iprintf>
 80004e2:	4a1d      	ldr	r2, [pc, #116]	; (8000558 <print_startup_msg+0xbc>)
 80004e4:	491d      	ldr	r1, [pc, #116]	; (800055c <print_startup_msg+0xc0>)
 80004e6:	481e      	ldr	r0, [pc, #120]	; (8000560 <print_startup_msg+0xc4>)
 80004e8:	f006 fef4 	bl	80072d4 <iprintf>
 80004ec:	4819      	ldr	r0, [pc, #100]	; (8000554 <print_startup_msg+0xb8>)
 80004ee:	f006 fef1 	bl	80072d4 <iprintf>
	log_message(LOG_LEVEL_INFO,"***** Author : Bayron Cabrera ******\r\n");
 80004f2:	f7ff fe89 	bl	8000208 <log_message_get_level>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d90d      	bls.n	8000518 <print_startup_msg+0x7c>
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <print_startup_msg+0xac>)
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <print_startup_msg+0xb0>)
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	bf00      	nop
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f006 fee4 	bl	80072d4 <iprintf>
 800050c:	4815      	ldr	r0, [pc, #84]	; (8000564 <print_startup_msg+0xc8>)
 800050e:	f006 ff67 	bl	80073e0 <puts>
 8000512:	4810      	ldr	r0, [pc, #64]	; (8000554 <print_startup_msg+0xb8>)
 8000514:	f006 fede 	bl	80072d4 <iprintf>
	log_message(LOG_LEVEL_INFO,"************************************\r\n");
 8000518:	f7ff fe76 	bl	8000208 <log_message_get_level>
 800051c:	4603      	mov	r3, r0
 800051e:	2b01      	cmp	r3, #1
 8000520:	d90d      	bls.n	800053e <print_startup_msg+0xa2>
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <print_startup_msg+0xac>)
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <print_startup_msg+0xb0>)
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	bf00      	nop
 800052c:	6838      	ldr	r0, [r7, #0]
 800052e:	f006 fed1 	bl	80072d4 <iprintf>
 8000532:	4807      	ldr	r0, [pc, #28]	; (8000550 <print_startup_msg+0xb4>)
 8000534:	f006 ff54 	bl	80073e0 <puts>
 8000538:	4806      	ldr	r0, [pc, #24]	; (8000554 <print_startup_msg+0xb8>)
 800053a:	f006 fecb 	bl	80072d4 <iprintf>
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	080081b8 	.word	0x080081b8
 800054c:	080081bc 	.word	0x080081bc
 8000550:	080081c4 	.word	0x080081c4
 8000554:	080081ec 	.word	0x080081ec
 8000558:	080081f4 	.word	0x080081f4
 800055c:	08008200 	.word	0x08008200
 8000560:	0800820c 	.word	0x0800820c
 8000564:	08008224 	.word	0x08008224

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fa62 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f812 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f7ff ff24 	bl	80003c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f9ce 	bl	8000918 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  log_message_set_level(LOG_LEVEL_TRACE);
 800057c:	2004      	movs	r0, #4
 800057e:	f7ff fe2d 	bl	80001dc <log_message_set_level>
  print_startup_msg();
 8000582:	f7ff ff8b 	bl	800049c <print_startup_msg>
  log_test();
 8000586:	f7ff fe49 	bl	800021c <log_test>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800058a:	f002 f8a1 	bl	80026d0 <osKernelInitialize>
  MX_FREERTOS_Init();
 800058e:	f7ff fefb 	bl	8000388 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000592:	f002 f8cf 	bl	8002734 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	e7fe      	b.n	8000596 <main+0x2e>

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b090      	sub	sp, #64	; 0x40
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	2228      	movs	r2, #40	; 0x28
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f006 fdf7 	bl	800719a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	2301      	movs	r3, #1
 80005c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2310      	movs	r3, #16
 80005c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80005ca:	2300      	movs	r3, #0
 80005cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80005ce:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0318 	add.w	r3, r7, #24
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fe55 	bl	8001288 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005e4:	f000 f82c 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2102      	movs	r1, #2
 8000602:	4618      	mov	r0, r3
 8000604:	f001 f9ae 	bl	8001964 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800060e:	f000 f817 	bl	8000640 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3740      	adds	r7, #64	; 0x40
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d101      	bne.n	8000632 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800062e:	f000 fa17 	bl	8000a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40012c00 	.word	0x40012c00

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>

0800064a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
	...

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <HAL_MspInit+0x68>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <HAL_MspInit+0x68>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_MspInit+0x68>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_MspInit+0x68>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <HAL_MspInit+0x68>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x68>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	210f      	movs	r1, #15
 800069a:	f06f 0001 	mvn.w	r0, #1
 800069e:	f000 fac5 	bl	8000c2c <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <HAL_MspInit+0x6c>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <HAL_MspInit+0x6c>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010000 	.word	0x40010000

080006d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80006d8:	2300      	movs	r3, #0
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006e6:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <HAL_InitTick+0xd0>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a2d      	ldr	r2, [pc, #180]	; (80007a0 <HAL_InitTick+0xd0>)
 80006ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <HAL_InitTick+0xd0>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006fe:	f107 020c 	add.w	r2, r7, #12
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fb4b 	bl	8001da4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800070e:	f001 fb35 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8000712:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <HAL_InitTick+0xd4>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	0c9b      	lsrs	r3, r3, #18
 800071e:	3b01      	subs	r3, #1
 8000720:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <HAL_InitTick+0xd8>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <HAL_InitTick+0xdc>)
 8000726:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <HAL_InitTick+0xd8>)
 800072a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800072e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000730:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <HAL_InitTick+0xd8>)
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <HAL_InitTick+0xd8>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <HAL_InitTick+0xd8>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_InitTick+0xd8>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000748:	4817      	ldr	r0, [pc, #92]	; (80007a8 <HAL_InitTick+0xd8>)
 800074a:	f001 fb8b 	bl	8001e64 <HAL_TIM_Base_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000754:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000758:	2b00      	cmp	r3, #0
 800075a:	d11b      	bne.n	8000794 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <HAL_InitTick+0xd8>)
 800075e:	f001 fc35 	bl	8001fcc <HAL_TIM_Base_Start_IT>
 8000762:	4603      	mov	r3, r0
 8000764:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000768:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800076c:	2b00      	cmp	r3, #0
 800076e:	d111      	bne.n	8000794 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000770:	2019      	movs	r0, #25
 8000772:	f000 fa87 	bl	8000c84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d808      	bhi.n	800078e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	2019      	movs	r0, #25
 8000782:	f000 fa53 	bl	8000c2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <HAL_InitTick+0xe0>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	e002      	b.n	8000794 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000798:	4618      	mov	r0, r3
 800079a:	3730      	adds	r7, #48	; 0x30
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	431bde83 	.word	0x431bde83
 80007a8:	2000009c 	.word	0x2000009c
 80007ac:	40012c00 	.word	0x40012c00
 80007b0:	20000008 	.word	0x20000008

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
	...

080007e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <TIM1_UP_IRQHandler+0x10>)
 80007e6:	f001 fc5d 	bl	80020a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000009c 	.word	0x2000009c

080007f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80007f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007fc:	f000 fd22 	bl	8001244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e00a      	b.n	800082c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000816:	f3af 8000 	nop.w
 800081a:	4601      	mov	r1, r0
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	60ba      	str	r2, [r7, #8]
 8000822:	b2ca      	uxtb	r2, r1
 8000824:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	429a      	cmp	r2, r3
 8000832:	dbf0      	blt.n	8000816 <_read+0x12>
  }

  return len;
 8000834:	687b      	ldr	r3, [r7, #4]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <_close>:
  }
  return len;
}

int _close(int file)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000864:	605a      	str	r2, [r3, #4]
  return 0;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <_isatty>:

int _isatty(int file)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000886:	b480      	push	{r7}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
	...

080008a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a8:	4a14      	ldr	r2, [pc, #80]	; (80008fc <_sbrk+0x5c>)
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <_sbrk+0x60>)
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <_sbrk+0x64>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <_sbrk+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d207      	bcs.n	80008e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d0:	f006 fb22 	bl	8006f18 <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	220c      	movs	r2, #12
 80008d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	e009      	b.n	80008f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <_sbrk+0x64>)
 80008f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20005000 	.word	0x20005000
 8000900:	00000400 	.word	0x00000400
 8000904:	200000e4 	.word	0x200000e4
 8000908:	200025c0 	.word	0x200025c0

0800090c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_USART2_UART_Init+0x50>)
 8000920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000950:	f001 fd48 	bl	80023e4 <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800095a:	f7ff fe71 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000e8 	.word	0x200000e8
 8000968:	40004400 	.word	0x40004400

0800096c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <HAL_UART_MspInit+0x70>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d123      	bne.n	80009d4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_UART_MspInit+0x74>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <HAL_UART_MspInit+0x74>)
 8000992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000996:	61d3      	str	r3, [r2, #28]
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_UART_MspInit+0x74>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_UART_MspInit+0x74>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <HAL_UART_MspInit+0x74>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_UART_MspInit+0x74>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009bc:	230c      	movs	r3, #12
 80009be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <HAL_UART_MspInit+0x78>)
 80009d0:	f000 f970 	bl	8000cb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40004400 	.word	0x40004400
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010800 	.word	0x40010800

080009e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	; (8000a2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a0e:	f7ff ff7d 	bl	800090c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f006 fb7d 	bl	8007110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a16:	f7ff fda7 	bl	8000568 <main>
  bx lr
 8000a1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a24:	08008544 	.word	0x08008544
  ldr r2, =_sbss
 8000a28:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a2c:	200025c0 	.word	0x200025c0

08000a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC1_2_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_Init+0x28>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x28>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f8d1 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f7ff fe40 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fe06 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40022000 	.word	0x40022000

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_IncTick+0x20>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	2000000c 	.word	0x2000000c
 8000a80:	2000012c 	.word	0x2000012c

08000a84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <HAL_GetTick+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	2000012c 	.word	0x2000012c

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4906      	ldr	r1, [pc, #24]	; (8000b30 <__NVIC_EnableIRQ+0x34>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b07      	cmp	r3, #7
 8000bf8:	d00f      	beq.n	8000c1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b06      	cmp	r3, #6
 8000bfe:	d00c      	beq.n	8000c1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	d009      	beq.n	8000c1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b04      	cmp	r3, #4
 8000c0a:	d006      	beq.n	8000c1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d003      	beq.n	8000c1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c12:	2192      	movs	r1, #146	; 0x92
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c16:	f7ff fd18 	bl	800064a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ff3c 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	0800824c 	.word	0x0800824c

08000c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d903      	bls.n	8000c4c <HAL_NVIC_SetPriority+0x20>
 8000c44:	21aa      	movs	r1, #170	; 0xaa
 8000c46:	480e      	ldr	r0, [pc, #56]	; (8000c80 <HAL_NVIC_SetPriority+0x54>)
 8000c48:	f7ff fcff 	bl	800064a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	2b0f      	cmp	r3, #15
 8000c50:	d903      	bls.n	8000c5a <HAL_NVIC_SetPriority+0x2e>
 8000c52:	21ab      	movs	r1, #171	; 0xab
 8000c54:	480a      	ldr	r0, [pc, #40]	; (8000c80 <HAL_NVIC_SetPriority+0x54>)
 8000c56:	f7ff fcf8 	bl	800064a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5a:	f7ff ff41 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	6978      	ldr	r0, [r7, #20]
 8000c66:	f7ff ff8f 	bl	8000b88 <NVIC_EncodePriority>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff5e 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	0800824c 	.word	0x0800824c

08000c84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	da03      	bge.n	8000c9e <HAL_NVIC_EnableIRQ+0x1a>
 8000c96:	21be      	movs	r1, #190	; 0xbe
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_NVIC_EnableIRQ+0x2c>)
 8000c9a:	f7ff fcd6 	bl	800064a <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff2a 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	0800824c 	.word	0x0800824c

08000cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a96      	ldr	r2, [pc, #600]	; (8000f24 <HAL_GPIO_Init+0x270>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d013      	beq.n	8000cf6 <HAL_GPIO_Init+0x42>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a95      	ldr	r2, [pc, #596]	; (8000f28 <HAL_GPIO_Init+0x274>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d00f      	beq.n	8000cf6 <HAL_GPIO_Init+0x42>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a94      	ldr	r2, [pc, #592]	; (8000f2c <HAL_GPIO_Init+0x278>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d00b      	beq.n	8000cf6 <HAL_GPIO_Init+0x42>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a93      	ldr	r2, [pc, #588]	; (8000f30 <HAL_GPIO_Init+0x27c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d007      	beq.n	8000cf6 <HAL_GPIO_Init+0x42>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a92      	ldr	r2, [pc, #584]	; (8000f34 <HAL_GPIO_Init+0x280>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x42>
 8000cee:	21bd      	movs	r1, #189	; 0xbd
 8000cf0:	4891      	ldr	r0, [pc, #580]	; (8000f38 <HAL_GPIO_Init+0x284>)
 8000cf2:	f7ff fcaa 	bl	800064a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d005      	beq.n	8000d0c <HAL_GPIO_Init+0x58>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	0c1b      	lsrs	r3, r3, #16
 8000d06:	041b      	lsls	r3, r3, #16
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0x60>
 8000d0c:	21be      	movs	r1, #190	; 0xbe
 8000d0e:	488a      	ldr	r0, [pc, #552]	; (8000f38 <HAL_GPIO_Init+0x284>)
 8000d10:	f7ff fc9b 	bl	800064a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 821c 	beq.w	8001156 <HAL_GPIO_Init+0x4a2>
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	f000 8217 	beq.w	8001156 <HAL_GPIO_Init+0x4a2>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b11      	cmp	r3, #17
 8000d2e:	f000 8212 	beq.w	8001156 <HAL_GPIO_Init+0x4a2>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	f000 820d 	beq.w	8001156 <HAL_GPIO_Init+0x4a2>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b12      	cmp	r3, #18
 8000d42:	f000 8208 	beq.w	8001156 <HAL_GPIO_Init+0x4a2>
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4a7c      	ldr	r2, [pc, #496]	; (8000f3c <HAL_GPIO_Init+0x288>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	f000 8202 	beq.w	8001156 <HAL_GPIO_Init+0x4a2>
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4a7a      	ldr	r2, [pc, #488]	; (8000f40 <HAL_GPIO_Init+0x28c>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	f000 81fc 	beq.w	8001156 <HAL_GPIO_Init+0x4a2>
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a78      	ldr	r2, [pc, #480]	; (8000f44 <HAL_GPIO_Init+0x290>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	f000 81f6 	beq.w	8001156 <HAL_GPIO_Init+0x4a2>
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a76      	ldr	r2, [pc, #472]	; (8000f48 <HAL_GPIO_Init+0x294>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	f000 81f0 	beq.w	8001156 <HAL_GPIO_Init+0x4a2>
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	4a74      	ldr	r2, [pc, #464]	; (8000f4c <HAL_GPIO_Init+0x298>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	f000 81ea 	beq.w	8001156 <HAL_GPIO_Init+0x4a2>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4a72      	ldr	r2, [pc, #456]	; (8000f50 <HAL_GPIO_Init+0x29c>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	f000 81e4 	beq.w	8001156 <HAL_GPIO_Init+0x4a2>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	f000 81df 	beq.w	8001156 <HAL_GPIO_Init+0x4a2>
 8000d98:	21bf      	movs	r1, #191	; 0xbf
 8000d9a:	4867      	ldr	r0, [pc, #412]	; (8000f38 <HAL_GPIO_Init+0x284>)
 8000d9c:	f7ff fc55 	bl	800064a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da0:	e1d9      	b.n	8001156 <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000da2:	2201      	movs	r2, #1
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	f040 81c8 	bne.w	8001150 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a58      	ldr	r2, [pc, #352]	; (8000f24 <HAL_GPIO_Init+0x270>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d013      	beq.n	8000df0 <HAL_GPIO_Init+0x13c>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a57      	ldr	r2, [pc, #348]	; (8000f28 <HAL_GPIO_Init+0x274>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d00f      	beq.n	8000df0 <HAL_GPIO_Init+0x13c>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a56      	ldr	r2, [pc, #344]	; (8000f2c <HAL_GPIO_Init+0x278>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d00b      	beq.n	8000df0 <HAL_GPIO_Init+0x13c>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a55      	ldr	r2, [pc, #340]	; (8000f30 <HAL_GPIO_Init+0x27c>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d007      	beq.n	8000df0 <HAL_GPIO_Init+0x13c>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a54      	ldr	r2, [pc, #336]	; (8000f34 <HAL_GPIO_Init+0x280>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x13c>
 8000de8:	21cd      	movs	r1, #205	; 0xcd
 8000dea:	4853      	ldr	r0, [pc, #332]	; (8000f38 <HAL_GPIO_Init+0x284>)
 8000dec:	f7ff fc2d 	bl	800064a <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4a56      	ldr	r2, [pc, #344]	; (8000f50 <HAL_GPIO_Init+0x29c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	f000 80c1 	beq.w	8000f7e <HAL_GPIO_Init+0x2ca>
 8000dfc:	4a54      	ldr	r2, [pc, #336]	; (8000f50 <HAL_GPIO_Init+0x29c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	f200 80e7 	bhi.w	8000fd2 <HAL_GPIO_Init+0x31e>
 8000e04:	4a4f      	ldr	r2, [pc, #316]	; (8000f44 <HAL_GPIO_Init+0x290>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	f000 80b9 	beq.w	8000f7e <HAL_GPIO_Init+0x2ca>
 8000e0c:	4a4d      	ldr	r2, [pc, #308]	; (8000f44 <HAL_GPIO_Init+0x290>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	f200 80df 	bhi.w	8000fd2 <HAL_GPIO_Init+0x31e>
 8000e14:	4a4d      	ldr	r2, [pc, #308]	; (8000f4c <HAL_GPIO_Init+0x298>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	f000 80b1 	beq.w	8000f7e <HAL_GPIO_Init+0x2ca>
 8000e1c:	4a4b      	ldr	r2, [pc, #300]	; (8000f4c <HAL_GPIO_Init+0x298>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	f200 80d7 	bhi.w	8000fd2 <HAL_GPIO_Init+0x31e>
 8000e24:	4a46      	ldr	r2, [pc, #280]	; (8000f40 <HAL_GPIO_Init+0x28c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	f000 80a9 	beq.w	8000f7e <HAL_GPIO_Init+0x2ca>
 8000e2c:	4a44      	ldr	r2, [pc, #272]	; (8000f40 <HAL_GPIO_Init+0x28c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	f200 80cf 	bhi.w	8000fd2 <HAL_GPIO_Init+0x31e>
 8000e34:	4a44      	ldr	r2, [pc, #272]	; (8000f48 <HAL_GPIO_Init+0x294>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	f000 80a1 	beq.w	8000f7e <HAL_GPIO_Init+0x2ca>
 8000e3c:	4a42      	ldr	r2, [pc, #264]	; (8000f48 <HAL_GPIO_Init+0x294>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	f200 80c7 	bhi.w	8000fd2 <HAL_GPIO_Init+0x31e>
 8000e44:	2b12      	cmp	r3, #18
 8000e46:	d82b      	bhi.n	8000ea0 <HAL_GPIO_Init+0x1ec>
 8000e48:	2b12      	cmp	r3, #18
 8000e4a:	f200 80c2 	bhi.w	8000fd2 <HAL_GPIO_Init+0x31e>
 8000e4e:	a201      	add	r2, pc, #4	; (adr r2, 8000e54 <HAL_GPIO_Init+0x1a0>)
 8000e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e54:	08000f7f 	.word	0x08000f7f
 8000e58:	08000ea9 	.word	0x08000ea9
 8000e5c:	08000efb 	.word	0x08000efb
 8000e60:	08000fcd 	.word	0x08000fcd
 8000e64:	08000fd3 	.word	0x08000fd3
 8000e68:	08000fd3 	.word	0x08000fd3
 8000e6c:	08000fd3 	.word	0x08000fd3
 8000e70:	08000fd3 	.word	0x08000fd3
 8000e74:	08000fd3 	.word	0x08000fd3
 8000e78:	08000fd3 	.word	0x08000fd3
 8000e7c:	08000fd3 	.word	0x08000fd3
 8000e80:	08000fd3 	.word	0x08000fd3
 8000e84:	08000fd3 	.word	0x08000fd3
 8000e88:	08000fd3 	.word	0x08000fd3
 8000e8c:	08000fd3 	.word	0x08000fd3
 8000e90:	08000fd3 	.word	0x08000fd3
 8000e94:	08000fd3 	.word	0x08000fd3
 8000e98:	08000ed1 	.word	0x08000ed1
 8000e9c:	08000f55 	.word	0x08000f55
 8000ea0:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <HAL_GPIO_Init+0x288>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d06b      	beq.n	8000f7e <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ea6:	e094      	b.n	8000fd2 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d00b      	beq.n	8000ec8 <HAL_GPIO_Init+0x214>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d007      	beq.n	8000ec8 <HAL_GPIO_Init+0x214>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x214>
 8000ec0:	21d5      	movs	r1, #213	; 0xd5
 8000ec2:	481d      	ldr	r0, [pc, #116]	; (8000f38 <HAL_GPIO_Init+0x284>)
 8000ec4:	f7ff fbc1 	bl	800064a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	623b      	str	r3, [r7, #32]
          break;
 8000ece:	e081      	b.n	8000fd4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d00b      	beq.n	8000ef0 <HAL_GPIO_Init+0x23c>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d007      	beq.n	8000ef0 <HAL_GPIO_Init+0x23c>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x23c>
 8000ee8:	21dc      	movs	r1, #220	; 0xdc
 8000eea:	4813      	ldr	r0, [pc, #76]	; (8000f38 <HAL_GPIO_Init+0x284>)
 8000eec:	f7ff fbad 	bl	800064a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e06c      	b.n	8000fd4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d00b      	beq.n	8000f1a <HAL_GPIO_Init+0x266>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d007      	beq.n	8000f1a <HAL_GPIO_Init+0x266>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x266>
 8000f12:	21e3      	movs	r1, #227	; 0xe3
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <HAL_GPIO_Init+0x284>)
 8000f16:	f7ff fb98 	bl	800064a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	3308      	adds	r3, #8
 8000f20:	623b      	str	r3, [r7, #32]
          break;
 8000f22:	e057      	b.n	8000fd4 <HAL_GPIO_Init+0x320>
 8000f24:	40010800 	.word	0x40010800
 8000f28:	40010c00 	.word	0x40010c00
 8000f2c:	40011000 	.word	0x40011000
 8000f30:	40011400 	.word	0x40011400
 8000f34:	40011800 	.word	0x40011800
 8000f38:	08008288 	.word	0x08008288
 8000f3c:	10110000 	.word	0x10110000
 8000f40:	10210000 	.word	0x10210000
 8000f44:	10310000 	.word	0x10310000
 8000f48:	10120000 	.word	0x10120000
 8000f4c:	10220000 	.word	0x10220000
 8000f50:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d00b      	beq.n	8000f74 <HAL_GPIO_Init+0x2c0>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d007      	beq.n	8000f74 <HAL_GPIO_Init+0x2c0>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x2c0>
 8000f6c:	21ea      	movs	r1, #234	; 0xea
 8000f6e:	4880      	ldr	r0, [pc, #512]	; (8001170 <HAL_GPIO_Init+0x4bc>)
 8000f70:	f7ff fb6b 	bl	800064a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	330c      	adds	r3, #12
 8000f7a:	623b      	str	r3, [r7, #32]
          break;
 8000f7c:	e02a      	b.n	8000fd4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00b      	beq.n	8000f9e <HAL_GPIO_Init+0x2ea>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d007      	beq.n	8000f9e <HAL_GPIO_Init+0x2ea>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x2ea>
 8000f96:	21f7      	movs	r1, #247	; 0xf7
 8000f98:	4875      	ldr	r0, [pc, #468]	; (8001170 <HAL_GPIO_Init+0x4bc>)
 8000f9a:	f7ff fb56 	bl	800064a <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	623b      	str	r3, [r7, #32]
          break;
 8000faa:	e013      	b.n	8000fd4 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d105      	bne.n	8000fc0 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	611a      	str	r2, [r3, #16]
          break;
 8000fbe:	e009      	b.n	8000fd4 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	615a      	str	r2, [r3, #20]
          break;
 8000fca:	e003      	b.n	8000fd4 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x320>
          break;
 8000fd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	2bff      	cmp	r3, #255	; 0xff
 8000fd8:	d801      	bhi.n	8000fde <HAL_GPIO_Init+0x32a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	e001      	b.n	8000fe2 <HAL_GPIO_Init+0x32e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2bff      	cmp	r3, #255	; 0xff
 8000fe8:	d802      	bhi.n	8000ff0 <HAL_GPIO_Init+0x33c>
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0x342>
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	3b08      	subs	r3, #8
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	401a      	ands	r2, r3
 8001008:	6a39      	ldr	r1, [r7, #32]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	431a      	orrs	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8096 	beq.w	8001150 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001024:	4b53      	ldr	r3, [pc, #332]	; (8001174 <HAL_GPIO_Init+0x4c0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a52      	ldr	r2, [pc, #328]	; (8001174 <HAL_GPIO_Init+0x4c0>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b50      	ldr	r3, [pc, #320]	; (8001174 <HAL_GPIO_Init+0x4c0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800103c:	4a4e      	ldr	r2, [pc, #312]	; (8001178 <HAL_GPIO_Init+0x4c4>)
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	220f      	movs	r2, #15
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a46      	ldr	r2, [pc, #280]	; (800117c <HAL_GPIO_Init+0x4c8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d013      	beq.n	8001090 <HAL_GPIO_Init+0x3dc>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a45      	ldr	r2, [pc, #276]	; (8001180 <HAL_GPIO_Init+0x4cc>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d00d      	beq.n	800108c <HAL_GPIO_Init+0x3d8>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a44      	ldr	r2, [pc, #272]	; (8001184 <HAL_GPIO_Init+0x4d0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d007      	beq.n	8001088 <HAL_GPIO_Init+0x3d4>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a43      	ldr	r2, [pc, #268]	; (8001188 <HAL_GPIO_Init+0x4d4>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d101      	bne.n	8001084 <HAL_GPIO_Init+0x3d0>
 8001080:	2303      	movs	r3, #3
 8001082:	e006      	b.n	8001092 <HAL_GPIO_Init+0x3de>
 8001084:	2304      	movs	r3, #4
 8001086:	e004      	b.n	8001092 <HAL_GPIO_Init+0x3de>
 8001088:	2302      	movs	r3, #2
 800108a:	e002      	b.n	8001092 <HAL_GPIO_Init+0x3de>
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <HAL_GPIO_Init+0x3de>
 8001090:	2300      	movs	r3, #0
 8001092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001094:	f002 0203 	and.w	r2, r2, #3
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	4093      	lsls	r3, r2
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010a2:	4935      	ldr	r1, [pc, #212]	; (8001178 <HAL_GPIO_Init+0x4c4>)
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d006      	beq.n	80010ca <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <HAL_GPIO_Init+0x4d8>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4932      	ldr	r1, [pc, #200]	; (800118c <HAL_GPIO_Init+0x4d8>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <HAL_GPIO_Init+0x4d8>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	492e      	ldr	r1, [pc, #184]	; (800118c <HAL_GPIO_Init+0x4d8>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010e4:	4b29      	ldr	r3, [pc, #164]	; (800118c <HAL_GPIO_Init+0x4d8>)
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	4928      	ldr	r1, [pc, #160]	; (800118c <HAL_GPIO_Init+0x4d8>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <HAL_GPIO_Init+0x4d8>)
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	4924      	ldr	r1, [pc, #144]	; (800118c <HAL_GPIO_Init+0x4d8>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <HAL_GPIO_Init+0x4d8>)
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	491e      	ldr	r1, [pc, #120]	; (800118c <HAL_GPIO_Init+0x4d8>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	608b      	str	r3, [r1, #8]
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_GPIO_Init+0x4d8>)
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	43db      	mvns	r3, r3
 8001122:	491a      	ldr	r1, [pc, #104]	; (800118c <HAL_GPIO_Init+0x4d8>)
 8001124:	4013      	ands	r3, r2
 8001126:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_GPIO_Init+0x4d8>)
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	4914      	ldr	r1, [pc, #80]	; (800118c <HAL_GPIO_Init+0x4d8>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	60cb      	str	r3, [r1, #12]
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_GPIO_Init+0x4d8>)
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	43db      	mvns	r3, r3
 800114a:	4910      	ldr	r1, [pc, #64]	; (800118c <HAL_GPIO_Init+0x4d8>)
 800114c:	4013      	ands	r3, r2
 800114e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	3301      	adds	r3, #1
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	fa22 f303 	lsr.w	r3, r2, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	f47f ae1e 	bne.w	8000da2 <HAL_GPIO_Init+0xee>
  }
}
 8001166:	bf00      	nop
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	; 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	08008288 	.word	0x08008288
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000
 800117c:	40010800 	.word	0x40010800
 8001180:	40010c00 	.word	0x40010c00
 8001184:	40011000 	.word	0x40011000
 8001188:	40011400 	.word	0x40011400
 800118c:	40010400 	.word	0x40010400

08001190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
 800119c:	4613      	mov	r3, r2
 800119e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <HAL_GPIO_WritePin+0x20>
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	0c1b      	lsrs	r3, r3, #16
 80011aa:	041b      	lsls	r3, r3, #16
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <HAL_GPIO_WritePin+0x2a>
 80011b0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80011b4:	480e      	ldr	r0, [pc, #56]	; (80011f0 <HAL_GPIO_WritePin+0x60>)
 80011b6:	f7ff fa48 	bl	800064a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80011ba:	787b      	ldrb	r3, [r7, #1]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <HAL_GPIO_WritePin+0x40>
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d004      	beq.n	80011d0 <HAL_GPIO_WritePin+0x40>
 80011c6:	f240 11d5 	movw	r1, #469	; 0x1d5
 80011ca:	4809      	ldr	r0, [pc, #36]	; (80011f0 <HAL_GPIO_WritePin+0x60>)
 80011cc:	f7ff fa3d 	bl	800064a <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011dc:	e003      	b.n	80011e6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	611a      	str	r2, [r3, #16]
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	08008288 	.word	0x08008288

080011f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <HAL_GPIO_TogglePin+0x1c>
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	0c1b      	lsrs	r3, r3, #16
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <HAL_GPIO_TogglePin+0x26>
 8001210:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <HAL_GPIO_TogglePin+0x4c>)
 8001216:	f7ff fa18 	bl	800064a <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001220:	887a      	ldrh	r2, [r7, #2]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4013      	ands	r3, r2
 8001226:	041a      	lsls	r2, r3, #16
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43d9      	mvns	r1, r3
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	400b      	ands	r3, r1
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	611a      	str	r2, [r3, #16]
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	08008288 	.word	0x08008288

08001244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001250:	695a      	ldr	r2, [r3, #20]
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	4013      	ands	r3, r2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d006      	beq.n	8001268 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f806 	bl	8001274 <HAL_GPIO_EXTI_Callback>
  }
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40010400 	.word	0x40010400

08001274 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e35a      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d01c      	beq.n	80012dc <HAL_RCC_OscConfig+0x54>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d116      	bne.n	80012dc <HAL_RCC_OscConfig+0x54>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d110      	bne.n	80012dc <HAL_RCC_OscConfig+0x54>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10a      	bne.n	80012dc <HAL_RCC_OscConfig+0x54>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d104      	bne.n	80012dc <HAL_RCC_OscConfig+0x54>
 80012d2:	f240 1167 	movw	r1, #359	; 0x167
 80012d6:	488f      	ldr	r0, [pc, #572]	; (8001514 <HAL_RCC_OscConfig+0x28c>)
 80012d8:	f7ff f9b7 	bl	800064a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 809a 	beq.w	800141e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00e      	beq.n	8001310 <HAL_RCC_OscConfig+0x88>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fa:	d009      	beq.n	8001310 <HAL_RCC_OscConfig+0x88>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001304:	d004      	beq.n	8001310 <HAL_RCC_OscConfig+0x88>
 8001306:	f240 116d 	movw	r1, #365	; 0x16d
 800130a:	4882      	ldr	r0, [pc, #520]	; (8001514 <HAL_RCC_OscConfig+0x28c>)
 800130c:	f7ff f99d 	bl	800064a <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001310:	4b81      	ldr	r3, [pc, #516]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b04      	cmp	r3, #4
 800131a:	d00c      	beq.n	8001336 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800131c:	4b7e      	ldr	r3, [pc, #504]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b08      	cmp	r3, #8
 8001326:	d112      	bne.n	800134e <HAL_RCC_OscConfig+0xc6>
 8001328:	4b7b      	ldr	r3, [pc, #492]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001334:	d10b      	bne.n	800134e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001336:	4b78      	ldr	r3, [pc, #480]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d06c      	beq.n	800141c <HAL_RCC_OscConfig+0x194>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d168      	bne.n	800141c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e300      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001356:	d106      	bne.n	8001366 <HAL_RCC_OscConfig+0xde>
 8001358:	4b6f      	ldr	r3, [pc, #444]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a6e      	ldr	r2, [pc, #440]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 800135e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	e02e      	b.n	80013c4 <HAL_RCC_OscConfig+0x13c>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0x100>
 800136e:	4b6a      	ldr	r3, [pc, #424]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a69      	ldr	r2, [pc, #420]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 8001374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b67      	ldr	r3, [pc, #412]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a66      	ldr	r2, [pc, #408]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 8001380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e01d      	b.n	80013c4 <HAL_RCC_OscConfig+0x13c>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x124>
 8001392:	4b61      	ldr	r3, [pc, #388]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a60      	ldr	r2, [pc, #384]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	4b5e      	ldr	r3, [pc, #376]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a5d      	ldr	r2, [pc, #372]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e00b      	b.n	80013c4 <HAL_RCC_OscConfig+0x13c>
 80013ac:	4b5a      	ldr	r3, [pc, #360]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a59      	ldr	r2, [pc, #356]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 80013b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b57      	ldr	r3, [pc, #348]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a56      	ldr	r2, [pc, #344]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 80013be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d013      	beq.n	80013f4 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb5a 	bl	8000a84 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fb56 	bl	8000a84 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e2b4      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b4c      	ldr	r3, [pc, #304]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x14c>
 80013f2:	e014      	b.n	800141e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fb46 	bl	8000a84 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fb42 	bl	8000a84 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e2a0      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140e:	4b42      	ldr	r3, [pc, #264]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x174>
 800141a:	e000      	b.n	800141e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8080 	beq.w	800152c <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_RCC_OscConfig+0x1be>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d004      	beq.n	8001446 <HAL_RCC_OscConfig+0x1be>
 800143c:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001440:	4834      	ldr	r0, [pc, #208]	; (8001514 <HAL_RCC_OscConfig+0x28c>)
 8001442:	f7ff f902 	bl	800064a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	2b1f      	cmp	r3, #31
 800144c:	d904      	bls.n	8001458 <HAL_RCC_OscConfig+0x1d0>
 800144e:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001452:	4830      	ldr	r0, [pc, #192]	; (8001514 <HAL_RCC_OscConfig+0x28c>)
 8001454:	f7ff f8f9 	bl	800064a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001458:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00b      	beq.n	800147c <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001464:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b08      	cmp	r3, #8
 800146e:	d11c      	bne.n	80014aa <HAL_RCC_OscConfig+0x222>
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d116      	bne.n	80014aa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_OscConfig+0x20c>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d001      	beq.n	8001494 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e25d      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	491d      	ldr	r1, [pc, #116]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a8:	e040      	b.n	800152c <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d020      	beq.n	80014f4 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_RCC_OscConfig+0x294>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fae4 	bl	8000a84 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c0:	f7ff fae0 	bl	8000a84 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e23e      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	490a      	ldr	r1, [pc, #40]	; (8001518 <HAL_RCC_OscConfig+0x290>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
 80014f2:	e01b      	b.n	800152c <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_OscConfig+0x294>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fac3 	bl	8000a84 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001500:	e00e      	b.n	8001520 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fabf 	bl	8000a84 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d907      	bls.n	8001520 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e21d      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
 8001514:	080082c4 	.word	0x080082c4
 8001518:	40021000 	.word	0x40021000
 800151c:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001520:	4b7d      	ldr	r3, [pc, #500]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ea      	bne.n	8001502 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d040      	beq.n	80015ba <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <HAL_RCC_OscConfig+0x2ca>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d004      	beq.n	8001552 <HAL_RCC_OscConfig+0x2ca>
 8001548:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800154c:	4873      	ldr	r0, [pc, #460]	; (800171c <HAL_RCC_OscConfig+0x494>)
 800154e:	f7ff f87c 	bl	800064a <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d019      	beq.n	800158e <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155a:	4b71      	ldr	r3, [pc, #452]	; (8001720 <HAL_RCC_OscConfig+0x498>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fa90 	bl	8000a84 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fa8c 	bl	8000a84 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1ea      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	4b67      	ldr	r3, [pc, #412]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001586:	2001      	movs	r0, #1
 8001588:	f000 fc4e 	bl	8001e28 <RCC_Delay>
 800158c:	e015      	b.n	80015ba <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158e:	4b64      	ldr	r3, [pc, #400]	; (8001720 <HAL_RCC_OscConfig+0x498>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff fa76 	bl	8000a84 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fa72 	bl	8000a84 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1d0      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ae:	4b5a      	ldr	r3, [pc, #360]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80bf 	beq.w	8001746 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00c      	beq.n	80015ee <HAL_RCC_OscConfig+0x366>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d008      	beq.n	80015ee <HAL_RCC_OscConfig+0x366>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d004      	beq.n	80015ee <HAL_RCC_OscConfig+0x366>
 80015e4:	f240 2111 	movw	r1, #529	; 0x211
 80015e8:	484c      	ldr	r0, [pc, #304]	; (800171c <HAL_RCC_OscConfig+0x494>)
 80015ea:	f7ff f82e 	bl	800064a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10d      	bne.n	8001616 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a46      	ldr	r2, [pc, #280]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001612:	2301      	movs	r3, #1
 8001614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	4b43      	ldr	r3, [pc, #268]	; (8001724 <HAL_RCC_OscConfig+0x49c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d118      	bne.n	8001654 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001622:	4b40      	ldr	r3, [pc, #256]	; (8001724 <HAL_RCC_OscConfig+0x49c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a3f      	ldr	r2, [pc, #252]	; (8001724 <HAL_RCC_OscConfig+0x49c>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7ff fa29 	bl	8000a84 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001636:	f7ff fa25 	bl	8000a84 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b64      	cmp	r3, #100	; 0x64
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e183      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	4b36      	ldr	r3, [pc, #216]	; (8001724 <HAL_RCC_OscConfig+0x49c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x3e2>
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a2d      	ldr	r2, [pc, #180]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	e02d      	b.n	80016c6 <HAL_RCC_OscConfig+0x43e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x404>
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a28      	ldr	r2, [pc, #160]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6213      	str	r3, [r2, #32]
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a25      	ldr	r2, [pc, #148]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	e01c      	b.n	80016c6 <HAL_RCC_OscConfig+0x43e>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x426>
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	e00b      	b.n	80016c6 <HAL_RCC_OscConfig+0x43e>
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d015      	beq.n	80016fa <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff f9d9 	bl	8000a84 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	e00a      	b.n	80016ec <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff f9d5 	bl	8000a84 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e131      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_RCC_OscConfig+0x490>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ee      	beq.n	80016d6 <HAL_RCC_OscConfig+0x44e>
 80016f8:	e01c      	b.n	8001734 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff f9c3 	bl	8000a84 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	e012      	b.n	8001728 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff f9bf 	bl	8000a84 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d909      	bls.n	8001728 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e11b      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
 8001718:	40021000 	.word	0x40021000
 800171c:	080082c4 	.word	0x080082c4
 8001720:	42420480 	.word	0x42420480
 8001724:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001728:	4b8b      	ldr	r3, [pc, #556]	; (8001958 <HAL_RCC_OscConfig+0x6d0>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e6      	bne.n	8001702 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d105      	bne.n	8001746 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173a:	4b87      	ldr	r3, [pc, #540]	; (8001958 <HAL_RCC_OscConfig+0x6d0>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a86      	ldr	r2, [pc, #536]	; (8001958 <HAL_RCC_OscConfig+0x6d0>)
 8001740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001744:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00c      	beq.n	8001768 <HAL_RCC_OscConfig+0x4e0>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d008      	beq.n	8001768 <HAL_RCC_OscConfig+0x4e0>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d004      	beq.n	8001768 <HAL_RCC_OscConfig+0x4e0>
 800175e:	f240 21af 	movw	r1, #687	; 0x2af
 8001762:	487e      	ldr	r0, [pc, #504]	; (800195c <HAL_RCC_OscConfig+0x6d4>)
 8001764:	f7fe ff71 	bl	800064a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80ee 	beq.w	800194e <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001772:	4b79      	ldr	r3, [pc, #484]	; (8001958 <HAL_RCC_OscConfig+0x6d0>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b08      	cmp	r3, #8
 800177c:	f000 80ce 	beq.w	800191c <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	2b02      	cmp	r3, #2
 8001786:	f040 80b2 	bne.w	80018ee <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_OscConfig+0x51e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179a:	d004      	beq.n	80017a6 <HAL_RCC_OscConfig+0x51e>
 800179c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80017a0:	486e      	ldr	r0, [pc, #440]	; (800195c <HAL_RCC_OscConfig+0x6d4>)
 80017a2:	f7fe ff52 	bl	800064a <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d04a      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017b6:	d045      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017c0:	d040      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80017ca:	d03b      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017d4:	d036      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80017de:	d031      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80017e8:	d02c      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80017f2:	d027      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017fc:	d022      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001806:	d01d      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001810:	d018      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800181a:	d013      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001824:	d00e      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800182e:	d009      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001838:	d004      	beq.n	8001844 <HAL_RCC_OscConfig+0x5bc>
 800183a:	f240 21b9 	movw	r1, #697	; 0x2b9
 800183e:	4847      	ldr	r0, [pc, #284]	; (800195c <HAL_RCC_OscConfig+0x6d4>)
 8001840:	f7fe ff03 	bl	800064a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001844:	4b46      	ldr	r3, [pc, #280]	; (8001960 <HAL_RCC_OscConfig+0x6d8>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff f91b 	bl	8000a84 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff f917 	bl	8000a84 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e075      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001864:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <HAL_RCC_OscConfig+0x6d0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001878:	d116      	bne.n	80018a8 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_RCC_OscConfig+0x60e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800188a:	d004      	beq.n	8001896 <HAL_RCC_OscConfig+0x60e>
 800188c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001890:	4832      	ldr	r0, [pc, #200]	; (800195c <HAL_RCC_OscConfig+0x6d4>)
 8001892:	f7fe feda 	bl	800064a <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001896:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_RCC_OscConfig+0x6d0>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	492d      	ldr	r1, [pc, #180]	; (8001958 <HAL_RCC_OscConfig+0x6d0>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_RCC_OscConfig+0x6d0>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a19      	ldr	r1, [r3, #32]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	430b      	orrs	r3, r1
 80018ba:	4927      	ldr	r1, [pc, #156]	; (8001958 <HAL_RCC_OscConfig+0x6d0>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_RCC_OscConfig+0x6d8>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff f8dd 	bl	8000a84 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff f8d9 	bl	8000a84 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e037      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_RCC_OscConfig+0x6d0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x646>
 80018ec:	e02f      	b.n	800194e <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_RCC_OscConfig+0x6d8>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff f8c6 	bl	8000a84 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff f8c2 	bl	8000a84 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e020      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_RCC_OscConfig+0x6d0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x674>
 800191a:	e018      	b.n	800194e <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e013      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_OscConfig+0x6d0>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	429a      	cmp	r2, r3
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d001      	beq.n	800194e <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	080082c4 	.word	0x080082c4
 8001960:	42420060 	.word	0x42420060

08001964 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e176      	b.n	8001c66 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d116      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x4e>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d110      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x4e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10a      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x4e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d104      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x4e>
 80019a8:	f44f 714e 	mov.w	r1, #824	; 0x338
 80019ac:	4874      	ldr	r0, [pc, #464]	; (8001b80 <HAL_RCC_ClockConfig+0x21c>)
 80019ae:	f7fe fe4c 	bl	800064a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00a      	beq.n	80019ce <HAL_RCC_ClockConfig+0x6a>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d007      	beq.n	80019ce <HAL_RCC_ClockConfig+0x6a>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d004      	beq.n	80019ce <HAL_RCC_ClockConfig+0x6a>
 80019c4:	f240 3139 	movw	r1, #825	; 0x339
 80019c8:	486d      	ldr	r0, [pc, #436]	; (8001b80 <HAL_RCC_ClockConfig+0x21c>)
 80019ca:	f7fe fe3e 	bl	800064a <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ce:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_RCC_ClockConfig+0x220>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d910      	bls.n	80019fe <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019dc:	4b69      	ldr	r3, [pc, #420]	; (8001b84 <HAL_RCC_ClockConfig+0x220>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 0207 	bic.w	r2, r3, #7
 80019e4:	4967      	ldr	r1, [pc, #412]	; (8001b84 <HAL_RCC_ClockConfig+0x220>)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ec:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <HAL_RCC_ClockConfig+0x220>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e133      	b.n	8001c66 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d049      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a16:	4b5c      	ldr	r3, [pc, #368]	; (8001b88 <HAL_RCC_ClockConfig+0x224>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a5b      	ldr	r2, [pc, #364]	; (8001b88 <HAL_RCC_ClockConfig+0x224>)
 8001a1c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a20:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a2e:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <HAL_RCC_ClockConfig+0x224>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a55      	ldr	r2, [pc, #340]	; (8001b88 <HAL_RCC_ClockConfig+0x224>)
 8001a34:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a38:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d024      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x128>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b80      	cmp	r3, #128	; 0x80
 8001a48:	d020      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x128>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b90      	cmp	r3, #144	; 0x90
 8001a50:	d01c      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x128>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2ba0      	cmp	r3, #160	; 0xa0
 8001a58:	d018      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x128>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2bb0      	cmp	r3, #176	; 0xb0
 8001a60:	d014      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x128>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2bc0      	cmp	r3, #192	; 0xc0
 8001a68:	d010      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x128>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2bd0      	cmp	r3, #208	; 0xd0
 8001a70:	d00c      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x128>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2be0      	cmp	r3, #224	; 0xe0
 8001a78:	d008      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x128>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2bf0      	cmp	r3, #240	; 0xf0
 8001a80:	d004      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x128>
 8001a82:	f240 315f 	movw	r1, #863	; 0x35f
 8001a86:	483e      	ldr	r0, [pc, #248]	; (8001b80 <HAL_RCC_ClockConfig+0x21c>)
 8001a88:	f7fe fddf 	bl	800064a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_RCC_ClockConfig+0x224>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	493b      	ldr	r1, [pc, #236]	; (8001b88 <HAL_RCC_ClockConfig+0x224>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d051      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00c      	beq.n	8001acc <HAL_RCC_ClockConfig+0x168>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d008      	beq.n	8001acc <HAL_RCC_ClockConfig+0x168>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d004      	beq.n	8001acc <HAL_RCC_ClockConfig+0x168>
 8001ac2:	f240 3166 	movw	r1, #870	; 0x366
 8001ac6:	482e      	ldr	r0, [pc, #184]	; (8001b80 <HAL_RCC_ClockConfig+0x21c>)
 8001ac8:	f7fe fdbf 	bl	800064a <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d107      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <HAL_RCC_ClockConfig+0x224>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d115      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0c0      	b.n	8001c66 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_RCC_ClockConfig+0x224>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0b4      	b.n	8001c66 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <HAL_RCC_ClockConfig+0x224>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0ac      	b.n	8001c66 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_RCC_ClockConfig+0x224>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 0203 	bic.w	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	491b      	ldr	r1, [pc, #108]	; (8001b88 <HAL_RCC_ClockConfig+0x224>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b1e:	f7fe ffb1 	bl	8000a84 <HAL_GetTick>
 8001b22:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b26:	f7fe ffad 	bl	8000a84 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e094      	b.n	8001c66 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_ClockConfig+0x224>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 020c 	and.w	r2, r3, #12
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d1eb      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_RCC_ClockConfig+0x220>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d217      	bcs.n	8001b8c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_ClockConfig+0x220>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 0207 	bic.w	r2, r3, #7
 8001b64:	4907      	ldr	r1, [pc, #28]	; (8001b84 <HAL_RCC_ClockConfig+0x220>)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_ClockConfig+0x220>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d008      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e073      	b.n	8001c66 <HAL_RCC_ClockConfig+0x302>
 8001b7e:	bf00      	nop
 8001b80:	080082c4 	.word	0x080082c4
 8001b84:	40022000 	.word	0x40022000
 8001b88:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d025      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d018      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x26e>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba8:	d013      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x26e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001bb2:	d00e      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x26e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x26e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bc6:	d004      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x26e>
 8001bc8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001bcc:	4828      	ldr	r0, [pc, #160]	; (8001c70 <HAL_RCC_ClockConfig+0x30c>)
 8001bce:	f7fe fd3c 	bl	800064a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <HAL_RCC_ClockConfig+0x310>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	4925      	ldr	r1, [pc, #148]	; (8001c74 <HAL_RCC_ClockConfig+0x310>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d026      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d018      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x2c6>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c00:	d013      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x2c6>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001c0a:	d00e      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x2c6>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x2c6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c1e:	d004      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x2c6>
 8001c20:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001c24:	4812      	ldr	r0, [pc, #72]	; (8001c70 <HAL_RCC_ClockConfig+0x30c>)
 8001c26:	f7fe fd10 	bl	800064a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_RCC_ClockConfig+0x310>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	490e      	ldr	r1, [pc, #56]	; (8001c74 <HAL_RCC_ClockConfig+0x310>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c3e:	f000 f821 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001c42:	4602      	mov	r2, r0
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCC_ClockConfig+0x310>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	490a      	ldr	r1, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x314>)
 8001c50:	5ccb      	ldrb	r3, [r1, r3]
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <HAL_RCC_ClockConfig+0x318>)
 8001c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_RCC_ClockConfig+0x31c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fd36 	bl	80006d0 <HAL_InitTick>

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	080082c4 	.word	0x080082c4
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08008478 	.word	0x08008478
 8001c7c:	20000004 	.word	0x20000004
 8001c80:	20000008 	.word	0x20000008

08001c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c84:	b490      	push	{r4, r7}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c8a:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c8c:	1d3c      	adds	r4, r7, #4
 8001c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c94:	f240 2301 	movw	r3, #513	; 0x201
 8001c98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x46>
 8001cc2:	e02b      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cc6:	623b      	str	r3, [r7, #32]
      break;
 8001cc8:	e02b      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	0c9b      	lsrs	r3, r3, #18
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3328      	adds	r3, #40	; 0x28
 8001cd4:	443b      	add	r3, r7
 8001cd6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cda:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d012      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	0c5b      	lsrs	r3, r3, #17
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	3328      	adds	r3, #40	; 0x28
 8001cf2:	443b      	add	r3, r7
 8001cf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cfe:	fb03 f202 	mul.w	r2, r3, r2
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0a:	e004      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	623b      	str	r3, [r7, #32]
      break;
 8001d1a:	e002      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d1e:	623b      	str	r3, [r7, #32]
      break;
 8001d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d22:	6a3b      	ldr	r3, [r7, #32]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc90      	pop	{r4, r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	080082fc 	.word	0x080082fc
 8001d34:	40021000 	.word	0x40021000
 8001d38:	007a1200 	.word	0x007a1200
 8001d3c:	003d0900 	.word	0x003d0900

08001d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d44:	4b02      	ldr	r3, [pc, #8]	; (8001d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	20000004 	.word	0x20000004

08001d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d58:	f7ff fff2 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4903      	ldr	r1, [pc, #12]	; (8001d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08008488 	.word	0x08008488

08001d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d80:	f7ff ffde 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	0adb      	lsrs	r3, r3, #11
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4903      	ldr	r1, [pc, #12]	; (8001da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08008488 	.word	0x08008488

08001da4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d104      	bne.n	8001dbe <HAL_RCC_GetClockConfig+0x1a>
 8001db4:	f240 5123 	movw	r1, #1315	; 0x523
 8001db8:	4818      	ldr	r0, [pc, #96]	; (8001e1c <HAL_RCC_GetClockConfig+0x78>)
 8001dba:	f7fe fc46 	bl	800064a <assert_failed>
  assert_param(pFLatency != NULL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d104      	bne.n	8001dce <HAL_RCC_GetClockConfig+0x2a>
 8001dc4:	f240 5124 	movw	r1, #1316	; 0x524
 8001dc8:	4814      	ldr	r0, [pc, #80]	; (8001e1c <HAL_RCC_GetClockConfig+0x78>)
 8001dca:	f7fe fc3e 	bl	800064a <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_RCC_GetClockConfig+0x7c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_RCC_GetClockConfig+0x7c>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_RCC_GetClockConfig+0x7c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_GetClockConfig+0x7c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_RCC_GetClockConfig+0x80>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0207 	and.w	r2, r3, #7
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	080082c4 	.word	0x080082c4
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40022000 	.word	0x40022000

08001e28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <RCC_Delay+0x34>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <RCC_Delay+0x38>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0a5b      	lsrs	r3, r3, #9
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e44:	bf00      	nop
  }
  while (Delay --);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1e5a      	subs	r2, r3, #1
 8001e4a:	60fa      	str	r2, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f9      	bne.n	8001e44 <RCC_Delay+0x1c>
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	10624dd3 	.word	0x10624dd3

08001e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e093      	b.n	8001f9e <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a4b      	ldr	r2, [pc, #300]	; (8001fa8 <HAL_TIM_Base_Init+0x144>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d013      	beq.n	8001ea8 <HAL_TIM_Base_Init+0x44>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e88:	d00e      	beq.n	8001ea8 <HAL_TIM_Base_Init+0x44>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a47      	ldr	r2, [pc, #284]	; (8001fac <HAL_TIM_Base_Init+0x148>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d009      	beq.n	8001ea8 <HAL_TIM_Base_Init+0x44>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a45      	ldr	r2, [pc, #276]	; (8001fb0 <HAL_TIM_Base_Init+0x14c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d004      	beq.n	8001ea8 <HAL_TIM_Base_Init+0x44>
 8001e9e:	f240 1113 	movw	r1, #275	; 0x113
 8001ea2:	4844      	ldr	r0, [pc, #272]	; (8001fb4 <HAL_TIM_Base_Init+0x150>)
 8001ea4:	f7fe fbd1 	bl	800064a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d014      	beq.n	8001eda <HAL_TIM_Base_Init+0x76>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b10      	cmp	r3, #16
 8001eb6:	d010      	beq.n	8001eda <HAL_TIM_Base_Init+0x76>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d00c      	beq.n	8001eda <HAL_TIM_Base_Init+0x76>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	d008      	beq.n	8001eda <HAL_TIM_Base_Init+0x76>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b60      	cmp	r3, #96	; 0x60
 8001ece:	d004      	beq.n	8001eda <HAL_TIM_Base_Init+0x76>
 8001ed0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001ed4:	4837      	ldr	r0, [pc, #220]	; (8001fb4 <HAL_TIM_Base_Init+0x150>)
 8001ed6:	f7fe fbb8 	bl	800064a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00e      	beq.n	8001f00 <HAL_TIM_Base_Init+0x9c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eea:	d009      	beq.n	8001f00 <HAL_TIM_Base_Init+0x9c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef4:	d004      	beq.n	8001f00 <HAL_TIM_Base_Init+0x9c>
 8001ef6:	f240 1115 	movw	r1, #277	; 0x115
 8001efa:	482e      	ldr	r0, [pc, #184]	; (8001fb4 <HAL_TIM_Base_Init+0x150>)
 8001efc:	f7fe fba5 	bl	800064a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <HAL_TIM_Base_Init+0xb6>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d004      	beq.n	8001f1a <HAL_TIM_Base_Init+0xb6>
 8001f10:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001f14:	4827      	ldr	r0, [pc, #156]	; (8001fb4 <HAL_TIM_Base_Init+0x150>)
 8001f16:	f7fe fb98 	bl	800064a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f842 	bl	8001fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f000 f9d8 	bl	80022fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40000400 	.word	0x40000400
 8001fb0:	40000800 	.word	0x40000800
 8001fb4:	0800830c 	.word	0x0800830c

08001fb8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a2e      	ldr	r2, [pc, #184]	; (8002094 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_TIM_Base_Start_IT+0x3a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d00e      	beq.n	8002006 <HAL_TIM_Base_Start_IT+0x3a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a2a      	ldr	r2, [pc, #168]	; (8002098 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d009      	beq.n	8002006 <HAL_TIM_Base_Start_IT+0x3a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a29      	ldr	r2, [pc, #164]	; (800209c <HAL_TIM_Base_Start_IT+0xd0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d004      	beq.n	8002006 <HAL_TIM_Base_Start_IT+0x3a>
 8001ffc:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002000:	4827      	ldr	r0, [pc, #156]	; (80020a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002002:	f7fe fb22 	bl	800064a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d001      	beq.n	8002016 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e03a      	b.n	800208c <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2202      	movs	r2, #2
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a18      	ldr	r2, [pc, #96]	; (8002094 <HAL_TIM_Base_Start_IT+0xc8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00e      	beq.n	8002056 <HAL_TIM_Base_Start_IT+0x8a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002040:	d009      	beq.n	8002056 <HAL_TIM_Base_Start_IT+0x8a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a14      	ldr	r2, [pc, #80]	; (8002098 <HAL_TIM_Base_Start_IT+0xcc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d004      	beq.n	8002056 <HAL_TIM_Base_Start_IT+0x8a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a12      	ldr	r2, [pc, #72]	; (800209c <HAL_TIM_Base_Start_IT+0xd0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d111      	bne.n	800207a <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b06      	cmp	r3, #6
 8002066:	d010      	beq.n	800208a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002078:	e007      	b.n	800208a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40012c00 	.word	0x40012c00
 8002098:	40000400 	.word	0x40000400
 800209c:	40000800 	.word	0x40000800
 80020a0:	0800830c 	.word	0x0800830c

080020a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d122      	bne.n	8002100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d11b      	bne.n	8002100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0202 	mvn.w	r2, #2
 80020d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f8ed 	bl	80022c6 <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8e0 	bl	80022b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f8ef 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b04      	cmp	r3, #4
 800210c:	d122      	bne.n	8002154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b04      	cmp	r3, #4
 800211a:	d11b      	bne.n	8002154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0204 	mvn.w	r2, #4
 8002124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8c3 	bl	80022c6 <HAL_TIM_IC_CaptureCallback>
 8002140:	e005      	b.n	800214e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8b6 	bl	80022b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f8c5 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b08      	cmp	r3, #8
 8002160:	d122      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b08      	cmp	r3, #8
 800216e:	d11b      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0208 	mvn.w	r2, #8
 8002178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2204      	movs	r2, #4
 800217e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f899 	bl	80022c6 <HAL_TIM_IC_CaptureCallback>
 8002194:	e005      	b.n	80021a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f88c 	bl	80022b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f89b 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d122      	bne.n	80021fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d11b      	bne.n	80021fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0210 	mvn.w	r2, #16
 80021cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2208      	movs	r2, #8
 80021d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f86f 	bl	80022c6 <HAL_TIM_IC_CaptureCallback>
 80021e8:	e005      	b.n	80021f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f862 	bl	80022b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f871 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b01      	cmp	r3, #1
 8002208:	d10e      	bne.n	8002228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d107      	bne.n	8002228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0201 	mvn.w	r2, #1
 8002220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe f9fa 	bl	800061c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	2b80      	cmp	r3, #128	; 0x80
 8002234:	d10e      	bne.n	8002254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	2b80      	cmp	r3, #128	; 0x80
 8002242:	d107      	bne.n	8002254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f8bf 	bl	80023d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b40      	cmp	r3, #64	; 0x40
 8002260:	d10e      	bne.n	8002280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	2b40      	cmp	r3, #64	; 0x40
 800226e:	d107      	bne.n	8002280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f835 	bl	80022ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b20      	cmp	r3, #32
 800228c:	d10e      	bne.n	80022ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b20      	cmp	r3, #32
 800229a:	d107      	bne.n	80022ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0220 	mvn.w	r2, #32
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f88a 	bl	80023c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a29      	ldr	r2, [pc, #164]	; (80023b4 <TIM_Base_SetConfig+0xb8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00b      	beq.n	800232c <TIM_Base_SetConfig+0x30>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231a:	d007      	beq.n	800232c <TIM_Base_SetConfig+0x30>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a26      	ldr	r2, [pc, #152]	; (80023b8 <TIM_Base_SetConfig+0xbc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <TIM_Base_SetConfig+0x30>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a25      	ldr	r2, [pc, #148]	; (80023bc <TIM_Base_SetConfig+0xc0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d108      	bne.n	800233e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <TIM_Base_SetConfig+0xb8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00b      	beq.n	800235e <TIM_Base_SetConfig+0x62>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234c:	d007      	beq.n	800235e <TIM_Base_SetConfig+0x62>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <TIM_Base_SetConfig+0xbc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <TIM_Base_SetConfig+0x62>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a18      	ldr	r2, [pc, #96]	; (80023bc <TIM_Base_SetConfig+0xc0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d108      	bne.n	8002370 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <TIM_Base_SetConfig+0xb8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d103      	bne.n	80023a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	615a      	str	r2, [r3, #20]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40000800 	.word	0x40000800

080023c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e092      	b.n	800251c <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d02c      	beq.n	8002458 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a48      	ldr	r2, [pc, #288]	; (8002524 <HAL_UART_Init+0x140>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00e      	beq.n	8002426 <HAL_UART_Init+0x42>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a46      	ldr	r2, [pc, #280]	; (8002528 <HAL_UART_Init+0x144>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d009      	beq.n	8002426 <HAL_UART_Init+0x42>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a45      	ldr	r2, [pc, #276]	; (800252c <HAL_UART_Init+0x148>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_UART_Init+0x42>
 800241c:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8002420:	4843      	ldr	r0, [pc, #268]	; (8002530 <HAL_UART_Init+0x14c>)
 8002422:	f7fe f912 	bl	800064a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d028      	beq.n	8002480 <HAL_UART_Init+0x9c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002436:	d023      	beq.n	8002480 <HAL_UART_Init+0x9c>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002440:	d01e      	beq.n	8002480 <HAL_UART_Init+0x9c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800244a:	d019      	beq.n	8002480 <HAL_UART_Init+0x9c>
 800244c:	f240 116d 	movw	r1, #365	; 0x16d
 8002450:	4837      	ldr	r0, [pc, #220]	; (8002530 <HAL_UART_Init+0x14c>)
 8002452:	f7fe f8fa 	bl	800064a <assert_failed>
 8002456:	e013      	b.n	8002480 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a31      	ldr	r2, [pc, #196]	; (8002524 <HAL_UART_Init+0x140>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00e      	beq.n	8002480 <HAL_UART_Init+0x9c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a30      	ldr	r2, [pc, #192]	; (8002528 <HAL_UART_Init+0x144>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d009      	beq.n	8002480 <HAL_UART_Init+0x9c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a2e      	ldr	r2, [pc, #184]	; (800252c <HAL_UART_Init+0x148>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d004      	beq.n	8002480 <HAL_UART_Init+0x9c>
 8002476:	f240 1171 	movw	r1, #369	; 0x171
 800247a:	482d      	ldr	r0, [pc, #180]	; (8002530 <HAL_UART_Init+0x14c>)
 800247c:	f7fe f8e5 	bl	800064a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <HAL_UART_Init+0xb8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002490:	d004      	beq.n	800249c <HAL_UART_Init+0xb8>
 8002492:	f240 1173 	movw	r1, #371	; 0x173
 8002496:	4826      	ldr	r0, [pc, #152]	; (8002530 <HAL_UART_Init+0x14c>)
 8002498:	f7fe f8d7 	bl	800064a <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe fa5b 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2224      	movs	r2, #36	; 0x24
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f830 	bl	8002534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002502:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40013800 	.word	0x40013800
 8002528:	40004400 	.word	0x40004400
 800252c:	40004800 	.word	0x40004800
 8002530:	08008344 	.word	0x08008344

08002534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a5f      	ldr	r2, [pc, #380]	; (80026c0 <UART_SetConfig+0x18c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d904      	bls.n	8002550 <UART_SetConfig+0x1c>
 8002546:	f640 6153 	movw	r1, #3667	; 0xe53
 800254a:	485e      	ldr	r0, [pc, #376]	; (80026c4 <UART_SetConfig+0x190>)
 800254c:	f7fe f87d 	bl	800064a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d009      	beq.n	800256c <UART_SetConfig+0x38>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002560:	d004      	beq.n	800256c <UART_SetConfig+0x38>
 8002562:	f640 6154 	movw	r1, #3668	; 0xe54
 8002566:	4857      	ldr	r0, [pc, #348]	; (80026c4 <UART_SetConfig+0x190>)
 8002568:	f7fe f86f 	bl	800064a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00e      	beq.n	8002592 <UART_SetConfig+0x5e>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257c:	d009      	beq.n	8002592 <UART_SetConfig+0x5e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002586:	d004      	beq.n	8002592 <UART_SetConfig+0x5e>
 8002588:	f640 6155 	movw	r1, #3669	; 0xe55
 800258c:	484d      	ldr	r0, [pc, #308]	; (80026c4 <UART_SetConfig+0x190>)
 800258e:	f7fe f85c 	bl	800064a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d103      	bne.n	80025a8 <UART_SetConfig+0x74>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d104      	bne.n	80025b2 <UART_SetConfig+0x7e>
 80025a8:	f640 6156 	movw	r1, #3670	; 0xe56
 80025ac:	4845      	ldr	r0, [pc, #276]	; (80026c4 <UART_SetConfig+0x190>)
 80025ae:	f7fe f84c 	bl	800064a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025e4:	f023 030c 	bic.w	r3, r3, #12
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	430b      	orrs	r3, r1
 80025f0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2e      	ldr	r2, [pc, #184]	; (80026c8 <UART_SetConfig+0x194>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d103      	bne.n	800261a <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002612:	f7ff fbb3 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	e002      	b.n	8002620 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800261a:	f7ff fb9b 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 800261e:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	009a      	lsls	r2, r3, #2
 800262a:	441a      	add	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	4a25      	ldr	r2, [pc, #148]	; (80026cc <UART_SetConfig+0x198>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	0119      	lsls	r1, r3, #4
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	009a      	lsls	r2, r3, #2
 800264a:	441a      	add	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	fbb2 f2f3 	udiv	r2, r2, r3
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <UART_SetConfig+0x198>)
 8002658:	fba3 0302 	umull	r0, r3, r3, r2
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	2064      	movs	r0, #100	; 0x64
 8002660:	fb00 f303 	mul.w	r3, r0, r3
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	3332      	adds	r3, #50	; 0x32
 800266a:	4a18      	ldr	r2, [pc, #96]	; (80026cc <UART_SetConfig+0x198>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002676:	4419      	add	r1, r3
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	009a      	lsls	r2, r3, #2
 8002682:	441a      	add	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	fbb2 f2f3 	udiv	r2, r2, r3
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <UART_SetConfig+0x198>)
 8002690:	fba3 0302 	umull	r0, r3, r3, r2
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	2064      	movs	r0, #100	; 0x64
 8002698:	fb00 f303 	mul.w	r3, r0, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	3332      	adds	r3, #50	; 0x32
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <UART_SetConfig+0x198>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	f003 020f 	and.w	r2, r3, #15
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	440a      	add	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	0044aa20 	.word	0x0044aa20
 80026c4:	08008344 	.word	0x08008344
 80026c8:	40013800 	.word	0x40013800
 80026cc:	51eb851f 	.word	0x51eb851f

080026d0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026d6:	f3ef 8305 	mrs	r3, IPSR
 80026da:	60bb      	str	r3, [r7, #8]
  return(result);
 80026dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10f      	bne.n	8002702 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e2:	f3ef 8310 	mrs	r3, PRIMASK
 80026e6:	607b      	str	r3, [r7, #4]
  return(result);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <osKernelInitialize+0x32>
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <osKernelInitialize+0x60>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d109      	bne.n	800270a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026f6:	f3ef 8311 	mrs	r3, BASEPRI
 80026fa:	603b      	str	r3, [r7, #0]
  return(result);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002702:	f06f 0305 	mvn.w	r3, #5
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e00c      	b.n	8002724 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <osKernelInitialize+0x60>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <osKernelInitialize+0x60>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e002      	b.n	8002724 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800271e:	f04f 33ff 	mov.w	r3, #4294967295
 8002722:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002724:	68fb      	ldr	r3, [r7, #12]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	20000130 	.word	0x20000130

08002734 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800273a:	f3ef 8305 	mrs	r3, IPSR
 800273e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002740:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002746:	f3ef 8310 	mrs	r3, PRIMASK
 800274a:	607b      	str	r3, [r7, #4]
  return(result);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <osKernelStart+0x32>
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <osKernelStart+0x64>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d109      	bne.n	800276e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800275a:	f3ef 8311 	mrs	r3, BASEPRI
 800275e:	603b      	str	r3, [r7, #0]
  return(result);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002766:	f06f 0305 	mvn.w	r3, #5
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	e00e      	b.n	800278c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <osKernelStart+0x64>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d107      	bne.n	8002786 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <osKernelStart+0x64>)
 8002778:	2202      	movs	r2, #2
 800277a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800277c:	f001 f92e 	bl	80039dc <vTaskStartScheduler>
      stat = osOK;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e002      	b.n	800278c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800278c:	68fb      	ldr	r3, [r7, #12]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000130 	.word	0x20000130

0800279c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b092      	sub	sp, #72	; 0x48
 80027a0:	af04      	add	r7, sp, #16
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027ac:	f3ef 8305 	mrs	r3, IPSR
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f040 8094 	bne.w	80028e2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ba:	f3ef 8310 	mrs	r3, PRIMASK
 80027be:	623b      	str	r3, [r7, #32]
  return(result);
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 808d 	bne.w	80028e2 <osThreadNew+0x146>
 80027c8:	4b48      	ldr	r3, [pc, #288]	; (80028ec <osThreadNew+0x150>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d106      	bne.n	80027de <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027d0:	f3ef 8311 	mrs	r3, BASEPRI
 80027d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f040 8082 	bne.w	80028e2 <osThreadNew+0x146>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d07e      	beq.n	80028e2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80027e8:	2318      	movs	r3, #24
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80027ec:	2300      	movs	r3, #0
 80027ee:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80027f0:	f107 031b 	add.w	r3, r7, #27
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d045      	beq.n	800288e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <osThreadNew+0x74>
        name = attr->name;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <osThreadNew+0x9a>
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	2b38      	cmp	r3, #56	; 0x38
 8002828:	d805      	bhi.n	8002836 <osThreadNew+0x9a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <osThreadNew+0x9e>
        return (NULL);
 8002836:	2300      	movs	r3, #0
 8002838:	e054      	b.n	80028e4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00e      	beq.n	8002870 <osThreadNew+0xd4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2bbb      	cmp	r3, #187	; 0xbb
 8002858:	d90a      	bls.n	8002870 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <osThreadNew+0xd4>
        mem = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
 800286e:	e010      	b.n	8002892 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10c      	bne.n	8002892 <osThreadNew+0xf6>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d108      	bne.n	8002892 <osThreadNew+0xf6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <osThreadNew+0xf6>
          mem = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
 800288c:	e001      	b.n	8002892 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	2b01      	cmp	r3, #1
 8002896:	d110      	bne.n	80028ba <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028a0:	9202      	str	r2, [sp, #8]
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fe8e 	bl	80035d0 <xTaskCreateStatic>
 80028b4:	4603      	mov	r3, r0
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e013      	b.n	80028e2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d110      	bne.n	80028e2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fed8 	bl	8003688 <xTaskCreate>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d001      	beq.n	80028e2 <osThreadNew+0x146>
          hTask = NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028e2:	697b      	ldr	r3, [r7, #20]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3738      	adds	r7, #56	; 0x38
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000130 	.word	0x20000130

080028f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028f8:	f3ef 8305 	mrs	r3, IPSR
 80028fc:	613b      	str	r3, [r7, #16]
  return(result);
 80028fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10f      	bne.n	8002924 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002904:	f3ef 8310 	mrs	r3, PRIMASK
 8002908:	60fb      	str	r3, [r7, #12]
  return(result);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <osDelay+0x34>
 8002910:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <osDelay+0x58>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d109      	bne.n	800292c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002918:	f3ef 8311 	mrs	r3, BASEPRI
 800291c:	60bb      	str	r3, [r7, #8]
  return(result);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <osDelay+0x3c>
    stat = osErrorISR;
 8002924:	f06f 0305 	mvn.w	r3, #5
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e007      	b.n	800293c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f001 f818 	bl	800396c <vTaskDelay>
    }
  }

  return (stat);
 800293c:	697b      	ldr	r3, [r7, #20]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000130 	.word	0x20000130

0800294c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a06      	ldr	r2, [pc, #24]	; (8002974 <vApplicationGetIdleTaskMemory+0x28>)
 800295c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4a05      	ldr	r2, [pc, #20]	; (8002978 <vApplicationGetIdleTaskMemory+0x2c>)
 8002962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	601a      	str	r2, [r3, #0]
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	20000134 	.word	0x20000134
 8002978:	200001f0 	.word	0x200001f0

0800297c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800298c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4a06      	ldr	r2, [pc, #24]	; (80029ac <vApplicationGetTimerTaskMemory+0x30>)
 8002992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800299a:	601a      	str	r2, [r3, #0]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	200003f0 	.word	0x200003f0
 80029ac:	200004ac 	.word	0x200004ac

080029b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f103 0208 	add.w	r2, r3, #8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f103 0208 	add.w	r2, r3, #8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f103 0208 	add.w	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	601a      	str	r2, [r3, #0]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d103      	bne.n	8002a6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	e00c      	b.n	8002a86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3308      	adds	r3, #8
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e002      	b.n	8002a7a <vListInsert+0x2e>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d2f6      	bcs.n	8002a74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	601a      	str	r2, [r3, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6892      	ldr	r2, [r2, #8]
 8002ad2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6852      	ldr	r2, [r2, #4]
 8002adc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d103      	bne.n	8002af0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	1e5a      	subs	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
	...

08002b10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b36:	bf00      	nop
 8002b38:	e7fe      	b.n	8002b38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b3a:	f002 f907 	bl	8004d4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	68f9      	ldr	r1, [r7, #12]
 8002b48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	441a      	add	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	441a      	add	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	22ff      	movs	r2, #255	; 0xff
 8002b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	22ff      	movs	r2, #255	; 0xff
 8002b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d114      	bne.n	8002bba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01a      	beq.n	8002bce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3310      	adds	r3, #16
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 f9e9 	bl	8003f74 <xTaskRemoveFromEventList>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d012      	beq.n	8002bce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <xQueueGenericReset+0xcc>)
 8002baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	e009      	b.n	8002bce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3310      	adds	r3, #16
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fef6 	bl	80029b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3324      	adds	r3, #36	; 0x24
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fef1 	bl	80029b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bce:	f002 f8ed 	bl	8004dac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bd2:	2301      	movs	r3, #1
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	e000ed04 	.word	0xe000ed04

08002be0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08e      	sub	sp, #56	; 0x38
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10a      	bne.n	8002c0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c22:	bf00      	nop
 8002c24:	e7fe      	b.n	8002c24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <xQueueGenericCreateStatic+0x52>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <xQueueGenericCreateStatic+0x56>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <xQueueGenericCreateStatic+0x58>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	623b      	str	r3, [r7, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	e7fe      	b.n	8002c50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <xQueueGenericCreateStatic+0x7e>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <xQueueGenericCreateStatic+0x82>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <xQueueGenericCreateStatic+0x84>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	61fb      	str	r3, [r7, #28]
}
 8002c7a:	bf00      	nop
 8002c7c:	e7fe      	b.n	8002c7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c7e:	2350      	movs	r3, #80	; 0x50
 8002c80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b50      	cmp	r3, #80	; 0x50
 8002c86:	d00a      	beq.n	8002c9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	61bb      	str	r3, [r7, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cb0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f805 	bl	8002cce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3730      	adds	r7, #48	; 0x30
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d103      	bne.n	8002cea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e002      	b.n	8002cf0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	69b8      	ldr	r0, [r7, #24]
 8002d00:	f7ff ff06 	bl	8002b10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	68f9      	ldr	r1, [r7, #12]
 8002d12:	2073      	movs	r0, #115	; 0x73
 8002d14:	f003 f998 	bl	8006048 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b090      	sub	sp, #64	; 0x40
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <xQueueGenericSend+0x32>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d4e:	bf00      	nop
 8002d50:	e7fe      	b.n	8002d50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <xQueueGenericSend+0x40>
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <xQueueGenericSend+0x44>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <xQueueGenericSend+0x46>
 8002d64:	2300      	movs	r3, #0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <xQueueGenericSend+0x60>
	__asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d7c:	bf00      	nop
 8002d7e:	e7fe      	b.n	8002d7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d103      	bne.n	8002d8e <xQueueGenericSend+0x6e>
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <xQueueGenericSend+0x72>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <xQueueGenericSend+0x74>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <xQueueGenericSend+0x8e>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	623b      	str	r3, [r7, #32]
}
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dae:	f001 fae3 	bl	8004378 <xTaskGetSchedulerState>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <xQueueGenericSend+0x9e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <xQueueGenericSend+0xa2>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <xQueueGenericSend+0xa4>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <xQueueGenericSend+0xbe>
	__asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	61fb      	str	r3, [r7, #28]
}
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dde:	f001 ffb5 	bl	8004d4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <xQueueGenericSend+0xd4>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d136      	bne.n	8002e62 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 fde2 	bl	80069c0 <SEGGER_SYSVIEW_ShrinkId>
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	460b      	mov	r3, r1
 8002e06:	4601      	mov	r1, r0
 8002e08:	205a      	movs	r0, #90	; 0x5a
 8002e0a:	f003 f993 	bl	8006134 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e14:	f000 fa66 	bl	80032e4 <prvCopyDataToQueue>
 8002e18:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	3324      	adds	r3, #36	; 0x24
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 f8a4 	bl	8003f74 <xTaskRemoveFromEventList>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d013      	beq.n	8002e5a <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e32:	4b4d      	ldr	r3, [pc, #308]	; (8002f68 <xQueueGenericSend+0x248>)
 8002e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	e00a      	b.n	8002e5a <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <xQueueGenericSend+0x248>)
 8002e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e5a:	f001 ffa7 	bl	8004dac <vPortExitCritical>
				return pdPASS;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e07d      	b.n	8002f5e <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d110      	bne.n	8002e8a <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e68:	f001 ffa0 	bl	8004dac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f003 fda6 	bl	80069c0 <SEGGER_SYSVIEW_ShrinkId>
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4601      	mov	r1, r0
 8002e80:	205a      	movs	r0, #90	; 0x5a
 8002e82:	f003 f957 	bl	8006134 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e069      	b.n	8002f5e <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d106      	bne.n	8002e9e <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 f8d5 	bl	8004044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e9e:	f001 ff85 	bl	8004dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ea2:	f000 fe0b 	bl	8003abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ea6:	f001 ff51 	bl	8004d4c <vPortEnterCritical>
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb0:	b25b      	sxtb	r3, r3
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d103      	bne.n	8002ec0 <xQueueGenericSend+0x1a0>
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec6:	b25b      	sxtb	r3, r3
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d103      	bne.n	8002ed6 <xQueueGenericSend+0x1b6>
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ed6:	f001 ff69 	bl	8004dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eda:	1d3a      	adds	r2, r7, #4
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 f8c4 	bl	8004070 <xTaskCheckForTimeOut>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d124      	bne.n	8002f38 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef0:	f000 faf0 	bl	80034d4 <prvIsQueueFull>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d018      	beq.n	8002f2c <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	3310      	adds	r3, #16
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 ffe4 	bl	8003ed0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f0a:	f000 fa7b 	bl	8003404 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f0e:	f000 fde3 	bl	8003ad8 <xTaskResumeAll>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f47f af62 	bne.w	8002dde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <xQueueGenericSend+0x248>)
 8002f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	e758      	b.n	8002dde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f2e:	f000 fa69 	bl	8003404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f32:	f000 fdd1 	bl	8003ad8 <xTaskResumeAll>
 8002f36:	e752      	b.n	8002dde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f3a:	f000 fa63 	bl	8003404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f3e:	f000 fdcb 	bl	8003ad8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	4618      	mov	r0, r3
 8002f46:	f003 fd3b 	bl	80069c0 <SEGGER_SYSVIEW_ShrinkId>
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	460b      	mov	r3, r1
 8002f54:	4601      	mov	r1, r0
 8002f56:	205a      	movs	r0, #90	; 0x5a
 8002f58:	f003 f8ec 	bl	8006134 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8002f5c:	2300      	movs	r3, #0
		}
	}
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3738      	adds	r7, #56	; 0x38
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08e      	sub	sp, #56	; 0x38
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f96:	bf00      	nop
 8002f98:	e7fe      	b.n	8002f98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d103      	bne.n	8002fa8 <xQueueGenericSendFromISR+0x3c>
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <xQueueGenericSendFromISR+0x40>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <xQueueGenericSendFromISR+0x42>
 8002fac:	2300      	movs	r3, #0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	623b      	str	r3, [r7, #32]
}
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d103      	bne.n	8002fd6 <xQueueGenericSendFromISR+0x6a>
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <xQueueGenericSendFromISR+0x6e>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <xQueueGenericSendFromISR+0x70>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	61fb      	str	r3, [r7, #28]
}
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ff6:	f001 ff6b 	bl	8004ed0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ffa:	f3ef 8211 	mrs	r2, BASEPRI
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	61ba      	str	r2, [r7, #24]
 8003010:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003012:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301e:	429a      	cmp	r2, r3
 8003020:	d302      	bcc.n	8003028 <xQueueGenericSendFromISR+0xbc>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d136      	bne.n	8003096 <xQueueGenericSendFromISR+0x12a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800302e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	4618      	mov	r0, r3
 8003036:	f003 fcc3 	bl	80069c0 <SEGGER_SYSVIEW_ShrinkId>
 800303a:	4601      	mov	r1, r0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	461a      	mov	r2, r3
 8003040:	2060      	movs	r0, #96	; 0x60
 8003042:	f002 ffa7 	bl	8005f94 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800304c:	f000 f94a 	bl	80032e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003050:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d112      	bne.n	8003080 <xQueueGenericSendFromISR+0x114>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d016      	beq.n	8003090 <xQueueGenericSendFromISR+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	3324      	adds	r3, #36	; 0x24
 8003066:	4618      	mov	r0, r3
 8003068:	f000 ff84 	bl	8003f74 <xTaskRemoveFromEventList>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00e      	beq.n	8003090 <xQueueGenericSendFromISR+0x124>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <xQueueGenericSendFromISR+0x124>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e007      	b.n	8003090 <xQueueGenericSendFromISR+0x124>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003080:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003084:	3301      	adds	r3, #1
 8003086:	b2db      	uxtb	r3, r3
 8003088:	b25a      	sxtb	r2, r3
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003090:	2301      	movs	r3, #1
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003094:	e00b      	b.n	80030ae <xQueueGenericSendFromISR+0x142>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	4618      	mov	r0, r3
 800309a:	f003 fc91 	bl	80069c0 <SEGGER_SYSVIEW_ShrinkId>
 800309e:	4601      	mov	r1, r0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	461a      	mov	r2, r3
 80030a4:	2060      	movs	r0, #96	; 0x60
 80030a6:	f002 ff75 	bl	8005f94 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3738      	adds	r7, #56	; 0x38
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b08f      	sub	sp, #60	; 0x3c
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <xQueueReceive+0x30>
	__asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	623b      	str	r3, [r7, #32]
}
 80030f0:	bf00      	nop
 80030f2:	e7fe      	b.n	80030f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <xQueueReceive+0x3e>
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <xQueueReceive+0x42>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <xQueueReceive+0x44>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <xQueueReceive+0x5e>
	__asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	61fb      	str	r3, [r7, #28]
}
 800311e:	bf00      	nop
 8003120:	e7fe      	b.n	8003120 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003122:	f001 f929 	bl	8004378 <xTaskGetSchedulerState>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <xQueueReceive+0x6e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <xQueueReceive+0x72>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <xQueueReceive+0x74>
 8003136:	2300      	movs	r3, #0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xQueueReceive+0x8e>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	61bb      	str	r3, [r7, #24]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003152:	f001 fdfb 	bl	8004d4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d02f      	beq.n	80031c2 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003166:	f000 f927 	bl	80033b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	4618      	mov	r0, r3
 800316e:	f003 fc27 	bl	80069c0 <SEGGER_SYSVIEW_ShrinkId>
 8003172:	4604      	mov	r4, r0
 8003174:	2000      	movs	r0, #0
 8003176:	f003 fc23 	bl	80069c0 <SEGGER_SYSVIEW_ShrinkId>
 800317a:	4602      	mov	r2, r0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2101      	movs	r1, #1
 8003180:	9100      	str	r1, [sp, #0]
 8003182:	4621      	mov	r1, r4
 8003184:	205c      	movs	r0, #92	; 0x5c
 8003186:	f002 ffd5 	bl	8006134 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	1e5a      	subs	r2, r3, #1
 800318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003190:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00f      	beq.n	80031ba <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	3310      	adds	r3, #16
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fee8 	bl	8003f74 <xTaskRemoveFromEventList>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031aa:	4b4d      	ldr	r3, [pc, #308]	; (80032e0 <xQueueReceive+0x21c>)
 80031ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031ba:	f001 fdf7 	bl	8004dac <vPortExitCritical>
				return pdPASS;
 80031be:	2301      	movs	r3, #1
 80031c0:	e08a      	b.n	80032d8 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d113      	bne.n	80031f0 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031c8:	f001 fdf0 	bl	8004dac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	4618      	mov	r0, r3
 80031d0:	f003 fbf6 	bl	80069c0 <SEGGER_SYSVIEW_ShrinkId>
 80031d4:	4604      	mov	r4, r0
 80031d6:	2000      	movs	r0, #0
 80031d8:	f003 fbf2 	bl	80069c0 <SEGGER_SYSVIEW_ShrinkId>
 80031dc:	4602      	mov	r2, r0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2101      	movs	r1, #1
 80031e2:	9100      	str	r1, [sp, #0]
 80031e4:	4621      	mov	r1, r4
 80031e6:	205c      	movs	r0, #92	; 0x5c
 80031e8:	f002 ffa4 	bl	8006134 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e073      	b.n	80032d8 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031f6:	f107 0310 	add.w	r3, r7, #16
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 ff22 	bl	8004044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003200:	2301      	movs	r3, #1
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003204:	f001 fdd2 	bl	8004dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003208:	f000 fc58 	bl	8003abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800320c:	f001 fd9e 	bl	8004d4c <vPortEnterCritical>
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003216:	b25b      	sxtb	r3, r3
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d103      	bne.n	8003226 <xQueueReceive+0x162>
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800322c:	b25b      	sxtb	r3, r3
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003232:	d103      	bne.n	800323c <xQueueReceive+0x178>
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800323c:	f001 fdb6 	bl	8004dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003240:	1d3a      	adds	r2, r7, #4
 8003242:	f107 0310 	add.w	r3, r7, #16
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 ff11 	bl	8004070 <xTaskCheckForTimeOut>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d124      	bne.n	800329e <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003256:	f000 f927 	bl	80034a8 <prvIsQueueEmpty>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d018      	beq.n	8003292 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	3324      	adds	r3, #36	; 0x24
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fe31 	bl	8003ed0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800326e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003270:	f000 f8c8 	bl	8003404 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003274:	f000 fc30 	bl	8003ad8 <xTaskResumeAll>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	f47f af69 	bne.w	8003152 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003280:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <xQueueReceive+0x21c>)
 8003282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	e75f      	b.n	8003152 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003294:	f000 f8b6 	bl	8003404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003298:	f000 fc1e 	bl	8003ad8 <xTaskResumeAll>
 800329c:	e759      	b.n	8003152 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800329e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032a0:	f000 f8b0 	bl	8003404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032a4:	f000 fc18 	bl	8003ad8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032aa:	f000 f8fd 	bl	80034a8 <prvIsQueueEmpty>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f43f af4e 	beq.w	8003152 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 fb81 	bl	80069c0 <SEGGER_SYSVIEW_ShrinkId>
 80032be:	4604      	mov	r4, r0
 80032c0:	2000      	movs	r0, #0
 80032c2:	f003 fb7d 	bl	80069c0 <SEGGER_SYSVIEW_ShrinkId>
 80032c6:	4602      	mov	r2, r0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2101      	movs	r1, #1
 80032cc:	9100      	str	r1, [sp, #0]
 80032ce:	4621      	mov	r1, r4
 80032d0:	205c      	movs	r0, #92	; 0x5c
 80032d2:	f002 ff2f 	bl	8006134 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80032d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3734      	adds	r7, #52	; 0x34
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd90      	pop	{r4, r7, pc}
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10d      	bne.n	800331e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d14d      	bne.n	80033a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	f001 f850 	bl	80043b4 <xTaskPriorityDisinherit>
 8003314:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	e043      	b.n	80033a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d119      	bne.n	8003358 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6898      	ldr	r0, [r3, #8]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	461a      	mov	r2, r3
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	f003 ff25 	bl	800717e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	441a      	add	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	429a      	cmp	r2, r3
 800334c:	d32b      	bcc.n	80033a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	e026      	b.n	80033a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68d8      	ldr	r0, [r3, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	461a      	mov	r2, r3
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	f003 ff0b 	bl	800717e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	425b      	negs	r3, r3
 8003372:	441a      	add	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d207      	bcs.n	8003394 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	425b      	negs	r3, r3
 800338e:	441a      	add	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d105      	bne.n	80033a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033ae:	697b      	ldr	r3, [r7, #20]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d018      	beq.n	80033fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	441a      	add	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d303      	bcc.n	80033ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68d9      	ldr	r1, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	461a      	mov	r2, r3
 80033f6:	6838      	ldr	r0, [r7, #0]
 80033f8:	f003 fec1 	bl	800717e <memcpy>
	}
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800340c:	f001 fc9e 	bl	8004d4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003416:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003418:	e011      	b.n	800343e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	2b00      	cmp	r3, #0
 8003420:	d012      	beq.n	8003448 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3324      	adds	r3, #36	; 0x24
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fda4 	bl	8003f74 <xTaskRemoveFromEventList>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003432:	f000 fe7f 	bl	8004134 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	3b01      	subs	r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800343e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	dce9      	bgt.n	800341a <prvUnlockQueue+0x16>
 8003446:	e000      	b.n	800344a <prvUnlockQueue+0x46>
					break;
 8003448:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	22ff      	movs	r2, #255	; 0xff
 800344e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003452:	f001 fcab 	bl	8004dac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003456:	f001 fc79 	bl	8004d4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003460:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003462:	e011      	b.n	8003488 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3310      	adds	r3, #16
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fd7f 	bl	8003f74 <xTaskRemoveFromEventList>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800347c:	f000 fe5a 	bl	8004134 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003480:	7bbb      	ldrb	r3, [r7, #14]
 8003482:	3b01      	subs	r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800348c:	2b00      	cmp	r3, #0
 800348e:	dce9      	bgt.n	8003464 <prvUnlockQueue+0x60>
 8003490:	e000      	b.n	8003494 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003492:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	22ff      	movs	r2, #255	; 0xff
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800349c:	f001 fc86 	bl	8004dac <vPortExitCritical>
}
 80034a0:	bf00      	nop
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034b0:	f001 fc4c 	bl	8004d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d102      	bne.n	80034c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034bc:	2301      	movs	r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e001      	b.n	80034c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034c6:	f001 fc71 	bl	8004dac <vPortExitCritical>

	return xReturn;
 80034ca:	68fb      	ldr	r3, [r7, #12]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034dc:	f001 fc36 	bl	8004d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d102      	bne.n	80034f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034ec:	2301      	movs	r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e001      	b.n	80034f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034f6:	f001 fc59 	bl	8004dac <vPortExitCritical>

	return xReturn;
 80034fa:	68fb      	ldr	r3, [r7, #12]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e01e      	b.n	8003552 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003514:	4a13      	ldr	r2, [pc, #76]	; (8003564 <vQueueAddToRegistry+0x60>)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d115      	bne.n	800354c <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003520:	4910      	ldr	r1, [pc, #64]	; (8003564 <vQueueAddToRegistry+0x60>)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800352a:	4a0e      	ldr	r2, [pc, #56]	; (8003564 <vQueueAddToRegistry+0x60>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4618      	mov	r0, r3
 800353a:	f003 fa41 	bl	80069c0 <SEGGER_SYSVIEW_ShrinkId>
 800353e:	4601      	mov	r1, r0
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	2071      	movs	r0, #113	; 0x71
 8003546:	f002 fd25 	bl	8005f94 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800354a:	e006      	b.n	800355a <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3301      	adds	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b07      	cmp	r3, #7
 8003556:	d9dd      	bls.n	8003514 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003558:	bf00      	nop
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200008ac 	.word	0x200008ac

08003568 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003578:	f001 fbe8 	bl	8004d4c <vPortEnterCritical>
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003582:	b25b      	sxtb	r3, r3
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d103      	bne.n	8003592 <vQueueWaitForMessageRestricted+0x2a>
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003598:	b25b      	sxtb	r3, r3
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359e:	d103      	bne.n	80035a8 <vQueueWaitForMessageRestricted+0x40>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a8:	f001 fc00 	bl	8004dac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	3324      	adds	r3, #36	; 0x24
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fcab 	bl	8003f18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035c2:	6978      	ldr	r0, [r7, #20]
 80035c4:	f7ff ff1e 	bl	8003404 <prvUnlockQueue>
	}
 80035c8:	bf00      	nop
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08e      	sub	sp, #56	; 0x38
 80035d4:	af04      	add	r7, sp, #16
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	623b      	str	r3, [r7, #32]
}
 80035f6:	bf00      	nop
 80035f8:	e7fe      	b.n	80035f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <xTaskCreateStatic+0x46>
	__asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	61fb      	str	r3, [r7, #28]
}
 8003612:	bf00      	nop
 8003614:	e7fe      	b.n	8003614 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003616:	23bc      	movs	r3, #188	; 0xbc
 8003618:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	2bbc      	cmp	r3, #188	; 0xbc
 800361e:	d00a      	beq.n	8003636 <xTaskCreateStatic+0x66>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	61bb      	str	r3, [r7, #24]
}
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01e      	beq.n	800367a <xTaskCreateStatic+0xaa>
 800363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01b      	beq.n	800367a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800364a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	2202      	movs	r2, #2
 8003650:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003654:	2300      	movs	r3, #0
 8003656:	9303      	str	r3, [sp, #12]
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	9302      	str	r3, [sp, #8]
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f851 	bl	8003714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003674:	f000 f8ec 	bl	8003850 <prvAddNewTaskToReadyList>
 8003678:	e001      	b.n	800367e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800367e:	697b      	ldr	r3, [r7, #20]
	}
 8003680:	4618      	mov	r0, r3
 8003682:	3728      	adds	r7, #40	; 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af04      	add	r7, sp, #16
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fc55 	bl	8004f4c <pvPortMalloc>
 80036a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00e      	beq.n	80036c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80036aa:	20bc      	movs	r0, #188	; 0xbc
 80036ac:	f001 fc4e 	bl	8004f4c <pvPortMalloc>
 80036b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
 80036be:	e005      	b.n	80036cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036c0:	6978      	ldr	r0, [r7, #20]
 80036c2:	f001 fd07 	bl	80050d4 <vPortFree>
 80036c6:	e001      	b.n	80036cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d017      	beq.n	8003702 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	2300      	movs	r3, #0
 80036de:	9303      	str	r3, [sp, #12]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	9302      	str	r3, [sp, #8]
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f80f 	bl	8003714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036f6:	69f8      	ldr	r0, [r7, #28]
 80036f8:	f000 f8aa 	bl	8003850 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036fc:	2301      	movs	r3, #1
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e002      	b.n	8003708 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003702:	f04f 33ff 	mov.w	r3, #4294967295
 8003706:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003708:	69bb      	ldr	r3, [r7, #24]
	}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	461a      	mov	r2, r3
 800372c:	21a5      	movs	r1, #165	; 0xa5
 800372e:	f003 fd34 	bl	800719a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800373c:	3b01      	subs	r3, #1
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f023 0307 	bic.w	r3, r3, #7
 800374a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	617b      	str	r3, [r7, #20]
}
 8003768:	bf00      	nop
 800376a:	e7fe      	b.n	800376a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800376c:	2300      	movs	r3, #0
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	e012      	b.n	8003798 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	7819      	ldrb	r1, [r3, #0]
 800377a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	4413      	add	r3, r2
 8003780:	3334      	adds	r3, #52	; 0x34
 8003782:	460a      	mov	r2, r1
 8003784:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d006      	beq.n	80037a0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3301      	adds	r3, #1
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	2b0f      	cmp	r3, #15
 800379c:	d9e9      	bls.n	8003772 <prvInitialiseNewTask+0x5e>
 800379e:	e000      	b.n	80037a2 <prvInitialiseNewTask+0x8e>
		{
			break;
 80037a0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	2b37      	cmp	r3, #55	; 0x37
 80037ae:	d901      	bls.n	80037b4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037b0:	2337      	movs	r3, #55	; 0x37
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	2200      	movs	r2, #0
 80037c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	3304      	adds	r3, #4
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff f90f 	bl	80029ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	3318      	adds	r3, #24
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff f90a 	bl	80029ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	3354      	adds	r3, #84	; 0x54
 8003804:	2260      	movs	r2, #96	; 0x60
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f003 fcc6 	bl	800719a <memset>
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <prvInitialiseNewTask+0x130>)
 8003812:	659a      	str	r2, [r3, #88]	; 0x58
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <prvInitialiseNewTask+0x134>)
 8003818:	65da      	str	r2, [r3, #92]	; 0x5c
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	4a0b      	ldr	r2, [pc, #44]	; (800384c <prvInitialiseNewTask+0x138>)
 800381e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	68f9      	ldr	r1, [r7, #12]
 8003824:	69b8      	ldr	r0, [r7, #24]
 8003826:	f001 f9a1 	bl	8004b6c <pxPortInitialiseStack>
 800382a:	4602      	mov	r2, r0
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800383c:	bf00      	nop
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	080084c4 	.word	0x080084c4
 8003848:	080084e4 	.word	0x080084e4
 800384c:	080084a4 	.word	0x080084a4

08003850 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003850:	b5b0      	push	{r4, r5, r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af02      	add	r7, sp, #8
 8003856:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003858:	f001 fa78 	bl	8004d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800385c:	4b3c      	ldr	r3, [pc, #240]	; (8003950 <prvAddNewTaskToReadyList+0x100>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	4a3b      	ldr	r2, [pc, #236]	; (8003950 <prvAddNewTaskToReadyList+0x100>)
 8003864:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003866:	4b3b      	ldr	r3, [pc, #236]	; (8003954 <prvAddNewTaskToReadyList+0x104>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800386e:	4a39      	ldr	r2, [pc, #228]	; (8003954 <prvAddNewTaskToReadyList+0x104>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003874:	4b36      	ldr	r3, [pc, #216]	; (8003950 <prvAddNewTaskToReadyList+0x100>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d110      	bne.n	800389e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800387c:	f000 fc7e 	bl	800417c <prvInitialiseTaskLists>
 8003880:	e00d      	b.n	800389e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003882:	4b35      	ldr	r3, [pc, #212]	; (8003958 <prvAddNewTaskToReadyList+0x108>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800388a:	4b32      	ldr	r3, [pc, #200]	; (8003954 <prvAddNewTaskToReadyList+0x104>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	429a      	cmp	r2, r3
 8003896:	d802      	bhi.n	800389e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003898:	4a2e      	ldr	r2, [pc, #184]	; (8003954 <prvAddNewTaskToReadyList+0x104>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800389e:	4b2f      	ldr	r3, [pc, #188]	; (800395c <prvAddNewTaskToReadyList+0x10c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	4a2d      	ldr	r2, [pc, #180]	; (800395c <prvAddNewTaskToReadyList+0x10c>)
 80038a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038a8:	4b2c      	ldr	r3, [pc, #176]	; (800395c <prvAddNewTaskToReadyList+0x10c>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <prvAddNewTaskToReadyList+0x94>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f002 ffb5 	bl	8006828 <SEGGER_SYSVIEW_OnTaskCreate>
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	461d      	mov	r5, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	461c      	mov	r4, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	1ae3      	subs	r3, r4, r3
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	462b      	mov	r3, r5
 80038e0:	f003 fa90 	bl	8006e04 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f003 f826 	bl	8006938 <SEGGER_SYSVIEW_OnTaskStartReady>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <prvAddNewTaskToReadyList+0x110>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d903      	bls.n	8003900 <prvAddNewTaskToReadyList+0xb0>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4a18      	ldr	r2, [pc, #96]	; (8003960 <prvAddNewTaskToReadyList+0x110>)
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <prvAddNewTaskToReadyList+0x114>)
 800390e:	441a      	add	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f7ff f875 	bl	8002a06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800391c:	f001 fa46 	bl	8004dac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003920:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <prvAddNewTaskToReadyList+0x108>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00e      	beq.n	8003946 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <prvAddNewTaskToReadyList+0x104>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	429a      	cmp	r2, r3
 8003934:	d207      	bcs.n	8003946 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <prvAddNewTaskToReadyList+0x118>)
 8003938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bdb0      	pop	{r4, r5, r7, pc}
 800394e:	bf00      	nop
 8003950:	20000dc0 	.word	0x20000dc0
 8003954:	200008ec 	.word	0x200008ec
 8003958:	20000dcc 	.word	0x20000dcc
 800395c:	20000ddc 	.word	0x20000ddc
 8003960:	20000dc8 	.word	0x20000dc8
 8003964:	200008f0 	.word	0x200008f0
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01b      	beq.n	80039b6 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800397e:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <vTaskDelay+0x68>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <vTaskDelay+0x30>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	60bb      	str	r3, [r7, #8]
}
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800399c:	f000 f88e 	bl	8003abc <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	2023      	movs	r0, #35	; 0x23
 80039a4:	f002 faba 	bl	8005f1c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039a8:	2100      	movs	r1, #0
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fd78 	bl	80044a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039b0:	f000 f892 	bl	8003ad8 <xTaskResumeAll>
 80039b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <vTaskDelay+0x6c>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000de8 	.word	0x20000de8
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	; 0x28
 80039e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039ea:	463a      	mov	r2, r7
 80039ec:	1d39      	adds	r1, r7, #4
 80039ee:	f107 0308 	add.w	r3, r7, #8
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe ffaa 	bl	800294c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	9202      	str	r2, [sp, #8]
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2300      	movs	r3, #0
 8003a08:	460a      	mov	r2, r1
 8003a0a:	4924      	ldr	r1, [pc, #144]	; (8003a9c <vTaskStartScheduler+0xc0>)
 8003a0c:	4824      	ldr	r0, [pc, #144]	; (8003aa0 <vTaskStartScheduler+0xc4>)
 8003a0e:	f7ff fddf 	bl	80035d0 <xTaskCreateStatic>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <vTaskStartScheduler+0xc8>)
 8003a16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a18:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <vTaskStartScheduler+0xc8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a20:	2301      	movs	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	e001      	b.n	8003a2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d102      	bne.n	8003a36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a30:	f000 fd8a 	bl	8004548 <xTimerCreateTimerTask>
 8003a34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d11b      	bne.n	8003a74 <vTaskStartScheduler+0x98>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	613b      	str	r3, [r7, #16]
}
 8003a4e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a50:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <vTaskStartScheduler+0xcc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3354      	adds	r3, #84	; 0x54
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <vTaskStartScheduler+0xd0>)
 8003a58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <vTaskStartScheduler+0xd4>)
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a62:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <vTaskStartScheduler+0xd8>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <vTaskStartScheduler+0xdc>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a6e:	f001 f8fb 	bl	8004c68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a72:	e00e      	b.n	8003a92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d10a      	bne.n	8003a92 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	60fb      	str	r3, [r7, #12]
}
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <vTaskStartScheduler+0xb4>
}
 8003a92:	bf00      	nop
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	08008380 	.word	0x08008380
 8003aa0:	0800414d 	.word	0x0800414d
 8003aa4:	20000de4 	.word	0x20000de4
 8003aa8:	200008ec 	.word	0x200008ec
 8003aac:	20000014 	.word	0x20000014
 8003ab0:	20000de0 	.word	0x20000de0
 8003ab4:	20000dcc 	.word	0x20000dcc
 8003ab8:	20000dc4 	.word	0x20000dc4

08003abc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <vTaskSuspendAll+0x18>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	4a03      	ldr	r2, [pc, #12]	; (8003ad4 <vTaskSuspendAll+0x18>)
 8003ac8:	6013      	str	r3, [r2, #0]
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000de8 	.word	0x20000de8

08003ad8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ae6:	4b44      	ldr	r3, [pc, #272]	; (8003bf8 <xTaskResumeAll+0x120>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <xTaskResumeAll+0x2c>
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	603b      	str	r3, [r7, #0]
}
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b04:	f001 f922 	bl	8004d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b08:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <xTaskResumeAll+0x120>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	4a3a      	ldr	r2, [pc, #232]	; (8003bf8 <xTaskResumeAll+0x120>)
 8003b10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b12:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <xTaskResumeAll+0x120>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d166      	bne.n	8003be8 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b1a:	4b38      	ldr	r3, [pc, #224]	; (8003bfc <xTaskResumeAll+0x124>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d062      	beq.n	8003be8 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b22:	e033      	b.n	8003b8c <xTaskResumeAll+0xb4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b24:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <xTaskResumeAll+0x128>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3318      	adds	r3, #24
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe ffc3 	bl	8002abc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe ffbe 	bl	8002abc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f002 fef8 	bl	8006938 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	4b2d      	ldr	r3, [pc, #180]	; (8003c04 <xTaskResumeAll+0x12c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d903      	bls.n	8003b5c <xTaskResumeAll+0x84>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	4a2a      	ldr	r2, [pc, #168]	; (8003c04 <xTaskResumeAll+0x12c>)
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4a27      	ldr	r2, [pc, #156]	; (8003c08 <xTaskResumeAll+0x130>)
 8003b6a:	441a      	add	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f7fe ff47 	bl	8002a06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	4b23      	ldr	r3, [pc, #140]	; (8003c0c <xTaskResumeAll+0x134>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8003b86:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <xTaskResumeAll+0x138>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b8c:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <xTaskResumeAll+0x128>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1c7      	bne.n	8003b24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b9a:	f000 fbc9 	bl	8004330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <xTaskResumeAll+0x13c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d010      	beq.n	8003bcc <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003baa:	f000 f857 	bl	8003c5c <xTaskIncrementTick>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8003bb4:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <xTaskResumeAll+0x138>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f1      	bne.n	8003baa <xTaskResumeAll+0xd2>

						uxPendedTicks = 0;
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <xTaskResumeAll+0x13c>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bcc:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <xTaskResumeAll+0x138>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <xTaskResumeAll+0x140>)
 8003bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003be8:	f001 f8e0 	bl	8004dac <vPortExitCritical>

	return xAlreadyYielded;
 8003bec:	68bb      	ldr	r3, [r7, #8]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000de8 	.word	0x20000de8
 8003bfc:	20000dc0 	.word	0x20000dc0
 8003c00:	20000d80 	.word	0x20000d80
 8003c04:	20000dc8 	.word	0x20000dc8
 8003c08:	200008f0 	.word	0x200008f0
 8003c0c:	200008ec 	.word	0x200008ec
 8003c10:	20000dd4 	.word	0x20000dd4
 8003c14:	20000dd0 	.word	0x20000dd0
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c22:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <xTaskGetTickCount+0x18>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c28:	687b      	ldr	r3, [r7, #4]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	20000dc4 	.word	0x20000dc4

08003c38 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c3e:	f001 f947 	bl	8004ed0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <xTaskGetTickCountFromISR+0x20>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c4c:	683b      	ldr	r3, [r7, #0]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000dc4 	.word	0x20000dc4

08003c5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c66:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <xTaskIncrementTick+0x158>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f040 8092 	bne.w	8003d94 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c70:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <xTaskIncrementTick+0x15c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c78:	4a4f      	ldr	r2, [pc, #316]	; (8003db8 <xTaskIncrementTick+0x15c>)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d120      	bne.n	8003cc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c84:	4b4d      	ldr	r3, [pc, #308]	; (8003dbc <xTaskIncrementTick+0x160>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	603b      	str	r3, [r7, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	e7fe      	b.n	8003ca2 <xTaskIncrementTick+0x46>
 8003ca4:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <xTaskIncrementTick+0x160>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	4b45      	ldr	r3, [pc, #276]	; (8003dc0 <xTaskIncrementTick+0x164>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a43      	ldr	r2, [pc, #268]	; (8003dbc <xTaskIncrementTick+0x160>)
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4a43      	ldr	r2, [pc, #268]	; (8003dc0 <xTaskIncrementTick+0x164>)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b42      	ldr	r3, [pc, #264]	; (8003dc4 <xTaskIncrementTick+0x168>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	4a41      	ldr	r2, [pc, #260]	; (8003dc4 <xTaskIncrementTick+0x168>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	f000 fb35 	bl	8004330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cc6:	4b40      	ldr	r3, [pc, #256]	; (8003dc8 <xTaskIncrementTick+0x16c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d352      	bcc.n	8003d76 <xTaskIncrementTick+0x11a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd0:	4b3a      	ldr	r3, [pc, #232]	; (8003dbc <xTaskIncrementTick+0x160>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <xTaskIncrementTick+0x82>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <xTaskIncrementTick+0x84>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce4:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <xTaskIncrementTick+0x16c>)
 8003ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cea:	601a      	str	r2, [r3, #0]
					break;
 8003cec:	e043      	b.n	8003d76 <xTaskIncrementTick+0x11a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cee:	4b33      	ldr	r3, [pc, #204]	; (8003dbc <xTaskIncrementTick+0x160>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d203      	bcs.n	8003d0e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d06:	4a30      	ldr	r2, [pc, #192]	; (8003dc8 <xTaskIncrementTick+0x16c>)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6013      	str	r3, [r2, #0]
						break;
 8003d0c:	e033      	b.n	8003d76 <xTaskIncrementTick+0x11a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fed2 	bl	8002abc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	3318      	adds	r3, #24
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fec9 	bl	8002abc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f002 fe03 	bl	8006938 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d36:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <xTaskIncrementTick+0x170>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d903      	bls.n	8003d46 <xTaskIncrementTick+0xea>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	4a22      	ldr	r2, [pc, #136]	; (8003dcc <xTaskIncrementTick+0x170>)
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <xTaskIncrementTick+0x174>)
 8003d54:	441a      	add	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	f7fe fe52 	bl	8002a06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <xTaskIncrementTick+0x178>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d3af      	bcc.n	8003cd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d74:	e7ac      	b.n	8003cd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <xTaskIncrementTick+0x178>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7c:	4914      	ldr	r1, [pc, #80]	; (8003dd0 <xTaskIncrementTick+0x174>)
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d907      	bls.n	8003d9e <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e004      	b.n	8003d9e <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <xTaskIncrementTick+0x17c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	4a0f      	ldr	r2, [pc, #60]	; (8003dd8 <xTaskIncrementTick+0x17c>)
 8003d9c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <xTaskIncrementTick+0x180>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8003da6:	2301      	movs	r3, #1
 8003da8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003daa:	697b      	ldr	r3, [r7, #20]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000de8 	.word	0x20000de8
 8003db8:	20000dc4 	.word	0x20000dc4
 8003dbc:	20000d78 	.word	0x20000d78
 8003dc0:	20000d7c 	.word	0x20000d7c
 8003dc4:	20000dd8 	.word	0x20000dd8
 8003dc8:	20000de0 	.word	0x20000de0
 8003dcc:	20000dc8 	.word	0x20000dc8
 8003dd0:	200008f0 	.word	0x200008f0
 8003dd4:	200008ec 	.word	0x200008ec
 8003dd8:	20000dd0 	.word	0x20000dd0
 8003ddc:	20000dd4 	.word	0x20000dd4

08003de0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003de6:	4b33      	ldr	r3, [pc, #204]	; (8003eb4 <vTaskSwitchContext+0xd4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dee:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <vTaskSwitchContext+0xd8>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003df4:	e059      	b.n	8003eaa <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8003df6:	4b30      	ldr	r3, [pc, #192]	; (8003eb8 <vTaskSwitchContext+0xd8>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dfc:	4b2f      	ldr	r3, [pc, #188]	; (8003ebc <vTaskSwitchContext+0xdc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e010      	b.n	8003e26 <vTaskSwitchContext+0x46>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <vTaskSwitchContext+0x40>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	607b      	str	r3, [r7, #4]
}
 8003e1c:	bf00      	nop
 8003e1e:	e7fe      	b.n	8003e1e <vTaskSwitchContext+0x3e>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	4926      	ldr	r1, [pc, #152]	; (8003ec0 <vTaskSwitchContext+0xe0>)
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0e4      	beq.n	8003e04 <vTaskSwitchContext+0x24>
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4a1e      	ldr	r2, [pc, #120]	; (8003ec0 <vTaskSwitchContext+0xe0>)
 8003e46:	4413      	add	r3, r2
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d104      	bne.n	8003e6a <vTaskSwitchContext+0x8a>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <vTaskSwitchContext+0xe4>)
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4a11      	ldr	r2, [pc, #68]	; (8003ebc <vTaskSwitchContext+0xdc>)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003e7a:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <vTaskSwitchContext+0xe4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3334      	adds	r3, #52	; 0x34
 8003e80:	2205      	movs	r2, #5
 8003e82:	4911      	ldr	r1, [pc, #68]	; (8003ec8 <vTaskSwitchContext+0xe8>)
 8003e84:	4618      	mov	r0, r3
 8003e86:	f003 f96a 	bl	800715e <memcmp>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <vTaskSwitchContext+0xbc>
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <vTaskSwitchContext+0xe4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f002 fd0b 	bl	80068b0 <SEGGER_SYSVIEW_OnTaskStartExec>
 8003e9a:	e001      	b.n	8003ea0 <vTaskSwitchContext+0xc0>
 8003e9c:	f002 fca8 	bl	80067f0 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <vTaskSwitchContext+0xe4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3354      	adds	r3, #84	; 0x54
 8003ea6:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <vTaskSwitchContext+0xec>)
 8003ea8:	6013      	str	r3, [r2, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000de8 	.word	0x20000de8
 8003eb8:	20000dd4 	.word	0x20000dd4
 8003ebc:	20000dc8 	.word	0x20000dc8
 8003ec0:	200008f0 	.word	0x200008f0
 8003ec4:	200008ec 	.word	0x200008ec
 8003ec8:	08008380 	.word	0x08008380
 8003ecc:	20000014 	.word	0x20000014

08003ed0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10a      	bne.n	8003ef6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	60fb      	str	r3, [r7, #12]
}
 8003ef2:	bf00      	nop
 8003ef4:	e7fe      	b.n	8003ef4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <vTaskPlaceOnEventList+0x44>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3318      	adds	r3, #24
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fe fda4 	bl	8002a4c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f04:	2101      	movs	r1, #1
 8003f06:	6838      	ldr	r0, [r7, #0]
 8003f08:	f000 faca 	bl	80044a0 <prvAddCurrentTaskToDelayedList>
}
 8003f0c:	bf00      	nop
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	200008ec 	.word	0x200008ec

08003f18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	617b      	str	r3, [r7, #20]
}
 8003f3c:	bf00      	nop
 8003f3e:	e7fe      	b.n	8003f3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <vTaskPlaceOnEventListRestricted+0x58>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3318      	adds	r3, #24
 8003f46:	4619      	mov	r1, r3
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7fe fd5c 	bl	8002a06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f54:	f04f 33ff 	mov.w	r3, #4294967295
 8003f58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003f5a:	2024      	movs	r0, #36	; 0x24
 8003f5c:	f001 ffc0 	bl	8005ee0 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	68b8      	ldr	r0, [r7, #8]
 8003f64:	f000 fa9c 	bl	80044a0 <prvAddCurrentTaskToDelayedList>
	}
 8003f68:	bf00      	nop
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	200008ec 	.word	0x200008ec

08003f74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	60fb      	str	r3, [r7, #12]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	3318      	adds	r3, #24
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe fd89 	bl	8002abc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <xTaskRemoveFromEventList+0xb8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d121      	bne.n	8003ff6 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fd80 	bl	8002abc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f002 fcba 	bl	8006938 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc8:	4b19      	ldr	r3, [pc, #100]	; (8004030 <xTaskRemoveFromEventList+0xbc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d903      	bls.n	8003fd8 <xTaskRemoveFromEventList+0x64>
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	4a16      	ldr	r2, [pc, #88]	; (8004030 <xTaskRemoveFromEventList+0xbc>)
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4a13      	ldr	r2, [pc, #76]	; (8004034 <xTaskRemoveFromEventList+0xc0>)
 8003fe6:	441a      	add	r2, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f7fe fd09 	bl	8002a06 <vListInsertEnd>
 8003ff4:	e005      	b.n	8004002 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	3318      	adds	r3, #24
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	480e      	ldr	r0, [pc, #56]	; (8004038 <xTaskRemoveFromEventList+0xc4>)
 8003ffe:	f7fe fd02 	bl	8002a06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <xTaskRemoveFromEventList+0xc8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	429a      	cmp	r2, r3
 800400e:	d905      	bls.n	800401c <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004010:	2301      	movs	r3, #1
 8004012:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <xTaskRemoveFromEventList+0xcc>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e001      	b.n	8004020 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004020:	697b      	ldr	r3, [r7, #20]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000de8 	.word	0x20000de8
 8004030:	20000dc8 	.word	0x20000dc8
 8004034:	200008f0 	.word	0x200008f0
 8004038:	20000d80 	.word	0x20000d80
 800403c:	200008ec 	.word	0x200008ec
 8004040:	20000dd4 	.word	0x20000dd4

08004044 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <vTaskInternalSetTimeOutState+0x24>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <vTaskInternalSetTimeOutState+0x28>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	605a      	str	r2, [r3, #4]
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000dd8 	.word	0x20000dd8
 800406c:	20000dc4 	.word	0x20000dc4

08004070 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	613b      	str	r3, [r7, #16]
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	60fb      	str	r3, [r7, #12]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80040b2:	f000 fe4b 	bl	8004d4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040b6:	4b1d      	ldr	r3, [pc, #116]	; (800412c <xTaskCheckForTimeOut+0xbc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d102      	bne.n	80040d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	e023      	b.n	800411e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4b15      	ldr	r3, [pc, #84]	; (8004130 <xTaskCheckForTimeOut+0xc0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d007      	beq.n	80040f2 <xTaskCheckForTimeOut+0x82>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d302      	bcc.n	80040f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	e015      	b.n	800411e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d20b      	bcs.n	8004114 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	1ad2      	subs	r2, r2, r3
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff9b 	bl	8004044 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	e004      	b.n	800411e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800411a:	2301      	movs	r3, #1
 800411c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800411e:	f000 fe45 	bl	8004dac <vPortExitCritical>

	return xReturn;
 8004122:	69fb      	ldr	r3, [r7, #28]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000dc4 	.word	0x20000dc4
 8004130:	20000dd8 	.word	0x20000dd8

08004134 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <vTaskMissedYield+0x14>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000dd4 	.word	0x20000dd4

0800414c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004154:	f000 f852 	bl	80041fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <prvIdleTask+0x28>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d9f9      	bls.n	8004154 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <prvIdleTask+0x2c>)
 8004162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004170:	e7f0      	b.n	8004154 <prvIdleTask+0x8>
 8004172:	bf00      	nop
 8004174:	200008f0 	.word	0x200008f0
 8004178:	e000ed04 	.word	0xe000ed04

0800417c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	e00c      	b.n	80041a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4a12      	ldr	r2, [pc, #72]	; (80041dc <prvInitialiseTaskLists+0x60>)
 8004194:	4413      	add	r3, r2
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fc0a 	bl	80029b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3301      	adds	r3, #1
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b37      	cmp	r3, #55	; 0x37
 80041a6:	d9ef      	bls.n	8004188 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041a8:	480d      	ldr	r0, [pc, #52]	; (80041e0 <prvInitialiseTaskLists+0x64>)
 80041aa:	f7fe fc01 	bl	80029b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041ae:	480d      	ldr	r0, [pc, #52]	; (80041e4 <prvInitialiseTaskLists+0x68>)
 80041b0:	f7fe fbfe 	bl	80029b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041b4:	480c      	ldr	r0, [pc, #48]	; (80041e8 <prvInitialiseTaskLists+0x6c>)
 80041b6:	f7fe fbfb 	bl	80029b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041ba:	480c      	ldr	r0, [pc, #48]	; (80041ec <prvInitialiseTaskLists+0x70>)
 80041bc:	f7fe fbf8 	bl	80029b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041c0:	480b      	ldr	r0, [pc, #44]	; (80041f0 <prvInitialiseTaskLists+0x74>)
 80041c2:	f7fe fbf5 	bl	80029b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041c6:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <prvInitialiseTaskLists+0x78>)
 80041c8:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <prvInitialiseTaskLists+0x64>)
 80041ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <prvInitialiseTaskLists+0x7c>)
 80041ce:	4a05      	ldr	r2, [pc, #20]	; (80041e4 <prvInitialiseTaskLists+0x68>)
 80041d0:	601a      	str	r2, [r3, #0]
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	200008f0 	.word	0x200008f0
 80041e0:	20000d50 	.word	0x20000d50
 80041e4:	20000d64 	.word	0x20000d64
 80041e8:	20000d80 	.word	0x20000d80
 80041ec:	20000d94 	.word	0x20000d94
 80041f0:	20000dac 	.word	0x20000dac
 80041f4:	20000d78 	.word	0x20000d78
 80041f8:	20000d7c 	.word	0x20000d7c

080041fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004202:	e019      	b.n	8004238 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004204:	f000 fda2 	bl	8004d4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <prvCheckTasksWaitingTermination+0x50>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3304      	adds	r3, #4
 8004214:	4618      	mov	r0, r3
 8004216:	f7fe fc51 	bl	8002abc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800421a:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <prvCheckTasksWaitingTermination+0x54>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3b01      	subs	r3, #1
 8004220:	4a0b      	ldr	r2, [pc, #44]	; (8004250 <prvCheckTasksWaitingTermination+0x54>)
 8004222:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004224:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <prvCheckTasksWaitingTermination+0x58>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3b01      	subs	r3, #1
 800422a:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <prvCheckTasksWaitingTermination+0x58>)
 800422c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800422e:	f000 fdbd 	bl	8004dac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f848 	bl	80042c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <prvCheckTasksWaitingTermination+0x58>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e1      	bne.n	8004204 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000d94 	.word	0x20000d94
 8004250:	20000dc0 	.word	0x20000dc0
 8004254:	20000da8 	.word	0x20000da8

08004258 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004264:	e005      	b.n	8004272 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3301      	adds	r3, #1
 800426a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3301      	adds	r3, #1
 8004270:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2ba5      	cmp	r3, #165	; 0xa5
 8004278:	d0f5      	beq.n	8004266 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	089b      	lsrs	r3, r3, #2
 800427e:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	b29b      	uxth	r3, r3
	}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr
	...

08004290 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <uxTaskGetStackHighWaterMark+0x14>
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <uxTaskGetStackHighWaterMark+0x34>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	e000      	b.n	80042a6 <uxTaskGetStackHighWaterMark+0x16>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80042ae:	6938      	ldr	r0, [r7, #16]
 80042b0:	f7ff ffd2 	bl	8004258 <prvTaskCheckFreeStackSpace>
 80042b4:	4603      	mov	r3, r0
 80042b6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80042b8:	68fb      	ldr	r3, [r7, #12]
	}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	200008ec 	.word	0x200008ec

080042c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3354      	adds	r3, #84	; 0x54
 80042d4:	4618      	mov	r0, r3
 80042d6:	f003 f899 	bl	800740c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d108      	bne.n	80042f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fef3 	bl	80050d4 <vPortFree>
				vPortFree( pxTCB );
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fef0 	bl	80050d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042f4:	e018      	b.n	8004328 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d103      	bne.n	8004308 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fee7 	bl	80050d4 <vPortFree>
	}
 8004306:	e00f      	b.n	8004328 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800430e:	2b02      	cmp	r3, #2
 8004310:	d00a      	beq.n	8004328 <prvDeleteTCB+0x60>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	60fb      	str	r3, [r7, #12]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <prvDeleteTCB+0x5e>
	}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004336:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <prvResetNextTaskUnblockTime+0x40>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <prvResetNextTaskUnblockTime+0x14>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <prvResetNextTaskUnblockTime+0x16>
 8004344:	2300      	movs	r3, #0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <prvResetNextTaskUnblockTime+0x44>)
 800434c:	f04f 32ff 	mov.w	r2, #4294967295
 8004350:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004352:	e008      	b.n	8004366 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <prvResetNextTaskUnblockTime+0x40>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	4a04      	ldr	r2, [pc, #16]	; (8004374 <prvResetNextTaskUnblockTime+0x44>)
 8004364:	6013      	str	r3, [r2, #0]
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	20000d78 	.word	0x20000d78
 8004374:	20000de0 	.word	0x20000de0

08004378 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <xTaskGetSchedulerState+0x34>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004386:	2301      	movs	r3, #1
 8004388:	607b      	str	r3, [r7, #4]
 800438a:	e008      	b.n	800439e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800438c:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <xTaskGetSchedulerState+0x38>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d102      	bne.n	800439a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004394:	2302      	movs	r3, #2
 8004396:	607b      	str	r3, [r7, #4]
 8004398:	e001      	b.n	800439e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800439a:	2300      	movs	r3, #0
 800439c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800439e:	687b      	ldr	r3, [r7, #4]
	}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000dcc 	.word	0x20000dcc
 80043b0:	20000de8 	.word	0x20000de8

080043b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d05f      	beq.n	800448a <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043ca:	4b32      	ldr	r3, [pc, #200]	; (8004494 <xTaskPriorityDisinherit+0xe0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d00a      	beq.n	80043ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	60fb      	str	r3, [r7, #12]
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	60bb      	str	r3, [r7, #8]
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	1e5a      	subs	r2, r3, #1
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441a:	429a      	cmp	r2, r3
 800441c:	d035      	beq.n	800448a <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004422:	2b00      	cmp	r3, #0
 8004424:	d131      	bne.n	800448a <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	3304      	adds	r3, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe fb46 	bl	8002abc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4619      	mov	r1, r3
 8004434:	204a      	movs	r0, #74	; 0x4a
 8004436:	f001 fd71 	bl	8005f1c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4618      	mov	r0, r3
 8004452:	f002 fa71 	bl	8006938 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <xTaskPriorityDisinherit+0xe4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d903      	bls.n	800446a <xTaskPriorityDisinherit+0xb6>
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <xTaskPriorityDisinherit+0xe4>)
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4a09      	ldr	r2, [pc, #36]	; (800449c <xTaskPriorityDisinherit+0xe8>)
 8004478:	441a      	add	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	3304      	adds	r3, #4
 800447e:	4619      	mov	r1, r3
 8004480:	4610      	mov	r0, r2
 8004482:	f7fe fac0 	bl	8002a06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004486:	2301      	movs	r3, #1
 8004488:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800448a:	697b      	ldr	r3, [r7, #20]
	}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	200008ec 	.word	0x200008ec
 8004498:	20000dc8 	.word	0x20000dc8
 800449c:	200008f0 	.word	0x200008f0

080044a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044aa:	4b21      	ldr	r3, [pc, #132]	; (8004530 <prvAddCurrentTaskToDelayedList+0x90>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044b0:	4b20      	ldr	r3, [pc, #128]	; (8004534 <prvAddCurrentTaskToDelayedList+0x94>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fb00 	bl	8002abc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d10a      	bne.n	80044da <prvAddCurrentTaskToDelayedList+0x3a>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ca:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <prvAddCurrentTaskToDelayedList+0x94>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4819      	ldr	r0, [pc, #100]	; (8004538 <prvAddCurrentTaskToDelayedList+0x98>)
 80044d4:	f7fe fa97 	bl	8002a06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044d8:	e026      	b.n	8004528 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4413      	add	r3, r2
 80044e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044e2:	4b14      	ldr	r3, [pc, #80]	; (8004534 <prvAddCurrentTaskToDelayedList+0x94>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d209      	bcs.n	8004506 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044f2:	4b12      	ldr	r3, [pc, #72]	; (800453c <prvAddCurrentTaskToDelayedList+0x9c>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <prvAddCurrentTaskToDelayedList+0x94>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f7fe faa4 	bl	8002a4c <vListInsert>
}
 8004504:	e010      	b.n	8004528 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004506:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <prvAddCurrentTaskToDelayedList+0x94>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3304      	adds	r3, #4
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f7fe fa9a 	bl	8002a4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004518:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <prvAddCurrentTaskToDelayedList+0xa4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	d202      	bcs.n	8004528 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004522:	4a08      	ldr	r2, [pc, #32]	; (8004544 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	6013      	str	r3, [r2, #0]
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000dc4 	.word	0x20000dc4
 8004534:	200008ec 	.word	0x200008ec
 8004538:	20000dac 	.word	0x20000dac
 800453c:	20000d7c 	.word	0x20000d7c
 8004540:	20000d78 	.word	0x20000d78
 8004544:	20000de0 	.word	0x20000de0

08004548 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004552:	f000 facb 	bl	8004aec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004556:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <xTimerCreateTimerTask+0x80>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d021      	beq.n	80045a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004566:	1d3a      	adds	r2, r7, #4
 8004568:	f107 0108 	add.w	r1, r7, #8
 800456c:	f107 030c 	add.w	r3, r7, #12
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe fa03 	bl	800297c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	9202      	str	r2, [sp, #8]
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	2302      	movs	r3, #2
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2300      	movs	r3, #0
 8004586:	460a      	mov	r2, r1
 8004588:	4910      	ldr	r1, [pc, #64]	; (80045cc <xTimerCreateTimerTask+0x84>)
 800458a:	4811      	ldr	r0, [pc, #68]	; (80045d0 <xTimerCreateTimerTask+0x88>)
 800458c:	f7ff f820 	bl	80035d0 <xTaskCreateStatic>
 8004590:	4603      	mov	r3, r0
 8004592:	4a10      	ldr	r2, [pc, #64]	; (80045d4 <xTimerCreateTimerTask+0x8c>)
 8004594:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004596:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <xTimerCreateTimerTask+0x8c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800459e:	2301      	movs	r3, #1
 80045a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	613b      	str	r3, [r7, #16]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045be:	697b      	ldr	r3, [r7, #20]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000e1c 	.word	0x20000e1c
 80045cc:	08008388 	.word	0x08008388
 80045d0:	080046f5 	.word	0x080046f5
 80045d4:	20000e20 	.word	0x20000e20

080045d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	; 0x28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xTimerGenericCommand+0x2e>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	623b      	str	r3, [r7, #32]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004606:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <xTimerGenericCommand+0x98>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d02a      	beq.n	8004664 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b05      	cmp	r3, #5
 800461e:	dc18      	bgt.n	8004652 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004620:	f7ff feaa 	bl	8004378 <xTaskGetSchedulerState>
 8004624:	4603      	mov	r3, r0
 8004626:	2b02      	cmp	r3, #2
 8004628:	d109      	bne.n	800463e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800462a:	4b11      	ldr	r3, [pc, #68]	; (8004670 <xTimerGenericCommand+0x98>)
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	f107 0110 	add.w	r1, r7, #16
 8004632:	2300      	movs	r3, #0
 8004634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004636:	f7fe fb73 	bl	8002d20 <xQueueGenericSend>
 800463a:	6278      	str	r0, [r7, #36]	; 0x24
 800463c:	e012      	b.n	8004664 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <xTimerGenericCommand+0x98>)
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	f107 0110 	add.w	r1, r7, #16
 8004646:	2300      	movs	r3, #0
 8004648:	2200      	movs	r2, #0
 800464a:	f7fe fb69 	bl	8002d20 <xQueueGenericSend>
 800464e:	6278      	str	r0, [r7, #36]	; 0x24
 8004650:	e008      	b.n	8004664 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <xTimerGenericCommand+0x98>)
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	f107 0110 	add.w	r1, r7, #16
 800465a:	2300      	movs	r3, #0
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	f7fe fc85 	bl	8002f6c <xQueueGenericSendFromISR>
 8004662:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004666:	4618      	mov	r0, r3
 8004668:	3728      	adds	r7, #40	; 0x28
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000e1c 	.word	0x20000e1c

08004674 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800467e:	4b1c      	ldr	r3, [pc, #112]	; (80046f0 <prvProcessExpiredTimer+0x7c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	3304      	adds	r3, #4
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe fa15 	bl	8002abc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d122      	bne.n	80046e0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	18d1      	adds	r1, r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	6978      	ldr	r0, [r7, #20]
 80046a8:	f000 f8c8 	bl	800483c <prvInsertTimerInActiveList>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046b2:	2300      	movs	r3, #0
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	2300      	movs	r3, #0
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	2100      	movs	r1, #0
 80046bc:	6978      	ldr	r0, [r7, #20]
 80046be:	f7ff ff8b 	bl	80045d8 <xTimerGenericCommand>
 80046c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	60fb      	str	r3, [r7, #12]
}
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	6978      	ldr	r0, [r7, #20]
 80046e6:	4798      	blx	r3
}
 80046e8:	bf00      	nop
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000e14 	.word	0x20000e14

080046f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046fc:	f107 0308 	add.w	r3, r7, #8
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f857 	bl	80047b4 <prvGetNextExpireTime>
 8004706:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4619      	mov	r1, r3
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f803 	bl	8004718 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004712:	f000 f8d5 	bl	80048c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004716:	e7f1      	b.n	80046fc <prvTimerTask+0x8>

08004718 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004722:	f7ff f9cb 	bl	8003abc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004726:	f107 0308 	add.w	r3, r7, #8
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f866 	bl	80047fc <prvSampleTimeNow>
 8004730:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d130      	bne.n	800479a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <prvProcessTimerOrBlockTask+0x3c>
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	429a      	cmp	r2, r3
 8004744:	d806      	bhi.n	8004754 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004746:	f7ff f9c7 	bl	8003ad8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff ff91 	bl	8004674 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004752:	e024      	b.n	800479e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <prvProcessTimerOrBlockTask+0x90>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <prvProcessTimerOrBlockTask+0x94>)
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	4619      	mov	r1, r3
 800477a:	f7fe fef5 	bl	8003568 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800477e:	f7ff f9ab 	bl	8003ad8 <xTaskResumeAll>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <prvProcessTimerOrBlockTask+0x98>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
}
 8004798:	e001      	b.n	800479e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800479a:	f7ff f99d 	bl	8003ad8 <xTaskResumeAll>
}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000e18 	.word	0x20000e18
 80047ac:	20000e1c 	.word	0x20000e1c
 80047b0:	e000ed04 	.word	0xe000ed04

080047b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047bc:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <prvGetNextExpireTime+0x44>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf0c      	ite	eq
 80047c6:	2301      	moveq	r3, #1
 80047c8:	2300      	movne	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047da:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <prvGetNextExpireTime+0x44>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e001      	b.n	80047ea <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047ea:	68fb      	ldr	r3, [r7, #12]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000e14 	.word	0x20000e14

080047fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004804:	f7ff fa0a 	bl	8003c1c <xTaskGetTickCount>
 8004808:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <prvSampleTimeNow+0x3c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	429a      	cmp	r2, r3
 8004812:	d205      	bcs.n	8004820 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004814:	f000 f908 	bl	8004a28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e002      	b.n	8004826 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <prvSampleTimeNow+0x3c>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800482c:	68fb      	ldr	r3, [r7, #12]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000e24 	.word	0x20000e24

0800483c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d812      	bhi.n	8004888 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	1ad2      	subs	r2, r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	429a      	cmp	r2, r3
 800486e:	d302      	bcc.n	8004876 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004870:	2301      	movs	r3, #1
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e01b      	b.n	80048ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <prvInsertTimerInActiveList+0x7c>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3304      	adds	r3, #4
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f7fe f8e3 	bl	8002a4c <vListInsert>
 8004886:	e012      	b.n	80048ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d206      	bcs.n	800489e <prvInsertTimerInActiveList+0x62>
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d302      	bcc.n	800489e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004898:	2301      	movs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e007      	b.n	80048ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <prvInsertTimerInActiveList+0x80>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f7fe f8cf 	bl	8002a4c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048ae:	697b      	ldr	r3, [r7, #20]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000e18 	.word	0x20000e18
 80048bc:	20000e14 	.word	0x20000e14

080048c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08e      	sub	sp, #56	; 0x38
 80048c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048c6:	e09d      	b.n	8004a04 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	da18      	bge.n	8004900 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80048ce:	1d3b      	adds	r3, r7, #4
 80048d0:	3304      	adds	r3, #4
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	61fb      	str	r3, [r7, #28]
}
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f6:	6850      	ldr	r0, [r2, #4]
 80048f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048fa:	6892      	ldr	r2, [r2, #8]
 80048fc:	4611      	mov	r1, r2
 80048fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	db7d      	blt.n	8004a02 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	3304      	adds	r3, #4
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe f8d0 	bl	8002abc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800491c:	463b      	mov	r3, r7
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff ff6c 	bl	80047fc <prvSampleTimeNow>
 8004924:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b09      	cmp	r3, #9
 800492a:	d86b      	bhi.n	8004a04 <prvProcessReceivedCommands+0x144>
 800492c:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <prvProcessReceivedCommands+0x74>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	0800495d 	.word	0x0800495d
 8004938:	0800495d 	.word	0x0800495d
 800493c:	0800495d 	.word	0x0800495d
 8004940:	08004a05 	.word	0x08004a05
 8004944:	080049b9 	.word	0x080049b9
 8004948:	080049f1 	.word	0x080049f1
 800494c:	0800495d 	.word	0x0800495d
 8004950:	0800495d 	.word	0x0800495d
 8004954:	08004a05 	.word	0x08004a05
 8004958:	080049b9 	.word	0x080049b9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	18d1      	adds	r1, r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800496a:	f7ff ff67 	bl	800483c <prvInsertTimerInActiveList>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d047      	beq.n	8004a04 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800497a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d13f      	bne.n	8004a04 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	441a      	add	r2, r3
 800498c:	2300      	movs	r3, #0
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2300      	movs	r3, #0
 8004992:	2100      	movs	r1, #0
 8004994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004996:	f7ff fe1f 	bl	80045d8 <xTimerGenericCommand>
 800499a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d130      	bne.n	8004a04 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	61bb      	str	r3, [r7, #24]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	617b      	str	r3, [r7, #20]
}
 80049d8:	bf00      	nop
 80049da:	e7fe      	b.n	80049da <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	18d1      	adds	r1, r2, r3
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ea:	f7ff ff27 	bl	800483c <prvInsertTimerInActiveList>
					break;
 80049ee:	e009      	b.n	8004a04 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d104      	bne.n	8004a04 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80049fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049fc:	f000 fb6a 	bl	80050d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a00:	e000      	b.n	8004a04 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a02:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a04:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <prvProcessReceivedCommands+0x164>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	1d39      	adds	r1, r7, #4
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fe fb59 	bl	80030c4 <xQueueReceive>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f47f af57 	bne.w	80048c8 <prvProcessReceivedCommands+0x8>
	}
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	3730      	adds	r7, #48	; 0x30
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000e1c 	.word	0x20000e1c

08004a28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a2e:	e045      	b.n	8004abc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a30:	4b2c      	ldr	r3, [pc, #176]	; (8004ae4 <prvSwitchTimerLists+0xbc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <prvSwitchTimerLists+0xbc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe f837 	bl	8002abc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d12e      	bne.n	8004abc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4413      	add	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d90e      	bls.n	8004a8e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a7c:	4b19      	ldr	r3, [pc, #100]	; (8004ae4 <prvSwitchTimerLists+0xbc>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4619      	mov	r1, r3
 8004a86:	4610      	mov	r0, r2
 8004a88:	f7fd ffe0 	bl	8002a4c <vListInsert>
 8004a8c:	e016      	b.n	8004abc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a8e:	2300      	movs	r3, #0
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	2300      	movs	r3, #0
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	2100      	movs	r1, #0
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff fd9d 	bl	80045d8 <xTimerGenericCommand>
 8004a9e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <prvSwitchTimerLists+0x94>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	603b      	str	r3, [r7, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	e7fe      	b.n	8004aba <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <prvSwitchTimerLists+0xbc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1b4      	bne.n	8004a30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <prvSwitchTimerLists+0xbc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <prvSwitchTimerLists+0xc0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a04      	ldr	r2, [pc, #16]	; (8004ae4 <prvSwitchTimerLists+0xbc>)
 8004ad2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ad4:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <prvSwitchTimerLists+0xc0>)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	6013      	str	r3, [r2, #0]
}
 8004ada:	bf00      	nop
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000e14 	.word	0x20000e14
 8004ae8:	20000e18 	.word	0x20000e18

08004aec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004af2:	f000 f92b 	bl	8004d4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004af6:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <prvCheckForValidListAndQueue+0x60>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d120      	bne.n	8004b40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004afe:	4814      	ldr	r0, [pc, #80]	; (8004b50 <prvCheckForValidListAndQueue+0x64>)
 8004b00:	f7fd ff56 	bl	80029b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b04:	4813      	ldr	r0, [pc, #76]	; (8004b54 <prvCheckForValidListAndQueue+0x68>)
 8004b06:	f7fd ff53 	bl	80029b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <prvCheckForValidListAndQueue+0x6c>)
 8004b0c:	4a10      	ldr	r2, [pc, #64]	; (8004b50 <prvCheckForValidListAndQueue+0x64>)
 8004b0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b10:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <prvCheckForValidListAndQueue+0x70>)
 8004b12:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <prvCheckForValidListAndQueue+0x68>)
 8004b14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b16:	2300      	movs	r3, #0
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <prvCheckForValidListAndQueue+0x74>)
 8004b1c:	4a11      	ldr	r2, [pc, #68]	; (8004b64 <prvCheckForValidListAndQueue+0x78>)
 8004b1e:	2110      	movs	r1, #16
 8004b20:	200a      	movs	r0, #10
 8004b22:	f7fe f85d 	bl	8002be0 <xQueueGenericCreateStatic>
 8004b26:	4603      	mov	r3, r0
 8004b28:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <prvCheckForValidListAndQueue+0x60>)
 8004b2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b2c:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <prvCheckForValidListAndQueue+0x60>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <prvCheckForValidListAndQueue+0x60>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	490b      	ldr	r1, [pc, #44]	; (8004b68 <prvCheckForValidListAndQueue+0x7c>)
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fce2 	bl	8003504 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b40:	f000 f934 	bl	8004dac <vPortExitCritical>
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20000e1c 	.word	0x20000e1c
 8004b50:	20000dec 	.word	0x20000dec
 8004b54:	20000e00 	.word	0x20000e00
 8004b58:	20000e14 	.word	0x20000e14
 8004b5c:	20000e18 	.word	0x20000e18
 8004b60:	20000ec8 	.word	0x20000ec8
 8004b64:	20000e28 	.word	0x20000e28
 8004b68:	08008390 	.word	0x08008390

08004b6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3b04      	subs	r3, #4
 8004b7c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3b04      	subs	r3, #4
 8004b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f023 0201 	bic.w	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3b04      	subs	r3, #4
 8004b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b9c:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <pxPortInitialiseStack+0x54>)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3b14      	subs	r3, #20
 8004ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3b20      	subs	r3, #32
 8004bb2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr
 8004bc0:	08004bc5 	.word	0x08004bc5

08004bc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <prvTaskExitError+0x54>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d00a      	beq.n	8004bee <prvTaskExitError+0x2a>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	60fb      	str	r3, [r7, #12]
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <prvTaskExitError+0x28>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	60bb      	str	r3, [r7, #8]
}
 8004c00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c02:	bf00      	nop
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0fc      	beq.n	8004c04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c0a:	bf00      	nop
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000010 	.word	0x20000010
 8004c1c:	00000000 	.word	0x00000000

08004c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <pxCurrentTCBConst2>)
 8004c22:	6819      	ldr	r1, [r3, #0]
 8004c24:	6808      	ldr	r0, [r1, #0]
 8004c26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c2a:	f380 8809 	msr	PSP, r0
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8811 	msr	BASEPRI, r0
 8004c3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004c3e:	4770      	bx	lr

08004c40 <pxCurrentTCBConst2>:
 8004c40:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop

08004c48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004c48:	4806      	ldr	r0, [pc, #24]	; (8004c64 <prvPortStartFirstTask+0x1c>)
 8004c4a:	6800      	ldr	r0, [r0, #0]
 8004c4c:	6800      	ldr	r0, [r0, #0]
 8004c4e:	f380 8808 	msr	MSP, r0
 8004c52:	b662      	cpsie	i
 8004c54:	b661      	cpsie	f
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	df00      	svc	0
 8004c60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c62:	bf00      	nop
 8004c64:	e000ed08 	.word	0xe000ed08

08004c68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c6e:	4b32      	ldr	r3, [pc, #200]	; (8004d38 <xPortStartScheduler+0xd0>)
 8004c70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	22ff      	movs	r2, #255	; 0xff
 8004c7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <xPortStartScheduler+0xd4>)
 8004c94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c96:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <xPortStartScheduler+0xd8>)
 8004c98:	2207      	movs	r2, #7
 8004c9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c9c:	e009      	b.n	8004cb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004c9e:	4b28      	ldr	r3, [pc, #160]	; (8004d40 <xPortStartScheduler+0xd8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <xPortStartScheduler+0xd8>)
 8004ca6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cb2:	78fb      	ldrb	r3, [r7, #3]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cba:	2b80      	cmp	r3, #128	; 0x80
 8004cbc:	d0ef      	beq.n	8004c9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cbe:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <xPortStartScheduler+0xd8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f1c3 0307 	rsb	r3, r3, #7
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d00a      	beq.n	8004ce0 <xPortStartScheduler+0x78>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	60bb      	str	r3, [r7, #8]
}
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ce0:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <xPortStartScheduler+0xd8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	4a16      	ldr	r2, [pc, #88]	; (8004d40 <xPortStartScheduler+0xd8>)
 8004ce8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cea:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <xPortStartScheduler+0xd8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cf2:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <xPortStartScheduler+0xd8>)
 8004cf4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cfe:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <xPortStartScheduler+0xdc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <xPortStartScheduler+0xdc>)
 8004d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d0a:	4b0e      	ldr	r3, [pc, #56]	; (8004d44 <xPortStartScheduler+0xdc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a0d      	ldr	r2, [pc, #52]	; (8004d44 <xPortStartScheduler+0xdc>)
 8004d10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d16:	f000 f8b9 	bl	8004e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <xPortStartScheduler+0xe0>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d20:	f7ff ff92 	bl	8004c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d24:	f7ff f85c 	bl	8003de0 <vTaskSwitchContext>
	prvTaskExitError();
 8004d28:	f7ff ff4c 	bl	8004bc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	e000e400 	.word	0xe000e400
 8004d3c:	20000f18 	.word	0x20000f18
 8004d40:	20000f1c 	.word	0x20000f1c
 8004d44:	e000ed20 	.word	0xe000ed20
 8004d48:	20000010 	.word	0x20000010

08004d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	607b      	str	r3, [r7, #4]
}
 8004d64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d66:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <vPortEnterCritical+0x58>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <vPortEnterCritical+0x58>)
 8004d6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d70:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <vPortEnterCritical+0x58>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d10f      	bne.n	8004d98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d78:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <vPortEnterCritical+0x5c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	603b      	str	r3, [r7, #0]
}
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <vPortEnterCritical+0x4a>
	}
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000010 	.word	0x20000010
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004db2:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <vPortExitCritical+0x4c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <vPortExitCritical+0x24>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	607b      	str	r3, [r7, #4]
}
 8004dcc:	bf00      	nop
 8004dce:	e7fe      	b.n	8004dce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004dd0:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <vPortExitCritical+0x4c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	4a08      	ldr	r2, [pc, #32]	; (8004df8 <vPortExitCritical+0x4c>)
 8004dd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <vPortExitCritical+0x4c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <vPortExitCritical+0x42>
 8004de2:	2300      	movs	r3, #0
 8004de4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f383 8811 	msr	BASEPRI, r3
}
 8004dec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	20000010 	.word	0x20000010
 8004dfc:	00000000 	.word	0x00000000

08004e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e00:	f3ef 8009 	mrs	r0, PSP
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <pxCurrentTCBConst>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e10:	6010      	str	r0, [r2, #0]
 8004e12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004e16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e1a:	f380 8811 	msr	BASEPRI, r0
 8004e1e:	f7fe ffdf 	bl	8003de0 <vTaskSwitchContext>
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f380 8811 	msr	BASEPRI, r0
 8004e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	6808      	ldr	r0, [r1, #0]
 8004e32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e36:	f380 8809 	msr	PSP, r0
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	4770      	bx	lr

08004e40 <pxCurrentTCBConst>:
 8004e40:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop

08004e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	607b      	str	r3, [r7, #4]
}
 8004e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e62:	f7fe fefb 	bl	8003c5c <xTaskIncrementTick>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <SysTick_Handler+0x40>)
 8004e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	2300      	movs	r3, #0
 8004e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f383 8811 	msr	BASEPRI, r3
}
 8004e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <vPortSetupTimerInterrupt+0x30>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e96:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <vPortSetupTimerInterrupt+0x34>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <vPortSetupTimerInterrupt+0x38>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <vPortSetupTimerInterrupt+0x3c>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	099b      	lsrs	r3, r3, #6
 8004ea8:	4a08      	ldr	r2, [pc, #32]	; (8004ecc <vPortSetupTimerInterrupt+0x40>)
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004eae:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <vPortSetupTimerInterrupt+0x30>)
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	601a      	str	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	e000e010 	.word	0xe000e010
 8004ec0:	e000e018 	.word	0xe000e018
 8004ec4:	20000004 	.word	0x20000004
 8004ec8:	10624dd3 	.word	0x10624dd3
 8004ecc:	e000e014 	.word	0xe000e014

08004ed0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ed6:	f3ef 8305 	mrs	r3, IPSR
 8004eda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b0f      	cmp	r3, #15
 8004ee0:	d914      	bls.n	8004f0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ee2:	4a16      	ldr	r2, [pc, #88]	; (8004f3c <vPortValidateInterruptPriority+0x6c>)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004eec:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <vPortValidateInterruptPriority+0x70>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	7afa      	ldrb	r2, [r7, #11]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d20a      	bcs.n	8004f0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	607b      	str	r3, [r7, #4]
}
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <vPortValidateInterruptPriority+0x74>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f14:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <vPortValidateInterruptPriority+0x78>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d90a      	bls.n	8004f32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	603b      	str	r3, [r7, #0]
}
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <vPortValidateInterruptPriority+0x60>
	}
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr
 8004f3c:	e000e3f0 	.word	0xe000e3f0
 8004f40:	20000f18 	.word	0x20000f18
 8004f44:	e000ed0c 	.word	0xe000ed0c
 8004f48:	20000f1c 	.word	0x20000f1c

08004f4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08a      	sub	sp, #40	; 0x28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f58:	f7fe fdb0 	bl	8003abc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f5c:	4b58      	ldr	r3, [pc, #352]	; (80050c0 <pvPortMalloc+0x174>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f64:	f000 f910 	bl	8005188 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f68:	4b56      	ldr	r3, [pc, #344]	; (80050c4 <pvPortMalloc+0x178>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f040 808e 	bne.w	8005092 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01d      	beq.n	8004fb8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4413      	add	r3, r2
 8004f82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d014      	beq.n	8004fb8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f023 0307 	bic.w	r3, r3, #7
 8004f94:	3308      	adds	r3, #8
 8004f96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <pvPortMalloc+0x6c>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	617b      	str	r3, [r7, #20]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d069      	beq.n	8005092 <pvPortMalloc+0x146>
 8004fbe:	4b42      	ldr	r3, [pc, #264]	; (80050c8 <pvPortMalloc+0x17c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d864      	bhi.n	8005092 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fc8:	4b40      	ldr	r3, [pc, #256]	; (80050cc <pvPortMalloc+0x180>)
 8004fca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fcc:	4b3f      	ldr	r3, [pc, #252]	; (80050cc <pvPortMalloc+0x180>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fd2:	e004      	b.n	8004fde <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d903      	bls.n	8004ff0 <pvPortMalloc+0xa4>
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f1      	bne.n	8004fd4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ff0:	4b33      	ldr	r3, [pc, #204]	; (80050c0 <pvPortMalloc+0x174>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d04b      	beq.n	8005092 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2208      	movs	r2, #8
 8005000:	4413      	add	r3, r2
 8005002:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	2308      	movs	r3, #8
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	429a      	cmp	r2, r3
 800501a:	d91f      	bls.n	800505c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800501c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4413      	add	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <pvPortMalloc+0xf8>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	613b      	str	r3, [r7, #16]
}
 8005040:	bf00      	nop
 8005042:	e7fe      	b.n	8005042 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	1ad2      	subs	r2, r2, r3
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005056:	69b8      	ldr	r0, [r7, #24]
 8005058:	f000 f8f8 	bl	800524c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800505c:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <pvPortMalloc+0x17c>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	4a18      	ldr	r2, [pc, #96]	; (80050c8 <pvPortMalloc+0x17c>)
 8005068:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800506a:	4b17      	ldr	r3, [pc, #92]	; (80050c8 <pvPortMalloc+0x17c>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <pvPortMalloc+0x184>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d203      	bcs.n	800507e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005076:	4b14      	ldr	r3, [pc, #80]	; (80050c8 <pvPortMalloc+0x17c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a15      	ldr	r2, [pc, #84]	; (80050d0 <pvPortMalloc+0x184>)
 800507c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	4b10      	ldr	r3, [pc, #64]	; (80050c4 <pvPortMalloc+0x178>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	431a      	orrs	r2, r3
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005092:	f7fe fd21 	bl	8003ad8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <pvPortMalloc+0x16a>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60fb      	str	r3, [r7, #12]
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <pvPortMalloc+0x168>
	return pvReturn;
 80050b6:	69fb      	ldr	r3, [r7, #28]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3728      	adds	r7, #40	; 0x28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20001b28 	.word	0x20001b28
 80050c4:	20001b34 	.word	0x20001b34
 80050c8:	20001b2c 	.word	0x20001b2c
 80050cc:	20001b20 	.word	0x20001b20
 80050d0:	20001b30 	.word	0x20001b30

080050d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d048      	beq.n	8005178 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050e6:	2308      	movs	r3, #8
 80050e8:	425b      	negs	r3, r3
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4413      	add	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	4b21      	ldr	r3, [pc, #132]	; (8005180 <vPortFree+0xac>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <vPortFree+0x44>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60fb      	str	r3, [r7, #12]
}
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <vPortFree+0x62>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	60bb      	str	r3, [r7, #8]
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	4b11      	ldr	r3, [pc, #68]	; (8005180 <vPortFree+0xac>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4013      	ands	r3, r2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d019      	beq.n	8005178 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d115      	bne.n	8005178 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <vPortFree+0xac>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	43db      	mvns	r3, r3
 8005156:	401a      	ands	r2, r3
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800515c:	f7fe fcae 	bl	8003abc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	4b07      	ldr	r3, [pc, #28]	; (8005184 <vPortFree+0xb0>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4413      	add	r3, r2
 800516a:	4a06      	ldr	r2, [pc, #24]	; (8005184 <vPortFree+0xb0>)
 800516c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800516e:	6938      	ldr	r0, [r7, #16]
 8005170:	f000 f86c 	bl	800524c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005174:	f7fe fcb0 	bl	8003ad8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005178:	bf00      	nop
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20001b34 	.word	0x20001b34
 8005184:	20001b2c 	.word	0x20001b2c

08005188 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800518e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005192:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005194:	4b27      	ldr	r3, [pc, #156]	; (8005234 <prvHeapInit+0xac>)
 8005196:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00c      	beq.n	80051bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3307      	adds	r3, #7
 80051a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0307 	bic.w	r3, r3, #7
 80051ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	4a1f      	ldr	r2, [pc, #124]	; (8005234 <prvHeapInit+0xac>)
 80051b8:	4413      	add	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051c0:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <prvHeapInit+0xb0>)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051c6:	4b1c      	ldr	r3, [pc, #112]	; (8005238 <prvHeapInit+0xb0>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	4413      	add	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051d4:	2208      	movs	r2, #8
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0307 	bic.w	r3, r3, #7
 80051e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4a15      	ldr	r2, [pc, #84]	; (800523c <prvHeapInit+0xb4>)
 80051e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051ea:	4b14      	ldr	r3, [pc, #80]	; (800523c <prvHeapInit+0xb4>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2200      	movs	r2, #0
 80051f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051f2:	4b12      	ldr	r3, [pc, #72]	; (800523c <prvHeapInit+0xb4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	1ad2      	subs	r2, r2, r3
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005208:	4b0c      	ldr	r3, [pc, #48]	; (800523c <prvHeapInit+0xb4>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <prvHeapInit+0xb8>)
 8005216:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4a09      	ldr	r2, [pc, #36]	; (8005244 <prvHeapInit+0xbc>)
 800521e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005220:	4b09      	ldr	r3, [pc, #36]	; (8005248 <prvHeapInit+0xc0>)
 8005222:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005226:	601a      	str	r2, [r3, #0]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20000f20 	.word	0x20000f20
 8005238:	20001b20 	.word	0x20001b20
 800523c:	20001b28 	.word	0x20001b28
 8005240:	20001b30 	.word	0x20001b30
 8005244:	20001b2c 	.word	0x20001b2c
 8005248:	20001b34 	.word	0x20001b34

0800524c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005254:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <prvInsertBlockIntoFreeList+0xa8>)
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e002      	b.n	8005260 <prvInsertBlockIntoFreeList+0x14>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	429a      	cmp	r2, r3
 8005268:	d8f7      	bhi.n	800525a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	4413      	add	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	d108      	bne.n	800528e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	441a      	add	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	441a      	add	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d118      	bne.n	80052d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <prvInsertBlockIntoFreeList+0xac>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d00d      	beq.n	80052ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	441a      	add	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	e008      	b.n	80052dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052ca:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <prvInsertBlockIntoFreeList+0xac>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e003      	b.n	80052dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d002      	beq.n	80052ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr
 80052f4:	20001b20 	.word	0x20001b20
 80052f8:	20001b28 	.word	0x20001b28

080052fc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8005302:	4b21      	ldr	r3, [pc, #132]	; (8005388 <_DoInit+0x8c>)
 8005304:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2203      	movs	r2, #3
 800530a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2203      	movs	r2, #3
 8005310:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a1d      	ldr	r2, [pc, #116]	; (800538c <_DoInit+0x90>)
 8005316:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a1d      	ldr	r2, [pc, #116]	; (8005390 <_DoInit+0x94>)
 800531c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005324:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a14      	ldr	r2, [pc, #80]	; (800538c <_DoInit+0x90>)
 800533c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a14      	ldr	r2, [pc, #80]	; (8005394 <_DoInit+0x98>)
 8005342:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2210      	movs	r2, #16
 8005348:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3307      	adds	r3, #7
 8005360:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <_DoInit+0x9c>)
 8005362:	6810      	ldr	r0, [r2, #0]
 8005364:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a0c      	ldr	r2, [pc, #48]	; (800539c <_DoInit+0xa0>)
 800536a:	6810      	ldr	r0, [r2, #0]
 800536c:	6018      	str	r0, [r3, #0]
 800536e:	8891      	ldrh	r1, [r2, #4]
 8005370:	7992      	ldrb	r2, [r2, #6]
 8005372:	8099      	strh	r1, [r3, #4]
 8005374:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	719a      	strb	r2, [r3, #6]
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20001b38 	.word	0x20001b38
 800538c:	08008398 	.word	0x08008398
 8005390:	20001be0 	.word	0x20001be0
 8005394:	20001fe0 	.word	0x20001fe0
 8005398:	080083a4 	.word	0x080083a4
 800539c:	080083a8 	.word	0x080083a8

080053a0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d905      	bls.n	80053d0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	e007      	b.n	80053e0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	6939      	ldr	r1, [r7, #16]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	1acb      	subs	r3, r1, r3
 80053da:	4413      	add	r3, r2
 80053dc:	3b01      	subs	r3, #1
 80053de:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	4293      	cmp	r3, r2
 80053ec:	bf28      	it	cs
 80053ee:	4613      	movcs	r3, r2
 80053f0:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4293      	cmp	r3, r2
 80053f8:	bf28      	it	cs
 80053fa:	4613      	movcs	r3, r2
 80053fc:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	4413      	add	r3, r2
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f001 feb7 	bl	800717e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	4413      	add	r3, r2
 800542e:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	429a      	cmp	r2, r3
 8005438:	d101      	bne.n	800543e <_WriteBlocking+0x9e>
      WrOff = 0u;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1b5      	bne.n	80053b6 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800544a:	69bb      	ldr	r3, [r7, #24]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	429a      	cmp	r2, r3
 8005476:	d90e      	bls.n	8005496 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	4413      	add	r3, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	4618      	mov	r0, r3
 8005486:	f001 fe7a 	bl	800717e <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	441a      	add	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005494:	e01a      	b.n	80054cc <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4413      	add	r3, r2
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 fe69 	bl	800717e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6858      	ldr	r0, [r3, #4]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	4413      	add	r3, r2
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4619      	mov	r1, r3
 80054c2:	f001 fe5c 	bl	800717e <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	60da      	str	r2, [r3, #12]
}
 80054cc:	bf00      	nop
 80054ce:	3720      	adds	r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d808      	bhi.n	8005502 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1ad2      	subs	r2, r2, r3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4413      	add	r3, r2
 80054fc:	3b01      	subs	r3, #1
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e004      	b.n	800550c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800550c:	697b      	ldr	r3, [r7, #20]
}
 800550e:	4618      	mov	r0, r3
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005518:	b580      	push	{r7, lr}
 800551a:	b08a      	sub	sp, #40	; 0x28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8005524:	4b3c      	ldr	r3, [pc, #240]	; (8005618 <SEGGER_RTT_ReadNoLock+0x100>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <SEGGER_RTT_ReadNoLock+0x18>
 800552c:	f7ff fee6 	bl	80052fc <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4613      	mov	r3, r2
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	4413      	add	r3, r2
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	3360      	adds	r3, #96	; 0x60
 800553c:	4a36      	ldr	r2, [pc, #216]	; (8005618 <SEGGER_RTT_ReadNoLock+0x100>)
 800553e:	4413      	add	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8005552:	2300      	movs	r3, #0
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005556:	6a3a      	ldr	r2, [r7, #32]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	429a      	cmp	r2, r3
 800555c:	d92a      	bls.n	80055b4 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4293      	cmp	r3, r2
 800556e:	bf28      	it	cs
 8005570:	4613      	movcs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	4413      	add	r3, r2
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4619      	mov	r1, r3
 8005580:	69f8      	ldr	r0, [r7, #28]
 8005582:	f001 fdfc 	bl	800717e <memcpy>
    NumBytesRead += NumBytesRem;
 8005586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	4413      	add	r3, r2
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4413      	add	r3, r2
 8005594:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4413      	add	r3, r2
 80055a4:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	6a3a      	ldr	r2, [r7, #32]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d101      	bne.n	80055b4 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80055b0:	2300      	movs	r3, #0
 80055b2:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4293      	cmp	r3, r2
 80055c2:	bf28      	it	cs
 80055c4:	4613      	movcs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d018      	beq.n	8005600 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	4413      	add	r3, r2
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4619      	mov	r1, r3
 80055da:	69f8      	ldr	r0, [r7, #28]
 80055dc:	f001 fdcf 	bl	800717e <memcpy>
    NumBytesRead += NumBytesRem;
 80055e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4413      	add	r3, r2
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4413      	add	r3, r2
 80055ee:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80055f8:	6a3a      	ldr	r2, [r7, #32]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4413      	add	r3, r2
 80055fe:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	6a3a      	ldr	r2, [r7, #32]
 800560a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800560e:	4618      	mov	r0, r3
 8005610:	3728      	adds	r7, #40	; 0x28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20001b38 	.word	0x20001b38

0800561c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	4613      	mov	r3, r2
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	4413      	add	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <SEGGER_RTT_WriteNoLock+0x9c>)
 800563a:	4413      	add	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	2b02      	cmp	r3, #2
 8005644:	d029      	beq.n	800569a <SEGGER_RTT_WriteNoLock+0x7e>
 8005646:	2b02      	cmp	r3, #2
 8005648:	d82e      	bhi.n	80056a8 <SEGGER_RTT_WriteNoLock+0x8c>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <SEGGER_RTT_WriteNoLock+0x38>
 800564e:	2b01      	cmp	r3, #1
 8005650:	d013      	beq.n	800567a <SEGGER_RTT_WriteNoLock+0x5e>
 8005652:	e029      	b.n	80056a8 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005654:	6978      	ldr	r0, [r7, #20]
 8005656:	f7ff ff3d 	bl	80054d4 <_GetAvailWriteSpace>
 800565a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d202      	bcs.n	800566a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005664:	2300      	movs	r3, #0
 8005666:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005668:	e021      	b.n	80056ae <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	69b9      	ldr	r1, [r7, #24]
 8005672:	6978      	ldr	r0, [r7, #20]
 8005674:	f7ff feee 	bl	8005454 <_WriteNoCheck>
    break;
 8005678:	e019      	b.n	80056ae <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800567a:	6978      	ldr	r0, [r7, #20]
 800567c:	f7ff ff2a 	bl	80054d4 <_GetAvailWriteSpace>
 8005680:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4293      	cmp	r3, r2
 8005688:	bf28      	it	cs
 800568a:	4613      	movcs	r3, r2
 800568c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	69b9      	ldr	r1, [r7, #24]
 8005692:	6978      	ldr	r0, [r7, #20]
 8005694:	f7ff fede 	bl	8005454 <_WriteNoCheck>
    break;
 8005698:	e009      	b.n	80056ae <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	69b9      	ldr	r1, [r7, #24]
 800569e:	6978      	ldr	r0, [r7, #20]
 80056a0:	f7ff fe7e 	bl	80053a0 <_WriteBlocking>
 80056a4:	61f8      	str	r0, [r7, #28]
    break;
 80056a6:	e002      	b.n	80056ae <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61fb      	str	r3, [r7, #28]
    break;
 80056ac:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80056ae:	69fb      	ldr	r3, [r7, #28]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	20001b38 	.word	0x20001b38

080056bc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 80056c8:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <SEGGER_RTT_Write+0x44>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <SEGGER_RTT_Write+0x18>
 80056d0:	f7ff fe14 	bl	80052fc <_DoInit>
  SEGGER_RTT_LOCK();
 80056d4:	f3ef 8311 	mrs	r3, BASEPRI
 80056d8:	f04f 0120 	mov.w	r1, #32
 80056dc:	f381 8811 	msr	BASEPRI, r1
 80056e0:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7ff ff98 	bl	800561c <SEGGER_RTT_WriteNoLock>
 80056ec:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 80056f4:	693b      	ldr	r3, [r7, #16]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20001b38 	.word	0x20001b38

08005704 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8005712:	4b30      	ldr	r3, [pc, #192]	; (80057d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800571a:	f7ff fdef 	bl	80052fc <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800571e:	4b2d      	ldr	r3, [pc, #180]	; (80057d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	461a      	mov	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4293      	cmp	r3, r2
 8005728:	d24c      	bcs.n	80057c4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800572a:	f3ef 8311 	mrs	r3, BASEPRI
 800572e:	f04f 0120 	mov.w	r1, #32
 8005732:	f381 8811 	msr	BASEPRI, r1
 8005736:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d032      	beq.n	80057a4 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800573e:	4925      	ldr	r1, [pc, #148]	; (80057d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	4613      	mov	r3, r2
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	4413      	add	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	440b      	add	r3, r1
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005752:	4920      	ldr	r1, [pc, #128]	; (80057d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	4613      	mov	r3, r2
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	4413      	add	r3, r2
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	440b      	add	r3, r1
 8005762:	3304      	adds	r3, #4
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005768:	491a      	ldr	r1, [pc, #104]	; (80057d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4613      	mov	r3, r2
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	440b      	add	r3, r1
 8005776:	3320      	adds	r3, #32
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800577c:	4915      	ldr	r1, [pc, #84]	; (80057d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4613      	mov	r3, r2
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	4413      	add	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	440b      	add	r3, r1
 800578a:	3328      	adds	r3, #40	; 0x28
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8005790:	4910      	ldr	r1, [pc, #64]	; (80057d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4613      	mov	r3, r2
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	4413      	add	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	440b      	add	r3, r1
 800579e:	3324      	adds	r3, #36	; 0x24
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80057a4:	490b      	ldr	r1, [pc, #44]	; (80057d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4613      	mov	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	4413      	add	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	440b      	add	r3, r1
 80057b2:	332c      	adds	r3, #44	; 0x2c
 80057b4:	6a3a      	ldr	r2, [r7, #32]
 80057b6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	e002      	b.n	80057ca <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80057c4:	f04f 33ff 	mov.w	r3, #4294967295
 80057c8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80057ca:	697b      	ldr	r3, [r7, #20]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	20001b38 	.word	0x20001b38

080057d8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80057e6:	4b30      	ldr	r3, [pc, #192]	; (80058a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80057ee:	f7ff fd85 	bl	80052fc <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80057f2:	4b2d      	ldr	r3, [pc, #180]	; (80058a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	461a      	mov	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d24b      	bcs.n	8005896 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80057fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005802:	f04f 0120 	mov.w	r1, #32
 8005806:	f381 8811 	msr	BASEPRI, r1
 800580a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d031      	beq.n	8005876 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8005812:	4925      	ldr	r1, [pc, #148]	; (80058a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4613      	mov	r3, r2
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	4413      	add	r3, r2
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	440b      	add	r3, r1
 8005820:	3360      	adds	r3, #96	; 0x60
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005826:	4920      	ldr	r1, [pc, #128]	; (80058a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4613      	mov	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	440b      	add	r3, r1
 8005834:	3364      	adds	r3, #100	; 0x64
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800583a:	491b      	ldr	r1, [pc, #108]	; (80058a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4613      	mov	r3, r2
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	4413      	add	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	440b      	add	r3, r1
 8005848:	3368      	adds	r3, #104	; 0x68
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800584e:	4916      	ldr	r1, [pc, #88]	; (80058a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4613      	mov	r3, r2
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	4413      	add	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	440b      	add	r3, r1
 800585c:	3370      	adds	r3, #112	; 0x70
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8005862:	4911      	ldr	r1, [pc, #68]	; (80058a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4613      	mov	r3, r2
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	4413      	add	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	440b      	add	r3, r1
 8005870:	336c      	adds	r3, #108	; 0x6c
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8005876:	490c      	ldr	r1, [pc, #48]	; (80058a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4613      	mov	r3, r2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	4413      	add	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	440b      	add	r3, r1
 8005884:	3374      	adds	r3, #116	; 0x74
 8005886:	6a3a      	ldr	r2, [r7, #32]
 8005888:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e002      	b.n	800589c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295
 800589a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800589c:	697b      	ldr	r3, [r7, #20]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20001b38 	.word	0x20001b38

080058ac <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
int _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	2000      	movs	r0, #0
 80058c0:	f7ff fefc 	bl	80056bc <SEGGER_RTT_Write>
  return len;
 80058c4:	683b      	ldr	r3, [r7, #0]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80058ce:	b480      	push	{r7}
 80058d0:	b087      	sub	sp, #28
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80058de:	e002      	b.n	80058e6 <_EncodeStr+0x18>
    Len++;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	3301      	adds	r3, #1
 80058e4:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4413      	add	r3, r2
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f6      	bne.n	80058e0 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d901      	bls.n	80058fe <_EncodeStr+0x30>
    Len = Limit;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2bfe      	cmp	r3, #254	; 0xfe
 8005902:	d806      	bhi.n	8005912 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	60fa      	str	r2, [r7, #12]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	e011      	b.n	8005936 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	60fa      	str	r2, [r7, #12]
 8005918:	22ff      	movs	r2, #255	; 0xff
 800591a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	60fa      	str	r2, [r7, #12]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	0a19      	lsrs	r1, r3, #8
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	60fa      	str	r2, [r7, #12]
 8005932:	b2ca      	uxtb	r2, r1
 8005934:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800593a:	e00a      	b.n	8005952 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	1c53      	adds	r3, r2, #1
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1c59      	adds	r1, r3, #1
 8005946:	60f9      	str	r1, [r7, #12]
 8005948:	7812      	ldrb	r2, [r2, #0]
 800594a:	701a      	strb	r2, [r3, #0]
    n++;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	3301      	adds	r3, #1
 8005950:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	429a      	cmp	r2, r3
 8005958:	d3f0      	bcc.n	800593c <_EncodeStr+0x6e>
  }
  return pPayload;
 800595a:	68fb      	ldr	r3, [r7, #12]
}
 800595c:	4618      	mov	r0, r3
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	bc80      	pop	{r7}
 8005964:	4770      	bx	lr

08005966 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3304      	adds	r3, #4
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005982:	1cfb      	adds	r3, r7, #3
 8005984:	2201      	movs	r2, #1
 8005986:	4619      	mov	r1, r3
 8005988:	2001      	movs	r0, #1
 800598a:	f7ff fdc5 	bl	8005518 <SEGGER_RTT_ReadNoLock>
 800598e:	4603      	mov	r3, r0
 8005990:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	dd4c      	ble.n	8005a32 <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	2b07      	cmp	r3, #7
 800599c:	dc16      	bgt.n	80059cc <_HandleIncomingPacket+0x50>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	dd3c      	ble.n	8005a1c <_HandleIncomingPacket+0xa0>
 80059a2:	3b01      	subs	r3, #1
 80059a4:	2b06      	cmp	r3, #6
 80059a6:	d839      	bhi.n	8005a1c <_HandleIncomingPacket+0xa0>
 80059a8:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <_HandleIncomingPacket+0x34>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059d3 	.word	0x080059d3
 80059b4:	080059d9 	.word	0x080059d9
 80059b8:	080059df 	.word	0x080059df
 80059bc:	080059e5 	.word	0x080059e5
 80059c0:	080059eb 	.word	0x080059eb
 80059c4:	080059f1 	.word	0x080059f1
 80059c8:	080059f7 	.word	0x080059f7
 80059cc:	2b80      	cmp	r3, #128	; 0x80
 80059ce:	d015      	beq.n	80059fc <_HandleIncomingPacket+0x80>
 80059d0:	e024      	b.n	8005a1c <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80059d2:	f000 fc41 	bl	8006258 <SEGGER_SYSVIEW_Start>
      break;
 80059d6:	e031      	b.n	8005a3c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80059d8:	f000 fcfa 	bl	80063d0 <SEGGER_SYSVIEW_Stop>
      break;
 80059dc:	e02e      	b.n	8005a3c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80059de:	f000 fed5 	bl	800678c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80059e2:	e02b      	b.n	8005a3c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80059e4:	f000 fe9a 	bl	800671c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80059e8:	e028      	b.n	8005a3c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80059ea:	f000 fd17 	bl	800641c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80059ee:	e025      	b.n	8005a3c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80059f0:	f001 f894 	bl	8006b1c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80059f4:	e022      	b.n	8005a3c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80059f6:	f001 f873 	bl	8006ae0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80059fa:	e01f      	b.n	8005a3c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80059fc:	1cfb      	adds	r3, r7, #3
 80059fe:	2201      	movs	r2, #1
 8005a00:	4619      	mov	r1, r3
 8005a02:	2001      	movs	r0, #1
 8005a04:	f7ff fd88 	bl	8005518 <SEGGER_RTT_ReadNoLock>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	dd11      	ble.n	8005a36 <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 ffe3 	bl	80069e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005a1a:	e00c      	b.n	8005a36 <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	b25b      	sxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	da0a      	bge.n	8005a3a <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a24:	1cfb      	adds	r3, r7, #3
 8005a26:	2201      	movs	r2, #1
 8005a28:	4619      	mov	r1, r3
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	f7ff fd74 	bl	8005518 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005a30:	e003      	b.n	8005a3a <_HandleIncomingPacket+0xbe>
    }
  }
 8005a32:	bf00      	nop
 8005a34:	e002      	b.n	8005a3c <_HandleIncomingPacket+0xc0>
      break;
 8005a36:	bf00      	nop
 8005a38:	e000      	b.n	8005a3c <_HandleIncomingPacket+0xc0>
      break;
 8005a3a:	bf00      	nop
}
 8005a3c:	bf00      	nop
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08c      	sub	sp, #48	; 0x30
 8005a48:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005a4e:	1d3b      	adds	r3, r7, #4
 8005a50:	3301      	adds	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a58:	4b30      	ldr	r3, [pc, #192]	; (8005b1c <_TrySendOverflowPacket+0xd8>)
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5e:	e00b      	b.n	8005a78 <_TrySendOverflowPacket+0x34>
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	1c59      	adds	r1, r3, #1
 8005a68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	09db      	lsrs	r3, r3, #7
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a7c:	d8f0      	bhi.n	8005a60 <_TrySendOverflowPacket+0x1c>
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a8e:	4b24      	ldr	r3, [pc, #144]	; (8005b20 <_TrySendOverflowPacket+0xdc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a94:	4b21      	ldr	r3, [pc, #132]	; (8005b1c <_TrySendOverflowPacket+0xd8>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	623b      	str	r3, [r7, #32]
 8005aa6:	e00b      	b.n	8005ac0 <_TrySendOverflowPacket+0x7c>
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	1c59      	adds	r1, r3, #1
 8005ab0:	6279      	str	r1, [r7, #36]	; 0x24
 8005ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	09db      	lsrs	r3, r3, #7
 8005abe:	623b      	str	r3, [r7, #32]
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac4:	d8f0      	bhi.n	8005aa8 <_TrySendOverflowPacket+0x64>
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	627a      	str	r2, [r7, #36]	; 0x24
 8005acc:	6a3a      	ldr	r2, [r7, #32]
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005ad6:	1d3b      	adds	r3, r7, #4
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	f7fa fb34 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	613b      	str	r3, [r7, #16]
  if (Status) {
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005af2:	4a0a      	ldr	r2, [pc, #40]	; (8005b1c <_TrySendOverflowPacket+0xd8>)
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005af8:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <_TrySendOverflowPacket+0xd8>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <_TrySendOverflowPacket+0xd8>)
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	e004      	b.n	8005b10 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <_TrySendOverflowPacket+0xd8>)
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	4a03      	ldr	r2, [pc, #12]	; (8005b1c <_TrySendOverflowPacket+0xd8>)
 8005b0e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005b10:	693b      	ldr	r3, [r7, #16]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3730      	adds	r7, #48	; 0x30
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200023f8 	.word	0x200023f8
 8005b20:	e0001004 	.word	0xe0001004

08005b24 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005b30:	4b63      	ldr	r3, [pc, #396]	; (8005cc0 <_SendPacket+0x19c>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d010      	beq.n	8005b5a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005b38:	4b61      	ldr	r3, [pc, #388]	; (8005cc0 <_SendPacket+0x19c>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80a1 	beq.w	8005c84 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005b42:	4b5f      	ldr	r3, [pc, #380]	; (8005cc0 <_SendPacket+0x19c>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d109      	bne.n	8005b5e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005b4a:	f7ff ff7b 	bl	8005a44 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005b4e:	4b5c      	ldr	r3, [pc, #368]	; (8005cc0 <_SendPacket+0x19c>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	f040 8098 	bne.w	8005c88 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8005b58:	e001      	b.n	8005b5e <_SendPacket+0x3a>
    goto Send;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <_SendPacket+0x3c>
Send:
 8005b5e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b1f      	cmp	r3, #31
 8005b64:	d809      	bhi.n	8005b7a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005b66:	4b56      	ldr	r3, [pc, #344]	; (8005cc0 <_SendPacket+0x19c>)
 8005b68:	69da      	ldr	r2, [r3, #28]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f040 8089 	bne.w	8005c8c <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b17      	cmp	r3, #23
 8005b7e:	d807      	bhi.n	8005b90 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	e03d      	b.n	8005c0c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b9c:	d912      	bls.n	8005bc4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	09da      	lsrs	r2, r3, #7
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	3a01      	subs	r2, #1
 8005bb6:	60fa      	str	r2, [r7, #12]
 8005bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	701a      	strb	r2, [r3, #0]
 8005bc2:	e006      	b.n	8005bd2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bd6:	d912      	bls.n	8005bfe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	09da      	lsrs	r2, r3, #7
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	3a01      	subs	r2, #1
 8005bf0:	60fa      	str	r2, [r7, #12]
 8005bf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	701a      	strb	r2, [r3, #0]
 8005bfc:	e006      	b.n	8005c0c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c0c:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <_SendPacket+0x1a0>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005c12:	4b2b      	ldr	r3, [pc, #172]	; (8005cc0 <_SendPacket+0x19c>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	623b      	str	r3, [r7, #32]
 8005c24:	e00b      	b.n	8005c3e <_SendPacket+0x11a>
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	1c59      	adds	r1, r3, #1
 8005c2e:	6279      	str	r1, [r7, #36]	; 0x24
 8005c30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	09db      	lsrs	r3, r3, #7
 8005c3c:	623b      	str	r3, [r7, #32]
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	2b7f      	cmp	r3, #127	; 0x7f
 8005c42:	d8f0      	bhi.n	8005c26 <_SendPacket+0x102>
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	627a      	str	r2, [r7, #36]	; 0x24
 8005c4a:	6a3a      	ldr	r2, [r7, #32]
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68f9      	ldr	r1, [r7, #12]
 8005c5e:	2001      	movs	r0, #1
 8005c60:	f7fa fa76 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005c64:	4603      	mov	r3, r0
 8005c66:	613b      	str	r3, [r7, #16]
  if (Status) {
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005c6e:	4a14      	ldr	r2, [pc, #80]	; (8005cc0 <_SendPacket+0x19c>)
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	60d3      	str	r3, [r2, #12]
 8005c74:	e00b      	b.n	8005c8e <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005c76:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <_SendPacket+0x19c>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	4b10      	ldr	r3, [pc, #64]	; (8005cc0 <_SendPacket+0x19c>)
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	e004      	b.n	8005c8e <_SendPacket+0x16a>
    goto SendDone;
 8005c84:	bf00      	nop
 8005c86:	e002      	b.n	8005c8e <_SendPacket+0x16a>
      goto SendDone;
 8005c88:	bf00      	nop
 8005c8a:	e000      	b.n	8005c8e <_SendPacket+0x16a>
      goto SendDone;
 8005c8c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005c8e:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <_SendPacket+0x1a4>)
 8005c90:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <_SendPacket+0x1a4>)
 8005c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d00b      	beq.n	8005cb6 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c9e:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <_SendPacket+0x19c>)
 8005ca0:	789b      	ldrb	r3, [r3, #2]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d107      	bne.n	8005cb6 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <_SendPacket+0x19c>)
 8005ca8:	2201      	movs	r2, #1
 8005caa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005cac:	f7ff fe66 	bl	800597c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <_SendPacket+0x19c>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005cb6:	bf00      	nop
 8005cb8:	3728      	adds	r7, #40	; 0x28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	200023f8 	.word	0x200023f8
 8005cc4:	e0001004 	.word	0xe0001004
 8005cc8:	20001b38 	.word	0x20001b38

08005ccc <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b0a2      	sub	sp, #136	; 0x88
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8005ce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8005cee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01d      	beq.n	8005d32 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8005cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cfa:	2b25      	cmp	r3, #37	; 0x25
 8005cfc:	d1f1      	bne.n	8005ce2 <_VPrintHost+0x16>
      c = *p;
 8005cfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	1d19      	adds	r1, r3, #4
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6011      	str	r1, [r2, #0]
 8005d10:	6819      	ldr	r1, [r3, #0]
 8005d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d1c:	460a      	mov	r2, r1
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	3388      	adds	r3, #136	; 0x88
 8005d22:	443b      	add	r3, r7
 8005d24:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8005d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d002      	beq.n	8005d36 <_VPrintHost+0x6a>
    c = *p++;
 8005d30:	e7d7      	b.n	8005ce2 <_VPrintHost+0x16>
      break;
 8005d32:	bf00      	nop
 8005d34:	e000      	b.n	8005d38 <_VPrintHost+0x6c>
        break;
 8005d36:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8005d38:	f3ef 8311 	mrs	r3, BASEPRI
 8005d3c:	f04f 0120 	mov.w	r1, #32
 8005d40:	f381 8811 	msr	BASEPRI, r1
 8005d44:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d46:	483f      	ldr	r0, [pc, #252]	; (8005e44 <_VPrintHost+0x178>)
 8005d48:	f7ff fe0d 	bl	8005966 <_PreparePacket>
 8005d4c:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d4e:	2280      	movs	r2, #128	; 0x80
 8005d50:	68f9      	ldr	r1, [r7, #12]
 8005d52:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005d54:	f7ff fdbb 	bl	80058ce <_EncodeStr>
 8005d58:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8005d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5c:	677b      	str	r3, [r7, #116]	; 0x74
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	673b      	str	r3, [r7, #112]	; 0x70
 8005d62:	e00b      	b.n	8005d7c <_VPrintHost+0xb0>
 8005d64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d6a:	1c59      	adds	r1, r3, #1
 8005d6c:	6779      	str	r1, [r7, #116]	; 0x74
 8005d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d78:	09db      	lsrs	r3, r3, #7
 8005d7a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d80:	d8f0      	bhi.n	8005d64 <_VPrintHost+0x98>
 8005d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	677a      	str	r2, [r7, #116]	; 0x74
 8005d88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d90:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8005d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d9c:	e00b      	b.n	8005db6 <_VPrintHost+0xea>
 8005d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da4:	1c59      	adds	r1, r3, #1
 8005da6:	66f9      	str	r1, [r7, #108]	; 0x6c
 8005da8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005db2:	09db      	lsrs	r3, r3, #7
 8005db4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005db8:	2b7f      	cmp	r3, #127	; 0x7f
 8005dba:	d8f0      	bhi.n	8005d9e <_VPrintHost+0xd2>
 8005dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005dc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	701a      	strb	r2, [r3, #0]
 8005dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dca:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8005dd4:	e022      	b.n	8005e1c <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8005dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8005dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	663b      	str	r3, [r7, #96]	; 0x60
 8005de2:	e00b      	b.n	8005dfc <_VPrintHost+0x130>
 8005de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dea:	1c59      	adds	r1, r3, #1
 8005dec:	6679      	str	r1, [r7, #100]	; 0x64
 8005dee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005df8:	09db      	lsrs	r3, r3, #7
 8005dfa:	663b      	str	r3, [r7, #96]	; 0x60
 8005dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8005e00:	d8f0      	bhi.n	8005de4 <_VPrintHost+0x118>
 8005e02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	667a      	str	r2, [r7, #100]	; 0x64
 8005e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e10:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8005e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e16:	3304      	adds	r3, #4
 8005e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8005e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e20:	1e5a      	subs	r2, r3, #1
 8005e22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1d5      	bne.n	8005dd6 <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e2a:	221a      	movs	r2, #26
 8005e2c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005e2e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005e30:	f7ff fe78 	bl	8005b24 <_SendPacket>
    RECORD_END();
 8005e34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e36:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3788      	adds	r7, #136	; 0x88
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20002428 	.word	0x20002428

08005e48 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e56:	2300      	movs	r3, #0
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e5e:	4a14      	ldr	r2, [pc, #80]	; (8005eb0 <SEGGER_SYSVIEW_Init+0x68>)
 8005e60:	4914      	ldr	r1, [pc, #80]	; (8005eb4 <SEGGER_SYSVIEW_Init+0x6c>)
 8005e62:	2001      	movs	r0, #1
 8005e64:	f7ff fc4e 	bl	8005704 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e68:	2300      	movs	r3, #0
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	4a12      	ldr	r2, [pc, #72]	; (8005eb8 <SEGGER_SYSVIEW_Init+0x70>)
 8005e70:	4910      	ldr	r1, [pc, #64]	; (8005eb4 <SEGGER_SYSVIEW_Init+0x6c>)
 8005e72:	2001      	movs	r0, #1
 8005e74:	f7ff fcb0 	bl	80057d8 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e78:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <SEGGER_SYSVIEW_Init+0x74>)
 8005e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e7e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e80:	4b0f      	ldr	r3, [pc, #60]	; (8005ec0 <SEGGER_SYSVIEW_Init+0x78>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a0d      	ldr	r2, [pc, #52]	; (8005ebc <SEGGER_SYSVIEW_Init+0x74>)
 8005e86:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e88:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <SEGGER_SYSVIEW_Init+0x74>)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e8e:	4a0b      	ldr	r2, [pc, #44]	; (8005ebc <SEGGER_SYSVIEW_Init+0x74>)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e94:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <SEGGER_SYSVIEW_Init+0x74>)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e9a:	4a08      	ldr	r2, [pc, #32]	; (8005ebc <SEGGER_SYSVIEW_Init+0x74>)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <SEGGER_SYSVIEW_Init+0x74>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20001ff0 	.word	0x20001ff0
 8005eb4:	080083b0 	.word	0x080083b0
 8005eb8:	200023f0 	.word	0x200023f0
 8005ebc:	200023f8 	.word	0x200023f8
 8005ec0:	e0001004 	.word	0xe0001004

08005ec4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ecc:	4a03      	ldr	r2, [pc, #12]	; (8005edc <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6113      	str	r3, [r2, #16]
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr
 8005edc:	200023f8 	.word	0x200023f8

08005ee0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8005eec:	f04f 0120 	mov.w	r1, #32
 8005ef0:	f381 8811 	msr	BASEPRI, r1
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	4808      	ldr	r0, [pc, #32]	; (8005f18 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ef8:	f7ff fd35 	bl	8005966 <_PreparePacket>
 8005efc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	68b8      	ldr	r0, [r7, #8]
 8005f04:	f7ff fe0e 	bl	8005b24 <_SendPacket>
  RECORD_END();
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f383 8811 	msr	BASEPRI, r3
}
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20002428 	.word	0x20002428

08005f1c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f26:	f3ef 8311 	mrs	r3, BASEPRI
 8005f2a:	f04f 0120 	mov.w	r1, #32
 8005f2e:	f381 8811 	msr	BASEPRI, r1
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	4816      	ldr	r0, [pc, #88]	; (8005f90 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005f36:	f7ff fd16 	bl	8005966 <_PreparePacket>
 8005f3a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	61fb      	str	r3, [r7, #28]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	61bb      	str	r3, [r7, #24]
 8005f48:	e00b      	b.n	8005f62 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	1c59      	adds	r1, r3, #1
 8005f52:	61f9      	str	r1, [r7, #28]
 8005f54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	09db      	lsrs	r3, r3, #7
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b7f      	cmp	r3, #127	; 0x7f
 8005f66:	d8f0      	bhi.n	8005f4a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	61fa      	str	r2, [r7, #28]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	6938      	ldr	r0, [r7, #16]
 8005f7e:	f7ff fdd1 	bl	8005b24 <_SendPacket>
  RECORD_END();
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f383 8811 	msr	BASEPRI, r3
}
 8005f88:	bf00      	nop
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20002428 	.word	0x20002428

08005f94 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08c      	sub	sp, #48	; 0x30
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa4:	f04f 0120 	mov.w	r1, #32
 8005fa8:	f381 8811 	msr	BASEPRI, r1
 8005fac:	61fb      	str	r3, [r7, #28]
 8005fae:	4825      	ldr	r0, [pc, #148]	; (8006044 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005fb0:	f7ff fcd9 	bl	8005966 <_PreparePacket>
 8005fb4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc2:	e00b      	b.n	8005fdc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	1c59      	adds	r1, r3, #1
 8005fcc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd8:	09db      	lsrs	r3, r3, #7
 8005fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe0:	d8f0      	bhi.n	8005fc4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	e00b      	b.n	8006014 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	6279      	str	r1, [r7, #36]	; 0x24
 8006006:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	09db      	lsrs	r3, r3, #7
 8006012:	623b      	str	r3, [r7, #32]
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	2b7f      	cmp	r3, #127	; 0x7f
 8006018:	d8f0      	bhi.n	8005ffc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	627a      	str	r2, [r7, #36]	; 0x24
 8006020:	6a3a      	ldr	r2, [r7, #32]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	6979      	ldr	r1, [r7, #20]
 800602e:	69b8      	ldr	r0, [r7, #24]
 8006030:	f7ff fd78 	bl	8005b24 <_SendPacket>
  RECORD_END();
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f383 8811 	msr	BASEPRI, r3
}
 800603a:	bf00      	nop
 800603c:	3730      	adds	r7, #48	; 0x30
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20002428 	.word	0x20002428

08006048 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b08e      	sub	sp, #56	; 0x38
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006056:	f3ef 8311 	mrs	r3, BASEPRI
 800605a:	f04f 0120 	mov.w	r1, #32
 800605e:	f381 8811 	msr	BASEPRI, r1
 8006062:	61fb      	str	r3, [r7, #28]
 8006064:	4832      	ldr	r0, [pc, #200]	; (8006130 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006066:	f7ff fc7e 	bl	8005966 <_PreparePacket>
 800606a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	633b      	str	r3, [r7, #48]	; 0x30
 8006078:	e00b      	b.n	8006092 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	b2da      	uxtb	r2, r3
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	1c59      	adds	r1, r3, #1
 8006082:	6379      	str	r1, [r7, #52]	; 0x34
 8006084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	09db      	lsrs	r3, r3, #7
 8006090:	633b      	str	r3, [r7, #48]	; 0x30
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	2b7f      	cmp	r3, #127	; 0x7f
 8006096:	d8f0      	bhi.n	800607a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	637a      	str	r2, [r7, #52]	; 0x34
 800609e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b0:	e00b      	b.n	80060ca <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	1c59      	adds	r1, r3, #1
 80060ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	09db      	lsrs	r3, r3, #7
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	2b7f      	cmp	r3, #127	; 0x7f
 80060ce:	d8f0      	bhi.n	80060b2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	623b      	str	r3, [r7, #32]
 80060e8:	e00b      	b.n	8006102 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	1c59      	adds	r1, r3, #1
 80060f2:	6279      	str	r1, [r7, #36]	; 0x24
 80060f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	09db      	lsrs	r3, r3, #7
 8006100:	623b      	str	r3, [r7, #32]
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	2b7f      	cmp	r3, #127	; 0x7f
 8006106:	d8f0      	bhi.n	80060ea <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	627a      	str	r2, [r7, #36]	; 0x24
 800610e:	6a3a      	ldr	r2, [r7, #32]
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	6979      	ldr	r1, [r7, #20]
 800611c:	69b8      	ldr	r0, [r7, #24]
 800611e:	f7ff fd01 	bl	8005b24 <_SendPacket>
  RECORD_END();
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f383 8811 	msr	BASEPRI, r3
}
 8006128:	bf00      	nop
 800612a:	3738      	adds	r7, #56	; 0x38
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20002428 	.word	0x20002428

08006134 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006134:	b580      	push	{r7, lr}
 8006136:	b090      	sub	sp, #64	; 0x40
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006142:	f3ef 8311 	mrs	r3, BASEPRI
 8006146:	f04f 0120 	mov.w	r1, #32
 800614a:	f381 8811 	msr	BASEPRI, r1
 800614e:	61fb      	str	r3, [r7, #28]
 8006150:	4840      	ldr	r0, [pc, #256]	; (8006254 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006152:	f7ff fc08 	bl	8005966 <_PreparePacket>
 8006156:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	63bb      	str	r3, [r7, #56]	; 0x38
 8006164:	e00b      	b.n	800617e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	b2da      	uxtb	r2, r3
 800616a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616c:	1c59      	adds	r1, r3, #1
 800616e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	09db      	lsrs	r3, r3, #7
 800617c:	63bb      	str	r3, [r7, #56]	; 0x38
 800617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006180:	2b7f      	cmp	r3, #127	; 0x7f
 8006182:	d8f0      	bhi.n	8006166 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	63fa      	str	r2, [r7, #60]	; 0x3c
 800618a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006192:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	637b      	str	r3, [r7, #52]	; 0x34
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
 800619c:	e00b      	b.n	80061b6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	1c59      	adds	r1, r3, #1
 80061a6:	6379      	str	r1, [r7, #52]	; 0x34
 80061a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	09db      	lsrs	r3, r3, #7
 80061b4:	633b      	str	r3, [r7, #48]	; 0x30
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	2b7f      	cmp	r3, #127	; 0x7f
 80061ba:	d8f0      	bhi.n	800619e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	637a      	str	r2, [r7, #52]	; 0x34
 80061c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d4:	e00b      	b.n	80061ee <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	1c59      	adds	r1, r3, #1
 80061de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	09db      	lsrs	r3, r3, #7
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	2b7f      	cmp	r3, #127	; 0x7f
 80061f2:	d8f0      	bhi.n	80061d6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80061f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
 8006208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620a:	623b      	str	r3, [r7, #32]
 800620c:	e00b      	b.n	8006226 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	b2da      	uxtb	r2, r3
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	1c59      	adds	r1, r3, #1
 8006216:	6279      	str	r1, [r7, #36]	; 0x24
 8006218:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	09db      	lsrs	r3, r3, #7
 8006224:	623b      	str	r3, [r7, #32]
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	2b7f      	cmp	r3, #127	; 0x7f
 800622a:	d8f0      	bhi.n	800620e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	627a      	str	r2, [r7, #36]	; 0x24
 8006232:	6a3a      	ldr	r2, [r7, #32]
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	6979      	ldr	r1, [r7, #20]
 8006240:	69b8      	ldr	r0, [r7, #24]
 8006242:	f7ff fc6f 	bl	8005b24 <_SendPacket>
  RECORD_END();
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	f383 8811 	msr	BASEPRI, r3
}
 800624c:	bf00      	nop
 800624e:	3740      	adds	r7, #64	; 0x40
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20002428 	.word	0x20002428

08006258 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b08c      	sub	sp, #48	; 0x30
 800625c:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800625e:	4b59      	ldr	r3, [pc, #356]	; (80063c4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	f040 80aa 	bne.w	80063bc <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8006268:	4b56      	ldr	r3, [pc, #344]	; (80063c4 <SEGGER_SYSVIEW_Start+0x16c>)
 800626a:	2201      	movs	r2, #1
 800626c:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800626e:	f3ef 8311 	mrs	r3, BASEPRI
 8006272:	f04f 0120 	mov.w	r1, #32
 8006276:	f381 8811 	msr	BASEPRI, r1
 800627a:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800627c:	220a      	movs	r2, #10
 800627e:	4952      	ldr	r1, [pc, #328]	; (80063c8 <SEGGER_SYSVIEW_Start+0x170>)
 8006280:	2001      	movs	r0, #1
 8006282:	f7f9 ff65 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800628c:	200a      	movs	r0, #10
 800628e:	f7ff fe27 	bl	8005ee0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006292:	f3ef 8311 	mrs	r3, BASEPRI
 8006296:	f04f 0120 	mov.w	r1, #32
 800629a:	f381 8811 	msr	BASEPRI, r1
 800629e:	60bb      	str	r3, [r7, #8]
 80062a0:	484a      	ldr	r0, [pc, #296]	; (80063cc <SEGGER_SYSVIEW_Start+0x174>)
 80062a2:	f7ff fb60 	bl	8005966 <_PreparePacket>
 80062a6:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b0:	4b44      	ldr	r3, [pc, #272]	; (80063c4 <SEGGER_SYSVIEW_Start+0x16c>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b6:	e00b      	b.n	80062d0 <SEGGER_SYSVIEW_Start+0x78>
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	1c59      	adds	r1, r3, #1
 80062c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	09db      	lsrs	r3, r3, #7
 80062ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	2b7f      	cmp	r3, #127	; 0x7f
 80062d4:	d8f0      	bhi.n	80062b8 <SEGGER_SYSVIEW_Start+0x60>
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ea:	4b36      	ldr	r3, [pc, #216]	; (80063c4 <SEGGER_SYSVIEW_Start+0x16c>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	623b      	str	r3, [r7, #32]
 80062f0:	e00b      	b.n	800630a <SEGGER_SYSVIEW_Start+0xb2>
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	1c59      	adds	r1, r3, #1
 80062fa:	6279      	str	r1, [r7, #36]	; 0x24
 80062fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	09db      	lsrs	r3, r3, #7
 8006308:	623b      	str	r3, [r7, #32]
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	2b7f      	cmp	r3, #127	; 0x7f
 800630e:	d8f0      	bhi.n	80062f2 <SEGGER_SYSVIEW_Start+0x9a>
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	627a      	str	r2, [r7, #36]	; 0x24
 8006316:	6a3a      	ldr	r2, [r7, #32]
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	e00b      	b.n	8006344 <SEGGER_SYSVIEW_Start+0xec>
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	b2da      	uxtb	r2, r3
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	1c59      	adds	r1, r3, #1
 8006334:	61f9      	str	r1, [r7, #28]
 8006336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	09db      	lsrs	r3, r3, #7
 8006342:	61bb      	str	r3, [r7, #24]
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b7f      	cmp	r3, #127	; 0x7f
 8006348:	d8f0      	bhi.n	800632c <SEGGER_SYSVIEW_Start+0xd4>
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	61fa      	str	r2, [r7, #28]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	2302      	movs	r3, #2
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	e00b      	b.n	800637c <SEGGER_SYSVIEW_Start+0x124>
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	b2da      	uxtb	r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	1c59      	adds	r1, r3, #1
 800636c:	6179      	str	r1, [r7, #20]
 800636e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	09db      	lsrs	r3, r3, #7
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b7f      	cmp	r3, #127	; 0x7f
 8006380:	d8f0      	bhi.n	8006364 <SEGGER_SYSVIEW_Start+0x10c>
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	617a      	str	r2, [r7, #20]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006392:	2218      	movs	r2, #24
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7ff fbc4 	bl	8005b24 <_SendPacket>
      RECORD_END();
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80063a2:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <SEGGER_SYSVIEW_Start+0x16c>)
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <SEGGER_SYSVIEW_Start+0x16c>)
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80063b0:	f000 f9ec 	bl	800678c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80063b4:	f000 f9b2 	bl	800671c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80063b8:	f000 fbb0 	bl	8006b1c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 80063bc:	bf00      	nop
 80063be:	3730      	adds	r7, #48	; 0x30
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	200023f8 	.word	0x200023f8
 80063c8:	08008490 	.word	0x08008490
 80063cc:	20002428 	.word	0x20002428

080063d0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063d6:	f3ef 8311 	mrs	r3, BASEPRI
 80063da:	f04f 0120 	mov.w	r1, #32
 80063de:	f381 8811 	msr	BASEPRI, r1
 80063e2:	607b      	str	r3, [r7, #4]
 80063e4:	480b      	ldr	r0, [pc, #44]	; (8006414 <SEGGER_SYSVIEW_Stop+0x44>)
 80063e6:	f7ff fabe 	bl	8005966 <_PreparePacket>
 80063ea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <SEGGER_SYSVIEW_Stop+0x48>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80063f4:	220b      	movs	r2, #11
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6838      	ldr	r0, [r7, #0]
 80063fa:	f7ff fb93 	bl	8005b24 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80063fe:	4b06      	ldr	r3, [pc, #24]	; (8006418 <SEGGER_SYSVIEW_Stop+0x48>)
 8006400:	2200      	movs	r2, #0
 8006402:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f383 8811 	msr	BASEPRI, r3
}
 800640a:	bf00      	nop
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20002428 	.word	0x20002428
 8006418:	200023f8 	.word	0x200023f8

0800641c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b08c      	sub	sp, #48	; 0x30
 8006420:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006422:	f3ef 8311 	mrs	r3, BASEPRI
 8006426:	f04f 0120 	mov.w	r1, #32
 800642a:	f381 8811 	msr	BASEPRI, r1
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	4845      	ldr	r0, [pc, #276]	; (8006548 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006432:	f7ff fa98 	bl	8005966 <_PreparePacket>
 8006436:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006440:	4b42      	ldr	r3, [pc, #264]	; (800654c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28
 8006446:	e00b      	b.n	8006460 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	b2da      	uxtb	r2, r3
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	1c59      	adds	r1, r3, #1
 8006450:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006452:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	09db      	lsrs	r3, r3, #7
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	2b7f      	cmp	r3, #127	; 0x7f
 8006464:	d8f0      	bhi.n	8006448 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800646c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
 800647a:	4b34      	ldr	r3, [pc, #208]	; (800654c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	623b      	str	r3, [r7, #32]
 8006480:	e00b      	b.n	800649a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	b2da      	uxtb	r2, r3
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	1c59      	adds	r1, r3, #1
 800648a:	6279      	str	r1, [r7, #36]	; 0x24
 800648c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	09db      	lsrs	r3, r3, #7
 8006498:	623b      	str	r3, [r7, #32]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	2b7f      	cmp	r3, #127	; 0x7f
 800649e:	d8f0      	bhi.n	8006482 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	627a      	str	r2, [r7, #36]	; 0x24
 80064a6:	6a3a      	ldr	r2, [r7, #32]
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	4b25      	ldr	r3, [pc, #148]	; (800654c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	e00b      	b.n	80064d4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	1c59      	adds	r1, r3, #1
 80064c4:	61f9      	str	r1, [r7, #28]
 80064c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	09db      	lsrs	r3, r3, #7
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	2b7f      	cmp	r3, #127	; 0x7f
 80064d8:	d8f0      	bhi.n	80064bc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	61fa      	str	r2, [r7, #28]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	2302      	movs	r3, #2
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	e00b      	b.n	800650c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	1c59      	adds	r1, r3, #1
 80064fc:	6179      	str	r1, [r7, #20]
 80064fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	09db      	lsrs	r3, r3, #7
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b7f      	cmp	r3, #127	; 0x7f
 8006510:	d8f0      	bhi.n	80064f4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	617a      	str	r2, [r7, #20]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006522:	2218      	movs	r2, #24
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	68b8      	ldr	r0, [r7, #8]
 8006528:	f7ff fafc 	bl	8005b24 <_SendPacket>
  RECORD_END();
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006532:	4b06      	ldr	r3, [pc, #24]	; (800654c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800653a:	4b04      	ldr	r3, [pc, #16]	; (800654c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	4798      	blx	r3
  }
}
 8006540:	bf00      	nop
 8006542:	3730      	adds	r7, #48	; 0x30
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20002428 	.word	0x20002428
 800654c:	200023f8 	.word	0x200023f8

08006550 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b092      	sub	sp, #72	; 0x48
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006558:	f3ef 8311 	mrs	r3, BASEPRI
 800655c:	f04f 0120 	mov.w	r1, #32
 8006560:	f381 8811 	msr	BASEPRI, r1
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	486b      	ldr	r0, [pc, #428]	; (8006714 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006568:	f7ff f9fd 	bl	8005966 <_PreparePacket>
 800656c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	647b      	str	r3, [r7, #68]	; 0x44
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b67      	ldr	r3, [pc, #412]	; (8006718 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	089b      	lsrs	r3, r3, #2
 8006582:	643b      	str	r3, [r7, #64]	; 0x40
 8006584:	e00b      	b.n	800659e <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8006586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006588:	b2da      	uxtb	r2, r3
 800658a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800658c:	1c59      	adds	r1, r3, #1
 800658e:	6479      	str	r1, [r7, #68]	; 0x44
 8006590:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800659a:	09db      	lsrs	r3, r3, #7
 800659c:	643b      	str	r3, [r7, #64]	; 0x40
 800659e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a0:	2b7f      	cmp	r3, #127	; 0x7f
 80065a2:	d8f0      	bhi.n	8006586 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 80065a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	647a      	str	r2, [r7, #68]	; 0x44
 80065aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80065be:	e00b      	b.n	80065d8 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	63f9      	str	r1, [r7, #60]	; 0x3c
 80065ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	09db      	lsrs	r3, r3, #7
 80065d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	2b7f      	cmp	r3, #127	; 0x7f
 80065dc:	d8f0      	bhi.n	80065c0 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 80065de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ec:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	4619      	mov	r1, r3
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff f969 	bl	80058ce <_EncodeStr>
 80065fc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80065fe:	2209      	movs	r2, #9
 8006600:	68f9      	ldr	r1, [r7, #12]
 8006602:	6938      	ldr	r0, [r7, #16]
 8006604:	f7ff fa8e 	bl	8005b24 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	637b      	str	r3, [r7, #52]	; 0x34
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	4b40      	ldr	r3, [pc, #256]	; (8006718 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	089b      	lsrs	r3, r3, #2
 800661c:	633b      	str	r3, [r7, #48]	; 0x30
 800661e:	e00b      	b.n	8006638 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	b2da      	uxtb	r2, r3
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	1c59      	adds	r1, r3, #1
 8006628:	6379      	str	r1, [r7, #52]	; 0x34
 800662a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	09db      	lsrs	r3, r3, #7
 8006636:	633b      	str	r3, [r7, #48]	; 0x30
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	2b7f      	cmp	r3, #127	; 0x7f
 800663c:	d8f0      	bhi.n	8006620 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	637a      	str	r2, [r7, #52]	; 0x34
 8006644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
 8006658:	e00b      	b.n	8006672 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	b2da      	uxtb	r2, r3
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	1c59      	adds	r1, r3, #1
 8006662:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006664:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	09db      	lsrs	r3, r3, #7
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	2b7f      	cmp	r3, #127	; 0x7f
 8006676:	d8f0      	bhi.n	800665a <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8006678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800667e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	623b      	str	r3, [r7, #32]
 8006692:	e00b      	b.n	80066ac <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	b2da      	uxtb	r2, r3
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	1c59      	adds	r1, r3, #1
 800669c:	6279      	str	r1, [r7, #36]	; 0x24
 800669e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	09db      	lsrs	r3, r3, #7
 80066aa:	623b      	str	r3, [r7, #32]
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	2b7f      	cmp	r3, #127	; 0x7f
 80066b0:	d8f0      	bhi.n	8006694 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	627a      	str	r2, [r7, #36]	; 0x24
 80066b8:	6a3a      	ldr	r2, [r7, #32]
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	2300      	movs	r3, #0
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	e00b      	b.n	80066e4 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	1c59      	adds	r1, r3, #1
 80066d4:	61f9      	str	r1, [r7, #28]
 80066d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	09db      	lsrs	r3, r3, #7
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b7f      	cmp	r3, #127	; 0x7f
 80066e8:	d8f0      	bhi.n	80066cc <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	61fa      	str	r2, [r7, #28]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80066fa:	2215      	movs	r2, #21
 80066fc:	68f9      	ldr	r1, [r7, #12]
 80066fe:	6938      	ldr	r0, [r7, #16]
 8006700:	f7ff fa10 	bl	8005b24 <_SendPacket>
  RECORD_END();
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f383 8811 	msr	BASEPRI, r3
}
 800670a:	bf00      	nop
 800670c:	3748      	adds	r7, #72	; 0x48
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20002428 	.word	0x20002428
 8006718:	200023f8 	.word	0x200023f8

0800671c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006728:	4b05      	ldr	r3, [pc, #20]	; (8006740 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006732:	4b03      	ldr	r3, [pc, #12]	; (8006740 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4798      	blx	r3
  }
}
 800673a:	bf00      	nop
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	200023f8 	.word	0x200023f8

08006744 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800674c:	f3ef 8311 	mrs	r3, BASEPRI
 8006750:	f04f 0120 	mov.w	r1, #32
 8006754:	f381 8811 	msr	BASEPRI, r1
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	480b      	ldr	r0, [pc, #44]	; (8006788 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800675c:	f7ff f903 	bl	8005966 <_PreparePacket>
 8006760:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006762:	2280      	movs	r2, #128	; 0x80
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	6938      	ldr	r0, [r7, #16]
 8006768:	f7ff f8b1 	bl	80058ce <_EncodeStr>
 800676c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800676e:	220e      	movs	r2, #14
 8006770:	68f9      	ldr	r1, [r7, #12]
 8006772:	6938      	ldr	r0, [r7, #16]
 8006774:	f7ff f9d6 	bl	8005b24 <_SendPacket>
  RECORD_END();
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f383 8811 	msr	BASEPRI, r3
}
 800677e:	bf00      	nop
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20002428 	.word	0x20002428

0800678c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800678c:	b590      	push	{r4, r7, lr}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d01a      	beq.n	80067d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800679a:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d015      	beq.n	80067d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80067a4:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4798      	blx	r3
 80067ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80067b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80067b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	000a      	movs	r2, r1
 80067c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80067c2:	4613      	mov	r3, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	4621      	mov	r1, r4
 80067c8:	200d      	movs	r0, #13
 80067ca:	f7ff fbe3 	bl	8005f94 <SEGGER_SYSVIEW_RecordU32x2>
 80067ce:	e006      	b.n	80067de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4619      	mov	r1, r3
 80067d6:	200c      	movs	r0, #12
 80067d8:	f7ff fba0 	bl	8005f1c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd90      	pop	{r4, r7, pc}
 80067e6:	bf00      	nop
 80067e8:	200023f8 	.word	0x200023f8
 80067ec:	e0001004 	.word	0xe0001004

080067f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067f6:	f3ef 8311 	mrs	r3, BASEPRI
 80067fa:	f04f 0120 	mov.w	r1, #32
 80067fe:	f381 8811 	msr	BASEPRI, r1
 8006802:	607b      	str	r3, [r7, #4]
 8006804:	4807      	ldr	r0, [pc, #28]	; (8006824 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006806:	f7ff f8ae 	bl	8005966 <_PreparePacket>
 800680a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800680c:	2211      	movs	r2, #17
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6838      	ldr	r0, [r7, #0]
 8006812:	f7ff f987 	bl	8005b24 <_SendPacket>
  RECORD_END();
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f383 8811 	msr	BASEPRI, r3
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	20002428 	.word	0x20002428

08006828 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006830:	f3ef 8311 	mrs	r3, BASEPRI
 8006834:	f04f 0120 	mov.w	r1, #32
 8006838:	f381 8811 	msr	BASEPRI, r1
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	481a      	ldr	r0, [pc, #104]	; (80068a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006840:	f7ff f891 	bl	8005966 <_PreparePacket>
 8006844:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800684a:	4b18      	ldr	r3, [pc, #96]	; (80068ac <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	089b      	lsrs	r3, r3, #2
 8006854:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	e00b      	b.n	8006878 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	b2da      	uxtb	r2, r3
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	1c59      	adds	r1, r3, #1
 8006868:	61f9      	str	r1, [r7, #28]
 800686a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	09db      	lsrs	r3, r3, #7
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2b7f      	cmp	r3, #127	; 0x7f
 800687c:	d8f0      	bhi.n	8006860 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	61fa      	str	r2, [r7, #28]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800688e:	2208      	movs	r2, #8
 8006890:	68f9      	ldr	r1, [r7, #12]
 8006892:	6938      	ldr	r0, [r7, #16]
 8006894:	f7ff f946 	bl	8005b24 <_SendPacket>
  RECORD_END();
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f383 8811 	msr	BASEPRI, r3
}
 800689e:	bf00      	nop
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20002428 	.word	0x20002428
 80068ac:	200023f8 	.word	0x200023f8

080068b0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068b8:	f3ef 8311 	mrs	r3, BASEPRI
 80068bc:	f04f 0120 	mov.w	r1, #32
 80068c0:	f381 8811 	msr	BASEPRI, r1
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	481a      	ldr	r0, [pc, #104]	; (8006930 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80068c8:	f7ff f84d 	bl	8005966 <_PreparePacket>
 80068cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068d2:	4b18      	ldr	r3, [pc, #96]	; (8006934 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	089b      	lsrs	r3, r3, #2
 80068dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	e00b      	b.n	8006900 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	1c59      	adds	r1, r3, #1
 80068f0:	61f9      	str	r1, [r7, #28]
 80068f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	09db      	lsrs	r3, r3, #7
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b7f      	cmp	r3, #127	; 0x7f
 8006904:	d8f0      	bhi.n	80068e8 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	61fa      	str	r2, [r7, #28]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006916:	2204      	movs	r2, #4
 8006918:	68f9      	ldr	r1, [r7, #12]
 800691a:	6938      	ldr	r0, [r7, #16]
 800691c:	f7ff f902 	bl	8005b24 <_SendPacket>
  RECORD_END();
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f383 8811 	msr	BASEPRI, r3
}
 8006926:	bf00      	nop
 8006928:	3720      	adds	r7, #32
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20002428 	.word	0x20002428
 8006934:	200023f8 	.word	0x200023f8

08006938 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006940:	f3ef 8311 	mrs	r3, BASEPRI
 8006944:	f04f 0120 	mov.w	r1, #32
 8006948:	f381 8811 	msr	BASEPRI, r1
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	481a      	ldr	r0, [pc, #104]	; (80069b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006950:	f7ff f809 	bl	8005966 <_PreparePacket>
 8006954:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800695a:	4b18      	ldr	r3, [pc, #96]	; (80069bc <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	089b      	lsrs	r3, r3, #2
 8006964:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	61fb      	str	r3, [r7, #28]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	e00b      	b.n	8006988 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	b2da      	uxtb	r2, r3
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	1c59      	adds	r1, r3, #1
 8006978:	61f9      	str	r1, [r7, #28]
 800697a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	09db      	lsrs	r3, r3, #7
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	2b7f      	cmp	r3, #127	; 0x7f
 800698c:	d8f0      	bhi.n	8006970 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	61fa      	str	r2, [r7, #28]
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800699e:	2206      	movs	r2, #6
 80069a0:	68f9      	ldr	r1, [r7, #12]
 80069a2:	6938      	ldr	r0, [r7, #16]
 80069a4:	f7ff f8be 	bl	8005b24 <_SendPacket>
  RECORD_END();
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f383 8811 	msr	BASEPRI, r3
}
 80069ae:	bf00      	nop
 80069b0:	3720      	adds	r7, #32
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20002428 	.word	0x20002428
 80069bc:	200023f8 	.word	0x200023f8

080069c0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80069c8:	4b04      	ldr	r3, [pc, #16]	; (80069dc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	089b      	lsrs	r3, r3, #2
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr
 80069dc:	200023f8 	.word	0x200023f8

080069e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08c      	sub	sp, #48	; 0x30
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80069ea:	4b3b      	ldr	r3, [pc, #236]	; (8006ad8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d06d      	beq.n	8006ace <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80069f2:	4b39      	ldr	r3, [pc, #228]	; (8006ad8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80069f8:	2300      	movs	r3, #0
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80069fc:	e008      	b.n	8006a10 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d007      	beq.n	8006a1a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a10:	79fb      	ldrb	r3, [r7, #7]
 8006a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d3f2      	bcc.n	80069fe <SEGGER_SYSVIEW_SendModule+0x1e>
 8006a18:	e000      	b.n	8006a1c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006a1a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d055      	beq.n	8006ace <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a22:	f3ef 8311 	mrs	r3, BASEPRI
 8006a26:	f04f 0120 	mov.w	r1, #32
 8006a2a:	f381 8811 	msr	BASEPRI, r1
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	482a      	ldr	r0, [pc, #168]	; (8006adc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006a32:	f7fe ff98 	bl	8005966 <_PreparePacket>
 8006a36:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a40:	79fb      	ldrb	r3, [r7, #7]
 8006a42:	623b      	str	r3, [r7, #32]
 8006a44:	e00b      	b.n	8006a5e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	1c59      	adds	r1, r3, #1
 8006a4e:	6279      	str	r1, [r7, #36]	; 0x24
 8006a50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	09db      	lsrs	r3, r3, #7
 8006a5c:	623b      	str	r3, [r7, #32]
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	2b7f      	cmp	r3, #127	; 0x7f
 8006a62:	d8f0      	bhi.n	8006a46 <SEGGER_SYSVIEW_SendModule+0x66>
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	627a      	str	r2, [r7, #36]	; 0x24
 8006a6a:	6a3a      	ldr	r2, [r7, #32]
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	61fb      	str	r3, [r7, #28]
 8006a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	e00b      	b.n	8006a98 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	1c59      	adds	r1, r3, #1
 8006a88:	61f9      	str	r1, [r7, #28]
 8006a8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	09db      	lsrs	r3, r3, #7
 8006a96:	61bb      	str	r3, [r7, #24]
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a9c:	d8f0      	bhi.n	8006a80 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	61fa      	str	r2, [r7, #28]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2280      	movs	r2, #128	; 0x80
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f7fe ff09 	bl	80058ce <_EncodeStr>
 8006abc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006abe:	2216      	movs	r2, #22
 8006ac0:	68f9      	ldr	r1, [r7, #12]
 8006ac2:	6938      	ldr	r0, [r7, #16]
 8006ac4:	f7ff f82e 	bl	8005b24 <_SendPacket>
      RECORD_END();
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006ace:	bf00      	nop
 8006ad0:	3730      	adds	r7, #48	; 0x30
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20002420 	.word	0x20002420
 8006adc:	20002428 	.word	0x20002428

08006ae0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006ae6:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00f      	beq.n	8006b0e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006aee:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1f2      	bne.n	8006af4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20002420 	.word	0x20002420

08006b1c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006b22:	f3ef 8311 	mrs	r3, BASEPRI
 8006b26:	f04f 0120 	mov.w	r1, #32
 8006b2a:	f381 8811 	msr	BASEPRI, r1
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	4817      	ldr	r0, [pc, #92]	; (8006b90 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006b32:	f7fe ff18 	bl	8005966 <_PreparePacket>
 8006b36:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	613b      	str	r3, [r7, #16]
 8006b46:	e00b      	b.n	8006b60 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	6179      	str	r1, [r7, #20]
 8006b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	09db      	lsrs	r3, r3, #7
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2b7f      	cmp	r3, #127	; 0x7f
 8006b64:	d8f0      	bhi.n	8006b48 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	617a      	str	r2, [r7, #20]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006b76:	221b      	movs	r2, #27
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	68b8      	ldr	r0, [r7, #8]
 8006b7c:	f7fe ffd2 	bl	8005b24 <_SendPacket>
  RECORD_END();
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f383 8811 	msr	BASEPRI, r3
}
 8006b86:	bf00      	nop
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20002428 	.word	0x20002428
 8006b94:	20002424 	.word	0x20002424

08006b98 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8006b98:	b40f      	push	{r0, r1, r2, r3}
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8006ba0:	f107 0314 	add.w	r3, r7, #20
 8006ba4:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	461a      	mov	r2, r3
 8006baa:	2100      	movs	r1, #0
 8006bac:	6938      	ldr	r0, [r7, #16]
 8006bae:	f7ff f88d 	bl	8005ccc <_VPrintHost>
  va_end(ParamList);
#endif
}
 8006bb2:	bf00      	nop
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bbc:	b004      	add	sp, #16
 8006bbe:	4770      	bx	lr

08006bc0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08a      	sub	sp, #40	; 0x28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bc8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bcc:	f04f 0120 	mov.w	r1, #32
 8006bd0:	f381 8811 	msr	BASEPRI, r1
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	4827      	ldr	r0, [pc, #156]	; (8006c74 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006bd8:	f7fe fec5 	bl	8005966 <_PreparePacket>
 8006bdc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bde:	2280      	movs	r2, #128	; 0x80
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	6938      	ldr	r0, [r7, #16]
 8006be4:	f7fe fe73 	bl	80058ce <_EncodeStr>
 8006be8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
 8006bee:	2301      	movs	r3, #1
 8006bf0:	623b      	str	r3, [r7, #32]
 8006bf2:	e00b      	b.n	8006c0c <SEGGER_SYSVIEW_Warn+0x4c>
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	6279      	str	r1, [r7, #36]	; 0x24
 8006bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	09db      	lsrs	r3, r3, #7
 8006c0a:	623b      	str	r3, [r7, #32]
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c10:	d8f0      	bhi.n	8006bf4 <SEGGER_SYSVIEW_Warn+0x34>
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	627a      	str	r2, [r7, #36]	; 0x24
 8006c18:	6a3a      	ldr	r2, [r7, #32]
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	2300      	movs	r3, #0
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	e00b      	b.n	8006c44 <SEGGER_SYSVIEW_Warn+0x84>
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	1c59      	adds	r1, r3, #1
 8006c34:	61f9      	str	r1, [r7, #28]
 8006c36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	09db      	lsrs	r3, r3, #7
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	2b7f      	cmp	r3, #127	; 0x7f
 8006c48:	d8f0      	bhi.n	8006c2c <SEGGER_SYSVIEW_Warn+0x6c>
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	61fa      	str	r2, [r7, #28]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006c5a:	221a      	movs	r2, #26
 8006c5c:	68f9      	ldr	r1, [r7, #12]
 8006c5e:	6938      	ldr	r0, [r7, #16]
 8006c60:	f7fe ff60 	bl	8005b24 <_SendPacket>
  RECORD_END();
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f383 8811 	msr	BASEPRI, r3
}
 8006c6a:	bf00      	nop
 8006c6c:	3728      	adds	r7, #40	; 0x28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20002428 	.word	0x20002428

08006c78 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006c7c:	4803      	ldr	r0, [pc, #12]	; (8006c8c <_cbSendSystemDesc+0x14>)
 8006c7e:	f7ff fd61 	bl	8006744 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006c82:	4803      	ldr	r0, [pc, #12]	; (8006c90 <_cbSendSystemDesc+0x18>)
 8006c84:	f7ff fd5e 	bl	8006744 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006c88:	bf00      	nop
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	080083b8 	.word	0x080083b8
 8006c90:	080083ec 	.word	0x080083ec

08006c94 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8006c9e:	6819      	ldr	r1, [r3, #0]
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <SEGGER_SYSVIEW_Conf+0x24>)
 8006ca2:	4a06      	ldr	r2, [pc, #24]	; (8006cbc <SEGGER_SYSVIEW_Conf+0x28>)
 8006ca4:	f7ff f8d0 	bl	8005e48 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006ca8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006cac:	f7ff f90a 	bl	8005ec4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006cb0:	bf00      	nop
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20000004 	.word	0x20000004
 8006cb8:	08006c79 	.word	0x08006c79
 8006cbc:	0800849c 	.word	0x0800849c

08006cc0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	607b      	str	r3, [r7, #4]
 8006cca:	e048      	b.n	8006d5e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8006ccc:	4929      	ldr	r1, [pc, #164]	; (8006d74 <_cbSendTaskList+0xb4>)
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	440b      	add	r3, r1
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fd fad7 	bl	8004290 <uxTaskGetStackHighWaterMark>
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	4823      	ldr	r0, [pc, #140]	; (8006d74 <_cbSendTaskList+0xb4>)
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4403      	add	r3, r0
 8006cf2:	3310      	adds	r3, #16
 8006cf4:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006cf6:	491f      	ldr	r1, [pc, #124]	; (8006d74 <_cbSendTaskList+0xb4>)
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	440b      	add	r3, r1
 8006d04:	6818      	ldr	r0, [r3, #0]
 8006d06:	491b      	ldr	r1, [pc, #108]	; (8006d74 <_cbSendTaskList+0xb4>)
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	440b      	add	r3, r1
 8006d14:	3304      	adds	r3, #4
 8006d16:	6819      	ldr	r1, [r3, #0]
 8006d18:	4c16      	ldr	r4, [pc, #88]	; (8006d74 <_cbSendTaskList+0xb4>)
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4423      	add	r3, r4
 8006d26:	3308      	adds	r3, #8
 8006d28:	681c      	ldr	r4, [r3, #0]
 8006d2a:	4d12      	ldr	r5, [pc, #72]	; (8006d74 <_cbSendTaskList+0xb4>)
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	442b      	add	r3, r5
 8006d38:	330c      	adds	r3, #12
 8006d3a:	681d      	ldr	r5, [r3, #0]
 8006d3c:	4e0d      	ldr	r6, [pc, #52]	; (8006d74 <_cbSendTaskList+0xb4>)
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4433      	add	r3, r6
 8006d4a:	3310      	adds	r3, #16
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	462b      	mov	r3, r5
 8006d52:	4622      	mov	r2, r4
 8006d54:	f000 f8be 	bl	8006ed4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <_cbSendTaskList+0xb8>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d3b1      	bcc.n	8006ccc <_cbSendTaskList+0xc>
  }
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d72:	bf00      	nop
 8006d74:	2000250c 	.word	0x2000250c
 8006d78:	200025ac 	.word	0x200025ac

08006d7c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006d84:	f7fc ff58 	bl	8003c38 <xTaskGetTickCountFromISR>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	469a      	mov	sl, r3
 8006d8e:	4693      	mov	fp, r2
 8006d90:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	f04f 0a00 	mov.w	sl, #0
 8006da0:	f04f 0b00 	mov.w	fp, #0
 8006da4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006da8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006dac:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006db0:	4652      	mov	r2, sl
 8006db2:	465b      	mov	r3, fp
 8006db4:	1a14      	subs	r4, r2, r0
 8006db6:	eb63 0501 	sbc.w	r5, r3, r1
 8006dba:	f04f 0200 	mov.w	r2, #0
 8006dbe:	f04f 0300 	mov.w	r3, #0
 8006dc2:	00ab      	lsls	r3, r5, #2
 8006dc4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006dc8:	00a2      	lsls	r2, r4, #2
 8006dca:	4614      	mov	r4, r2
 8006dcc:	461d      	mov	r5, r3
 8006dce:	eb14 0800 	adds.w	r8, r4, r0
 8006dd2:	eb45 0901 	adc.w	r9, r5, r1
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dea:	4690      	mov	r8, r2
 8006dec:	4699      	mov	r9, r3
 8006dee:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006df2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006df6:	4610      	mov	r0, r2
 8006df8:	4619      	mov	r1, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006e04 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006e12:	2205      	movs	r2, #5
 8006e14:	492b      	ldr	r1, [pc, #172]	; (8006ec4 <SYSVIEW_AddTask+0xc0>)
 8006e16:	68b8      	ldr	r0, [r7, #8]
 8006e18:	f000 f9a1 	bl	800715e <memcmp>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d04b      	beq.n	8006eba <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006e22:	4b29      	ldr	r3, [pc, #164]	; (8006ec8 <SYSVIEW_AddTask+0xc4>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b07      	cmp	r3, #7
 8006e28:	d903      	bls.n	8006e32 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006e2a:	4828      	ldr	r0, [pc, #160]	; (8006ecc <SYSVIEW_AddTask+0xc8>)
 8006e2c:	f7ff fec8 	bl	8006bc0 <SEGGER_SYSVIEW_Warn>
    return;
 8006e30:	e044      	b.n	8006ebc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006e32:	4b25      	ldr	r3, [pc, #148]	; (8006ec8 <SYSVIEW_AddTask+0xc4>)
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4926      	ldr	r1, [pc, #152]	; (8006ed0 <SYSVIEW_AddTask+0xcc>)
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006e46:	4b20      	ldr	r3, [pc, #128]	; (8006ec8 <SYSVIEW_AddTask+0xc4>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4921      	ldr	r1, [pc, #132]	; (8006ed0 <SYSVIEW_AddTask+0xcc>)
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	440b      	add	r3, r1
 8006e56:	3304      	adds	r3, #4
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006e5c:	4b1a      	ldr	r3, [pc, #104]	; (8006ec8 <SYSVIEW_AddTask+0xc4>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	491b      	ldr	r1, [pc, #108]	; (8006ed0 <SYSVIEW_AddTask+0xcc>)
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006e72:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <SYSVIEW_AddTask+0xc4>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	4916      	ldr	r1, [pc, #88]	; (8006ed0 <SYSVIEW_AddTask+0xcc>)
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	330c      	adds	r3, #12
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006e88:	4b0f      	ldr	r3, [pc, #60]	; (8006ec8 <SYSVIEW_AddTask+0xc4>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	4910      	ldr	r1, [pc, #64]	; (8006ed0 <SYSVIEW_AddTask+0xcc>)
 8006e8e:	4613      	mov	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	3310      	adds	r3, #16
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006e9e:	4b0a      	ldr	r3, [pc, #40]	; (8006ec8 <SYSVIEW_AddTask+0xc4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	4a08      	ldr	r2, [pc, #32]	; (8006ec8 <SYSVIEW_AddTask+0xc4>)
 8006ea6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 f80e 	bl	8006ed4 <SYSVIEW_SendTaskInfo>
 8006eb8:	e000      	b.n	8006ebc <SYSVIEW_AddTask+0xb8>
    return;
 8006eba:	bf00      	nop

}
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	080083fc 	.word	0x080083fc
 8006ec8:	200025ac 	.word	0x200025ac
 8006ecc:	08008404 	.word	0x08008404
 8006ed0:	2000250c 	.word	0x2000250c

08006ed4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08a      	sub	sp, #40	; 0x28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006ee2:	f107 0314 	add.w	r3, r7, #20
 8006ee6:	2214      	movs	r2, #20
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 f955 	bl	800719a <memset>
  TaskInfo.TaskID     = TaskID;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006f04:	f107 0314 	add.w	r3, r7, #20
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff fb21 	bl	8006550 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006f0e:	bf00      	nop
 8006f10:	3728      	adds	r7, #40	; 0x28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <__errno>:
 8006f18:	4b01      	ldr	r3, [pc, #4]	; (8006f20 <__errno+0x8>)
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	20000014 	.word	0x20000014

08006f24 <std>:
 8006f24:	2300      	movs	r3, #0
 8006f26:	b510      	push	{r4, lr}
 8006f28:	4604      	mov	r4, r0
 8006f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f32:	6083      	str	r3, [r0, #8]
 8006f34:	8181      	strh	r1, [r0, #12]
 8006f36:	6643      	str	r3, [r0, #100]	; 0x64
 8006f38:	81c2      	strh	r2, [r0, #14]
 8006f3a:	6183      	str	r3, [r0, #24]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	2208      	movs	r2, #8
 8006f40:	305c      	adds	r0, #92	; 0x5c
 8006f42:	f000 f92a 	bl	800719a <memset>
 8006f46:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <std+0x38>)
 8006f48:	6224      	str	r4, [r4, #32]
 8006f4a:	6263      	str	r3, [r4, #36]	; 0x24
 8006f4c:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <std+0x3c>)
 8006f4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f50:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <std+0x40>)
 8006f52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f54:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <std+0x44>)
 8006f56:	6323      	str	r3, [r4, #48]	; 0x30
 8006f58:	bd10      	pop	{r4, pc}
 8006f5a:	bf00      	nop
 8006f5c:	080074e5 	.word	0x080074e5
 8006f60:	08007507 	.word	0x08007507
 8006f64:	0800753f 	.word	0x0800753f
 8006f68:	08007563 	.word	0x08007563

08006f6c <_cleanup_r>:
 8006f6c:	4901      	ldr	r1, [pc, #4]	; (8006f74 <_cleanup_r+0x8>)
 8006f6e:	f000 b8af 	b.w	80070d0 <_fwalk_reent>
 8006f72:	bf00      	nop
 8006f74:	08007811 	.word	0x08007811

08006f78 <__sfmoreglue>:
 8006f78:	2268      	movs	r2, #104	; 0x68
 8006f7a:	b570      	push	{r4, r5, r6, lr}
 8006f7c:	1e4d      	subs	r5, r1, #1
 8006f7e:	4355      	muls	r5, r2
 8006f80:	460e      	mov	r6, r1
 8006f82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f86:	f000 f931 	bl	80071ec <_malloc_r>
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	b140      	cbz	r0, 8006fa0 <__sfmoreglue+0x28>
 8006f8e:	2100      	movs	r1, #0
 8006f90:	e9c0 1600 	strd	r1, r6, [r0]
 8006f94:	300c      	adds	r0, #12
 8006f96:	60a0      	str	r0, [r4, #8]
 8006f98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f9c:	f000 f8fd 	bl	800719a <memset>
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}

08006fa4 <__sfp_lock_acquire>:
 8006fa4:	4801      	ldr	r0, [pc, #4]	; (8006fac <__sfp_lock_acquire+0x8>)
 8006fa6:	f000 b8d8 	b.w	800715a <__retarget_lock_acquire_recursive>
 8006faa:	bf00      	nop
 8006fac:	200025b1 	.word	0x200025b1

08006fb0 <__sfp_lock_release>:
 8006fb0:	4801      	ldr	r0, [pc, #4]	; (8006fb8 <__sfp_lock_release+0x8>)
 8006fb2:	f000 b8d3 	b.w	800715c <__retarget_lock_release_recursive>
 8006fb6:	bf00      	nop
 8006fb8:	200025b1 	.word	0x200025b1

08006fbc <__sinit_lock_acquire>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__sinit_lock_acquire+0x8>)
 8006fbe:	f000 b8cc 	b.w	800715a <__retarget_lock_acquire_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	200025b2 	.word	0x200025b2

08006fc8 <__sinit_lock_release>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <__sinit_lock_release+0x8>)
 8006fca:	f000 b8c7 	b.w	800715c <__retarget_lock_release_recursive>
 8006fce:	bf00      	nop
 8006fd0:	200025b2 	.word	0x200025b2

08006fd4 <__sinit>:
 8006fd4:	b510      	push	{r4, lr}
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	f7ff fff0 	bl	8006fbc <__sinit_lock_acquire>
 8006fdc:	69a3      	ldr	r3, [r4, #24]
 8006fde:	b11b      	cbz	r3, 8006fe8 <__sinit+0x14>
 8006fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fe4:	f7ff bff0 	b.w	8006fc8 <__sinit_lock_release>
 8006fe8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fec:	6523      	str	r3, [r4, #80]	; 0x50
 8006fee:	4b13      	ldr	r3, [pc, #76]	; (800703c <__sinit+0x68>)
 8006ff0:	4a13      	ldr	r2, [pc, #76]	; (8007040 <__sinit+0x6c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ff6:	42a3      	cmp	r3, r4
 8006ff8:	bf08      	it	eq
 8006ffa:	2301      	moveq	r3, #1
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	bf08      	it	eq
 8007000:	61a3      	streq	r3, [r4, #24]
 8007002:	f000 f81f 	bl	8007044 <__sfp>
 8007006:	6060      	str	r0, [r4, #4]
 8007008:	4620      	mov	r0, r4
 800700a:	f000 f81b 	bl	8007044 <__sfp>
 800700e:	60a0      	str	r0, [r4, #8]
 8007010:	4620      	mov	r0, r4
 8007012:	f000 f817 	bl	8007044 <__sfp>
 8007016:	2200      	movs	r2, #0
 8007018:	2104      	movs	r1, #4
 800701a:	60e0      	str	r0, [r4, #12]
 800701c:	6860      	ldr	r0, [r4, #4]
 800701e:	f7ff ff81 	bl	8006f24 <std>
 8007022:	2201      	movs	r2, #1
 8007024:	2109      	movs	r1, #9
 8007026:	68a0      	ldr	r0, [r4, #8]
 8007028:	f7ff ff7c 	bl	8006f24 <std>
 800702c:	2202      	movs	r2, #2
 800702e:	2112      	movs	r1, #18
 8007030:	68e0      	ldr	r0, [r4, #12]
 8007032:	f7ff ff77 	bl	8006f24 <std>
 8007036:	2301      	movs	r3, #1
 8007038:	61a3      	str	r3, [r4, #24]
 800703a:	e7d1      	b.n	8006fe0 <__sinit+0xc>
 800703c:	08008504 	.word	0x08008504
 8007040:	08006f6d 	.word	0x08006f6d

08007044 <__sfp>:
 8007044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007046:	4607      	mov	r7, r0
 8007048:	f7ff ffac 	bl	8006fa4 <__sfp_lock_acquire>
 800704c:	4b1e      	ldr	r3, [pc, #120]	; (80070c8 <__sfp+0x84>)
 800704e:	681e      	ldr	r6, [r3, #0]
 8007050:	69b3      	ldr	r3, [r6, #24]
 8007052:	b913      	cbnz	r3, 800705a <__sfp+0x16>
 8007054:	4630      	mov	r0, r6
 8007056:	f7ff ffbd 	bl	8006fd4 <__sinit>
 800705a:	3648      	adds	r6, #72	; 0x48
 800705c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007060:	3b01      	subs	r3, #1
 8007062:	d503      	bpl.n	800706c <__sfp+0x28>
 8007064:	6833      	ldr	r3, [r6, #0]
 8007066:	b30b      	cbz	r3, 80070ac <__sfp+0x68>
 8007068:	6836      	ldr	r6, [r6, #0]
 800706a:	e7f7      	b.n	800705c <__sfp+0x18>
 800706c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007070:	b9d5      	cbnz	r5, 80070a8 <__sfp+0x64>
 8007072:	4b16      	ldr	r3, [pc, #88]	; (80070cc <__sfp+0x88>)
 8007074:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007078:	60e3      	str	r3, [r4, #12]
 800707a:	6665      	str	r5, [r4, #100]	; 0x64
 800707c:	f000 f86c 	bl	8007158 <__retarget_lock_init_recursive>
 8007080:	f7ff ff96 	bl	8006fb0 <__sfp_lock_release>
 8007084:	2208      	movs	r2, #8
 8007086:	4629      	mov	r1, r5
 8007088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800708c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007090:	6025      	str	r5, [r4, #0]
 8007092:	61a5      	str	r5, [r4, #24]
 8007094:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007098:	f000 f87f 	bl	800719a <memset>
 800709c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070a4:	4620      	mov	r0, r4
 80070a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a8:	3468      	adds	r4, #104	; 0x68
 80070aa:	e7d9      	b.n	8007060 <__sfp+0x1c>
 80070ac:	2104      	movs	r1, #4
 80070ae:	4638      	mov	r0, r7
 80070b0:	f7ff ff62 	bl	8006f78 <__sfmoreglue>
 80070b4:	4604      	mov	r4, r0
 80070b6:	6030      	str	r0, [r6, #0]
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d1d5      	bne.n	8007068 <__sfp+0x24>
 80070bc:	f7ff ff78 	bl	8006fb0 <__sfp_lock_release>
 80070c0:	230c      	movs	r3, #12
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	e7ee      	b.n	80070a4 <__sfp+0x60>
 80070c6:	bf00      	nop
 80070c8:	08008504 	.word	0x08008504
 80070cc:	ffff0001 	.word	0xffff0001

080070d0 <_fwalk_reent>:
 80070d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d4:	4606      	mov	r6, r0
 80070d6:	4688      	mov	r8, r1
 80070d8:	2700      	movs	r7, #0
 80070da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070e2:	f1b9 0901 	subs.w	r9, r9, #1
 80070e6:	d505      	bpl.n	80070f4 <_fwalk_reent+0x24>
 80070e8:	6824      	ldr	r4, [r4, #0]
 80070ea:	2c00      	cmp	r4, #0
 80070ec:	d1f7      	bne.n	80070de <_fwalk_reent+0xe>
 80070ee:	4638      	mov	r0, r7
 80070f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f4:	89ab      	ldrh	r3, [r5, #12]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d907      	bls.n	800710a <_fwalk_reent+0x3a>
 80070fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070fe:	3301      	adds	r3, #1
 8007100:	d003      	beq.n	800710a <_fwalk_reent+0x3a>
 8007102:	4629      	mov	r1, r5
 8007104:	4630      	mov	r0, r6
 8007106:	47c0      	blx	r8
 8007108:	4307      	orrs	r7, r0
 800710a:	3568      	adds	r5, #104	; 0x68
 800710c:	e7e9      	b.n	80070e2 <_fwalk_reent+0x12>
	...

08007110 <__libc_init_array>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	2600      	movs	r6, #0
 8007114:	4d0c      	ldr	r5, [pc, #48]	; (8007148 <__libc_init_array+0x38>)
 8007116:	4c0d      	ldr	r4, [pc, #52]	; (800714c <__libc_init_array+0x3c>)
 8007118:	1b64      	subs	r4, r4, r5
 800711a:	10a4      	asrs	r4, r4, #2
 800711c:	42a6      	cmp	r6, r4
 800711e:	d109      	bne.n	8007134 <__libc_init_array+0x24>
 8007120:	f000 ffae 	bl	8008080 <_init>
 8007124:	2600      	movs	r6, #0
 8007126:	4d0a      	ldr	r5, [pc, #40]	; (8007150 <__libc_init_array+0x40>)
 8007128:	4c0a      	ldr	r4, [pc, #40]	; (8007154 <__libc_init_array+0x44>)
 800712a:	1b64      	subs	r4, r4, r5
 800712c:	10a4      	asrs	r4, r4, #2
 800712e:	42a6      	cmp	r6, r4
 8007130:	d105      	bne.n	800713e <__libc_init_array+0x2e>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	f855 3b04 	ldr.w	r3, [r5], #4
 8007138:	4798      	blx	r3
 800713a:	3601      	adds	r6, #1
 800713c:	e7ee      	b.n	800711c <__libc_init_array+0xc>
 800713e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007142:	4798      	blx	r3
 8007144:	3601      	adds	r6, #1
 8007146:	e7f2      	b.n	800712e <__libc_init_array+0x1e>
 8007148:	0800853c 	.word	0x0800853c
 800714c:	0800853c 	.word	0x0800853c
 8007150:	0800853c 	.word	0x0800853c
 8007154:	08008540 	.word	0x08008540

08007158 <__retarget_lock_init_recursive>:
 8007158:	4770      	bx	lr

0800715a <__retarget_lock_acquire_recursive>:
 800715a:	4770      	bx	lr

0800715c <__retarget_lock_release_recursive>:
 800715c:	4770      	bx	lr

0800715e <memcmp>:
 800715e:	b510      	push	{r4, lr}
 8007160:	3901      	subs	r1, #1
 8007162:	4402      	add	r2, r0
 8007164:	4290      	cmp	r0, r2
 8007166:	d101      	bne.n	800716c <memcmp+0xe>
 8007168:	2000      	movs	r0, #0
 800716a:	e005      	b.n	8007178 <memcmp+0x1a>
 800716c:	7803      	ldrb	r3, [r0, #0]
 800716e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007172:	42a3      	cmp	r3, r4
 8007174:	d001      	beq.n	800717a <memcmp+0x1c>
 8007176:	1b18      	subs	r0, r3, r4
 8007178:	bd10      	pop	{r4, pc}
 800717a:	3001      	adds	r0, #1
 800717c:	e7f2      	b.n	8007164 <memcmp+0x6>

0800717e <memcpy>:
 800717e:	440a      	add	r2, r1
 8007180:	4291      	cmp	r1, r2
 8007182:	f100 33ff 	add.w	r3, r0, #4294967295
 8007186:	d100      	bne.n	800718a <memcpy+0xc>
 8007188:	4770      	bx	lr
 800718a:	b510      	push	{r4, lr}
 800718c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007190:	4291      	cmp	r1, r2
 8007192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007196:	d1f9      	bne.n	800718c <memcpy+0xe>
 8007198:	bd10      	pop	{r4, pc}

0800719a <memset>:
 800719a:	4603      	mov	r3, r0
 800719c:	4402      	add	r2, r0
 800719e:	4293      	cmp	r3, r2
 80071a0:	d100      	bne.n	80071a4 <memset+0xa>
 80071a2:	4770      	bx	lr
 80071a4:	f803 1b01 	strb.w	r1, [r3], #1
 80071a8:	e7f9      	b.n	800719e <memset+0x4>
	...

080071ac <sbrk_aligned>:
 80071ac:	b570      	push	{r4, r5, r6, lr}
 80071ae:	4e0e      	ldr	r6, [pc, #56]	; (80071e8 <sbrk_aligned+0x3c>)
 80071b0:	460c      	mov	r4, r1
 80071b2:	6831      	ldr	r1, [r6, #0]
 80071b4:	4605      	mov	r5, r0
 80071b6:	b911      	cbnz	r1, 80071be <sbrk_aligned+0x12>
 80071b8:	f000 f984 	bl	80074c4 <_sbrk_r>
 80071bc:	6030      	str	r0, [r6, #0]
 80071be:	4621      	mov	r1, r4
 80071c0:	4628      	mov	r0, r5
 80071c2:	f000 f97f 	bl	80074c4 <_sbrk_r>
 80071c6:	1c43      	adds	r3, r0, #1
 80071c8:	d00a      	beq.n	80071e0 <sbrk_aligned+0x34>
 80071ca:	1cc4      	adds	r4, r0, #3
 80071cc:	f024 0403 	bic.w	r4, r4, #3
 80071d0:	42a0      	cmp	r0, r4
 80071d2:	d007      	beq.n	80071e4 <sbrk_aligned+0x38>
 80071d4:	1a21      	subs	r1, r4, r0
 80071d6:	4628      	mov	r0, r5
 80071d8:	f000 f974 	bl	80074c4 <_sbrk_r>
 80071dc:	3001      	adds	r0, #1
 80071de:	d101      	bne.n	80071e4 <sbrk_aligned+0x38>
 80071e0:	f04f 34ff 	mov.w	r4, #4294967295
 80071e4:	4620      	mov	r0, r4
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	200025b8 	.word	0x200025b8

080071ec <_malloc_r>:
 80071ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f0:	1ccd      	adds	r5, r1, #3
 80071f2:	f025 0503 	bic.w	r5, r5, #3
 80071f6:	3508      	adds	r5, #8
 80071f8:	2d0c      	cmp	r5, #12
 80071fa:	bf38      	it	cc
 80071fc:	250c      	movcc	r5, #12
 80071fe:	2d00      	cmp	r5, #0
 8007200:	4607      	mov	r7, r0
 8007202:	db01      	blt.n	8007208 <_malloc_r+0x1c>
 8007204:	42a9      	cmp	r1, r5
 8007206:	d905      	bls.n	8007214 <_malloc_r+0x28>
 8007208:	230c      	movs	r3, #12
 800720a:	2600      	movs	r6, #0
 800720c:	603b      	str	r3, [r7, #0]
 800720e:	4630      	mov	r0, r6
 8007210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007214:	4e2e      	ldr	r6, [pc, #184]	; (80072d0 <_malloc_r+0xe4>)
 8007216:	f000 fbaf 	bl	8007978 <__malloc_lock>
 800721a:	6833      	ldr	r3, [r6, #0]
 800721c:	461c      	mov	r4, r3
 800721e:	bb34      	cbnz	r4, 800726e <_malloc_r+0x82>
 8007220:	4629      	mov	r1, r5
 8007222:	4638      	mov	r0, r7
 8007224:	f7ff ffc2 	bl	80071ac <sbrk_aligned>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	4604      	mov	r4, r0
 800722c:	d14d      	bne.n	80072ca <_malloc_r+0xde>
 800722e:	6834      	ldr	r4, [r6, #0]
 8007230:	4626      	mov	r6, r4
 8007232:	2e00      	cmp	r6, #0
 8007234:	d140      	bne.n	80072b8 <_malloc_r+0xcc>
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	4631      	mov	r1, r6
 800723a:	4638      	mov	r0, r7
 800723c:	eb04 0803 	add.w	r8, r4, r3
 8007240:	f000 f940 	bl	80074c4 <_sbrk_r>
 8007244:	4580      	cmp	r8, r0
 8007246:	d13a      	bne.n	80072be <_malloc_r+0xd2>
 8007248:	6821      	ldr	r1, [r4, #0]
 800724a:	3503      	adds	r5, #3
 800724c:	1a6d      	subs	r5, r5, r1
 800724e:	f025 0503 	bic.w	r5, r5, #3
 8007252:	3508      	adds	r5, #8
 8007254:	2d0c      	cmp	r5, #12
 8007256:	bf38      	it	cc
 8007258:	250c      	movcc	r5, #12
 800725a:	4638      	mov	r0, r7
 800725c:	4629      	mov	r1, r5
 800725e:	f7ff ffa5 	bl	80071ac <sbrk_aligned>
 8007262:	3001      	adds	r0, #1
 8007264:	d02b      	beq.n	80072be <_malloc_r+0xd2>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	442b      	add	r3, r5
 800726a:	6023      	str	r3, [r4, #0]
 800726c:	e00e      	b.n	800728c <_malloc_r+0xa0>
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	1b52      	subs	r2, r2, r5
 8007272:	d41e      	bmi.n	80072b2 <_malloc_r+0xc6>
 8007274:	2a0b      	cmp	r2, #11
 8007276:	d916      	bls.n	80072a6 <_malloc_r+0xba>
 8007278:	1961      	adds	r1, r4, r5
 800727a:	42a3      	cmp	r3, r4
 800727c:	6025      	str	r5, [r4, #0]
 800727e:	bf18      	it	ne
 8007280:	6059      	strne	r1, [r3, #4]
 8007282:	6863      	ldr	r3, [r4, #4]
 8007284:	bf08      	it	eq
 8007286:	6031      	streq	r1, [r6, #0]
 8007288:	5162      	str	r2, [r4, r5]
 800728a:	604b      	str	r3, [r1, #4]
 800728c:	4638      	mov	r0, r7
 800728e:	f104 060b 	add.w	r6, r4, #11
 8007292:	f000 fb77 	bl	8007984 <__malloc_unlock>
 8007296:	f026 0607 	bic.w	r6, r6, #7
 800729a:	1d23      	adds	r3, r4, #4
 800729c:	1af2      	subs	r2, r6, r3
 800729e:	d0b6      	beq.n	800720e <_malloc_r+0x22>
 80072a0:	1b9b      	subs	r3, r3, r6
 80072a2:	50a3      	str	r3, [r4, r2]
 80072a4:	e7b3      	b.n	800720e <_malloc_r+0x22>
 80072a6:	6862      	ldr	r2, [r4, #4]
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	bf0c      	ite	eq
 80072ac:	6032      	streq	r2, [r6, #0]
 80072ae:	605a      	strne	r2, [r3, #4]
 80072b0:	e7ec      	b.n	800728c <_malloc_r+0xa0>
 80072b2:	4623      	mov	r3, r4
 80072b4:	6864      	ldr	r4, [r4, #4]
 80072b6:	e7b2      	b.n	800721e <_malloc_r+0x32>
 80072b8:	4634      	mov	r4, r6
 80072ba:	6876      	ldr	r6, [r6, #4]
 80072bc:	e7b9      	b.n	8007232 <_malloc_r+0x46>
 80072be:	230c      	movs	r3, #12
 80072c0:	4638      	mov	r0, r7
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	f000 fb5e 	bl	8007984 <__malloc_unlock>
 80072c8:	e7a1      	b.n	800720e <_malloc_r+0x22>
 80072ca:	6025      	str	r5, [r4, #0]
 80072cc:	e7de      	b.n	800728c <_malloc_r+0xa0>
 80072ce:	bf00      	nop
 80072d0:	200025b4 	.word	0x200025b4

080072d4 <iprintf>:
 80072d4:	b40f      	push	{r0, r1, r2, r3}
 80072d6:	4b0a      	ldr	r3, [pc, #40]	; (8007300 <iprintf+0x2c>)
 80072d8:	b513      	push	{r0, r1, r4, lr}
 80072da:	681c      	ldr	r4, [r3, #0]
 80072dc:	b124      	cbz	r4, 80072e8 <iprintf+0x14>
 80072de:	69a3      	ldr	r3, [r4, #24]
 80072e0:	b913      	cbnz	r3, 80072e8 <iprintf+0x14>
 80072e2:	4620      	mov	r0, r4
 80072e4:	f7ff fe76 	bl	8006fd4 <__sinit>
 80072e8:	ab05      	add	r3, sp, #20
 80072ea:	4620      	mov	r0, r4
 80072ec:	9a04      	ldr	r2, [sp, #16]
 80072ee:	68a1      	ldr	r1, [r4, #8]
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	f000 fbbd 	bl	8007a70 <_vfiprintf_r>
 80072f6:	b002      	add	sp, #8
 80072f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072fc:	b004      	add	sp, #16
 80072fe:	4770      	bx	lr
 8007300:	20000014 	.word	0x20000014

08007304 <_puts_r>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	460e      	mov	r6, r1
 8007308:	4605      	mov	r5, r0
 800730a:	b118      	cbz	r0, 8007314 <_puts_r+0x10>
 800730c:	6983      	ldr	r3, [r0, #24]
 800730e:	b90b      	cbnz	r3, 8007314 <_puts_r+0x10>
 8007310:	f7ff fe60 	bl	8006fd4 <__sinit>
 8007314:	69ab      	ldr	r3, [r5, #24]
 8007316:	68ac      	ldr	r4, [r5, #8]
 8007318:	b913      	cbnz	r3, 8007320 <_puts_r+0x1c>
 800731a:	4628      	mov	r0, r5
 800731c:	f7ff fe5a 	bl	8006fd4 <__sinit>
 8007320:	4b2c      	ldr	r3, [pc, #176]	; (80073d4 <_puts_r+0xd0>)
 8007322:	429c      	cmp	r4, r3
 8007324:	d120      	bne.n	8007368 <_puts_r+0x64>
 8007326:	686c      	ldr	r4, [r5, #4]
 8007328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800732a:	07db      	lsls	r3, r3, #31
 800732c:	d405      	bmi.n	800733a <_puts_r+0x36>
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	0598      	lsls	r0, r3, #22
 8007332:	d402      	bmi.n	800733a <_puts_r+0x36>
 8007334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007336:	f7ff ff10 	bl	800715a <__retarget_lock_acquire_recursive>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	0719      	lsls	r1, r3, #28
 800733e:	d51d      	bpl.n	800737c <_puts_r+0x78>
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	b1db      	cbz	r3, 800737c <_puts_r+0x78>
 8007344:	3e01      	subs	r6, #1
 8007346:	68a3      	ldr	r3, [r4, #8]
 8007348:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800734c:	3b01      	subs	r3, #1
 800734e:	60a3      	str	r3, [r4, #8]
 8007350:	bb39      	cbnz	r1, 80073a2 <_puts_r+0x9e>
 8007352:	2b00      	cmp	r3, #0
 8007354:	da38      	bge.n	80073c8 <_puts_r+0xc4>
 8007356:	4622      	mov	r2, r4
 8007358:	210a      	movs	r1, #10
 800735a:	4628      	mov	r0, r5
 800735c:	f000 f906 	bl	800756c <__swbuf_r>
 8007360:	3001      	adds	r0, #1
 8007362:	d011      	beq.n	8007388 <_puts_r+0x84>
 8007364:	250a      	movs	r5, #10
 8007366:	e011      	b.n	800738c <_puts_r+0x88>
 8007368:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <_puts_r+0xd4>)
 800736a:	429c      	cmp	r4, r3
 800736c:	d101      	bne.n	8007372 <_puts_r+0x6e>
 800736e:	68ac      	ldr	r4, [r5, #8]
 8007370:	e7da      	b.n	8007328 <_puts_r+0x24>
 8007372:	4b1a      	ldr	r3, [pc, #104]	; (80073dc <_puts_r+0xd8>)
 8007374:	429c      	cmp	r4, r3
 8007376:	bf08      	it	eq
 8007378:	68ec      	ldreq	r4, [r5, #12]
 800737a:	e7d5      	b.n	8007328 <_puts_r+0x24>
 800737c:	4621      	mov	r1, r4
 800737e:	4628      	mov	r0, r5
 8007380:	f000 f946 	bl	8007610 <__swsetup_r>
 8007384:	2800      	cmp	r0, #0
 8007386:	d0dd      	beq.n	8007344 <_puts_r+0x40>
 8007388:	f04f 35ff 	mov.w	r5, #4294967295
 800738c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800738e:	07da      	lsls	r2, r3, #31
 8007390:	d405      	bmi.n	800739e <_puts_r+0x9a>
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	059b      	lsls	r3, r3, #22
 8007396:	d402      	bmi.n	800739e <_puts_r+0x9a>
 8007398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800739a:	f7ff fedf 	bl	800715c <__retarget_lock_release_recursive>
 800739e:	4628      	mov	r0, r5
 80073a0:	bd70      	pop	{r4, r5, r6, pc}
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	da04      	bge.n	80073b0 <_puts_r+0xac>
 80073a6:	69a2      	ldr	r2, [r4, #24]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	dc06      	bgt.n	80073ba <_puts_r+0xb6>
 80073ac:	290a      	cmp	r1, #10
 80073ae:	d004      	beq.n	80073ba <_puts_r+0xb6>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	6022      	str	r2, [r4, #0]
 80073b6:	7019      	strb	r1, [r3, #0]
 80073b8:	e7c5      	b.n	8007346 <_puts_r+0x42>
 80073ba:	4622      	mov	r2, r4
 80073bc:	4628      	mov	r0, r5
 80073be:	f000 f8d5 	bl	800756c <__swbuf_r>
 80073c2:	3001      	adds	r0, #1
 80073c4:	d1bf      	bne.n	8007346 <_puts_r+0x42>
 80073c6:	e7df      	b.n	8007388 <_puts_r+0x84>
 80073c8:	250a      	movs	r5, #10
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	6022      	str	r2, [r4, #0]
 80073d0:	701d      	strb	r5, [r3, #0]
 80073d2:	e7db      	b.n	800738c <_puts_r+0x88>
 80073d4:	080084c4 	.word	0x080084c4
 80073d8:	080084e4 	.word	0x080084e4
 80073dc:	080084a4 	.word	0x080084a4

080073e0 <puts>:
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <puts+0xc>)
 80073e2:	4601      	mov	r1, r0
 80073e4:	6818      	ldr	r0, [r3, #0]
 80073e6:	f7ff bf8d 	b.w	8007304 <_puts_r>
 80073ea:	bf00      	nop
 80073ec:	20000014 	.word	0x20000014

080073f0 <cleanup_glue>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	460c      	mov	r4, r1
 80073f4:	6809      	ldr	r1, [r1, #0]
 80073f6:	4605      	mov	r5, r0
 80073f8:	b109      	cbz	r1, 80073fe <cleanup_glue+0xe>
 80073fa:	f7ff fff9 	bl	80073f0 <cleanup_glue>
 80073fe:	4621      	mov	r1, r4
 8007400:	4628      	mov	r0, r5
 8007402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007406:	f000 bac3 	b.w	8007990 <_free_r>
	...

0800740c <_reclaim_reent>:
 800740c:	4b2c      	ldr	r3, [pc, #176]	; (80074c0 <_reclaim_reent+0xb4>)
 800740e:	b570      	push	{r4, r5, r6, lr}
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4604      	mov	r4, r0
 8007414:	4283      	cmp	r3, r0
 8007416:	d051      	beq.n	80074bc <_reclaim_reent+0xb0>
 8007418:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800741a:	b143      	cbz	r3, 800742e <_reclaim_reent+0x22>
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d14a      	bne.n	80074b8 <_reclaim_reent+0xac>
 8007422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007424:	6819      	ldr	r1, [r3, #0]
 8007426:	b111      	cbz	r1, 800742e <_reclaim_reent+0x22>
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fab1 	bl	8007990 <_free_r>
 800742e:	6961      	ldr	r1, [r4, #20]
 8007430:	b111      	cbz	r1, 8007438 <_reclaim_reent+0x2c>
 8007432:	4620      	mov	r0, r4
 8007434:	f000 faac 	bl	8007990 <_free_r>
 8007438:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800743a:	b111      	cbz	r1, 8007442 <_reclaim_reent+0x36>
 800743c:	4620      	mov	r0, r4
 800743e:	f000 faa7 	bl	8007990 <_free_r>
 8007442:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007444:	b111      	cbz	r1, 800744c <_reclaim_reent+0x40>
 8007446:	4620      	mov	r0, r4
 8007448:	f000 faa2 	bl	8007990 <_free_r>
 800744c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800744e:	b111      	cbz	r1, 8007456 <_reclaim_reent+0x4a>
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fa9d 	bl	8007990 <_free_r>
 8007456:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007458:	b111      	cbz	r1, 8007460 <_reclaim_reent+0x54>
 800745a:	4620      	mov	r0, r4
 800745c:	f000 fa98 	bl	8007990 <_free_r>
 8007460:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007462:	b111      	cbz	r1, 800746a <_reclaim_reent+0x5e>
 8007464:	4620      	mov	r0, r4
 8007466:	f000 fa93 	bl	8007990 <_free_r>
 800746a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800746c:	b111      	cbz	r1, 8007474 <_reclaim_reent+0x68>
 800746e:	4620      	mov	r0, r4
 8007470:	f000 fa8e 	bl	8007990 <_free_r>
 8007474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007476:	b111      	cbz	r1, 800747e <_reclaim_reent+0x72>
 8007478:	4620      	mov	r0, r4
 800747a:	f000 fa89 	bl	8007990 <_free_r>
 800747e:	69a3      	ldr	r3, [r4, #24]
 8007480:	b1e3      	cbz	r3, 80074bc <_reclaim_reent+0xb0>
 8007482:	4620      	mov	r0, r4
 8007484:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007486:	4798      	blx	r3
 8007488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800748a:	b1b9      	cbz	r1, 80074bc <_reclaim_reent+0xb0>
 800748c:	4620      	mov	r0, r4
 800748e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007492:	f7ff bfad 	b.w	80073f0 <cleanup_glue>
 8007496:	5949      	ldr	r1, [r1, r5]
 8007498:	b941      	cbnz	r1, 80074ac <_reclaim_reent+0xa0>
 800749a:	3504      	adds	r5, #4
 800749c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800749e:	2d80      	cmp	r5, #128	; 0x80
 80074a0:	68d9      	ldr	r1, [r3, #12]
 80074a2:	d1f8      	bne.n	8007496 <_reclaim_reent+0x8a>
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 fa73 	bl	8007990 <_free_r>
 80074aa:	e7ba      	b.n	8007422 <_reclaim_reent+0x16>
 80074ac:	680e      	ldr	r6, [r1, #0]
 80074ae:	4620      	mov	r0, r4
 80074b0:	f000 fa6e 	bl	8007990 <_free_r>
 80074b4:	4631      	mov	r1, r6
 80074b6:	e7ef      	b.n	8007498 <_reclaim_reent+0x8c>
 80074b8:	2500      	movs	r5, #0
 80074ba:	e7ef      	b.n	800749c <_reclaim_reent+0x90>
 80074bc:	bd70      	pop	{r4, r5, r6, pc}
 80074be:	bf00      	nop
 80074c0:	20000014 	.word	0x20000014

080074c4 <_sbrk_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	2300      	movs	r3, #0
 80074c8:	4d05      	ldr	r5, [pc, #20]	; (80074e0 <_sbrk_r+0x1c>)
 80074ca:	4604      	mov	r4, r0
 80074cc:	4608      	mov	r0, r1
 80074ce:	602b      	str	r3, [r5, #0]
 80074d0:	f7f9 f9e6 	bl	80008a0 <_sbrk>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_sbrk_r+0x1a>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_sbrk_r+0x1a>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	200025bc 	.word	0x200025bc

080074e4 <__sread>:
 80074e4:	b510      	push	{r4, lr}
 80074e6:	460c      	mov	r4, r1
 80074e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ec:	f000 fd86 	bl	8007ffc <_read_r>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	bfab      	itete	ge
 80074f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074f6:	89a3      	ldrhlt	r3, [r4, #12]
 80074f8:	181b      	addge	r3, r3, r0
 80074fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074fe:	bfac      	ite	ge
 8007500:	6563      	strge	r3, [r4, #84]	; 0x54
 8007502:	81a3      	strhlt	r3, [r4, #12]
 8007504:	bd10      	pop	{r4, pc}

08007506 <__swrite>:
 8007506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800750a:	461f      	mov	r7, r3
 800750c:	898b      	ldrh	r3, [r1, #12]
 800750e:	4605      	mov	r5, r0
 8007510:	05db      	lsls	r3, r3, #23
 8007512:	460c      	mov	r4, r1
 8007514:	4616      	mov	r6, r2
 8007516:	d505      	bpl.n	8007524 <__swrite+0x1e>
 8007518:	2302      	movs	r3, #2
 800751a:	2200      	movs	r2, #0
 800751c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007520:	f000 f9b2 	bl	8007888 <_lseek_r>
 8007524:	89a3      	ldrh	r3, [r4, #12]
 8007526:	4632      	mov	r2, r6
 8007528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800752c:	81a3      	strh	r3, [r4, #12]
 800752e:	4628      	mov	r0, r5
 8007530:	463b      	mov	r3, r7
 8007532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800753a:	f7fe b9b7 	b.w	80058ac <_write_r>

0800753e <__sseek>:
 800753e:	b510      	push	{r4, lr}
 8007540:	460c      	mov	r4, r1
 8007542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007546:	f000 f99f 	bl	8007888 <_lseek_r>
 800754a:	1c43      	adds	r3, r0, #1
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	bf15      	itete	ne
 8007550:	6560      	strne	r0, [r4, #84]	; 0x54
 8007552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800755a:	81a3      	strheq	r3, [r4, #12]
 800755c:	bf18      	it	ne
 800755e:	81a3      	strhne	r3, [r4, #12]
 8007560:	bd10      	pop	{r4, pc}

08007562 <__sclose>:
 8007562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007566:	f000 b8c1 	b.w	80076ec <_close_r>
	...

0800756c <__swbuf_r>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	460e      	mov	r6, r1
 8007570:	4614      	mov	r4, r2
 8007572:	4605      	mov	r5, r0
 8007574:	b118      	cbz	r0, 800757e <__swbuf_r+0x12>
 8007576:	6983      	ldr	r3, [r0, #24]
 8007578:	b90b      	cbnz	r3, 800757e <__swbuf_r+0x12>
 800757a:	f7ff fd2b 	bl	8006fd4 <__sinit>
 800757e:	4b21      	ldr	r3, [pc, #132]	; (8007604 <__swbuf_r+0x98>)
 8007580:	429c      	cmp	r4, r3
 8007582:	d12b      	bne.n	80075dc <__swbuf_r+0x70>
 8007584:	686c      	ldr	r4, [r5, #4]
 8007586:	69a3      	ldr	r3, [r4, #24]
 8007588:	60a3      	str	r3, [r4, #8]
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	071a      	lsls	r2, r3, #28
 800758e:	d52f      	bpl.n	80075f0 <__swbuf_r+0x84>
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	b36b      	cbz	r3, 80075f0 <__swbuf_r+0x84>
 8007594:	6923      	ldr	r3, [r4, #16]
 8007596:	6820      	ldr	r0, [r4, #0]
 8007598:	b2f6      	uxtb	r6, r6
 800759a:	1ac0      	subs	r0, r0, r3
 800759c:	6963      	ldr	r3, [r4, #20]
 800759e:	4637      	mov	r7, r6
 80075a0:	4283      	cmp	r3, r0
 80075a2:	dc04      	bgt.n	80075ae <__swbuf_r+0x42>
 80075a4:	4621      	mov	r1, r4
 80075a6:	4628      	mov	r0, r5
 80075a8:	f000 f932 	bl	8007810 <_fflush_r>
 80075ac:	bb30      	cbnz	r0, 80075fc <__swbuf_r+0x90>
 80075ae:	68a3      	ldr	r3, [r4, #8]
 80075b0:	3001      	adds	r0, #1
 80075b2:	3b01      	subs	r3, #1
 80075b4:	60a3      	str	r3, [r4, #8]
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	6022      	str	r2, [r4, #0]
 80075bc:	701e      	strb	r6, [r3, #0]
 80075be:	6963      	ldr	r3, [r4, #20]
 80075c0:	4283      	cmp	r3, r0
 80075c2:	d004      	beq.n	80075ce <__swbuf_r+0x62>
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	07db      	lsls	r3, r3, #31
 80075c8:	d506      	bpl.n	80075d8 <__swbuf_r+0x6c>
 80075ca:	2e0a      	cmp	r6, #10
 80075cc:	d104      	bne.n	80075d8 <__swbuf_r+0x6c>
 80075ce:	4621      	mov	r1, r4
 80075d0:	4628      	mov	r0, r5
 80075d2:	f000 f91d 	bl	8007810 <_fflush_r>
 80075d6:	b988      	cbnz	r0, 80075fc <__swbuf_r+0x90>
 80075d8:	4638      	mov	r0, r7
 80075da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075dc:	4b0a      	ldr	r3, [pc, #40]	; (8007608 <__swbuf_r+0x9c>)
 80075de:	429c      	cmp	r4, r3
 80075e0:	d101      	bne.n	80075e6 <__swbuf_r+0x7a>
 80075e2:	68ac      	ldr	r4, [r5, #8]
 80075e4:	e7cf      	b.n	8007586 <__swbuf_r+0x1a>
 80075e6:	4b09      	ldr	r3, [pc, #36]	; (800760c <__swbuf_r+0xa0>)
 80075e8:	429c      	cmp	r4, r3
 80075ea:	bf08      	it	eq
 80075ec:	68ec      	ldreq	r4, [r5, #12]
 80075ee:	e7ca      	b.n	8007586 <__swbuf_r+0x1a>
 80075f0:	4621      	mov	r1, r4
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 f80c 	bl	8007610 <__swsetup_r>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d0cb      	beq.n	8007594 <__swbuf_r+0x28>
 80075fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007600:	e7ea      	b.n	80075d8 <__swbuf_r+0x6c>
 8007602:	bf00      	nop
 8007604:	080084c4 	.word	0x080084c4
 8007608:	080084e4 	.word	0x080084e4
 800760c:	080084a4 	.word	0x080084a4

08007610 <__swsetup_r>:
 8007610:	4b32      	ldr	r3, [pc, #200]	; (80076dc <__swsetup_r+0xcc>)
 8007612:	b570      	push	{r4, r5, r6, lr}
 8007614:	681d      	ldr	r5, [r3, #0]
 8007616:	4606      	mov	r6, r0
 8007618:	460c      	mov	r4, r1
 800761a:	b125      	cbz	r5, 8007626 <__swsetup_r+0x16>
 800761c:	69ab      	ldr	r3, [r5, #24]
 800761e:	b913      	cbnz	r3, 8007626 <__swsetup_r+0x16>
 8007620:	4628      	mov	r0, r5
 8007622:	f7ff fcd7 	bl	8006fd4 <__sinit>
 8007626:	4b2e      	ldr	r3, [pc, #184]	; (80076e0 <__swsetup_r+0xd0>)
 8007628:	429c      	cmp	r4, r3
 800762a:	d10f      	bne.n	800764c <__swsetup_r+0x3c>
 800762c:	686c      	ldr	r4, [r5, #4]
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007634:	0719      	lsls	r1, r3, #28
 8007636:	d42c      	bmi.n	8007692 <__swsetup_r+0x82>
 8007638:	06dd      	lsls	r5, r3, #27
 800763a:	d411      	bmi.n	8007660 <__swsetup_r+0x50>
 800763c:	2309      	movs	r3, #9
 800763e:	6033      	str	r3, [r6, #0]
 8007640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	e03e      	b.n	80076ca <__swsetup_r+0xba>
 800764c:	4b25      	ldr	r3, [pc, #148]	; (80076e4 <__swsetup_r+0xd4>)
 800764e:	429c      	cmp	r4, r3
 8007650:	d101      	bne.n	8007656 <__swsetup_r+0x46>
 8007652:	68ac      	ldr	r4, [r5, #8]
 8007654:	e7eb      	b.n	800762e <__swsetup_r+0x1e>
 8007656:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <__swsetup_r+0xd8>)
 8007658:	429c      	cmp	r4, r3
 800765a:	bf08      	it	eq
 800765c:	68ec      	ldreq	r4, [r5, #12]
 800765e:	e7e6      	b.n	800762e <__swsetup_r+0x1e>
 8007660:	0758      	lsls	r0, r3, #29
 8007662:	d512      	bpl.n	800768a <__swsetup_r+0x7a>
 8007664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007666:	b141      	cbz	r1, 800767a <__swsetup_r+0x6a>
 8007668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800766c:	4299      	cmp	r1, r3
 800766e:	d002      	beq.n	8007676 <__swsetup_r+0x66>
 8007670:	4630      	mov	r0, r6
 8007672:	f000 f98d 	bl	8007990 <_free_r>
 8007676:	2300      	movs	r3, #0
 8007678:	6363      	str	r3, [r4, #52]	; 0x34
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	2300      	movs	r3, #0
 8007684:	6063      	str	r3, [r4, #4]
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f043 0308 	orr.w	r3, r3, #8
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	6923      	ldr	r3, [r4, #16]
 8007694:	b94b      	cbnz	r3, 80076aa <__swsetup_r+0x9a>
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800769c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076a0:	d003      	beq.n	80076aa <__swsetup_r+0x9a>
 80076a2:	4621      	mov	r1, r4
 80076a4:	4630      	mov	r0, r6
 80076a6:	f000 f927 	bl	80078f8 <__smakebuf_r>
 80076aa:	89a0      	ldrh	r0, [r4, #12]
 80076ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076b0:	f010 0301 	ands.w	r3, r0, #1
 80076b4:	d00a      	beq.n	80076cc <__swsetup_r+0xbc>
 80076b6:	2300      	movs	r3, #0
 80076b8:	60a3      	str	r3, [r4, #8]
 80076ba:	6963      	ldr	r3, [r4, #20]
 80076bc:	425b      	negs	r3, r3
 80076be:	61a3      	str	r3, [r4, #24]
 80076c0:	6923      	ldr	r3, [r4, #16]
 80076c2:	b943      	cbnz	r3, 80076d6 <__swsetup_r+0xc6>
 80076c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076c8:	d1ba      	bne.n	8007640 <__swsetup_r+0x30>
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	0781      	lsls	r1, r0, #30
 80076ce:	bf58      	it	pl
 80076d0:	6963      	ldrpl	r3, [r4, #20]
 80076d2:	60a3      	str	r3, [r4, #8]
 80076d4:	e7f4      	b.n	80076c0 <__swsetup_r+0xb0>
 80076d6:	2000      	movs	r0, #0
 80076d8:	e7f7      	b.n	80076ca <__swsetup_r+0xba>
 80076da:	bf00      	nop
 80076dc:	20000014 	.word	0x20000014
 80076e0:	080084c4 	.word	0x080084c4
 80076e4:	080084e4 	.word	0x080084e4
 80076e8:	080084a4 	.word	0x080084a4

080076ec <_close_r>:
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	2300      	movs	r3, #0
 80076f0:	4d05      	ldr	r5, [pc, #20]	; (8007708 <_close_r+0x1c>)
 80076f2:	4604      	mov	r4, r0
 80076f4:	4608      	mov	r0, r1
 80076f6:	602b      	str	r3, [r5, #0]
 80076f8:	f7f9 f8a1 	bl	800083e <_close>
 80076fc:	1c43      	adds	r3, r0, #1
 80076fe:	d102      	bne.n	8007706 <_close_r+0x1a>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	b103      	cbz	r3, 8007706 <_close_r+0x1a>
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	200025bc 	.word	0x200025bc

0800770c <__sflush_r>:
 800770c:	898a      	ldrh	r2, [r1, #12]
 800770e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007710:	4605      	mov	r5, r0
 8007712:	0710      	lsls	r0, r2, #28
 8007714:	460c      	mov	r4, r1
 8007716:	d457      	bmi.n	80077c8 <__sflush_r+0xbc>
 8007718:	684b      	ldr	r3, [r1, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dc04      	bgt.n	8007728 <__sflush_r+0x1c>
 800771e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007720:	2b00      	cmp	r3, #0
 8007722:	dc01      	bgt.n	8007728 <__sflush_r+0x1c>
 8007724:	2000      	movs	r0, #0
 8007726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800772a:	2e00      	cmp	r6, #0
 800772c:	d0fa      	beq.n	8007724 <__sflush_r+0x18>
 800772e:	2300      	movs	r3, #0
 8007730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007734:	682f      	ldr	r7, [r5, #0]
 8007736:	602b      	str	r3, [r5, #0]
 8007738:	d032      	beq.n	80077a0 <__sflush_r+0x94>
 800773a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800773c:	89a3      	ldrh	r3, [r4, #12]
 800773e:	075a      	lsls	r2, r3, #29
 8007740:	d505      	bpl.n	800774e <__sflush_r+0x42>
 8007742:	6863      	ldr	r3, [r4, #4]
 8007744:	1ac0      	subs	r0, r0, r3
 8007746:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007748:	b10b      	cbz	r3, 800774e <__sflush_r+0x42>
 800774a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800774c:	1ac0      	subs	r0, r0, r3
 800774e:	2300      	movs	r3, #0
 8007750:	4602      	mov	r2, r0
 8007752:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007754:	4628      	mov	r0, r5
 8007756:	6a21      	ldr	r1, [r4, #32]
 8007758:	47b0      	blx	r6
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	d106      	bne.n	800776e <__sflush_r+0x62>
 8007760:	6829      	ldr	r1, [r5, #0]
 8007762:	291d      	cmp	r1, #29
 8007764:	d82c      	bhi.n	80077c0 <__sflush_r+0xb4>
 8007766:	4a29      	ldr	r2, [pc, #164]	; (800780c <__sflush_r+0x100>)
 8007768:	40ca      	lsrs	r2, r1
 800776a:	07d6      	lsls	r6, r2, #31
 800776c:	d528      	bpl.n	80077c0 <__sflush_r+0xb4>
 800776e:	2200      	movs	r2, #0
 8007770:	6062      	str	r2, [r4, #4]
 8007772:	6922      	ldr	r2, [r4, #16]
 8007774:	04d9      	lsls	r1, r3, #19
 8007776:	6022      	str	r2, [r4, #0]
 8007778:	d504      	bpl.n	8007784 <__sflush_r+0x78>
 800777a:	1c42      	adds	r2, r0, #1
 800777c:	d101      	bne.n	8007782 <__sflush_r+0x76>
 800777e:	682b      	ldr	r3, [r5, #0]
 8007780:	b903      	cbnz	r3, 8007784 <__sflush_r+0x78>
 8007782:	6560      	str	r0, [r4, #84]	; 0x54
 8007784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007786:	602f      	str	r7, [r5, #0]
 8007788:	2900      	cmp	r1, #0
 800778a:	d0cb      	beq.n	8007724 <__sflush_r+0x18>
 800778c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007790:	4299      	cmp	r1, r3
 8007792:	d002      	beq.n	800779a <__sflush_r+0x8e>
 8007794:	4628      	mov	r0, r5
 8007796:	f000 f8fb 	bl	8007990 <_free_r>
 800779a:	2000      	movs	r0, #0
 800779c:	6360      	str	r0, [r4, #52]	; 0x34
 800779e:	e7c2      	b.n	8007726 <__sflush_r+0x1a>
 80077a0:	6a21      	ldr	r1, [r4, #32]
 80077a2:	2301      	movs	r3, #1
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b0      	blx	r6
 80077a8:	1c41      	adds	r1, r0, #1
 80077aa:	d1c7      	bne.n	800773c <__sflush_r+0x30>
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0c4      	beq.n	800773c <__sflush_r+0x30>
 80077b2:	2b1d      	cmp	r3, #29
 80077b4:	d001      	beq.n	80077ba <__sflush_r+0xae>
 80077b6:	2b16      	cmp	r3, #22
 80077b8:	d101      	bne.n	80077be <__sflush_r+0xb2>
 80077ba:	602f      	str	r7, [r5, #0]
 80077bc:	e7b2      	b.n	8007724 <__sflush_r+0x18>
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c4:	81a3      	strh	r3, [r4, #12]
 80077c6:	e7ae      	b.n	8007726 <__sflush_r+0x1a>
 80077c8:	690f      	ldr	r7, [r1, #16]
 80077ca:	2f00      	cmp	r7, #0
 80077cc:	d0aa      	beq.n	8007724 <__sflush_r+0x18>
 80077ce:	0793      	lsls	r3, r2, #30
 80077d0:	bf18      	it	ne
 80077d2:	2300      	movne	r3, #0
 80077d4:	680e      	ldr	r6, [r1, #0]
 80077d6:	bf08      	it	eq
 80077d8:	694b      	ldreq	r3, [r1, #20]
 80077da:	1bf6      	subs	r6, r6, r7
 80077dc:	600f      	str	r7, [r1, #0]
 80077de:	608b      	str	r3, [r1, #8]
 80077e0:	2e00      	cmp	r6, #0
 80077e2:	dd9f      	ble.n	8007724 <__sflush_r+0x18>
 80077e4:	4633      	mov	r3, r6
 80077e6:	463a      	mov	r2, r7
 80077e8:	4628      	mov	r0, r5
 80077ea:	6a21      	ldr	r1, [r4, #32]
 80077ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80077f0:	47e0      	blx	ip
 80077f2:	2800      	cmp	r0, #0
 80077f4:	dc06      	bgt.n	8007804 <__sflush_r+0xf8>
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	f04f 30ff 	mov.w	r0, #4294967295
 80077fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007800:	81a3      	strh	r3, [r4, #12]
 8007802:	e790      	b.n	8007726 <__sflush_r+0x1a>
 8007804:	4407      	add	r7, r0
 8007806:	1a36      	subs	r6, r6, r0
 8007808:	e7ea      	b.n	80077e0 <__sflush_r+0xd4>
 800780a:	bf00      	nop
 800780c:	20400001 	.word	0x20400001

08007810 <_fflush_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	690b      	ldr	r3, [r1, #16]
 8007814:	4605      	mov	r5, r0
 8007816:	460c      	mov	r4, r1
 8007818:	b913      	cbnz	r3, 8007820 <_fflush_r+0x10>
 800781a:	2500      	movs	r5, #0
 800781c:	4628      	mov	r0, r5
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	b118      	cbz	r0, 800782a <_fflush_r+0x1a>
 8007822:	6983      	ldr	r3, [r0, #24]
 8007824:	b90b      	cbnz	r3, 800782a <_fflush_r+0x1a>
 8007826:	f7ff fbd5 	bl	8006fd4 <__sinit>
 800782a:	4b14      	ldr	r3, [pc, #80]	; (800787c <_fflush_r+0x6c>)
 800782c:	429c      	cmp	r4, r3
 800782e:	d11b      	bne.n	8007868 <_fflush_r+0x58>
 8007830:	686c      	ldr	r4, [r5, #4]
 8007832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0ef      	beq.n	800781a <_fflush_r+0xa>
 800783a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800783c:	07d0      	lsls	r0, r2, #31
 800783e:	d404      	bmi.n	800784a <_fflush_r+0x3a>
 8007840:	0599      	lsls	r1, r3, #22
 8007842:	d402      	bmi.n	800784a <_fflush_r+0x3a>
 8007844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007846:	f7ff fc88 	bl	800715a <__retarget_lock_acquire_recursive>
 800784a:	4628      	mov	r0, r5
 800784c:	4621      	mov	r1, r4
 800784e:	f7ff ff5d 	bl	800770c <__sflush_r>
 8007852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007854:	4605      	mov	r5, r0
 8007856:	07da      	lsls	r2, r3, #31
 8007858:	d4e0      	bmi.n	800781c <_fflush_r+0xc>
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	059b      	lsls	r3, r3, #22
 800785e:	d4dd      	bmi.n	800781c <_fflush_r+0xc>
 8007860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007862:	f7ff fc7b 	bl	800715c <__retarget_lock_release_recursive>
 8007866:	e7d9      	b.n	800781c <_fflush_r+0xc>
 8007868:	4b05      	ldr	r3, [pc, #20]	; (8007880 <_fflush_r+0x70>)
 800786a:	429c      	cmp	r4, r3
 800786c:	d101      	bne.n	8007872 <_fflush_r+0x62>
 800786e:	68ac      	ldr	r4, [r5, #8]
 8007870:	e7df      	b.n	8007832 <_fflush_r+0x22>
 8007872:	4b04      	ldr	r3, [pc, #16]	; (8007884 <_fflush_r+0x74>)
 8007874:	429c      	cmp	r4, r3
 8007876:	bf08      	it	eq
 8007878:	68ec      	ldreq	r4, [r5, #12]
 800787a:	e7da      	b.n	8007832 <_fflush_r+0x22>
 800787c:	080084c4 	.word	0x080084c4
 8007880:	080084e4 	.word	0x080084e4
 8007884:	080084a4 	.word	0x080084a4

08007888 <_lseek_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4604      	mov	r4, r0
 800788c:	4608      	mov	r0, r1
 800788e:	4611      	mov	r1, r2
 8007890:	2200      	movs	r2, #0
 8007892:	4d05      	ldr	r5, [pc, #20]	; (80078a8 <_lseek_r+0x20>)
 8007894:	602a      	str	r2, [r5, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	f7f8 fff5 	bl	8000886 <_lseek>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d102      	bne.n	80078a6 <_lseek_r+0x1e>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b103      	cbz	r3, 80078a6 <_lseek_r+0x1e>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	200025bc 	.word	0x200025bc

080078ac <__swhatbuf_r>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	460e      	mov	r6, r1
 80078b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b4:	4614      	mov	r4, r2
 80078b6:	2900      	cmp	r1, #0
 80078b8:	461d      	mov	r5, r3
 80078ba:	b096      	sub	sp, #88	; 0x58
 80078bc:	da08      	bge.n	80078d0 <__swhatbuf_r+0x24>
 80078be:	2200      	movs	r2, #0
 80078c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80078c4:	602a      	str	r2, [r5, #0]
 80078c6:	061a      	lsls	r2, r3, #24
 80078c8:	d410      	bmi.n	80078ec <__swhatbuf_r+0x40>
 80078ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ce:	e00e      	b.n	80078ee <__swhatbuf_r+0x42>
 80078d0:	466a      	mov	r2, sp
 80078d2:	f000 fba5 	bl	8008020 <_fstat_r>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	dbf1      	blt.n	80078be <__swhatbuf_r+0x12>
 80078da:	9a01      	ldr	r2, [sp, #4]
 80078dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078e4:	425a      	negs	r2, r3
 80078e6:	415a      	adcs	r2, r3
 80078e8:	602a      	str	r2, [r5, #0]
 80078ea:	e7ee      	b.n	80078ca <__swhatbuf_r+0x1e>
 80078ec:	2340      	movs	r3, #64	; 0x40
 80078ee:	2000      	movs	r0, #0
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	b016      	add	sp, #88	; 0x58
 80078f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080078f8 <__smakebuf_r>:
 80078f8:	898b      	ldrh	r3, [r1, #12]
 80078fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078fc:	079d      	lsls	r5, r3, #30
 80078fe:	4606      	mov	r6, r0
 8007900:	460c      	mov	r4, r1
 8007902:	d507      	bpl.n	8007914 <__smakebuf_r+0x1c>
 8007904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	6123      	str	r3, [r4, #16]
 800790c:	2301      	movs	r3, #1
 800790e:	6163      	str	r3, [r4, #20]
 8007910:	b002      	add	sp, #8
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	466a      	mov	r2, sp
 8007916:	ab01      	add	r3, sp, #4
 8007918:	f7ff ffc8 	bl	80078ac <__swhatbuf_r>
 800791c:	9900      	ldr	r1, [sp, #0]
 800791e:	4605      	mov	r5, r0
 8007920:	4630      	mov	r0, r6
 8007922:	f7ff fc63 	bl	80071ec <_malloc_r>
 8007926:	b948      	cbnz	r0, 800793c <__smakebuf_r+0x44>
 8007928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792c:	059a      	lsls	r2, r3, #22
 800792e:	d4ef      	bmi.n	8007910 <__smakebuf_r+0x18>
 8007930:	f023 0303 	bic.w	r3, r3, #3
 8007934:	f043 0302 	orr.w	r3, r3, #2
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	e7e3      	b.n	8007904 <__smakebuf_r+0xc>
 800793c:	4b0d      	ldr	r3, [pc, #52]	; (8007974 <__smakebuf_r+0x7c>)
 800793e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	6020      	str	r0, [r4, #0]
 8007944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	9b00      	ldr	r3, [sp, #0]
 800794c:	6120      	str	r0, [r4, #16]
 800794e:	6163      	str	r3, [r4, #20]
 8007950:	9b01      	ldr	r3, [sp, #4]
 8007952:	b15b      	cbz	r3, 800796c <__smakebuf_r+0x74>
 8007954:	4630      	mov	r0, r6
 8007956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800795a:	f000 fb73 	bl	8008044 <_isatty_r>
 800795e:	b128      	cbz	r0, 800796c <__smakebuf_r+0x74>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f023 0303 	bic.w	r3, r3, #3
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	81a3      	strh	r3, [r4, #12]
 800796c:	89a0      	ldrh	r0, [r4, #12]
 800796e:	4305      	orrs	r5, r0
 8007970:	81a5      	strh	r5, [r4, #12]
 8007972:	e7cd      	b.n	8007910 <__smakebuf_r+0x18>
 8007974:	08006f6d 	.word	0x08006f6d

08007978 <__malloc_lock>:
 8007978:	4801      	ldr	r0, [pc, #4]	; (8007980 <__malloc_lock+0x8>)
 800797a:	f7ff bbee 	b.w	800715a <__retarget_lock_acquire_recursive>
 800797e:	bf00      	nop
 8007980:	200025b0 	.word	0x200025b0

08007984 <__malloc_unlock>:
 8007984:	4801      	ldr	r0, [pc, #4]	; (800798c <__malloc_unlock+0x8>)
 8007986:	f7ff bbe9 	b.w	800715c <__retarget_lock_release_recursive>
 800798a:	bf00      	nop
 800798c:	200025b0 	.word	0x200025b0

08007990 <_free_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4605      	mov	r5, r0
 8007994:	2900      	cmp	r1, #0
 8007996:	d040      	beq.n	8007a1a <_free_r+0x8a>
 8007998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800799c:	1f0c      	subs	r4, r1, #4
 800799e:	2b00      	cmp	r3, #0
 80079a0:	bfb8      	it	lt
 80079a2:	18e4      	addlt	r4, r4, r3
 80079a4:	f7ff ffe8 	bl	8007978 <__malloc_lock>
 80079a8:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <_free_r+0x8c>)
 80079aa:	6813      	ldr	r3, [r2, #0]
 80079ac:	b933      	cbnz	r3, 80079bc <_free_r+0x2c>
 80079ae:	6063      	str	r3, [r4, #4]
 80079b0:	6014      	str	r4, [r2, #0]
 80079b2:	4628      	mov	r0, r5
 80079b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079b8:	f7ff bfe4 	b.w	8007984 <__malloc_unlock>
 80079bc:	42a3      	cmp	r3, r4
 80079be:	d908      	bls.n	80079d2 <_free_r+0x42>
 80079c0:	6820      	ldr	r0, [r4, #0]
 80079c2:	1821      	adds	r1, r4, r0
 80079c4:	428b      	cmp	r3, r1
 80079c6:	bf01      	itttt	eq
 80079c8:	6819      	ldreq	r1, [r3, #0]
 80079ca:	685b      	ldreq	r3, [r3, #4]
 80079cc:	1809      	addeq	r1, r1, r0
 80079ce:	6021      	streq	r1, [r4, #0]
 80079d0:	e7ed      	b.n	80079ae <_free_r+0x1e>
 80079d2:	461a      	mov	r2, r3
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	b10b      	cbz	r3, 80079dc <_free_r+0x4c>
 80079d8:	42a3      	cmp	r3, r4
 80079da:	d9fa      	bls.n	80079d2 <_free_r+0x42>
 80079dc:	6811      	ldr	r1, [r2, #0]
 80079de:	1850      	adds	r0, r2, r1
 80079e0:	42a0      	cmp	r0, r4
 80079e2:	d10b      	bne.n	80079fc <_free_r+0x6c>
 80079e4:	6820      	ldr	r0, [r4, #0]
 80079e6:	4401      	add	r1, r0
 80079e8:	1850      	adds	r0, r2, r1
 80079ea:	4283      	cmp	r3, r0
 80079ec:	6011      	str	r1, [r2, #0]
 80079ee:	d1e0      	bne.n	80079b2 <_free_r+0x22>
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4401      	add	r1, r0
 80079f6:	6011      	str	r1, [r2, #0]
 80079f8:	6053      	str	r3, [r2, #4]
 80079fa:	e7da      	b.n	80079b2 <_free_r+0x22>
 80079fc:	d902      	bls.n	8007a04 <_free_r+0x74>
 80079fe:	230c      	movs	r3, #12
 8007a00:	602b      	str	r3, [r5, #0]
 8007a02:	e7d6      	b.n	80079b2 <_free_r+0x22>
 8007a04:	6820      	ldr	r0, [r4, #0]
 8007a06:	1821      	adds	r1, r4, r0
 8007a08:	428b      	cmp	r3, r1
 8007a0a:	bf01      	itttt	eq
 8007a0c:	6819      	ldreq	r1, [r3, #0]
 8007a0e:	685b      	ldreq	r3, [r3, #4]
 8007a10:	1809      	addeq	r1, r1, r0
 8007a12:	6021      	streq	r1, [r4, #0]
 8007a14:	6063      	str	r3, [r4, #4]
 8007a16:	6054      	str	r4, [r2, #4]
 8007a18:	e7cb      	b.n	80079b2 <_free_r+0x22>
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	200025b4 	.word	0x200025b4

08007a20 <__sfputc_r>:
 8007a20:	6893      	ldr	r3, [r2, #8]
 8007a22:	b410      	push	{r4}
 8007a24:	3b01      	subs	r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	6093      	str	r3, [r2, #8]
 8007a2a:	da07      	bge.n	8007a3c <__sfputc_r+0x1c>
 8007a2c:	6994      	ldr	r4, [r2, #24]
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	db01      	blt.n	8007a36 <__sfputc_r+0x16>
 8007a32:	290a      	cmp	r1, #10
 8007a34:	d102      	bne.n	8007a3c <__sfputc_r+0x1c>
 8007a36:	bc10      	pop	{r4}
 8007a38:	f7ff bd98 	b.w	800756c <__swbuf_r>
 8007a3c:	6813      	ldr	r3, [r2, #0]
 8007a3e:	1c58      	adds	r0, r3, #1
 8007a40:	6010      	str	r0, [r2, #0]
 8007a42:	7019      	strb	r1, [r3, #0]
 8007a44:	4608      	mov	r0, r1
 8007a46:	bc10      	pop	{r4}
 8007a48:	4770      	bx	lr

08007a4a <__sfputs_r>:
 8007a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	460f      	mov	r7, r1
 8007a50:	4614      	mov	r4, r2
 8007a52:	18d5      	adds	r5, r2, r3
 8007a54:	42ac      	cmp	r4, r5
 8007a56:	d101      	bne.n	8007a5c <__sfputs_r+0x12>
 8007a58:	2000      	movs	r0, #0
 8007a5a:	e007      	b.n	8007a6c <__sfputs_r+0x22>
 8007a5c:	463a      	mov	r2, r7
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a64:	f7ff ffdc 	bl	8007a20 <__sfputc_r>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	d1f3      	bne.n	8007a54 <__sfputs_r+0xa>
 8007a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a70 <_vfiprintf_r>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	460d      	mov	r5, r1
 8007a76:	4614      	mov	r4, r2
 8007a78:	4698      	mov	r8, r3
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	b09d      	sub	sp, #116	; 0x74
 8007a7e:	b118      	cbz	r0, 8007a88 <_vfiprintf_r+0x18>
 8007a80:	6983      	ldr	r3, [r0, #24]
 8007a82:	b90b      	cbnz	r3, 8007a88 <_vfiprintf_r+0x18>
 8007a84:	f7ff faa6 	bl	8006fd4 <__sinit>
 8007a88:	4b89      	ldr	r3, [pc, #548]	; (8007cb0 <_vfiprintf_r+0x240>)
 8007a8a:	429d      	cmp	r5, r3
 8007a8c:	d11b      	bne.n	8007ac6 <_vfiprintf_r+0x56>
 8007a8e:	6875      	ldr	r5, [r6, #4]
 8007a90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a92:	07d9      	lsls	r1, r3, #31
 8007a94:	d405      	bmi.n	8007aa2 <_vfiprintf_r+0x32>
 8007a96:	89ab      	ldrh	r3, [r5, #12]
 8007a98:	059a      	lsls	r2, r3, #22
 8007a9a:	d402      	bmi.n	8007aa2 <_vfiprintf_r+0x32>
 8007a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a9e:	f7ff fb5c 	bl	800715a <__retarget_lock_acquire_recursive>
 8007aa2:	89ab      	ldrh	r3, [r5, #12]
 8007aa4:	071b      	lsls	r3, r3, #28
 8007aa6:	d501      	bpl.n	8007aac <_vfiprintf_r+0x3c>
 8007aa8:	692b      	ldr	r3, [r5, #16]
 8007aaa:	b9eb      	cbnz	r3, 8007ae8 <_vfiprintf_r+0x78>
 8007aac:	4629      	mov	r1, r5
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7ff fdae 	bl	8007610 <__swsetup_r>
 8007ab4:	b1c0      	cbz	r0, 8007ae8 <_vfiprintf_r+0x78>
 8007ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ab8:	07dc      	lsls	r4, r3, #31
 8007aba:	d50e      	bpl.n	8007ada <_vfiprintf_r+0x6a>
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	b01d      	add	sp, #116	; 0x74
 8007ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac6:	4b7b      	ldr	r3, [pc, #492]	; (8007cb4 <_vfiprintf_r+0x244>)
 8007ac8:	429d      	cmp	r5, r3
 8007aca:	d101      	bne.n	8007ad0 <_vfiprintf_r+0x60>
 8007acc:	68b5      	ldr	r5, [r6, #8]
 8007ace:	e7df      	b.n	8007a90 <_vfiprintf_r+0x20>
 8007ad0:	4b79      	ldr	r3, [pc, #484]	; (8007cb8 <_vfiprintf_r+0x248>)
 8007ad2:	429d      	cmp	r5, r3
 8007ad4:	bf08      	it	eq
 8007ad6:	68f5      	ldreq	r5, [r6, #12]
 8007ad8:	e7da      	b.n	8007a90 <_vfiprintf_r+0x20>
 8007ada:	89ab      	ldrh	r3, [r5, #12]
 8007adc:	0598      	lsls	r0, r3, #22
 8007ade:	d4ed      	bmi.n	8007abc <_vfiprintf_r+0x4c>
 8007ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ae2:	f7ff fb3b 	bl	800715c <__retarget_lock_release_recursive>
 8007ae6:	e7e9      	b.n	8007abc <_vfiprintf_r+0x4c>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9309      	str	r3, [sp, #36]	; 0x24
 8007aec:	2320      	movs	r3, #32
 8007aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007af2:	2330      	movs	r3, #48	; 0x30
 8007af4:	f04f 0901 	mov.w	r9, #1
 8007af8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007afc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007cbc <_vfiprintf_r+0x24c>
 8007b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b04:	4623      	mov	r3, r4
 8007b06:	469a      	mov	sl, r3
 8007b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b0c:	b10a      	cbz	r2, 8007b12 <_vfiprintf_r+0xa2>
 8007b0e:	2a25      	cmp	r2, #37	; 0x25
 8007b10:	d1f9      	bne.n	8007b06 <_vfiprintf_r+0x96>
 8007b12:	ebba 0b04 	subs.w	fp, sl, r4
 8007b16:	d00b      	beq.n	8007b30 <_vfiprintf_r+0xc0>
 8007b18:	465b      	mov	r3, fp
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f7ff ff93 	bl	8007a4a <__sfputs_r>
 8007b24:	3001      	adds	r0, #1
 8007b26:	f000 80aa 	beq.w	8007c7e <_vfiprintf_r+0x20e>
 8007b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b2c:	445a      	add	r2, fp
 8007b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b30:	f89a 3000 	ldrb.w	r3, [sl]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80a2 	beq.w	8007c7e <_vfiprintf_r+0x20e>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b44:	f10a 0a01 	add.w	sl, sl, #1
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	9307      	str	r3, [sp, #28]
 8007b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b50:	931a      	str	r3, [sp, #104]	; 0x68
 8007b52:	4654      	mov	r4, sl
 8007b54:	2205      	movs	r2, #5
 8007b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5a:	4858      	ldr	r0, [pc, #352]	; (8007cbc <_vfiprintf_r+0x24c>)
 8007b5c:	f000 fa82 	bl	8008064 <memchr>
 8007b60:	9a04      	ldr	r2, [sp, #16]
 8007b62:	b9d8      	cbnz	r0, 8007b9c <_vfiprintf_r+0x12c>
 8007b64:	06d1      	lsls	r1, r2, #27
 8007b66:	bf44      	itt	mi
 8007b68:	2320      	movmi	r3, #32
 8007b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b6e:	0713      	lsls	r3, r2, #28
 8007b70:	bf44      	itt	mi
 8007b72:	232b      	movmi	r3, #43	; 0x2b
 8007b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b78:	f89a 3000 	ldrb.w	r3, [sl]
 8007b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b7e:	d015      	beq.n	8007bac <_vfiprintf_r+0x13c>
 8007b80:	4654      	mov	r4, sl
 8007b82:	2000      	movs	r0, #0
 8007b84:	f04f 0c0a 	mov.w	ip, #10
 8007b88:	9a07      	ldr	r2, [sp, #28]
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b90:	3b30      	subs	r3, #48	; 0x30
 8007b92:	2b09      	cmp	r3, #9
 8007b94:	d94e      	bls.n	8007c34 <_vfiprintf_r+0x1c4>
 8007b96:	b1b0      	cbz	r0, 8007bc6 <_vfiprintf_r+0x156>
 8007b98:	9207      	str	r2, [sp, #28]
 8007b9a:	e014      	b.n	8007bc6 <_vfiprintf_r+0x156>
 8007b9c:	eba0 0308 	sub.w	r3, r0, r8
 8007ba0:	fa09 f303 	lsl.w	r3, r9, r3
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	46a2      	mov	sl, r4
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	e7d2      	b.n	8007b52 <_vfiprintf_r+0xe2>
 8007bac:	9b03      	ldr	r3, [sp, #12]
 8007bae:	1d19      	adds	r1, r3, #4
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	9103      	str	r1, [sp, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	bfbb      	ittet	lt
 8007bb8:	425b      	neglt	r3, r3
 8007bba:	f042 0202 	orrlt.w	r2, r2, #2
 8007bbe:	9307      	strge	r3, [sp, #28]
 8007bc0:	9307      	strlt	r3, [sp, #28]
 8007bc2:	bfb8      	it	lt
 8007bc4:	9204      	strlt	r2, [sp, #16]
 8007bc6:	7823      	ldrb	r3, [r4, #0]
 8007bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8007bca:	d10c      	bne.n	8007be6 <_vfiprintf_r+0x176>
 8007bcc:	7863      	ldrb	r3, [r4, #1]
 8007bce:	2b2a      	cmp	r3, #42	; 0x2a
 8007bd0:	d135      	bne.n	8007c3e <_vfiprintf_r+0x1ce>
 8007bd2:	9b03      	ldr	r3, [sp, #12]
 8007bd4:	3402      	adds	r4, #2
 8007bd6:	1d1a      	adds	r2, r3, #4
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	9203      	str	r2, [sp, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bfb8      	it	lt
 8007be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007be4:	9305      	str	r3, [sp, #20]
 8007be6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007cc0 <_vfiprintf_r+0x250>
 8007bea:	2203      	movs	r2, #3
 8007bec:	4650      	mov	r0, sl
 8007bee:	7821      	ldrb	r1, [r4, #0]
 8007bf0:	f000 fa38 	bl	8008064 <memchr>
 8007bf4:	b140      	cbz	r0, 8007c08 <_vfiprintf_r+0x198>
 8007bf6:	2340      	movs	r3, #64	; 0x40
 8007bf8:	eba0 000a 	sub.w	r0, r0, sl
 8007bfc:	fa03 f000 	lsl.w	r0, r3, r0
 8007c00:	9b04      	ldr	r3, [sp, #16]
 8007c02:	3401      	adds	r4, #1
 8007c04:	4303      	orrs	r3, r0
 8007c06:	9304      	str	r3, [sp, #16]
 8007c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c0c:	2206      	movs	r2, #6
 8007c0e:	482d      	ldr	r0, [pc, #180]	; (8007cc4 <_vfiprintf_r+0x254>)
 8007c10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c14:	f000 fa26 	bl	8008064 <memchr>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d03f      	beq.n	8007c9c <_vfiprintf_r+0x22c>
 8007c1c:	4b2a      	ldr	r3, [pc, #168]	; (8007cc8 <_vfiprintf_r+0x258>)
 8007c1e:	bb1b      	cbnz	r3, 8007c68 <_vfiprintf_r+0x1f8>
 8007c20:	9b03      	ldr	r3, [sp, #12]
 8007c22:	3307      	adds	r3, #7
 8007c24:	f023 0307 	bic.w	r3, r3, #7
 8007c28:	3308      	adds	r3, #8
 8007c2a:	9303      	str	r3, [sp, #12]
 8007c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c2e:	443b      	add	r3, r7
 8007c30:	9309      	str	r3, [sp, #36]	; 0x24
 8007c32:	e767      	b.n	8007b04 <_vfiprintf_r+0x94>
 8007c34:	460c      	mov	r4, r1
 8007c36:	2001      	movs	r0, #1
 8007c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c3c:	e7a5      	b.n	8007b8a <_vfiprintf_r+0x11a>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f04f 0c0a 	mov.w	ip, #10
 8007c44:	4619      	mov	r1, r3
 8007c46:	3401      	adds	r4, #1
 8007c48:	9305      	str	r3, [sp, #20]
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c50:	3a30      	subs	r2, #48	; 0x30
 8007c52:	2a09      	cmp	r2, #9
 8007c54:	d903      	bls.n	8007c5e <_vfiprintf_r+0x1ee>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0c5      	beq.n	8007be6 <_vfiprintf_r+0x176>
 8007c5a:	9105      	str	r1, [sp, #20]
 8007c5c:	e7c3      	b.n	8007be6 <_vfiprintf_r+0x176>
 8007c5e:	4604      	mov	r4, r0
 8007c60:	2301      	movs	r3, #1
 8007c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c66:	e7f0      	b.n	8007c4a <_vfiprintf_r+0x1da>
 8007c68:	ab03      	add	r3, sp, #12
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	4630      	mov	r0, r6
 8007c70:	4b16      	ldr	r3, [pc, #88]	; (8007ccc <_vfiprintf_r+0x25c>)
 8007c72:	a904      	add	r1, sp, #16
 8007c74:	f3af 8000 	nop.w
 8007c78:	4607      	mov	r7, r0
 8007c7a:	1c78      	adds	r0, r7, #1
 8007c7c:	d1d6      	bne.n	8007c2c <_vfiprintf_r+0x1bc>
 8007c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c80:	07d9      	lsls	r1, r3, #31
 8007c82:	d405      	bmi.n	8007c90 <_vfiprintf_r+0x220>
 8007c84:	89ab      	ldrh	r3, [r5, #12]
 8007c86:	059a      	lsls	r2, r3, #22
 8007c88:	d402      	bmi.n	8007c90 <_vfiprintf_r+0x220>
 8007c8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c8c:	f7ff fa66 	bl	800715c <__retarget_lock_release_recursive>
 8007c90:	89ab      	ldrh	r3, [r5, #12]
 8007c92:	065b      	lsls	r3, r3, #25
 8007c94:	f53f af12 	bmi.w	8007abc <_vfiprintf_r+0x4c>
 8007c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c9a:	e711      	b.n	8007ac0 <_vfiprintf_r+0x50>
 8007c9c:	ab03      	add	r3, sp, #12
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	462a      	mov	r2, r5
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <_vfiprintf_r+0x25c>)
 8007ca6:	a904      	add	r1, sp, #16
 8007ca8:	f000 f882 	bl	8007db0 <_printf_i>
 8007cac:	e7e4      	b.n	8007c78 <_vfiprintf_r+0x208>
 8007cae:	bf00      	nop
 8007cb0:	080084c4 	.word	0x080084c4
 8007cb4:	080084e4 	.word	0x080084e4
 8007cb8:	080084a4 	.word	0x080084a4
 8007cbc:	08008508 	.word	0x08008508
 8007cc0:	0800850e 	.word	0x0800850e
 8007cc4:	08008512 	.word	0x08008512
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	08007a4b 	.word	0x08007a4b

08007cd0 <_printf_common>:
 8007cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	4616      	mov	r6, r2
 8007cd6:	4699      	mov	r9, r3
 8007cd8:	688a      	ldr	r2, [r1, #8]
 8007cda:	690b      	ldr	r3, [r1, #16]
 8007cdc:	4607      	mov	r7, r0
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	bfb8      	it	lt
 8007ce2:	4613      	movlt	r3, r2
 8007ce4:	6033      	str	r3, [r6, #0]
 8007ce6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cea:	460c      	mov	r4, r1
 8007cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cf0:	b10a      	cbz	r2, 8007cf6 <_printf_common+0x26>
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	6033      	str	r3, [r6, #0]
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	0699      	lsls	r1, r3, #26
 8007cfa:	bf42      	ittt	mi
 8007cfc:	6833      	ldrmi	r3, [r6, #0]
 8007cfe:	3302      	addmi	r3, #2
 8007d00:	6033      	strmi	r3, [r6, #0]
 8007d02:	6825      	ldr	r5, [r4, #0]
 8007d04:	f015 0506 	ands.w	r5, r5, #6
 8007d08:	d106      	bne.n	8007d18 <_printf_common+0x48>
 8007d0a:	f104 0a19 	add.w	sl, r4, #25
 8007d0e:	68e3      	ldr	r3, [r4, #12]
 8007d10:	6832      	ldr	r2, [r6, #0]
 8007d12:	1a9b      	subs	r3, r3, r2
 8007d14:	42ab      	cmp	r3, r5
 8007d16:	dc28      	bgt.n	8007d6a <_printf_common+0x9a>
 8007d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d1c:	1e13      	subs	r3, r2, #0
 8007d1e:	6822      	ldr	r2, [r4, #0]
 8007d20:	bf18      	it	ne
 8007d22:	2301      	movne	r3, #1
 8007d24:	0692      	lsls	r2, r2, #26
 8007d26:	d42d      	bmi.n	8007d84 <_printf_common+0xb4>
 8007d28:	4649      	mov	r1, r9
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d30:	47c0      	blx	r8
 8007d32:	3001      	adds	r0, #1
 8007d34:	d020      	beq.n	8007d78 <_printf_common+0xa8>
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	68e5      	ldr	r5, [r4, #12]
 8007d3a:	f003 0306 	and.w	r3, r3, #6
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	bf18      	it	ne
 8007d42:	2500      	movne	r5, #0
 8007d44:	6832      	ldr	r2, [r6, #0]
 8007d46:	f04f 0600 	mov.w	r6, #0
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	bf08      	it	eq
 8007d4e:	1aad      	subeq	r5, r5, r2
 8007d50:	6922      	ldr	r2, [r4, #16]
 8007d52:	bf08      	it	eq
 8007d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	bfc4      	itt	gt
 8007d5c:	1a9b      	subgt	r3, r3, r2
 8007d5e:	18ed      	addgt	r5, r5, r3
 8007d60:	341a      	adds	r4, #26
 8007d62:	42b5      	cmp	r5, r6
 8007d64:	d11a      	bne.n	8007d9c <_printf_common+0xcc>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e008      	b.n	8007d7c <_printf_common+0xac>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4638      	mov	r0, r7
 8007d72:	47c0      	blx	r8
 8007d74:	3001      	adds	r0, #1
 8007d76:	d103      	bne.n	8007d80 <_printf_common+0xb0>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	3501      	adds	r5, #1
 8007d82:	e7c4      	b.n	8007d0e <_printf_common+0x3e>
 8007d84:	2030      	movs	r0, #48	; 0x30
 8007d86:	18e1      	adds	r1, r4, r3
 8007d88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d92:	4422      	add	r2, r4
 8007d94:	3302      	adds	r3, #2
 8007d96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d9a:	e7c5      	b.n	8007d28 <_printf_common+0x58>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4649      	mov	r1, r9
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c0      	blx	r8
 8007da6:	3001      	adds	r0, #1
 8007da8:	d0e6      	beq.n	8007d78 <_printf_common+0xa8>
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7d9      	b.n	8007d62 <_printf_common+0x92>
	...

08007db0 <_printf_i>:
 8007db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	7e0f      	ldrb	r7, [r1, #24]
 8007db6:	4691      	mov	r9, r2
 8007db8:	2f78      	cmp	r7, #120	; 0x78
 8007dba:	4680      	mov	r8, r0
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	469a      	mov	sl, r3
 8007dc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dc6:	d807      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dc8:	2f62      	cmp	r7, #98	; 0x62
 8007dca:	d80a      	bhi.n	8007de2 <_printf_i+0x32>
 8007dcc:	2f00      	cmp	r7, #0
 8007dce:	f000 80d9 	beq.w	8007f84 <_printf_i+0x1d4>
 8007dd2:	2f58      	cmp	r7, #88	; 0x58
 8007dd4:	f000 80a4 	beq.w	8007f20 <_printf_i+0x170>
 8007dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007de0:	e03a      	b.n	8007e58 <_printf_i+0xa8>
 8007de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007de6:	2b15      	cmp	r3, #21
 8007de8:	d8f6      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dea:	a101      	add	r1, pc, #4	; (adr r1, 8007df0 <_printf_i+0x40>)
 8007dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007df0:	08007e49 	.word	0x08007e49
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007dd9 	.word	0x08007dd9
 8007dfc:	08007dd9 	.word	0x08007dd9
 8007e00:	08007dd9 	.word	0x08007dd9
 8007e04:	08007dd9 	.word	0x08007dd9
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007dd9 	.word	0x08007dd9
 8007e10:	08007dd9 	.word	0x08007dd9
 8007e14:	08007dd9 	.word	0x08007dd9
 8007e18:	08007dd9 	.word	0x08007dd9
 8007e1c:	08007f6b 	.word	0x08007f6b
 8007e20:	08007e8d 	.word	0x08007e8d
 8007e24:	08007f4d 	.word	0x08007f4d
 8007e28:	08007dd9 	.word	0x08007dd9
 8007e2c:	08007dd9 	.word	0x08007dd9
 8007e30:	08007f8d 	.word	0x08007f8d
 8007e34:	08007dd9 	.word	0x08007dd9
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007dd9 	.word	0x08007dd9
 8007e40:	08007dd9 	.word	0x08007dd9
 8007e44:	08007f55 	.word	0x08007f55
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	1d1a      	adds	r2, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	602a      	str	r2, [r5, #0]
 8007e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0a4      	b.n	8007fa6 <_printf_i+0x1f6>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	6829      	ldr	r1, [r5, #0]
 8007e60:	0606      	lsls	r6, r0, #24
 8007e62:	f101 0304 	add.w	r3, r1, #4
 8007e66:	d50a      	bpl.n	8007e7e <_printf_i+0xce>
 8007e68:	680e      	ldr	r6, [r1, #0]
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	da03      	bge.n	8007e78 <_printf_i+0xc8>
 8007e70:	232d      	movs	r3, #45	; 0x2d
 8007e72:	4276      	negs	r6, r6
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e78:	230a      	movs	r3, #10
 8007e7a:	485e      	ldr	r0, [pc, #376]	; (8007ff4 <_printf_i+0x244>)
 8007e7c:	e019      	b.n	8007eb2 <_printf_i+0x102>
 8007e7e:	680e      	ldr	r6, [r1, #0]
 8007e80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e84:	602b      	str	r3, [r5, #0]
 8007e86:	bf18      	it	ne
 8007e88:	b236      	sxthne	r6, r6
 8007e8a:	e7ef      	b.n	8007e6c <_printf_i+0xbc>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	6820      	ldr	r0, [r4, #0]
 8007e90:	1d19      	adds	r1, r3, #4
 8007e92:	6029      	str	r1, [r5, #0]
 8007e94:	0601      	lsls	r1, r0, #24
 8007e96:	d501      	bpl.n	8007e9c <_printf_i+0xec>
 8007e98:	681e      	ldr	r6, [r3, #0]
 8007e9a:	e002      	b.n	8007ea2 <_printf_i+0xf2>
 8007e9c:	0646      	lsls	r6, r0, #25
 8007e9e:	d5fb      	bpl.n	8007e98 <_printf_i+0xe8>
 8007ea0:	881e      	ldrh	r6, [r3, #0]
 8007ea2:	2f6f      	cmp	r7, #111	; 0x6f
 8007ea4:	bf0c      	ite	eq
 8007ea6:	2308      	moveq	r3, #8
 8007ea8:	230a      	movne	r3, #10
 8007eaa:	4852      	ldr	r0, [pc, #328]	; (8007ff4 <_printf_i+0x244>)
 8007eac:	2100      	movs	r1, #0
 8007eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eb2:	6865      	ldr	r5, [r4, #4]
 8007eb4:	2d00      	cmp	r5, #0
 8007eb6:	bfa8      	it	ge
 8007eb8:	6821      	ldrge	r1, [r4, #0]
 8007eba:	60a5      	str	r5, [r4, #8]
 8007ebc:	bfa4      	itt	ge
 8007ebe:	f021 0104 	bicge.w	r1, r1, #4
 8007ec2:	6021      	strge	r1, [r4, #0]
 8007ec4:	b90e      	cbnz	r6, 8007eca <_printf_i+0x11a>
 8007ec6:	2d00      	cmp	r5, #0
 8007ec8:	d04d      	beq.n	8007f66 <_printf_i+0x1b6>
 8007eca:	4615      	mov	r5, r2
 8007ecc:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ed0:	fb03 6711 	mls	r7, r3, r1, r6
 8007ed4:	5dc7      	ldrb	r7, [r0, r7]
 8007ed6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007eda:	4637      	mov	r7, r6
 8007edc:	42bb      	cmp	r3, r7
 8007ede:	460e      	mov	r6, r1
 8007ee0:	d9f4      	bls.n	8007ecc <_printf_i+0x11c>
 8007ee2:	2b08      	cmp	r3, #8
 8007ee4:	d10b      	bne.n	8007efe <_printf_i+0x14e>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	07de      	lsls	r6, r3, #31
 8007eea:	d508      	bpl.n	8007efe <_printf_i+0x14e>
 8007eec:	6923      	ldr	r3, [r4, #16]
 8007eee:	6861      	ldr	r1, [r4, #4]
 8007ef0:	4299      	cmp	r1, r3
 8007ef2:	bfde      	ittt	le
 8007ef4:	2330      	movle	r3, #48	; 0x30
 8007ef6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007efa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007efe:	1b52      	subs	r2, r2, r5
 8007f00:	6122      	str	r2, [r4, #16]
 8007f02:	464b      	mov	r3, r9
 8007f04:	4621      	mov	r1, r4
 8007f06:	4640      	mov	r0, r8
 8007f08:	f8cd a000 	str.w	sl, [sp]
 8007f0c:	aa03      	add	r2, sp, #12
 8007f0e:	f7ff fedf 	bl	8007cd0 <_printf_common>
 8007f12:	3001      	adds	r0, #1
 8007f14:	d14c      	bne.n	8007fb0 <_printf_i+0x200>
 8007f16:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1a:	b004      	add	sp, #16
 8007f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f20:	4834      	ldr	r0, [pc, #208]	; (8007ff4 <_printf_i+0x244>)
 8007f22:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f26:	6829      	ldr	r1, [r5, #0]
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f2e:	6029      	str	r1, [r5, #0]
 8007f30:	061d      	lsls	r5, r3, #24
 8007f32:	d514      	bpl.n	8007f5e <_printf_i+0x1ae>
 8007f34:	07df      	lsls	r7, r3, #31
 8007f36:	bf44      	itt	mi
 8007f38:	f043 0320 	orrmi.w	r3, r3, #32
 8007f3c:	6023      	strmi	r3, [r4, #0]
 8007f3e:	b91e      	cbnz	r6, 8007f48 <_printf_i+0x198>
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	f023 0320 	bic.w	r3, r3, #32
 8007f46:	6023      	str	r3, [r4, #0]
 8007f48:	2310      	movs	r3, #16
 8007f4a:	e7af      	b.n	8007eac <_printf_i+0xfc>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	f043 0320 	orr.w	r3, r3, #32
 8007f52:	6023      	str	r3, [r4, #0]
 8007f54:	2378      	movs	r3, #120	; 0x78
 8007f56:	4828      	ldr	r0, [pc, #160]	; (8007ff8 <_printf_i+0x248>)
 8007f58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f5c:	e7e3      	b.n	8007f26 <_printf_i+0x176>
 8007f5e:	0659      	lsls	r1, r3, #25
 8007f60:	bf48      	it	mi
 8007f62:	b2b6      	uxthmi	r6, r6
 8007f64:	e7e6      	b.n	8007f34 <_printf_i+0x184>
 8007f66:	4615      	mov	r5, r2
 8007f68:	e7bb      	b.n	8007ee2 <_printf_i+0x132>
 8007f6a:	682b      	ldr	r3, [r5, #0]
 8007f6c:	6826      	ldr	r6, [r4, #0]
 8007f6e:	1d18      	adds	r0, r3, #4
 8007f70:	6961      	ldr	r1, [r4, #20]
 8007f72:	6028      	str	r0, [r5, #0]
 8007f74:	0635      	lsls	r5, r6, #24
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	d501      	bpl.n	8007f7e <_printf_i+0x1ce>
 8007f7a:	6019      	str	r1, [r3, #0]
 8007f7c:	e002      	b.n	8007f84 <_printf_i+0x1d4>
 8007f7e:	0670      	lsls	r0, r6, #25
 8007f80:	d5fb      	bpl.n	8007f7a <_printf_i+0x1ca>
 8007f82:	8019      	strh	r1, [r3, #0]
 8007f84:	2300      	movs	r3, #0
 8007f86:	4615      	mov	r5, r2
 8007f88:	6123      	str	r3, [r4, #16]
 8007f8a:	e7ba      	b.n	8007f02 <_printf_i+0x152>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	2100      	movs	r1, #0
 8007f90:	1d1a      	adds	r2, r3, #4
 8007f92:	602a      	str	r2, [r5, #0]
 8007f94:	681d      	ldr	r5, [r3, #0]
 8007f96:	6862      	ldr	r2, [r4, #4]
 8007f98:	4628      	mov	r0, r5
 8007f9a:	f000 f863 	bl	8008064 <memchr>
 8007f9e:	b108      	cbz	r0, 8007fa4 <_printf_i+0x1f4>
 8007fa0:	1b40      	subs	r0, r0, r5
 8007fa2:	6060      	str	r0, [r4, #4]
 8007fa4:	6863      	ldr	r3, [r4, #4]
 8007fa6:	6123      	str	r3, [r4, #16]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fae:	e7a8      	b.n	8007f02 <_printf_i+0x152>
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	6923      	ldr	r3, [r4, #16]
 8007fb8:	47d0      	blx	sl
 8007fba:	3001      	adds	r0, #1
 8007fbc:	d0ab      	beq.n	8007f16 <_printf_i+0x166>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	079b      	lsls	r3, r3, #30
 8007fc2:	d413      	bmi.n	8007fec <_printf_i+0x23c>
 8007fc4:	68e0      	ldr	r0, [r4, #12]
 8007fc6:	9b03      	ldr	r3, [sp, #12]
 8007fc8:	4298      	cmp	r0, r3
 8007fca:	bfb8      	it	lt
 8007fcc:	4618      	movlt	r0, r3
 8007fce:	e7a4      	b.n	8007f1a <_printf_i+0x16a>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	4632      	mov	r2, r6
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	47d0      	blx	sl
 8007fda:	3001      	adds	r0, #1
 8007fdc:	d09b      	beq.n	8007f16 <_printf_i+0x166>
 8007fde:	3501      	adds	r5, #1
 8007fe0:	68e3      	ldr	r3, [r4, #12]
 8007fe2:	9903      	ldr	r1, [sp, #12]
 8007fe4:	1a5b      	subs	r3, r3, r1
 8007fe6:	42ab      	cmp	r3, r5
 8007fe8:	dcf2      	bgt.n	8007fd0 <_printf_i+0x220>
 8007fea:	e7eb      	b.n	8007fc4 <_printf_i+0x214>
 8007fec:	2500      	movs	r5, #0
 8007fee:	f104 0619 	add.w	r6, r4, #25
 8007ff2:	e7f5      	b.n	8007fe0 <_printf_i+0x230>
 8007ff4:	08008519 	.word	0x08008519
 8007ff8:	0800852a 	.word	0x0800852a

08007ffc <_read_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4604      	mov	r4, r0
 8008000:	4608      	mov	r0, r1
 8008002:	4611      	mov	r1, r2
 8008004:	2200      	movs	r2, #0
 8008006:	4d05      	ldr	r5, [pc, #20]	; (800801c <_read_r+0x20>)
 8008008:	602a      	str	r2, [r5, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	f7f8 fbfa 	bl	8000804 <_read>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_read_r+0x1e>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_read_r+0x1e>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	200025bc 	.word	0x200025bc

08008020 <_fstat_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	2300      	movs	r3, #0
 8008024:	4d06      	ldr	r5, [pc, #24]	; (8008040 <_fstat_r+0x20>)
 8008026:	4604      	mov	r4, r0
 8008028:	4608      	mov	r0, r1
 800802a:	4611      	mov	r1, r2
 800802c:	602b      	str	r3, [r5, #0]
 800802e:	f7f8 fc11 	bl	8000854 <_fstat>
 8008032:	1c43      	adds	r3, r0, #1
 8008034:	d102      	bne.n	800803c <_fstat_r+0x1c>
 8008036:	682b      	ldr	r3, [r5, #0]
 8008038:	b103      	cbz	r3, 800803c <_fstat_r+0x1c>
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	bd38      	pop	{r3, r4, r5, pc}
 800803e:	bf00      	nop
 8008040:	200025bc 	.word	0x200025bc

08008044 <_isatty_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	2300      	movs	r3, #0
 8008048:	4d05      	ldr	r5, [pc, #20]	; (8008060 <_isatty_r+0x1c>)
 800804a:	4604      	mov	r4, r0
 800804c:	4608      	mov	r0, r1
 800804e:	602b      	str	r3, [r5, #0]
 8008050:	f7f8 fc0f 	bl	8000872 <_isatty>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_isatty_r+0x1a>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_isatty_r+0x1a>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	200025bc 	.word	0x200025bc

08008064 <memchr>:
 8008064:	4603      	mov	r3, r0
 8008066:	b510      	push	{r4, lr}
 8008068:	b2c9      	uxtb	r1, r1
 800806a:	4402      	add	r2, r0
 800806c:	4293      	cmp	r3, r2
 800806e:	4618      	mov	r0, r3
 8008070:	d101      	bne.n	8008076 <memchr+0x12>
 8008072:	2000      	movs	r0, #0
 8008074:	e003      	b.n	800807e <memchr+0x1a>
 8008076:	7804      	ldrb	r4, [r0, #0]
 8008078:	3301      	adds	r3, #1
 800807a:	428c      	cmp	r4, r1
 800807c:	d1f6      	bne.n	800806c <memchr+0x8>
 800807e:	bd10      	pop	{r4, pc}

08008080 <_init>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	bf00      	nop
 8008084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008086:	bc08      	pop	{r3}
 8008088:	469e      	mov	lr, r3
 800808a:	4770      	bx	lr

0800808c <_fini>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	bf00      	nop
 8008090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008092:	bc08      	pop	{r3}
 8008094:	469e      	mov	lr, r3
 8008096:	4770      	bx	lr
