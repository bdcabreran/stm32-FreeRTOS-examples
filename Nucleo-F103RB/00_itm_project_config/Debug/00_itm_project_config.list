
00_itm_project_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e38  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08007f48  08007f48  00017f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d0  080083d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080083d0  080083d0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083d0  080083d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083d4  080083d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080083d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002544  20000074  0800844c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025b8  0800844c  000225b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001babf  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb9  00000000  00000000  0003bb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  0003fb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  00041368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c383  00000000  00000000  000429e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c85f  00000000  00000000  0005ed63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b3a3  00000000  00000000  0007b5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c4c  00000000  00000000  001169b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007f30 	.word	0x08007f30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007f30 	.word	0x08007f30

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20001b30 	.word	0x20001b30

080001dc <log_message>:
 ITM_SendChar(ch);
 return(ch);
}

// Log message with color based on log level
void log_message(LogLevel level, const char* message) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	6039      	str	r1, [r7, #0]
 80001e6:	71fb      	strb	r3, [r7, #7]
    switch (level) {
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b03      	cmp	r3, #3
 80001ec:	d826      	bhi.n	800023c <log_message+0x60>
 80001ee:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <log_message+0x18>)
 80001f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f4:	08000205 	.word	0x08000205
 80001f8:	08000213 	.word	0x08000213
 80001fc:	08000221 	.word	0x08000221
 8000200:	0800022f 	.word	0x0800022f
        case LOG_DEBUG:
            printf("%s[DEBUG] %s%s\n", COLOR_CYAN, message, COLOR_RESET);
 8000204:	4b10      	ldr	r3, [pc, #64]	; (8000248 <log_message+0x6c>)
 8000206:	683a      	ldr	r2, [r7, #0]
 8000208:	4910      	ldr	r1, [pc, #64]	; (800024c <log_message+0x70>)
 800020a:	4811      	ldr	r0, [pc, #68]	; (8000250 <log_message+0x74>)
 800020c:	f006 ffba 	bl	8007184 <iprintf>
            break;
 8000210:	e015      	b.n	800023e <log_message+0x62>
        case LOG_INFO:
            printf("%s[INFO] %s%s\n", COLOR_GREEN, message, COLOR_RESET);
 8000212:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <log_message+0x6c>)
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	490f      	ldr	r1, [pc, #60]	; (8000254 <log_message+0x78>)
 8000218:	480f      	ldr	r0, [pc, #60]	; (8000258 <log_message+0x7c>)
 800021a:	f006 ffb3 	bl	8007184 <iprintf>
            break;
 800021e:	e00e      	b.n	800023e <log_message+0x62>
        case LOG_WARNING:
            printf("%s[WARNING] %s%s\n", COLOR_YELLOW, message, COLOR_RESET);
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <log_message+0x6c>)
 8000222:	683a      	ldr	r2, [r7, #0]
 8000224:	490d      	ldr	r1, [pc, #52]	; (800025c <log_message+0x80>)
 8000226:	480e      	ldr	r0, [pc, #56]	; (8000260 <log_message+0x84>)
 8000228:	f006 ffac 	bl	8007184 <iprintf>
            break;
 800022c:	e007      	b.n	800023e <log_message+0x62>
        case LOG_ERROR:
            printf("%s[ERROR] %s%s\n", COLOR_RED, message, COLOR_RESET);
 800022e:	4b06      	ldr	r3, [pc, #24]	; (8000248 <log_message+0x6c>)
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	490c      	ldr	r1, [pc, #48]	; (8000264 <log_message+0x88>)
 8000234:	480c      	ldr	r0, [pc, #48]	; (8000268 <log_message+0x8c>)
 8000236:	f006 ffa5 	bl	8007184 <iprintf>
            break;
 800023a:	e000      	b.n	800023e <log_message+0x62>
        default:
            break;
 800023c:	bf00      	nop
    }
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	08007f48 	.word	0x08007f48
 800024c:	08007f50 	.word	0x08007f50
 8000250:	08007f58 	.word	0x08007f58
 8000254:	08007f68 	.word	0x08007f68
 8000258:	08007f70 	.word	0x08007f70
 800025c:	08007f80 	.word	0x08007f80
 8000260:	08007f88 	.word	0x08007f88
 8000264:	08007f9c 	.word	0x08007f9c
 8000268:	08007fa4 	.word	0x08007fa4

0800026c <log_test>:

void log_test(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    log_message(LOG_INFO, "Starting program...");
 8000270:	4908      	ldr	r1, [pc, #32]	; (8000294 <log_test+0x28>)
 8000272:	2001      	movs	r0, #1
 8000274:	f7ff ffb2 	bl	80001dc <log_message>
    log_message(LOG_DEBUG, "Debugging information...");
 8000278:	4907      	ldr	r1, [pc, #28]	; (8000298 <log_test+0x2c>)
 800027a:	2000      	movs	r0, #0
 800027c:	f7ff ffae 	bl	80001dc <log_message>
    log_message(LOG_WARNING, "Warning: Something might be wrong...");
 8000280:	4906      	ldr	r1, [pc, #24]	; (800029c <log_test+0x30>)
 8000282:	2002      	movs	r0, #2
 8000284:	f7ff ffaa 	bl	80001dc <log_message>
    log_message(LOG_ERROR, "Error: Something went wrong!");
 8000288:	4905      	ldr	r1, [pc, #20]	; (80002a0 <log_test+0x34>)
 800028a:	2003      	movs	r0, #3
 800028c:	f7ff ffa6 	bl	80001dc <log_message>
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	08007fb4 	.word	0x08007fb4
 8000298:	08007fc8 	.word	0x08007fc8
 800029c:	08007fe4 	.word	0x08007fe4
 80002a0:	0800800c 	.word	0x0800800c

080002a4 <blink_led_non_blocking>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void blink_led_non_blocking(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80002a8:	2120      	movs	r1, #32
 80002aa:	4806      	ldr	r0, [pc, #24]	; (80002c4 <blink_led_non_blocking+0x20>)
 80002ac:	f000 fefc 	bl	80010a8 <HAL_GPIO_TogglePin>
    log_message(LOG_DEBUG, "Led2 toogle!\n");
 80002b0:	4905      	ldr	r1, [pc, #20]	; (80002c8 <blink_led_non_blocking+0x24>)
 80002b2:	2000      	movs	r0, #0
 80002b4:	f7ff ff92 	bl	80001dc <log_message>
    osDelay(500);
 80002b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002bc:	f002 fa72 	bl	80027a4 <osDelay>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40010800 	.word	0x40010800
 80002c8:	08008038 	.word	0x08008038

080002cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Init */
    SEGGER_SYSVIEW_Conf();
 80002d0:	f006 fc38 	bl	8006b44 <SEGGER_SYSVIEW_Conf>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of defaultTask */
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002d4:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <MX_FREERTOS_Init+0x24>)
 80002d6:	2100      	movs	r1, #0
 80002d8:	4806      	ldr	r0, [pc, #24]	; (80002f4 <MX_FREERTOS_Init+0x28>)
 80002da:	f002 f9b9 	bl	8002650 <osThreadNew>
 80002de:	4603      	mov	r3, r0
 80002e0:	4a05      	ldr	r2, [pc, #20]	; (80002f8 <MX_FREERTOS_Init+0x2c>)
 80002e2:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_THREADS */
    SEGGER_SYSVIEW_PrintfHost("Task Default Created");
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_FREERTOS_Init+0x30>)
 80002e6:	f006 fbaf 	bl	8006a48 <SEGGER_SYSVIEW_PrintfHost>

    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	080082e8 	.word	0x080082e8
 80002f4:	08000301 	.word	0x08000301
 80002f8:	20000090 	.word	0x20000090
 80002fc:	08008048 	.word	0x08008048

08000300 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	blink_led_non_blocking();
 8000308:	f7ff ffcc 	bl	80002a4 <blink_led_non_blocking>
 800030c:	e7fc      	b.n	8000308 <StartDefaultTask+0x8>
	...

08000310 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000324:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a2c      	ldr	r2, [pc, #176]	; (80003dc <MX_GPIO_Init+0xcc>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b2a      	ldr	r3, [pc, #168]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <MX_GPIO_Init+0xcc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a26      	ldr	r2, [pc, #152]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b24      	ldr	r3, [pc, #144]	; (80003dc <MX_GPIO_Init+0xcc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <MX_GPIO_Init+0xcc>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_GPIO_Init+0xcc>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a1a      	ldr	r2, [pc, #104]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_GPIO_Init+0xcc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2160      	movs	r1, #96	; 0x60
 8000388:	4815      	ldr	r0, [pc, #84]	; (80003e0 <MX_GPIO_Init+0xd0>)
 800038a:	f000 fe5b 	bl	8001044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800038e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_GPIO_Init+0xd4>)
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4811      	ldr	r0, [pc, #68]	; (80003e8 <MX_GPIO_Init+0xd8>)
 80003a4:	f000 fbe0 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 80003a8:	2360      	movs	r3, #96	; 0x60
 80003aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2302      	movs	r3, #2
 80003b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	4808      	ldr	r0, [pc, #32]	; (80003e0 <MX_GPIO_Init+0xd0>)
 80003c0:	f000 fbd2 	bl	8000b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2105      	movs	r1, #5
 80003c8:	2028      	movs	r0, #40	; 0x28
 80003ca:	f000 fb89 	bl	8000ae0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ce:	2028      	movs	r0, #40	; 0x28
 80003d0:	f000 fbb2 	bl	8000b38 <HAL_NVIC_EnableIRQ>

}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010800 	.word	0x40010800
 80003e4:	10110000 	.word	0x10110000
 80003e8:	40011000 	.word	0x40011000

080003ec <print_startup_msg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_startup_msg(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	printf("************************************\r\n");
 80003f0:	4807      	ldr	r0, [pc, #28]	; (8000410 <print_startup_msg+0x24>)
 80003f2:	f006 ff4d 	bl	8007290 <puts>
	printf("***** %s - %s ****/\r\n", __DATE__, __TIME__);
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <print_startup_msg+0x28>)
 80003f8:	4907      	ldr	r1, [pc, #28]	; (8000418 <print_startup_msg+0x2c>)
 80003fa:	4808      	ldr	r0, [pc, #32]	; (800041c <print_startup_msg+0x30>)
 80003fc:	f006 fec2 	bl	8007184 <iprintf>
	printf("***** Author : Bayron Cabrera ******\r\n");
 8000400:	4807      	ldr	r0, [pc, #28]	; (8000420 <print_startup_msg+0x34>)
 8000402:	f006 ff45 	bl	8007290 <puts>
	printf("************************************\r\n");
 8000406:	4802      	ldr	r0, [pc, #8]	; (8000410 <print_startup_msg+0x24>)
 8000408:	f006 ff42 	bl	8007290 <puts>
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	08008060 	.word	0x08008060
 8000414:	08008088 	.word	0x08008088
 8000418:	08008094 	.word	0x08008094
 800041c:	080080a0 	.word	0x080080a0
 8000420:	080080b8 	.word	0x080080b8

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000428:	f000 fa5e 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800042c:	f000 f80f 	bl	800044e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000430:	f7ff ff6e 	bl	8000310 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000434:	f000 f9ca 	bl	80007cc <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  print_startup_msg();
 8000438:	f7ff ffd8 	bl	80003ec <print_startup_msg>
  log_test();
 800043c:	f7ff ff16 	bl	800026c <log_test>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000440:	f002 f8a0 	bl	8002584 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000444:	f7ff ff42 	bl	80002cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000448:	f002 f8ce 	bl	80025e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800044c:	e7fe      	b.n	800044c <main+0x28>

0800044e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b090      	sub	sp, #64	; 0x40
 8000452:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000454:	f107 0318 	add.w	r3, r7, #24
 8000458:	2228      	movs	r2, #40	; 0x28
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f006 fdf4 	bl	800704a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
 800046e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000470:	2302      	movs	r3, #2
 8000472:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000474:	2301      	movs	r3, #1
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000478:	2310      	movs	r3, #16
 800047a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047c:	2302      	movs	r3, #2
 800047e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000480:	2300      	movs	r3, #0
 8000482:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000484:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000488:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fe54 	bl	800113c <HAL_RCC_OscConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800049a:	f000 f82b 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049e:	230f      	movs	r3, #15
 80004a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a2:	2302      	movs	r3, #2
 80004a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2102      	movs	r1, #2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 f9ad 	bl	8001818 <HAL_RCC_ClockConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004c4:	f000 f816 	bl	80004f4 <Error_Handler>
  }
}
 80004c8:	bf00      	nop
 80004ca:	3740      	adds	r7, #64	; 0x40
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d101      	bne.n	80004e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004e2:	f000 fa17 	bl	8000914 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40012c00 	.word	0x40012c00

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	e7fe      	b.n	80004fc <Error_Handler+0x8>

080004fe <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <HAL_MspInit+0x68>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a17      	ldr	r2, [pc, #92]	; (800057c <HAL_MspInit+0x68>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <HAL_MspInit+0x68>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_MspInit+0x68>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a11      	ldr	r2, [pc, #68]	; (800057c <HAL_MspInit+0x68>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_MspInit+0x68>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	210f      	movs	r1, #15
 800054e:	f06f 0001 	mvn.w	r0, #1
 8000552:	f000 fac5 	bl	8000ae0 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_MspInit+0x6c>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_MspInit+0x6c>)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000
 8000580:	40010000 	.word	0x40010000

08000584 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800058c:	2300      	movs	r3, #0
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000590:	2300      	movs	r3, #0
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000594:	2300      	movs	r3, #0
 8000596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800059a:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <HAL_InitTick+0xd0>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <HAL_InitTick+0xd0>)
 80005a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <HAL_InitTick+0xd0>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005b2:	f107 020c 	add.w	r2, r7, #12
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fb4b 	bl	8001c58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005c2:	f001 fb35 	bl	8001c30 <HAL_RCC_GetPCLK2Freq>
 80005c6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ca:	4a23      	ldr	r2, [pc, #140]	; (8000658 <HAL_InitTick+0xd4>)
 80005cc:	fba2 2303 	umull	r2, r3, r2, r3
 80005d0:	0c9b      	lsrs	r3, r3, #18
 80005d2:	3b01      	subs	r3, #1
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <HAL_InitTick+0xd8>)
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <HAL_InitTick+0xdc>)
 80005da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <HAL_InitTick+0xd8>)
 80005de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005e2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005e4:	4a1d      	ldr	r2, [pc, #116]	; (800065c <HAL_InitTick+0xd8>)
 80005e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <HAL_InitTick+0xd8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <HAL_InitTick+0xd8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <HAL_InitTick+0xd8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80005fc:	4817      	ldr	r0, [pc, #92]	; (800065c <HAL_InitTick+0xd8>)
 80005fe:	f001 fb8b 	bl	8001d18 <HAL_TIM_Base_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000608:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800060c:	2b00      	cmp	r3, #0
 800060e:	d11b      	bne.n	8000648 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <HAL_InitTick+0xd8>)
 8000612:	f001 fc35 	bl	8001e80 <HAL_TIM_Base_Start_IT>
 8000616:	4603      	mov	r3, r0
 8000618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800061c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000620:	2b00      	cmp	r3, #0
 8000622:	d111      	bne.n	8000648 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000624:	2019      	movs	r0, #25
 8000626:	f000 fa87 	bl	8000b38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d808      	bhi.n	8000642 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000630:	2200      	movs	r2, #0
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	2019      	movs	r0, #25
 8000636:	f000 fa53 	bl	8000ae0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <HAL_InitTick+0xe0>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	e002      	b.n	8000648 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800064c:	4618      	mov	r0, r3
 800064e:	3730      	adds	r7, #48	; 0x30
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	431bde83 	.word	0x431bde83
 800065c:	20000094 	.word	0x20000094
 8000660:	40012c00 	.word	0x40012c00
 8000664:	20000004 	.word	0x20000004

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800066c:	e7fe      	b.n	800066c <NMI_Handler+0x4>

0800066e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler+0x4>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <MemManage_Handler+0x4>

0800067a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <BusFault_Handler+0x4>

08000680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <UsageFault_Handler+0x4>

08000686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
	...

08000694 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <TIM1_UP_IRQHandler+0x10>)
 800069a:	f001 fc5d 	bl	8001f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000094 	.word	0x20000094

080006a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006b0:	f000 fd22 	bl	80010f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	e00a      	b.n	80006e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006ca:	f3af 8000 	nop.w
 80006ce:	4601      	mov	r1, r0
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	60ba      	str	r2, [r7, #8]
 80006d6:	b2ca      	uxtb	r2, r1
 80006d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	3301      	adds	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dbf0      	blt.n	80006ca <_read+0x12>
  }

  return len;
 80006e8:	687b      	ldr	r3, [r7, #4]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000718:	605a      	str	r2, [r3, #4]
  return 0;
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <_isatty>:

int _isatty(int file)
{
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800072e:	2301      	movs	r3, #1
}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800073a:	b480      	push	{r7}
 800073c:	b085      	sub	sp, #20
 800073e:	af00      	add	r7, sp, #0
 8000740:	60f8      	str	r0, [r7, #12]
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000746:	2300      	movs	r3, #0
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
	...

08000754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800075c:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <_sbrk+0x5c>)
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <_sbrk+0x60>)
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d102      	bne.n	8000776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <_sbrk+0x64>)
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <_sbrk+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	429a      	cmp	r2, r3
 8000782:	d207      	bcs.n	8000794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000784:	f006 fb20 	bl	8006dc8 <__errno>
 8000788:	4603      	mov	r3, r0
 800078a:	220c      	movs	r2, #12
 800078c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	e009      	b.n	80007a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <_sbrk+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <_sbrk+0x64>)
 80007a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20005000 	.word	0x20005000
 80007b4:	00000400 	.word	0x00000400
 80007b8:	200000dc 	.word	0x200000dc
 80007bc:	200025b8 	.word	0x200025b8

080007c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_USART2_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 8000804:	f001 fd48 	bl	8002298 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f7ff fe71 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000e0 	.word	0x200000e0
 800081c:	40004400 	.word	0x40004400

08000820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <HAL_UART_MspInit+0x70>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d123      	bne.n	8000888 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_UART_MspInit+0x74>)
 8000842:	69db      	ldr	r3, [r3, #28]
 8000844:	4a13      	ldr	r2, [pc, #76]	; (8000894 <HAL_UART_MspInit+0x74>)
 8000846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084a:	61d3      	str	r3, [r2, #28]
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_UART_MspInit+0x74>)
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_UART_MspInit+0x74>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <HAL_UART_MspInit+0x74>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_UART_MspInit+0x74>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000870:	230c      	movs	r3, #12
 8000872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2302      	movs	r3, #2
 800087a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <HAL_UART_MspInit+0x78>)
 8000884:	f000 f970 	bl	8000b68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800

0800089c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	; (80008d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	; (80008e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008c2:	f7ff ff7d 	bl	80007c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008c6:	f006 fb7b 	bl	8006fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ca:	f7ff fdab 	bl	8000424 <main>
  bx lr
 80008ce:	4770      	bx	lr
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008d8:	080083d8 	.word	0x080083d8
  ldr r2, =_sbss
 80008dc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008e0:	200025b8 	.word	0x200025b8

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_Init+0x28>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_Init+0x28>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f8d1 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	200f      	movs	r0, #15
 8000900:	f7ff fe40 	bl	8000584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff fe06 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40022000 	.word	0x40022000

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a03      	ldr	r2, [pc, #12]	; (8000934 <HAL_IncTick+0x20>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000008 	.word	0x20000008
 8000934:	20000124 	.word	0x20000124

08000938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	; (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000124 	.word	0x20000124

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db0b      	blt.n	80009da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 021f 	and.w	r2, r3, #31
 80009c8:	4906      	ldr	r1, [pc, #24]	; (80009e4 <__NVIC_EnableIRQ+0x34>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	2001      	movs	r0, #1
 80009d2:	fa00 f202 	lsl.w	r2, r0, r2
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b07      	cmp	r3, #7
 8000aac:	d00f      	beq.n	8000ace <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b06      	cmp	r3, #6
 8000ab2:	d00c      	beq.n	8000ace <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b05      	cmp	r3, #5
 8000ab8:	d009      	beq.n	8000ace <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d006      	beq.n	8000ace <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d003      	beq.n	8000ace <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ac6:	2192      	movs	r1, #146	; 0x92
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000aca:	f7ff fd18 	bl	80004fe <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ff3c 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	080080e0 	.word	0x080080e0

08000ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d903      	bls.n	8000b00 <HAL_NVIC_SetPriority+0x20>
 8000af8:	21aa      	movs	r1, #170	; 0xaa
 8000afa:	480e      	ldr	r0, [pc, #56]	; (8000b34 <HAL_NVIC_SetPriority+0x54>)
 8000afc:	f7ff fcff 	bl	80004fe <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	d903      	bls.n	8000b0e <HAL_NVIC_SetPriority+0x2e>
 8000b06:	21ab      	movs	r1, #171	; 0xab
 8000b08:	480a      	ldr	r0, [pc, #40]	; (8000b34 <HAL_NVIC_SetPriority+0x54>)
 8000b0a:	f7ff fcf8 	bl	80004fe <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0e:	f7ff ff41 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000b12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	68b9      	ldr	r1, [r7, #8]
 8000b18:	6978      	ldr	r0, [r7, #20]
 8000b1a:	f7ff ff8f 	bl	8000a3c <NVIC_EncodePriority>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff5e 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2c:	bf00      	nop
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	080080e0 	.word	0x080080e0

08000b38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	da03      	bge.n	8000b52 <HAL_NVIC_EnableIRQ+0x1a>
 8000b4a:	21be      	movs	r1, #190	; 0xbe
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <HAL_NVIC_EnableIRQ+0x2c>)
 8000b4e:	f7ff fcd6 	bl	80004fe <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff2a 	bl	80009b0 <__NVIC_EnableIRQ>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	080080e0 	.word	0x080080e0

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a96      	ldr	r2, [pc, #600]	; (8000dd8 <HAL_GPIO_Init+0x270>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d013      	beq.n	8000baa <HAL_GPIO_Init+0x42>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a95      	ldr	r2, [pc, #596]	; (8000ddc <HAL_GPIO_Init+0x274>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d00f      	beq.n	8000baa <HAL_GPIO_Init+0x42>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a94      	ldr	r2, [pc, #592]	; (8000de0 <HAL_GPIO_Init+0x278>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d00b      	beq.n	8000baa <HAL_GPIO_Init+0x42>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a93      	ldr	r2, [pc, #588]	; (8000de4 <HAL_GPIO_Init+0x27c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d007      	beq.n	8000baa <HAL_GPIO_Init+0x42>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a92      	ldr	r2, [pc, #584]	; (8000de8 <HAL_GPIO_Init+0x280>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x42>
 8000ba2:	21bd      	movs	r1, #189	; 0xbd
 8000ba4:	4891      	ldr	r0, [pc, #580]	; (8000dec <HAL_GPIO_Init+0x284>)
 8000ba6:	f7ff fcaa 	bl	80004fe <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d005      	beq.n	8000bc0 <HAL_GPIO_Init+0x58>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	0c1b      	lsrs	r3, r3, #16
 8000bba:	041b      	lsls	r3, r3, #16
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x60>
 8000bc0:	21be      	movs	r1, #190	; 0xbe
 8000bc2:	488a      	ldr	r0, [pc, #552]	; (8000dec <HAL_GPIO_Init+0x284>)
 8000bc4:	f7ff fc9b 	bl	80004fe <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f000 821c 	beq.w	800100a <HAL_GPIO_Init+0x4a2>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	f000 8217 	beq.w	800100a <HAL_GPIO_Init+0x4a2>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b11      	cmp	r3, #17
 8000be2:	f000 8212 	beq.w	800100a <HAL_GPIO_Init+0x4a2>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	f000 820d 	beq.w	800100a <HAL_GPIO_Init+0x4a2>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b12      	cmp	r3, #18
 8000bf6:	f000 8208 	beq.w	800100a <HAL_GPIO_Init+0x4a2>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	4a7c      	ldr	r2, [pc, #496]	; (8000df0 <HAL_GPIO_Init+0x288>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	f000 8202 	beq.w	800100a <HAL_GPIO_Init+0x4a2>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	4a7a      	ldr	r2, [pc, #488]	; (8000df4 <HAL_GPIO_Init+0x28c>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	f000 81fc 	beq.w	800100a <HAL_GPIO_Init+0x4a2>
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4a78      	ldr	r2, [pc, #480]	; (8000df8 <HAL_GPIO_Init+0x290>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	f000 81f6 	beq.w	800100a <HAL_GPIO_Init+0x4a2>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	4a76      	ldr	r2, [pc, #472]	; (8000dfc <HAL_GPIO_Init+0x294>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	f000 81f0 	beq.w	800100a <HAL_GPIO_Init+0x4a2>
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	4a74      	ldr	r2, [pc, #464]	; (8000e00 <HAL_GPIO_Init+0x298>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	f000 81ea 	beq.w	800100a <HAL_GPIO_Init+0x4a2>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	4a72      	ldr	r2, [pc, #456]	; (8000e04 <HAL_GPIO_Init+0x29c>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	f000 81e4 	beq.w	800100a <HAL_GPIO_Init+0x4a2>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	f000 81df 	beq.w	800100a <HAL_GPIO_Init+0x4a2>
 8000c4c:	21bf      	movs	r1, #191	; 0xbf
 8000c4e:	4867      	ldr	r0, [pc, #412]	; (8000dec <HAL_GPIO_Init+0x284>)
 8000c50:	f7ff fc55 	bl	80004fe <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c54:	e1d9      	b.n	800100a <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c56:	2201      	movs	r2, #1
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	69fa      	ldr	r2, [r7, #28]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	f040 81c8 	bne.w	8001004 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a58      	ldr	r2, [pc, #352]	; (8000dd8 <HAL_GPIO_Init+0x270>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d013      	beq.n	8000ca4 <HAL_GPIO_Init+0x13c>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a57      	ldr	r2, [pc, #348]	; (8000ddc <HAL_GPIO_Init+0x274>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d00f      	beq.n	8000ca4 <HAL_GPIO_Init+0x13c>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a56      	ldr	r2, [pc, #344]	; (8000de0 <HAL_GPIO_Init+0x278>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d00b      	beq.n	8000ca4 <HAL_GPIO_Init+0x13c>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a55      	ldr	r2, [pc, #340]	; (8000de4 <HAL_GPIO_Init+0x27c>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d007      	beq.n	8000ca4 <HAL_GPIO_Init+0x13c>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a54      	ldr	r2, [pc, #336]	; (8000de8 <HAL_GPIO_Init+0x280>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x13c>
 8000c9c:	21cd      	movs	r1, #205	; 0xcd
 8000c9e:	4853      	ldr	r0, [pc, #332]	; (8000dec <HAL_GPIO_Init+0x284>)
 8000ca0:	f7ff fc2d 	bl	80004fe <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4a56      	ldr	r2, [pc, #344]	; (8000e04 <HAL_GPIO_Init+0x29c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	f000 80c1 	beq.w	8000e32 <HAL_GPIO_Init+0x2ca>
 8000cb0:	4a54      	ldr	r2, [pc, #336]	; (8000e04 <HAL_GPIO_Init+0x29c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f200 80e7 	bhi.w	8000e86 <HAL_GPIO_Init+0x31e>
 8000cb8:	4a4f      	ldr	r2, [pc, #316]	; (8000df8 <HAL_GPIO_Init+0x290>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	f000 80b9 	beq.w	8000e32 <HAL_GPIO_Init+0x2ca>
 8000cc0:	4a4d      	ldr	r2, [pc, #308]	; (8000df8 <HAL_GPIO_Init+0x290>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	f200 80df 	bhi.w	8000e86 <HAL_GPIO_Init+0x31e>
 8000cc8:	4a4d      	ldr	r2, [pc, #308]	; (8000e00 <HAL_GPIO_Init+0x298>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	f000 80b1 	beq.w	8000e32 <HAL_GPIO_Init+0x2ca>
 8000cd0:	4a4b      	ldr	r2, [pc, #300]	; (8000e00 <HAL_GPIO_Init+0x298>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	f200 80d7 	bhi.w	8000e86 <HAL_GPIO_Init+0x31e>
 8000cd8:	4a46      	ldr	r2, [pc, #280]	; (8000df4 <HAL_GPIO_Init+0x28c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	f000 80a9 	beq.w	8000e32 <HAL_GPIO_Init+0x2ca>
 8000ce0:	4a44      	ldr	r2, [pc, #272]	; (8000df4 <HAL_GPIO_Init+0x28c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	f200 80cf 	bhi.w	8000e86 <HAL_GPIO_Init+0x31e>
 8000ce8:	4a44      	ldr	r2, [pc, #272]	; (8000dfc <HAL_GPIO_Init+0x294>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	f000 80a1 	beq.w	8000e32 <HAL_GPIO_Init+0x2ca>
 8000cf0:	4a42      	ldr	r2, [pc, #264]	; (8000dfc <HAL_GPIO_Init+0x294>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	f200 80c7 	bhi.w	8000e86 <HAL_GPIO_Init+0x31e>
 8000cf8:	2b12      	cmp	r3, #18
 8000cfa:	d82b      	bhi.n	8000d54 <HAL_GPIO_Init+0x1ec>
 8000cfc:	2b12      	cmp	r3, #18
 8000cfe:	f200 80c2 	bhi.w	8000e86 <HAL_GPIO_Init+0x31e>
 8000d02:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <HAL_GPIO_Init+0x1a0>)
 8000d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d08:	08000e33 	.word	0x08000e33
 8000d0c:	08000d5d 	.word	0x08000d5d
 8000d10:	08000daf 	.word	0x08000daf
 8000d14:	08000e81 	.word	0x08000e81
 8000d18:	08000e87 	.word	0x08000e87
 8000d1c:	08000e87 	.word	0x08000e87
 8000d20:	08000e87 	.word	0x08000e87
 8000d24:	08000e87 	.word	0x08000e87
 8000d28:	08000e87 	.word	0x08000e87
 8000d2c:	08000e87 	.word	0x08000e87
 8000d30:	08000e87 	.word	0x08000e87
 8000d34:	08000e87 	.word	0x08000e87
 8000d38:	08000e87 	.word	0x08000e87
 8000d3c:	08000e87 	.word	0x08000e87
 8000d40:	08000e87 	.word	0x08000e87
 8000d44:	08000e87 	.word	0x08000e87
 8000d48:	08000e87 	.word	0x08000e87
 8000d4c:	08000d85 	.word	0x08000d85
 8000d50:	08000e09 	.word	0x08000e09
 8000d54:	4a26      	ldr	r2, [pc, #152]	; (8000df0 <HAL_GPIO_Init+0x288>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d06b      	beq.n	8000e32 <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d5a:	e094      	b.n	8000e86 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d00b      	beq.n	8000d7c <HAL_GPIO_Init+0x214>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d007      	beq.n	8000d7c <HAL_GPIO_Init+0x214>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x214>
 8000d74:	21d5      	movs	r1, #213	; 0xd5
 8000d76:	481d      	ldr	r0, [pc, #116]	; (8000dec <HAL_GPIO_Init+0x284>)
 8000d78:	f7ff fbc1 	bl	80004fe <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	623b      	str	r3, [r7, #32]
          break;
 8000d82:	e081      	b.n	8000e88 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d00b      	beq.n	8000da4 <HAL_GPIO_Init+0x23c>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d007      	beq.n	8000da4 <HAL_GPIO_Init+0x23c>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x23c>
 8000d9c:	21dc      	movs	r1, #220	; 0xdc
 8000d9e:	4813      	ldr	r0, [pc, #76]	; (8000dec <HAL_GPIO_Init+0x284>)
 8000da0:	f7ff fbad 	bl	80004fe <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	3304      	adds	r3, #4
 8000daa:	623b      	str	r3, [r7, #32]
          break;
 8000dac:	e06c      	b.n	8000e88 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d00b      	beq.n	8000dce <HAL_GPIO_Init+0x266>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d007      	beq.n	8000dce <HAL_GPIO_Init+0x266>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x266>
 8000dc6:	21e3      	movs	r1, #227	; 0xe3
 8000dc8:	4808      	ldr	r0, [pc, #32]	; (8000dec <HAL_GPIO_Init+0x284>)
 8000dca:	f7ff fb98 	bl	80004fe <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	3308      	adds	r3, #8
 8000dd4:	623b      	str	r3, [r7, #32]
          break;
 8000dd6:	e057      	b.n	8000e88 <HAL_GPIO_Init+0x320>
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	40010c00 	.word	0x40010c00
 8000de0:	40011000 	.word	0x40011000
 8000de4:	40011400 	.word	0x40011400
 8000de8:	40011800 	.word	0x40011800
 8000dec:	0800811c 	.word	0x0800811c
 8000df0:	10110000 	.word	0x10110000
 8000df4:	10210000 	.word	0x10210000
 8000df8:	10310000 	.word	0x10310000
 8000dfc:	10120000 	.word	0x10120000
 8000e00:	10220000 	.word	0x10220000
 8000e04:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d00b      	beq.n	8000e28 <HAL_GPIO_Init+0x2c0>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d007      	beq.n	8000e28 <HAL_GPIO_Init+0x2c0>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x2c0>
 8000e20:	21ea      	movs	r1, #234	; 0xea
 8000e22:	4880      	ldr	r0, [pc, #512]	; (8001024 <HAL_GPIO_Init+0x4bc>)
 8000e24:	f7ff fb6b 	bl	80004fe <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	330c      	adds	r3, #12
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e02a      	b.n	8000e88 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00b      	beq.n	8000e52 <HAL_GPIO_Init+0x2ea>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d007      	beq.n	8000e52 <HAL_GPIO_Init+0x2ea>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x2ea>
 8000e4a:	21f7      	movs	r1, #247	; 0xf7
 8000e4c:	4875      	ldr	r0, [pc, #468]	; (8001024 <HAL_GPIO_Init+0x4bc>)
 8000e4e:	f7ff fb56 	bl	80004fe <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d102      	bne.n	8000e60 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	623b      	str	r3, [r7, #32]
          break;
 8000e5e:	e013      	b.n	8000e88 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d105      	bne.n	8000e74 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	611a      	str	r2, [r3, #16]
          break;
 8000e72:	e009      	b.n	8000e88 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e74:	2308      	movs	r3, #8
 8000e76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	615a      	str	r2, [r3, #20]
          break;
 8000e7e:	e003      	b.n	8000e88 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
          break;
 8000e84:	e000      	b.n	8000e88 <HAL_GPIO_Init+0x320>
          break;
 8000e86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	2bff      	cmp	r3, #255	; 0xff
 8000e8c:	d801      	bhi.n	8000e92 <HAL_GPIO_Init+0x32a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	e001      	b.n	8000e96 <HAL_GPIO_Init+0x32e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3304      	adds	r3, #4
 8000e96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	2bff      	cmp	r3, #255	; 0xff
 8000e9c:	d802      	bhi.n	8000ea4 <HAL_GPIO_Init+0x33c>
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	e002      	b.n	8000eaa <HAL_GPIO_Init+0x342>
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	3b08      	subs	r3, #8
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	210f      	movs	r1, #15
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	401a      	ands	r2, r3
 8000ebc:	6a39      	ldr	r1, [r7, #32]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 8096 	beq.w	8001004 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed8:	4b53      	ldr	r3, [pc, #332]	; (8001028 <HAL_GPIO_Init+0x4c0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a52      	ldr	r2, [pc, #328]	; (8001028 <HAL_GPIO_Init+0x4c0>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b50      	ldr	r3, [pc, #320]	; (8001028 <HAL_GPIO_Init+0x4c0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ef0:	4a4e      	ldr	r2, [pc, #312]	; (800102c <HAL_GPIO_Init+0x4c4>)
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a46      	ldr	r2, [pc, #280]	; (8001030 <HAL_GPIO_Init+0x4c8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d013      	beq.n	8000f44 <HAL_GPIO_Init+0x3dc>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a45      	ldr	r2, [pc, #276]	; (8001034 <HAL_GPIO_Init+0x4cc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d00d      	beq.n	8000f40 <HAL_GPIO_Init+0x3d8>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a44      	ldr	r2, [pc, #272]	; (8001038 <HAL_GPIO_Init+0x4d0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d007      	beq.n	8000f3c <HAL_GPIO_Init+0x3d4>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a43      	ldr	r2, [pc, #268]	; (800103c <HAL_GPIO_Init+0x4d4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d101      	bne.n	8000f38 <HAL_GPIO_Init+0x3d0>
 8000f34:	2303      	movs	r3, #3
 8000f36:	e006      	b.n	8000f46 <HAL_GPIO_Init+0x3de>
 8000f38:	2304      	movs	r3, #4
 8000f3a:	e004      	b.n	8000f46 <HAL_GPIO_Init+0x3de>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e002      	b.n	8000f46 <HAL_GPIO_Init+0x3de>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <HAL_GPIO_Init+0x3de>
 8000f44:	2300      	movs	r3, #0
 8000f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f48:	f002 0203 	and.w	r2, r2, #3
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	4093      	lsls	r3, r2
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f56:	4935      	ldr	r1, [pc, #212]	; (800102c <HAL_GPIO_Init+0x4c4>)
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f70:	4b33      	ldr	r3, [pc, #204]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4932      	ldr	r1, [pc, #200]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f7e:	4b30      	ldr	r3, [pc, #192]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	492e      	ldr	r1, [pc, #184]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d006      	beq.n	8000fa6 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	4928      	ldr	r1, [pc, #160]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4924      	ldr	r1, [pc, #144]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	491e      	ldr	r1, [pc, #120]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	608b      	str	r3, [r1, #8]
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	491a      	ldr	r1, [pc, #104]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000fd8:	4013      	ands	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d006      	beq.n	8000ff6 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	4914      	ldr	r1, [pc, #80]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	60cb      	str	r3, [r1, #12]
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	4910      	ldr	r1, [pc, #64]	; (8001040 <HAL_GPIO_Init+0x4d8>)
 8001000:	4013      	ands	r3, r2
 8001002:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	3301      	adds	r3, #1
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	f47f ae1e 	bne.w	8000c56 <HAL_GPIO_Init+0xee>
  }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	; 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	0800811c 	.word	0x0800811c
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000
 8001030:	40010800 	.word	0x40010800
 8001034:	40010c00 	.word	0x40010c00
 8001038:	40011000 	.word	0x40011000
 800103c:	40011400 	.word	0x40011400
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d004      	beq.n	8001064 <HAL_GPIO_WritePin+0x20>
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	0c1b      	lsrs	r3, r3, #16
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	2b00      	cmp	r3, #0
 8001062:	d004      	beq.n	800106e <HAL_GPIO_WritePin+0x2a>
 8001064:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001068:	480e      	ldr	r0, [pc, #56]	; (80010a4 <HAL_GPIO_WritePin+0x60>)
 800106a:	f7ff fa48 	bl	80004fe <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800106e:	787b      	ldrb	r3, [r7, #1]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_WritePin+0x40>
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d004      	beq.n	8001084 <HAL_GPIO_WritePin+0x40>
 800107a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800107e:	4809      	ldr	r0, [pc, #36]	; (80010a4 <HAL_GPIO_WritePin+0x60>)
 8001080:	f7ff fa3d 	bl	80004fe <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001090:	e003      	b.n	800109a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	611a      	str	r2, [r3, #16]
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	0800811c 	.word	0x0800811c

080010a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <HAL_GPIO_TogglePin+0x1c>
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	0c1b      	lsrs	r3, r3, #16
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <HAL_GPIO_TogglePin+0x26>
 80010c4:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80010c8:	480a      	ldr	r0, [pc, #40]	; (80010f4 <HAL_GPIO_TogglePin+0x4c>)
 80010ca:	f7ff fa18 	bl	80004fe <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d4:	887a      	ldrh	r2, [r7, #2]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4013      	ands	r3, r2
 80010da:	041a      	lsls	r2, r3, #16
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43d9      	mvns	r1, r3
 80010e0:	887b      	ldrh	r3, [r7, #2]
 80010e2:	400b      	ands	r3, r1
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	611a      	str	r2, [r3, #16]
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0800811c 	.word	0x0800811c

080010f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f806 	bl	8001128 <HAL_GPIO_EXTI_Callback>
  }
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40010400 	.word	0x40010400

08001128 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e35a      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d01c      	beq.n	8001190 <HAL_RCC_OscConfig+0x54>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d116      	bne.n	8001190 <HAL_RCC_OscConfig+0x54>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d110      	bne.n	8001190 <HAL_RCC_OscConfig+0x54>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10a      	bne.n	8001190 <HAL_RCC_OscConfig+0x54>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	2b00      	cmp	r3, #0
 8001184:	d104      	bne.n	8001190 <HAL_RCC_OscConfig+0x54>
 8001186:	f240 1167 	movw	r1, #359	; 0x167
 800118a:	488f      	ldr	r0, [pc, #572]	; (80013c8 <HAL_RCC_OscConfig+0x28c>)
 800118c:	f7ff f9b7 	bl	80004fe <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 809a 	beq.w	80012d2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00e      	beq.n	80011c4 <HAL_RCC_OscConfig+0x88>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ae:	d009      	beq.n	80011c4 <HAL_RCC_OscConfig+0x88>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b8:	d004      	beq.n	80011c4 <HAL_RCC_OscConfig+0x88>
 80011ba:	f240 116d 	movw	r1, #365	; 0x16d
 80011be:	4882      	ldr	r0, [pc, #520]	; (80013c8 <HAL_RCC_OscConfig+0x28c>)
 80011c0:	f7ff f99d 	bl	80004fe <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011c4:	4b81      	ldr	r3, [pc, #516]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d00c      	beq.n	80011ea <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011d0:	4b7e      	ldr	r3, [pc, #504]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d112      	bne.n	8001202 <HAL_RCC_OscConfig+0xc6>
 80011dc:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e8:	d10b      	bne.n	8001202 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ea:	4b78      	ldr	r3, [pc, #480]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d06c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x194>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d168      	bne.n	80012d0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e300      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120a:	d106      	bne.n	800121a <HAL_RCC_OscConfig+0xde>
 800120c:	4b6f      	ldr	r3, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a6e      	ldr	r2, [pc, #440]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e02e      	b.n	8001278 <HAL_RCC_OscConfig+0x13c>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x100>
 8001222:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a69      	ldr	r2, [pc, #420]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b67      	ldr	r3, [pc, #412]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a66      	ldr	r2, [pc, #408]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e01d      	b.n	8001278 <HAL_RCC_OscConfig+0x13c>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0x124>
 8001246:	4b61      	ldr	r3, [pc, #388]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a60      	ldr	r2, [pc, #384]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a5d      	ldr	r2, [pc, #372]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e00b      	b.n	8001278 <HAL_RCC_OscConfig+0x13c>
 8001260:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a59      	ldr	r2, [pc, #356]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a56      	ldr	r2, [pc, #344]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d013      	beq.n	80012a8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fb5a 	bl	8000938 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fb56 	bl	8000938 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e2b4      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x14c>
 80012a6:	e014      	b.n	80012d2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fb46 	bl	8000938 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fb42 	bl	8000938 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e2a0      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	4b42      	ldr	r3, [pc, #264]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x174>
 80012ce:	e000      	b.n	80012d2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8080 	beq.w	80013e0 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <HAL_RCC_OscConfig+0x1be>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d004      	beq.n	80012fa <HAL_RCC_OscConfig+0x1be>
 80012f0:	f240 11a1 	movw	r1, #417	; 0x1a1
 80012f4:	4834      	ldr	r0, [pc, #208]	; (80013c8 <HAL_RCC_OscConfig+0x28c>)
 80012f6:	f7ff f902 	bl	80004fe <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2b1f      	cmp	r3, #31
 8001300:	d904      	bls.n	800130c <HAL_RCC_OscConfig+0x1d0>
 8001302:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001306:	4830      	ldr	r0, [pc, #192]	; (80013c8 <HAL_RCC_OscConfig+0x28c>)
 8001308:	f7ff f8f9 	bl	80004fe <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00b      	beq.n	8001330 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b08      	cmp	r3, #8
 8001322:	d11c      	bne.n	800135e <HAL_RCC_OscConfig+0x222>
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d116      	bne.n	800135e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_RCC_OscConfig+0x20c>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d001      	beq.n	8001348 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e25d      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	491d      	ldr	r1, [pc, #116]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135c:	e040      	b.n	80013e0 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d020      	beq.n	80013a8 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_RCC_OscConfig+0x294>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fae4 	bl	8000938 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001374:	f7ff fae0 	bl	8000938 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e23e      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	490a      	ldr	r1, [pc, #40]	; (80013cc <HAL_RCC_OscConfig+0x290>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
 80013a6:	e01b      	b.n	80013e0 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_RCC_OscConfig+0x294>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fac3 	bl	8000938 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b4:	e00e      	b.n	80013d4 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fabf 	bl	8000938 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d907      	bls.n	80013d4 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e21d      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
 80013c8:	08008158 	.word	0x08008158
 80013cc:	40021000 	.word	0x40021000
 80013d0:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d4:	4b7d      	ldr	r3, [pc, #500]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1ea      	bne.n	80013b6 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d040      	beq.n	800146e <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_RCC_OscConfig+0x2ca>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d004      	beq.n	8001406 <HAL_RCC_OscConfig+0x2ca>
 80013fc:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001400:	4873      	ldr	r0, [pc, #460]	; (80015d0 <HAL_RCC_OscConfig+0x494>)
 8001402:	f7ff f87c 	bl	80004fe <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d019      	beq.n	8001442 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140e:	4b71      	ldr	r3, [pc, #452]	; (80015d4 <HAL_RCC_OscConfig+0x498>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001414:	f7ff fa90 	bl	8000938 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141c:	f7ff fa8c 	bl	8000938 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1ea      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800143a:	2001      	movs	r0, #1
 800143c:	f000 fc4e 	bl	8001cdc <RCC_Delay>
 8001440:	e015      	b.n	800146e <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001442:	4b64      	ldr	r3, [pc, #400]	; (80015d4 <HAL_RCC_OscConfig+0x498>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001448:	f7ff fa76 	bl	8000938 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fa72 	bl	8000938 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e1d0      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001462:	4b5a      	ldr	r3, [pc, #360]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 80bf 	beq.w	80015fa <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00c      	beq.n	80014a2 <HAL_RCC_OscConfig+0x366>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d008      	beq.n	80014a2 <HAL_RCC_OscConfig+0x366>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b05      	cmp	r3, #5
 8001496:	d004      	beq.n	80014a2 <HAL_RCC_OscConfig+0x366>
 8001498:	f240 2111 	movw	r1, #529	; 0x211
 800149c:	484c      	ldr	r0, [pc, #304]	; (80015d0 <HAL_RCC_OscConfig+0x494>)
 800149e:	f7ff f82e 	bl	80004fe <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10d      	bne.n	80014ca <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a46      	ldr	r2, [pc, #280]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b44      	ldr	r3, [pc, #272]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <HAL_RCC_OscConfig+0x49c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <HAL_RCC_OscConfig+0x49c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a3f      	ldr	r2, [pc, #252]	; (80015d8 <HAL_RCC_OscConfig+0x49c>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fa29 	bl	8000938 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fa25 	bl	8000938 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b64      	cmp	r3, #100	; 0x64
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e183      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <HAL_RCC_OscConfig+0x49c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x3e2>
 8001510:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4a2d      	ldr	r2, [pc, #180]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6213      	str	r3, [r2, #32]
 800151c:	e02d      	b.n	800157a <HAL_RCC_OscConfig+0x43e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x404>
 8001526:	4b29      	ldr	r3, [pc, #164]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a28      	ldr	r2, [pc, #160]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6213      	str	r3, [r2, #32]
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a25      	ldr	r2, [pc, #148]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6213      	str	r3, [r2, #32]
 800153e:	e01c      	b.n	800157a <HAL_RCC_OscConfig+0x43e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b05      	cmp	r3, #5
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x426>
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6213      	str	r3, [r2, #32]
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	e00b      	b.n	800157a <HAL_RCC_OscConfig+0x43e>
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4a19      	ldr	r2, [pc, #100]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6213      	str	r3, [r2, #32]
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4a16      	ldr	r2, [pc, #88]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d015      	beq.n	80015ae <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff f9d9 	bl	8000938 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff f9d5 	bl	8000938 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	; 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e131      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_RCC_OscConfig+0x490>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ee      	beq.n	800158a <HAL_RCC_OscConfig+0x44e>
 80015ac:	e01c      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff f9c3 	bl	8000938 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	e012      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff f9bf 	bl	8000938 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d909      	bls.n	80015dc <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e11b      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
 80015cc:	40021000 	.word	0x40021000
 80015d0:	08008158 	.word	0x08008158
 80015d4:	42420480 	.word	0x42420480
 80015d8:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015dc:	4b8b      	ldr	r3, [pc, #556]	; (800180c <HAL_RCC_OscConfig+0x6d0>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e6      	bne.n	80015b6 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d105      	bne.n	80015fa <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ee:	4b87      	ldr	r3, [pc, #540]	; (800180c <HAL_RCC_OscConfig+0x6d0>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a86      	ldr	r2, [pc, #536]	; (800180c <HAL_RCC_OscConfig+0x6d0>)
 80015f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f8:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00c      	beq.n	800161c <HAL_RCC_OscConfig+0x4e0>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d008      	beq.n	800161c <HAL_RCC_OscConfig+0x4e0>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d004      	beq.n	800161c <HAL_RCC_OscConfig+0x4e0>
 8001612:	f240 21af 	movw	r1, #687	; 0x2af
 8001616:	487e      	ldr	r0, [pc, #504]	; (8001810 <HAL_RCC_OscConfig+0x6d4>)
 8001618:	f7fe ff71 	bl	80004fe <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80ee 	beq.w	8001802 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001626:	4b79      	ldr	r3, [pc, #484]	; (800180c <HAL_RCC_OscConfig+0x6d0>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b08      	cmp	r3, #8
 8001630:	f000 80ce 	beq.w	80017d0 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	2b02      	cmp	r3, #2
 800163a:	f040 80b2 	bne.w	80017a2 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_RCC_OscConfig+0x51e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164e:	d004      	beq.n	800165a <HAL_RCC_OscConfig+0x51e>
 8001650:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001654:	486e      	ldr	r0, [pc, #440]	; (8001810 <HAL_RCC_OscConfig+0x6d4>)
 8001656:	f7fe ff52 	bl	80004fe <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	2b00      	cmp	r3, #0
 8001660:	d04a      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800166a:	d045      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001674:	d040      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800167e:	d03b      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001688:	d036      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001692:	d031      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800169c:	d02c      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80016a6:	d027      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016b0:	d022      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80016ba:	d01d      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80016c4:	d018      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80016ce:	d013      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80016d8:	d00e      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80016e2:	d009      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80016ec:	d004      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
 80016ee:	f240 21b9 	movw	r1, #697	; 0x2b9
 80016f2:	4847      	ldr	r0, [pc, #284]	; (8001810 <HAL_RCC_OscConfig+0x6d4>)
 80016f4:	f7fe ff03 	bl	80004fe <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f8:	4b46      	ldr	r3, [pc, #280]	; (8001814 <HAL_RCC_OscConfig+0x6d8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff f91b 	bl	8000938 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff f917 	bl	8000938 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e075      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	4b3c      	ldr	r3, [pc, #240]	; (800180c <HAL_RCC_OscConfig+0x6d0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172c:	d116      	bne.n	800175c <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <HAL_RCC_OscConfig+0x60e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800173e:	d004      	beq.n	800174a <HAL_RCC_OscConfig+0x60e>
 8001740:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001744:	4832      	ldr	r0, [pc, #200]	; (8001810 <HAL_RCC_OscConfig+0x6d4>)
 8001746:	f7fe feda 	bl	80004fe <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800174a:	4b30      	ldr	r3, [pc, #192]	; (800180c <HAL_RCC_OscConfig+0x6d0>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	492d      	ldr	r1, [pc, #180]	; (800180c <HAL_RCC_OscConfig+0x6d0>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_OscConfig+0x6d0>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a19      	ldr	r1, [r3, #32]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	430b      	orrs	r3, r1
 800176e:	4927      	ldr	r1, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x6d0>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <HAL_RCC_OscConfig+0x6d8>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff f8dd 	bl	8000938 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001782:	f7ff f8d9 	bl	8000938 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e037      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_RCC_OscConfig+0x6d0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x646>
 80017a0:	e02f      	b.n	8001802 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <HAL_RCC_OscConfig+0x6d8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff f8c6 	bl	8000938 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff f8c2 	bl	8000938 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e020      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_RCC_OscConfig+0x6d0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x674>
 80017ce:	e018      	b.n	8001802 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e013      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_OscConfig+0x6d0>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000
 8001810:	08008158 	.word	0x08008158
 8001814:	42420060 	.word	0x42420060

08001818 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e176      	b.n	8001b1a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d116      	bne.n	8001866 <HAL_RCC_ClockConfig+0x4e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d110      	bne.n	8001866 <HAL_RCC_ClockConfig+0x4e>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10a      	bne.n	8001866 <HAL_RCC_ClockConfig+0x4e>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <HAL_RCC_ClockConfig+0x4e>
 800185c:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001860:	4874      	ldr	r0, [pc, #464]	; (8001a34 <HAL_RCC_ClockConfig+0x21c>)
 8001862:	f7fe fe4c 	bl	80004fe <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <HAL_RCC_ClockConfig+0x6a>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d007      	beq.n	8001882 <HAL_RCC_ClockConfig+0x6a>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d004      	beq.n	8001882 <HAL_RCC_ClockConfig+0x6a>
 8001878:	f240 3139 	movw	r1, #825	; 0x339
 800187c:	486d      	ldr	r0, [pc, #436]	; (8001a34 <HAL_RCC_ClockConfig+0x21c>)
 800187e:	f7fe fe3e 	bl	80004fe <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001882:	4b6d      	ldr	r3, [pc, #436]	; (8001a38 <HAL_RCC_ClockConfig+0x220>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d910      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001890:	4b69      	ldr	r3, [pc, #420]	; (8001a38 <HAL_RCC_ClockConfig+0x220>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 0207 	bic.w	r2, r3, #7
 8001898:	4967      	ldr	r1, [pc, #412]	; (8001a38 <HAL_RCC_ClockConfig+0x220>)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a0:	4b65      	ldr	r3, [pc, #404]	; (8001a38 <HAL_RCC_ClockConfig+0x220>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d001      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e133      	b.n	8001b1a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d049      	beq.n	8001952 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_RCC_ClockConfig+0x224>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a5b      	ldr	r2, [pc, #364]	; (8001a3c <HAL_RCC_ClockConfig+0x224>)
 80018d0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018d4:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e2:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <HAL_RCC_ClockConfig+0x224>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4a55      	ldr	r2, [pc, #340]	; (8001a3c <HAL_RCC_ClockConfig+0x224>)
 80018e8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018ec:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d024      	beq.n	8001940 <HAL_RCC_ClockConfig+0x128>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b80      	cmp	r3, #128	; 0x80
 80018fc:	d020      	beq.n	8001940 <HAL_RCC_ClockConfig+0x128>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b90      	cmp	r3, #144	; 0x90
 8001904:	d01c      	beq.n	8001940 <HAL_RCC_ClockConfig+0x128>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2ba0      	cmp	r3, #160	; 0xa0
 800190c:	d018      	beq.n	8001940 <HAL_RCC_ClockConfig+0x128>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2bb0      	cmp	r3, #176	; 0xb0
 8001914:	d014      	beq.n	8001940 <HAL_RCC_ClockConfig+0x128>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2bc0      	cmp	r3, #192	; 0xc0
 800191c:	d010      	beq.n	8001940 <HAL_RCC_ClockConfig+0x128>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2bd0      	cmp	r3, #208	; 0xd0
 8001924:	d00c      	beq.n	8001940 <HAL_RCC_ClockConfig+0x128>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2be0      	cmp	r3, #224	; 0xe0
 800192c:	d008      	beq.n	8001940 <HAL_RCC_ClockConfig+0x128>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2bf0      	cmp	r3, #240	; 0xf0
 8001934:	d004      	beq.n	8001940 <HAL_RCC_ClockConfig+0x128>
 8001936:	f240 315f 	movw	r1, #863	; 0x35f
 800193a:	483e      	ldr	r0, [pc, #248]	; (8001a34 <HAL_RCC_ClockConfig+0x21c>)
 800193c:	f7fe fddf 	bl	80004fe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001940:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <HAL_RCC_ClockConfig+0x224>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	493b      	ldr	r1, [pc, #236]	; (8001a3c <HAL_RCC_ClockConfig+0x224>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d051      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00c      	beq.n	8001980 <HAL_RCC_ClockConfig+0x168>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d008      	beq.n	8001980 <HAL_RCC_ClockConfig+0x168>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d004      	beq.n	8001980 <HAL_RCC_ClockConfig+0x168>
 8001976:	f240 3166 	movw	r1, #870	; 0x366
 800197a:	482e      	ldr	r0, [pc, #184]	; (8001a34 <HAL_RCC_ClockConfig+0x21c>)
 800197c:	f7fe fdbf 	bl	80004fe <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d107      	bne.n	8001998 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <HAL_RCC_ClockConfig+0x224>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d115      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0c0      	b.n	8001b1a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d107      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a0:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_RCC_ClockConfig+0x224>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d109      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0b4      	b.n	8001b1a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_RCC_ClockConfig+0x224>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0ac      	b.n	8001b1a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <HAL_RCC_ClockConfig+0x224>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f023 0203 	bic.w	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	491b      	ldr	r1, [pc, #108]	; (8001a3c <HAL_RCC_ClockConfig+0x224>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d2:	f7fe ffb1 	bl	8000938 <HAL_GetTick>
 80019d6:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019da:	f7fe ffad 	bl	8000938 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e094      	b.n	8001b1a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_RCC_ClockConfig+0x224>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 020c 	and.w	r2, r3, #12
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d1eb      	bne.n	80019da <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_RCC_ClockConfig+0x220>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d217      	bcs.n	8001a40 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x220>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 0207 	bic.w	r2, r3, #7
 8001a18:	4907      	ldr	r1, [pc, #28]	; (8001a38 <HAL_RCC_ClockConfig+0x220>)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_RCC_ClockConfig+0x220>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d008      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e073      	b.n	8001b1a <HAL_RCC_ClockConfig+0x302>
 8001a32:	bf00      	nop
 8001a34:	08008158 	.word	0x08008158
 8001a38:	40022000 	.word	0x40022000
 8001a3c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d025      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d018      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x26e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5c:	d013      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x26e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a66:	d00e      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x26e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001a70:	d009      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x26e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a7a:	d004      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x26e>
 8001a7c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001a80:	4828      	ldr	r0, [pc, #160]	; (8001b24 <HAL_RCC_ClockConfig+0x30c>)
 8001a82:	f7fe fd3c 	bl	80004fe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a86:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <HAL_RCC_ClockConfig+0x310>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	4925      	ldr	r1, [pc, #148]	; (8001b28 <HAL_RCC_ClockConfig+0x310>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d026      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d018      	beq.n	8001ade <HAL_RCC_ClockConfig+0x2c6>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab4:	d013      	beq.n	8001ade <HAL_RCC_ClockConfig+0x2c6>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001abe:	d00e      	beq.n	8001ade <HAL_RCC_ClockConfig+0x2c6>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001ac8:	d009      	beq.n	8001ade <HAL_RCC_ClockConfig+0x2c6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ad2:	d004      	beq.n	8001ade <HAL_RCC_ClockConfig+0x2c6>
 8001ad4:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001ad8:	4812      	ldr	r0, [pc, #72]	; (8001b24 <HAL_RCC_ClockConfig+0x30c>)
 8001ada:	f7fe fd10 	bl	80004fe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_RCC_ClockConfig+0x310>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	490e      	ldr	r1, [pc, #56]	; (8001b28 <HAL_RCC_ClockConfig+0x310>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001af2:	f000 f821 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001af6:	4602      	mov	r2, r0
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_ClockConfig+0x310>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	490a      	ldr	r1, [pc, #40]	; (8001b2c <HAL_RCC_ClockConfig+0x314>)
 8001b04:	5ccb      	ldrb	r3, [r1, r3]
 8001b06:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0a:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <HAL_RCC_ClockConfig+0x318>)
 8001b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_RCC_ClockConfig+0x31c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd36 	bl	8000584 <HAL_InitTick>

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	08008158 	.word	0x08008158
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	0800830c 	.word	0x0800830c
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b490      	push	{r4, r7}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b3e:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b40:	1d3c      	adds	r4, r7, #4
 8001b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b48:	f240 2301 	movw	r3, #513	; 0x201
 8001b4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b62:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x40>
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x46>
 8001b76:	e02b      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b7a:	623b      	str	r3, [r7, #32]
      break;
 8001b7c:	e02b      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	3328      	adds	r3, #40	; 0x28
 8001b88:	443b      	add	r3, r7
 8001b8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b8e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d012      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	0c5b      	lsrs	r3, r3, #17
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	3328      	adds	r3, #40	; 0x28
 8001ba6:	443b      	add	r3, r7
 8001ba8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bb2:	fb03 f202 	mul.w	r2, r3, r2
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	e004      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	623b      	str	r3, [r7, #32]
      break;
 8001bce:	e002      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bd2:	623b      	str	r3, [r7, #32]
      break;
 8001bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3728      	adds	r7, #40	; 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc90      	pop	{r4, r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	08008190 	.word	0x08008190
 8001be8:	40021000 	.word	0x40021000
 8001bec:	007a1200 	.word	0x007a1200
 8001bf0:	003d0900 	.word	0x003d0900

08001bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	20000000 	.word	0x20000000

08001c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c0c:	f7ff fff2 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	4903      	ldr	r1, [pc, #12]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c1e:	5ccb      	ldrb	r3, [r1, r3]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	0800831c 	.word	0x0800831c

08001c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c34:	f7ff ffde 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0adb      	lsrs	r3, r3, #11
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4903      	ldr	r1, [pc, #12]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000
 8001c54:	0800831c 	.word	0x0800831c

08001c58 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d104      	bne.n	8001c72 <HAL_RCC_GetClockConfig+0x1a>
 8001c68:	f240 5123 	movw	r1, #1315	; 0x523
 8001c6c:	4818      	ldr	r0, [pc, #96]	; (8001cd0 <HAL_RCC_GetClockConfig+0x78>)
 8001c6e:	f7fe fc46 	bl	80004fe <assert_failed>
  assert_param(pFLatency != NULL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <HAL_RCC_GetClockConfig+0x2a>
 8001c78:	f240 5124 	movw	r1, #1316	; 0x524
 8001c7c:	4814      	ldr	r0, [pc, #80]	; (8001cd0 <HAL_RCC_GetClockConfig+0x78>)
 8001c7e:	f7fe fc3e 	bl	80004fe <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	220f      	movs	r2, #15
 8001c86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_RCC_GetClockConfig+0x7c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0203 	and.w	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_RCC_GetClockConfig+0x7c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_RCC_GetClockConfig+0x7c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCC_GetClockConfig+0x7c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_RCC_GetClockConfig+0x80>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0207 	and.w	r2, r3, #7
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	08008158 	.word	0x08008158
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40022000 	.word	0x40022000

08001cdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <RCC_Delay+0x34>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <RCC_Delay+0x38>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0a5b      	lsrs	r3, r3, #9
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cf8:	bf00      	nop
  }
  while (Delay --);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1e5a      	subs	r2, r3, #1
 8001cfe:	60fa      	str	r2, [r7, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f9      	bne.n	8001cf8 <RCC_Delay+0x1c>
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	20000000 	.word	0x20000000
 8001d14:	10624dd3 	.word	0x10624dd3

08001d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e093      	b.n	8001e52 <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a4b      	ldr	r2, [pc, #300]	; (8001e5c <HAL_TIM_Base_Init+0x144>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_TIM_Base_Init+0x44>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3c:	d00e      	beq.n	8001d5c <HAL_TIM_Base_Init+0x44>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a47      	ldr	r2, [pc, #284]	; (8001e60 <HAL_TIM_Base_Init+0x148>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_TIM_Base_Init+0x44>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a45      	ldr	r2, [pc, #276]	; (8001e64 <HAL_TIM_Base_Init+0x14c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_TIM_Base_Init+0x44>
 8001d52:	f240 1113 	movw	r1, #275	; 0x113
 8001d56:	4844      	ldr	r0, [pc, #272]	; (8001e68 <HAL_TIM_Base_Init+0x150>)
 8001d58:	f7fe fbd1 	bl	80004fe <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d014      	beq.n	8001d8e <HAL_TIM_Base_Init+0x76>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	d010      	beq.n	8001d8e <HAL_TIM_Base_Init+0x76>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d00c      	beq.n	8001d8e <HAL_TIM_Base_Init+0x76>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b40      	cmp	r3, #64	; 0x40
 8001d7a:	d008      	beq.n	8001d8e <HAL_TIM_Base_Init+0x76>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b60      	cmp	r3, #96	; 0x60
 8001d82:	d004      	beq.n	8001d8e <HAL_TIM_Base_Init+0x76>
 8001d84:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001d88:	4837      	ldr	r0, [pc, #220]	; (8001e68 <HAL_TIM_Base_Init+0x150>)
 8001d8a:	f7fe fbb8 	bl	80004fe <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00e      	beq.n	8001db4 <HAL_TIM_Base_Init+0x9c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d9e:	d009      	beq.n	8001db4 <HAL_TIM_Base_Init+0x9c>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da8:	d004      	beq.n	8001db4 <HAL_TIM_Base_Init+0x9c>
 8001daa:	f240 1115 	movw	r1, #277	; 0x115
 8001dae:	482e      	ldr	r0, [pc, #184]	; (8001e68 <HAL_TIM_Base_Init+0x150>)
 8001db0:	f7fe fba5 	bl	80004fe <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_TIM_Base_Init+0xb6>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b80      	cmp	r3, #128	; 0x80
 8001dc2:	d004      	beq.n	8001dce <HAL_TIM_Base_Init+0xb6>
 8001dc4:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001dc8:	4827      	ldr	r0, [pc, #156]	; (8001e68 <HAL_TIM_Base_Init+0x150>)
 8001dca:	f7fe fb98 	bl	80004fe <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f842 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3304      	adds	r3, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f000 f9d8 	bl	80021b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40012c00 	.word	0x40012c00
 8001e60:	40000400 	.word	0x40000400
 8001e64:	40000800 	.word	0x40000800
 8001e68:	080081a0 	.word	0x080081a0

08001e6c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a2e      	ldr	r2, [pc, #184]	; (8001f48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_TIM_Base_Start_IT+0x3a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9a:	d00e      	beq.n	8001eba <HAL_TIM_Base_Start_IT+0x3a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2a      	ldr	r2, [pc, #168]	; (8001f4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d009      	beq.n	8001eba <HAL_TIM_Base_Start_IT+0x3a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a29      	ldr	r2, [pc, #164]	; (8001f50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d004      	beq.n	8001eba <HAL_TIM_Base_Start_IT+0x3a>
 8001eb0:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001eb4:	4827      	ldr	r0, [pc, #156]	; (8001f54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001eb6:	f7fe fb22 	bl	80004fe <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d001      	beq.n	8001eca <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e03a      	b.n	8001f40 <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00e      	beq.n	8001f0a <HAL_TIM_Base_Start_IT+0x8a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef4:	d009      	beq.n	8001f0a <HAL_TIM_Base_Start_IT+0x8a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d004      	beq.n	8001f0a <HAL_TIM_Base_Start_IT+0x8a>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d111      	bne.n	8001f2e <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	d010      	beq.n	8001f3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2c:	e007      	b.n	8001f3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40012c00 	.word	0x40012c00
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	40000800 	.word	0x40000800
 8001f54:	080081a0 	.word	0x080081a0

08001f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0202 	mvn.w	r2, #2
 8001f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8ed 	bl	800217a <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8e0 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f8ef 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d122      	bne.n	8002008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d11b      	bne.n	8002008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0204 	mvn.w	r2, #4
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8c3 	bl	800217a <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8b6 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f8c5 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b08      	cmp	r3, #8
 8002014:	d122      	bne.n	800205c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b08      	cmp	r3, #8
 8002022:	d11b      	bne.n	800205c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0208 	mvn.w	r2, #8
 800202c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2204      	movs	r2, #4
 8002032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f899 	bl	800217a <HAL_TIM_IC_CaptureCallback>
 8002048:	e005      	b.n	8002056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f88c 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f89b 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b10      	cmp	r3, #16
 8002068:	d122      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b10      	cmp	r3, #16
 8002076:	d11b      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0210 	mvn.w	r2, #16
 8002080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2208      	movs	r2, #8
 8002086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f86f 	bl	800217a <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f862 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f871 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0201 	mvn.w	r2, #1
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe f9fa 	bl	80004d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e6:	2b80      	cmp	r3, #128	; 0x80
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d107      	bne.n	8002108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8bf 	bl	8002286 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b40      	cmp	r3, #64	; 0x40
 8002122:	d107      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f835 	bl	800219e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b20      	cmp	r3, #32
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b20      	cmp	r3, #32
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0220 	mvn.w	r2, #32
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f88a 	bl	8002274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a29      	ldr	r2, [pc, #164]	; (8002268 <TIM_Base_SetConfig+0xb8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00b      	beq.n	80021e0 <TIM_Base_SetConfig+0x30>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ce:	d007      	beq.n	80021e0 <TIM_Base_SetConfig+0x30>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a26      	ldr	r2, [pc, #152]	; (800226c <TIM_Base_SetConfig+0xbc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d003      	beq.n	80021e0 <TIM_Base_SetConfig+0x30>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a25      	ldr	r2, [pc, #148]	; (8002270 <TIM_Base_SetConfig+0xc0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d108      	bne.n	80021f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <TIM_Base_SetConfig+0xb8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00b      	beq.n	8002212 <TIM_Base_SetConfig+0x62>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002200:	d007      	beq.n	8002212 <TIM_Base_SetConfig+0x62>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a19      	ldr	r2, [pc, #100]	; (800226c <TIM_Base_SetConfig+0xbc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d003      	beq.n	8002212 <TIM_Base_SetConfig+0x62>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a18      	ldr	r2, [pc, #96]	; (8002270 <TIM_Base_SetConfig+0xc0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d108      	bne.n	8002224 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a07      	ldr	r2, [pc, #28]	; (8002268 <TIM_Base_SetConfig+0xb8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d103      	bne.n	8002258 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	615a      	str	r2, [r3, #20]
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	40012c00 	.word	0x40012c00
 800226c:	40000400 	.word	0x40000400
 8002270:	40000800 	.word	0x40000800

08002274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e092      	b.n	80023d0 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d02c      	beq.n	800230c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a48      	ldr	r2, [pc, #288]	; (80023d8 <HAL_UART_Init+0x140>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00e      	beq.n	80022da <HAL_UART_Init+0x42>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a46      	ldr	r2, [pc, #280]	; (80023dc <HAL_UART_Init+0x144>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d009      	beq.n	80022da <HAL_UART_Init+0x42>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a45      	ldr	r2, [pc, #276]	; (80023e0 <HAL_UART_Init+0x148>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d004      	beq.n	80022da <HAL_UART_Init+0x42>
 80022d0:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80022d4:	4843      	ldr	r0, [pc, #268]	; (80023e4 <HAL_UART_Init+0x14c>)
 80022d6:	f7fe f912 	bl	80004fe <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d028      	beq.n	8002334 <HAL_UART_Init+0x9c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ea:	d023      	beq.n	8002334 <HAL_UART_Init+0x9c>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f4:	d01e      	beq.n	8002334 <HAL_UART_Init+0x9c>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022fe:	d019      	beq.n	8002334 <HAL_UART_Init+0x9c>
 8002300:	f240 116d 	movw	r1, #365	; 0x16d
 8002304:	4837      	ldr	r0, [pc, #220]	; (80023e4 <HAL_UART_Init+0x14c>)
 8002306:	f7fe f8fa 	bl	80004fe <assert_failed>
 800230a:	e013      	b.n	8002334 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <HAL_UART_Init+0x140>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00e      	beq.n	8002334 <HAL_UART_Init+0x9c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a30      	ldr	r2, [pc, #192]	; (80023dc <HAL_UART_Init+0x144>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_UART_Init+0x9c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2e      	ldr	r2, [pc, #184]	; (80023e0 <HAL_UART_Init+0x148>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d004      	beq.n	8002334 <HAL_UART_Init+0x9c>
 800232a:	f240 1171 	movw	r1, #369	; 0x171
 800232e:	482d      	ldr	r0, [pc, #180]	; (80023e4 <HAL_UART_Init+0x14c>)
 8002330:	f7fe f8e5 	bl	80004fe <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <HAL_UART_Init+0xb8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002344:	d004      	beq.n	8002350 <HAL_UART_Init+0xb8>
 8002346:	f240 1173 	movw	r1, #371	; 0x173
 800234a:	4826      	ldr	r0, [pc, #152]	; (80023e4 <HAL_UART_Init+0x14c>)
 800234c:	f7fe f8d7 	bl	80004fe <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d106      	bne.n	800236a <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7fe fa5b 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2224      	movs	r2, #36	; 0x24
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002380:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f830 	bl	80023e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002396:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40004400 	.word	0x40004400
 80023e0:	40004800 	.word	0x40004800
 80023e4:	080081d8 	.word	0x080081d8

080023e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a5f      	ldr	r2, [pc, #380]	; (8002574 <UART_SetConfig+0x18c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d904      	bls.n	8002404 <UART_SetConfig+0x1c>
 80023fa:	f640 6153 	movw	r1, #3667	; 0xe53
 80023fe:	485e      	ldr	r0, [pc, #376]	; (8002578 <UART_SetConfig+0x190>)
 8002400:	f7fe f87d 	bl	80004fe <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <UART_SetConfig+0x38>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002414:	d004      	beq.n	8002420 <UART_SetConfig+0x38>
 8002416:	f640 6154 	movw	r1, #3668	; 0xe54
 800241a:	4857      	ldr	r0, [pc, #348]	; (8002578 <UART_SetConfig+0x190>)
 800241c:	f7fe f86f 	bl	80004fe <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00e      	beq.n	8002446 <UART_SetConfig+0x5e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002430:	d009      	beq.n	8002446 <UART_SetConfig+0x5e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800243a:	d004      	beq.n	8002446 <UART_SetConfig+0x5e>
 800243c:	f640 6155 	movw	r1, #3669	; 0xe55
 8002440:	484d      	ldr	r0, [pc, #308]	; (8002578 <UART_SetConfig+0x190>)
 8002442:	f7fe f85c 	bl	80004fe <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d103      	bne.n	800245c <UART_SetConfig+0x74>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d104      	bne.n	8002466 <UART_SetConfig+0x7e>
 800245c:	f640 6156 	movw	r1, #3670	; 0xe56
 8002460:	4845      	ldr	r0, [pc, #276]	; (8002578 <UART_SetConfig+0x190>)
 8002462:	f7fe f84c 	bl	80004fe <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002498:	f023 030c 	bic.w	r3, r3, #12
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	430b      	orrs	r3, r1
 80024a4:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699a      	ldr	r2, [r3, #24]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2e      	ldr	r2, [pc, #184]	; (800257c <UART_SetConfig+0x194>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d103      	bne.n	80024ce <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024c6:	f7ff fbb3 	bl	8001c30 <HAL_RCC_GetPCLK2Freq>
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	e002      	b.n	80024d4 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024ce:	f7ff fb9b 	bl	8001c08 <HAL_RCC_GetPCLK1Freq>
 80024d2:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	009a      	lsls	r2, r3, #2
 80024de:	441a      	add	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	4a25      	ldr	r2, [pc, #148]	; (8002580 <UART_SetConfig+0x198>)
 80024ec:	fba2 2303 	umull	r2, r3, r2, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	0119      	lsls	r1, r3, #4
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	009a      	lsls	r2, r3, #2
 80024fe:	441a      	add	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	fbb2 f2f3 	udiv	r2, r2, r3
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <UART_SetConfig+0x198>)
 800250c:	fba3 0302 	umull	r0, r3, r3, r2
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	2064      	movs	r0, #100	; 0x64
 8002514:	fb00 f303 	mul.w	r3, r0, r3
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	3332      	adds	r3, #50	; 0x32
 800251e:	4a18      	ldr	r2, [pc, #96]	; (8002580 <UART_SetConfig+0x198>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252a:	4419      	add	r1, r3
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	009a      	lsls	r2, r3, #2
 8002536:	441a      	add	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <UART_SetConfig+0x198>)
 8002544:	fba3 0302 	umull	r0, r3, r3, r2
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	2064      	movs	r0, #100	; 0x64
 800254c:	fb00 f303 	mul.w	r3, r0, r3
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	3332      	adds	r3, #50	; 0x32
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <UART_SetConfig+0x198>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	f003 020f 	and.w	r2, r3, #15
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	440a      	add	r2, r1
 8002568:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	0044aa20 	.word	0x0044aa20
 8002578:	080081d8 	.word	0x080081d8
 800257c:	40013800 	.word	0x40013800
 8002580:	51eb851f 	.word	0x51eb851f

08002584 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800258a:	f3ef 8305 	mrs	r3, IPSR
 800258e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002590:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002596:	f3ef 8310 	mrs	r3, PRIMASK
 800259a:	607b      	str	r3, [r7, #4]
  return(result);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <osKernelInitialize+0x32>
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <osKernelInitialize+0x60>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d109      	bne.n	80025be <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025aa:	f3ef 8311 	mrs	r3, BASEPRI
 80025ae:	603b      	str	r3, [r7, #0]
  return(result);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80025b6:	f06f 0305 	mvn.w	r3, #5
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e00c      	b.n	80025d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <osKernelInitialize+0x60>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d105      	bne.n	80025d2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <osKernelInitialize+0x60>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	e002      	b.n	80025d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80025d8:	68fb      	ldr	r3, [r7, #12]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	20000128 	.word	0x20000128

080025e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ee:	f3ef 8305 	mrs	r3, IPSR
 80025f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80025f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025fa:	f3ef 8310 	mrs	r3, PRIMASK
 80025fe:	607b      	str	r3, [r7, #4]
  return(result);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <osKernelStart+0x32>
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <osKernelStart+0x64>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d109      	bne.n	8002622 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800260e:	f3ef 8311 	mrs	r3, BASEPRI
 8002612:	603b      	str	r3, [r7, #0]
  return(result);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <osKernelStart+0x3a>
    stat = osErrorISR;
 800261a:	f06f 0305 	mvn.w	r3, #5
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e00e      	b.n	8002640 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <osKernelStart+0x64>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <osKernelStart+0x64>)
 800262c:	2202      	movs	r2, #2
 800262e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002630:	f001 f92e 	bl	8003890 <vTaskStartScheduler>
      stat = osOK;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	e002      	b.n	8002640 <osKernelStart+0x58>
    } else {
      stat = osError;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002640:	68fb      	ldr	r3, [r7, #12]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000128 	.word	0x20000128

08002650 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b092      	sub	sp, #72	; 0x48
 8002654:	af04      	add	r7, sp, #16
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002660:	f3ef 8305 	mrs	r3, IPSR
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002668:	2b00      	cmp	r3, #0
 800266a:	f040 8094 	bne.w	8002796 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800266e:	f3ef 8310 	mrs	r3, PRIMASK
 8002672:	623b      	str	r3, [r7, #32]
  return(result);
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 808d 	bne.w	8002796 <osThreadNew+0x146>
 800267c:	4b48      	ldr	r3, [pc, #288]	; (80027a0 <osThreadNew+0x150>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d106      	bne.n	8002692 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002684:	f3ef 8311 	mrs	r3, BASEPRI
 8002688:	61fb      	str	r3, [r7, #28]
  return(result);
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 8082 	bne.w	8002796 <osThreadNew+0x146>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d07e      	beq.n	8002796 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800269c:	2318      	movs	r3, #24
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80026a0:	2300      	movs	r3, #0
 80026a2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80026a4:	f107 031b 	add.w	r3, r7, #27
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d045      	beq.n	8002742 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <osThreadNew+0x74>
        name = attr->name;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <osThreadNew+0x9a>
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	2b38      	cmp	r3, #56	; 0x38
 80026dc:	d805      	bhi.n	80026ea <osThreadNew+0x9a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <osThreadNew+0x9e>
        return (NULL);
 80026ea:	2300      	movs	r3, #0
 80026ec:	e054      	b.n	8002798 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00e      	beq.n	8002724 <osThreadNew+0xd4>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2bbb      	cmp	r3, #187	; 0xbb
 800270c:	d90a      	bls.n	8002724 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <osThreadNew+0xd4>
        mem = 1;
 800271e:	2301      	movs	r3, #1
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
 8002722:	e010      	b.n	8002746 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10c      	bne.n	8002746 <osThreadNew+0xf6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d108      	bne.n	8002746 <osThreadNew+0xf6>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d104      	bne.n	8002746 <osThreadNew+0xf6>
          mem = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002740:	e001      	b.n	8002746 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	2b01      	cmp	r3, #1
 800274a:	d110      	bne.n	800276e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002754:	9202      	str	r2, [sp, #8]
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002760:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fe8e 	bl	8003484 <xTaskCreateStatic>
 8002768:	4603      	mov	r3, r0
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	e013      	b.n	8002796 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	2b00      	cmp	r3, #0
 8002772:	d110      	bne.n	8002796 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	b29a      	uxth	r2, r3
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 fed8 	bl	800353c <xTaskCreate>
 800278c:	4603      	mov	r3, r0
 800278e:	2b01      	cmp	r3, #1
 8002790:	d001      	beq.n	8002796 <osThreadNew+0x146>
          hTask = NULL;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002796:	697b      	ldr	r3, [r7, #20]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3738      	adds	r7, #56	; 0x38
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000128 	.word	0x20000128

080027a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027ac:	f3ef 8305 	mrs	r3, IPSR
 80027b0:	613b      	str	r3, [r7, #16]
  return(result);
 80027b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10f      	bne.n	80027d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b8:	f3ef 8310 	mrs	r3, PRIMASK
 80027bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <osDelay+0x34>
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <osDelay+0x58>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d109      	bne.n	80027e0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027cc:	f3ef 8311 	mrs	r3, BASEPRI
 80027d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <osDelay+0x3c>
    stat = osErrorISR;
 80027d8:	f06f 0305 	mvn.w	r3, #5
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e007      	b.n	80027f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f001 f818 	bl	8003820 <vTaskDelay>
    }
  }

  return (stat);
 80027f0:	697b      	ldr	r3, [r7, #20]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000128 	.word	0x20000128

08002800 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a06      	ldr	r2, [pc, #24]	; (8002828 <vApplicationGetIdleTaskMemory+0x28>)
 8002810:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4a05      	ldr	r2, [pc, #20]	; (800282c <vApplicationGetIdleTaskMemory+0x2c>)
 8002816:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2280      	movs	r2, #128	; 0x80
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	2000012c 	.word	0x2000012c
 800282c:	200001e8 	.word	0x200001e8

08002830 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a07      	ldr	r2, [pc, #28]	; (800285c <vApplicationGetTimerTaskMemory+0x2c>)
 8002840:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4a06      	ldr	r2, [pc, #24]	; (8002860 <vApplicationGetTimerTaskMemory+0x30>)
 8002846:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800284e:	601a      	str	r2, [r3, #0]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	200003e8 	.word	0x200003e8
 8002860:	200004a4 	.word	0x200004a4

08002864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f103 0208 	add.w	r2, r3, #8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f04f 32ff 	mov.w	r2, #4294967295
 800287c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f103 0208 	add.w	r2, r3, #8
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f103 0208 	add.w	r2, r3, #8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	601a      	str	r2, [r3, #0]
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d103      	bne.n	8002920 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e00c      	b.n	800293a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3308      	adds	r3, #8
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e002      	b.n	800292e <vListInsert+0x2e>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d2f6      	bcs.n	8002928 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	601a      	str	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6892      	ldr	r2, [r2, #8]
 8002986:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6852      	ldr	r2, [r2, #4]
 8002990:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d103      	bne.n	80029a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
	...

080029c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029ea:	bf00      	nop
 80029ec:	e7fe      	b.n	80029ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029ee:	f002 f905 	bl	8004bfc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	68f9      	ldr	r1, [r7, #12]
 80029fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	441a      	add	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	68f9      	ldr	r1, [r7, #12]
 8002a22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	441a      	add	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	22ff      	movs	r2, #255	; 0xff
 8002a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	22ff      	movs	r2, #255	; 0xff
 8002a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d114      	bne.n	8002a6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01a      	beq.n	8002a82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3310      	adds	r3, #16
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 f9e9 	bl	8003e28 <xTaskRemoveFromEventList>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d012      	beq.n	8002a82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <xQueueGenericReset+0xcc>)
 8002a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	e009      	b.n	8002a82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3310      	adds	r3, #16
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fef6 	bl	8002864 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3324      	adds	r3, #36	; 0x24
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fef1 	bl	8002864 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a82:	f002 f8eb 	bl	8004c5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a86:	2301      	movs	r3, #1
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	e000ed04 	.word	0xe000ed04

08002a94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08e      	sub	sp, #56	; 0x38
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ad6:	bf00      	nop
 8002ad8:	e7fe      	b.n	8002ad8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <xQueueGenericCreateStatic+0x52>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <xQueueGenericCreateStatic+0x56>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <xQueueGenericCreateStatic+0x58>
 8002aea:	2300      	movs	r3, #0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	623b      	str	r3, [r7, #32]
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <xQueueGenericCreateStatic+0x7e>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <xQueueGenericCreateStatic+0x82>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <xQueueGenericCreateStatic+0x84>
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	61fb      	str	r3, [r7, #28]
}
 8002b2e:	bf00      	nop
 8002b30:	e7fe      	b.n	8002b30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b32:	2350      	movs	r3, #80	; 0x50
 8002b34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b50      	cmp	r3, #80	; 0x50
 8002b3a:	d00a      	beq.n	8002b52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	61bb      	str	r3, [r7, #24]
}
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b64:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f805 	bl	8002b82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3730      	adds	r7, #48	; 0x30
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d103      	bne.n	8002b9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	e002      	b.n	8002ba4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	69b8      	ldr	r0, [r7, #24]
 8002bb4:	f7ff ff06 	bl	80029c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	68f9      	ldr	r1, [r7, #12]
 8002bc6:	2073      	movs	r0, #115	; 0x73
 8002bc8:	f003 f996 	bl	8005ef8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b090      	sub	sp, #64	; 0x40
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002be2:	2300      	movs	r3, #0
 8002be4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <xQueueGenericSend+0x32>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d103      	bne.n	8002c14 <xQueueGenericSend+0x40>
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <xQueueGenericSend+0x44>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <xQueueGenericSend+0x46>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10a      	bne.n	8002c34 <xQueueGenericSend+0x60>
	__asm volatile
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c30:	bf00      	nop
 8002c32:	e7fe      	b.n	8002c32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d103      	bne.n	8002c42 <xQueueGenericSend+0x6e>
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <xQueueGenericSend+0x72>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <xQueueGenericSend+0x74>
 8002c46:	2300      	movs	r3, #0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <xQueueGenericSend+0x8e>
	__asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	623b      	str	r3, [r7, #32]
}
 8002c5e:	bf00      	nop
 8002c60:	e7fe      	b.n	8002c60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c62:	f001 fae3 	bl	800422c <xTaskGetSchedulerState>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <xQueueGenericSend+0x9e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <xQueueGenericSend+0xa2>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <xQueueGenericSend+0xa4>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10a      	bne.n	8002c92 <xQueueGenericSend+0xbe>
	__asm volatile
 8002c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	61fb      	str	r3, [r7, #28]
}
 8002c8e:	bf00      	nop
 8002c90:	e7fe      	b.n	8002c90 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c92:	f001 ffb3 	bl	8004bfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <xQueueGenericSend+0xd4>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d136      	bne.n	8002d16 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 fde0 	bl	8006870 <SEGGER_SYSVIEW_ShrinkId>
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4601      	mov	r1, r0
 8002cbc:	205a      	movs	r0, #90	; 0x5a
 8002cbe:	f003 f991 	bl	8005fe4 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cc8:	f000 fa66 	bl	8003198 <prvCopyDataToQueue>
 8002ccc:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d010      	beq.n	8002cf8 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	3324      	adds	r3, #36	; 0x24
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f8a4 	bl	8003e28 <xTaskRemoveFromEventList>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d013      	beq.n	8002d0e <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ce6:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <xQueueGenericSend+0x248>)
 8002ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	e00a      	b.n	8002d0e <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cfe:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <xQueueGenericSend+0x248>)
 8002d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d0e:	f001 ffa5 	bl	8004c5c <vPortExitCritical>
				return pdPASS;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e07d      	b.n	8002e12 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d110      	bne.n	8002d3e <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d1c:	f001 ff9e 	bl	8004c5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 fda4 	bl	8006870 <SEGGER_SYSVIEW_ShrinkId>
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	460b      	mov	r3, r1
 8002d32:	4601      	mov	r1, r0
 8002d34:	205a      	movs	r0, #90	; 0x5a
 8002d36:	f003 f955 	bl	8005fe4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e069      	b.n	8002e12 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 f8d5 	bl	8003ef8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d52:	f001 ff83 	bl	8004c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d56:	f000 fe0b 	bl	8003970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d5a:	f001 ff4f 	bl	8004bfc <vPortEnterCritical>
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d64:	b25b      	sxtb	r3, r3
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d103      	bne.n	8002d74 <xQueueGenericSend+0x1a0>
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d7a:	b25b      	sxtb	r3, r3
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d103      	bne.n	8002d8a <xQueueGenericSend+0x1b6>
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d8a:	f001 ff67 	bl	8004c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d8e:	1d3a      	adds	r2, r7, #4
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 f8c4 	bl	8003f24 <xTaskCheckForTimeOut>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d124      	bne.n	8002dec <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002da4:	f000 faf0 	bl	8003388 <prvIsQueueFull>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d018      	beq.n	8002de0 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	3310      	adds	r3, #16
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 ffe4 	bl	8003d84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dbe:	f000 fa7b 	bl	80032b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dc2:	f000 fde3 	bl	800398c <xTaskResumeAll>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f47f af62 	bne.w	8002c92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <xQueueGenericSend+0x248>)
 8002dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	e758      	b.n	8002c92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002de2:	f000 fa69 	bl	80032b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002de6:	f000 fdd1 	bl	800398c <xTaskResumeAll>
 8002dea:	e752      	b.n	8002c92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dee:	f000 fa63 	bl	80032b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002df2:	f000 fdcb 	bl	800398c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f003 fd39 	bl	8006870 <SEGGER_SYSVIEW_ShrinkId>
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	460b      	mov	r3, r1
 8002e08:	4601      	mov	r1, r0
 8002e0a:	205a      	movs	r0, #90	; 0x5a
 8002e0c:	f003 f8ea 	bl	8005fe4 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8002e10:	2300      	movs	r3, #0
		}
	}
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3738      	adds	r7, #56	; 0x38
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	e000ed04 	.word	0xe000ed04

08002e20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08e      	sub	sp, #56	; 0x38
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d103      	bne.n	8002e5c <xQueueGenericSendFromISR+0x3c>
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <xQueueGenericSendFromISR+0x40>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <xQueueGenericSendFromISR+0x42>
 8002e60:	2300      	movs	r3, #0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10a      	bne.n	8002e7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	623b      	str	r3, [r7, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	e7fe      	b.n	8002e7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d103      	bne.n	8002e8a <xQueueGenericSendFromISR+0x6a>
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <xQueueGenericSendFromISR+0x6e>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <xQueueGenericSendFromISR+0x70>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	61fb      	str	r3, [r7, #28]
}
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002eaa:	f001 ff69 	bl	8004d80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002eae:	f3ef 8211 	mrs	r2, BASEPRI
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	61ba      	str	r2, [r7, #24]
 8002ec4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ec6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <xQueueGenericSendFromISR+0xbc>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d136      	bne.n	8002f4a <xQueueGenericSendFromISR+0x12a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 fcc1 	bl	8006870 <SEGGER_SYSVIEW_ShrinkId>
 8002eee:	4601      	mov	r1, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2060      	movs	r0, #96	; 0x60
 8002ef6:	f002 ffa5 	bl	8005e44 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f00:	f000 f94a 	bl	8003198 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d112      	bne.n	8002f34 <xQueueGenericSendFromISR+0x114>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <xQueueGenericSendFromISR+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f18:	3324      	adds	r3, #36	; 0x24
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 ff84 	bl	8003e28 <xTaskRemoveFromEventList>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <xQueueGenericSendFromISR+0x124>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <xQueueGenericSendFromISR+0x124>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e007      	b.n	8002f44 <xQueueGenericSendFromISR+0x124>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f38:	3301      	adds	r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	b25a      	sxtb	r2, r3
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f44:	2301      	movs	r3, #1
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002f48:	e00b      	b.n	8002f62 <xQueueGenericSendFromISR+0x142>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fc8f 	bl	8006870 <SEGGER_SYSVIEW_ShrinkId>
 8002f52:	4601      	mov	r1, r0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	461a      	mov	r2, r3
 8002f58:	2060      	movs	r0, #96	; 0x60
 8002f5a:	f002 ff73 	bl	8005e44 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	637b      	str	r3, [r7, #52]	; 0x34
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3738      	adds	r7, #56	; 0x38
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b08f      	sub	sp, #60	; 0x3c
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <xQueueReceive+0x30>
	__asm volatile
 8002f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	623b      	str	r3, [r7, #32]
}
 8002fa4:	bf00      	nop
 8002fa6:	e7fe      	b.n	8002fa6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <xQueueReceive+0x3e>
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <xQueueReceive+0x42>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <xQueueReceive+0x44>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <xQueueReceive+0x5e>
	__asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	61fb      	str	r3, [r7, #28]
}
 8002fd2:	bf00      	nop
 8002fd4:	e7fe      	b.n	8002fd4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fd6:	f001 f929 	bl	800422c <xTaskGetSchedulerState>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <xQueueReceive+0x6e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <xQueueReceive+0x72>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <xQueueReceive+0x74>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <xQueueReceive+0x8e>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	61bb      	str	r3, [r7, #24]
}
 8003002:	bf00      	nop
 8003004:	e7fe      	b.n	8003004 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003006:	f001 fdf9 	bl	8004bfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	2b00      	cmp	r3, #0
 8003014:	d02f      	beq.n	8003076 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800301a:	f000 f927 	bl	800326c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	4618      	mov	r0, r3
 8003022:	f003 fc25 	bl	8006870 <SEGGER_SYSVIEW_ShrinkId>
 8003026:	4604      	mov	r4, r0
 8003028:	2000      	movs	r0, #0
 800302a:	f003 fc21 	bl	8006870 <SEGGER_SYSVIEW_ShrinkId>
 800302e:	4602      	mov	r2, r0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2101      	movs	r1, #1
 8003034:	9100      	str	r1, [sp, #0]
 8003036:	4621      	mov	r1, r4
 8003038:	205c      	movs	r0, #92	; 0x5c
 800303a:	f002 ffd3 	bl	8005fe4 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00f      	beq.n	800306e <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	3310      	adds	r3, #16
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fee8 	bl	8003e28 <xTaskRemoveFromEventList>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800305e:	4b4d      	ldr	r3, [pc, #308]	; (8003194 <xQueueReceive+0x21c>)
 8003060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800306e:	f001 fdf5 	bl	8004c5c <vPortExitCritical>
				return pdPASS;
 8003072:	2301      	movs	r3, #1
 8003074:	e08a      	b.n	800318c <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d113      	bne.n	80030a4 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800307c:	f001 fdee 	bl	8004c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	4618      	mov	r0, r3
 8003084:	f003 fbf4 	bl	8006870 <SEGGER_SYSVIEW_ShrinkId>
 8003088:	4604      	mov	r4, r0
 800308a:	2000      	movs	r0, #0
 800308c:	f003 fbf0 	bl	8006870 <SEGGER_SYSVIEW_ShrinkId>
 8003090:	4602      	mov	r2, r0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2101      	movs	r1, #1
 8003096:	9100      	str	r1, [sp, #0]
 8003098:	4621      	mov	r1, r4
 800309a:	205c      	movs	r0, #92	; 0x5c
 800309c:	f002 ffa2 	bl	8005fe4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80030a0:	2300      	movs	r3, #0
 80030a2:	e073      	b.n	800318c <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030aa:	f107 0310 	add.w	r3, r7, #16
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 ff22 	bl	8003ef8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030b8:	f001 fdd0 	bl	8004c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030bc:	f000 fc58 	bl	8003970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030c0:	f001 fd9c 	bl	8004bfc <vPortEnterCritical>
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ca:	b25b      	sxtb	r3, r3
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d103      	bne.n	80030da <xQueueReceive+0x162>
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030e0:	b25b      	sxtb	r3, r3
 80030e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e6:	d103      	bne.n	80030f0 <xQueueReceive+0x178>
 80030e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030f0:	f001 fdb4 	bl	8004c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030f4:	1d3a      	adds	r2, r7, #4
 80030f6:	f107 0310 	add.w	r3, r7, #16
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 ff11 	bl	8003f24 <xTaskCheckForTimeOut>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d124      	bne.n	8003152 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800310a:	f000 f927 	bl	800335c <prvIsQueueEmpty>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d018      	beq.n	8003146 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	3324      	adds	r3, #36	; 0x24
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fe31 	bl	8003d84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003124:	f000 f8c8 	bl	80032b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003128:	f000 fc30 	bl	800398c <xTaskResumeAll>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	f47f af69 	bne.w	8003006 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003134:	4b17      	ldr	r3, [pc, #92]	; (8003194 <xQueueReceive+0x21c>)
 8003136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	e75f      	b.n	8003006 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003148:	f000 f8b6 	bl	80032b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800314c:	f000 fc1e 	bl	800398c <xTaskResumeAll>
 8003150:	e759      	b.n	8003006 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003154:	f000 f8b0 	bl	80032b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003158:	f000 fc18 	bl	800398c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800315c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800315e:	f000 f8fd 	bl	800335c <prvIsQueueEmpty>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	f43f af4e 	beq.w	8003006 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	4618      	mov	r0, r3
 800316e:	f003 fb7f 	bl	8006870 <SEGGER_SYSVIEW_ShrinkId>
 8003172:	4604      	mov	r4, r0
 8003174:	2000      	movs	r0, #0
 8003176:	f003 fb7b 	bl	8006870 <SEGGER_SYSVIEW_ShrinkId>
 800317a:	4602      	mov	r2, r0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2101      	movs	r1, #1
 8003180:	9100      	str	r1, [sp, #0]
 8003182:	4621      	mov	r1, r4
 8003184:	205c      	movs	r0, #92	; 0x5c
 8003186:	f002 ff2d 	bl	8005fe4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800318a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800318c:	4618      	mov	r0, r3
 800318e:	3734      	adds	r7, #52	; 0x34
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	e000ed04 	.word	0xe000ed04

08003198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10d      	bne.n	80031d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d14d      	bne.n	800325a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 f850 	bl	8004268 <xTaskPriorityDisinherit>
 80031c8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	e043      	b.n	800325a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d119      	bne.n	800320c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6898      	ldr	r0, [r3, #8]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	461a      	mov	r2, r3
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	f003 ff23 	bl	800702e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	441a      	add	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d32b      	bcc.n	800325a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	e026      	b.n	800325a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68d8      	ldr	r0, [r3, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	461a      	mov	r2, r3
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	f003 ff09 	bl	800702e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	425b      	negs	r3, r3
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d207      	bcs.n	8003248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	425b      	negs	r3, r3
 8003242:	441a      	add	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d105      	bne.n	800325a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	3b01      	subs	r3, #1
 8003258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003262:	697b      	ldr	r3, [r7, #20]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d018      	beq.n	80032b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	441a      	add	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d303      	bcc.n	80032a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68d9      	ldr	r1, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	461a      	mov	r2, r3
 80032aa:	6838      	ldr	r0, [r7, #0]
 80032ac:	f003 febf 	bl	800702e <memcpy>
	}
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032c0:	f001 fc9c 	bl	8004bfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032cc:	e011      	b.n	80032f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3324      	adds	r3, #36	; 0x24
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fda4 	bl	8003e28 <xTaskRemoveFromEventList>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032e6:	f000 fe7f 	bl	8003fe8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	dce9      	bgt.n	80032ce <prvUnlockQueue+0x16>
 80032fa:	e000      	b.n	80032fe <prvUnlockQueue+0x46>
					break;
 80032fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	22ff      	movs	r2, #255	; 0xff
 8003302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003306:	f001 fca9 	bl	8004c5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800330a:	f001 fc77 	bl	8004bfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003314:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003316:	e011      	b.n	800333c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3310      	adds	r3, #16
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fd7f 	bl	8003e28 <xTaskRemoveFromEventList>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003330:	f000 fe5a 	bl	8003fe8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003334:	7bbb      	ldrb	r3, [r7, #14]
 8003336:	3b01      	subs	r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800333c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003340:	2b00      	cmp	r3, #0
 8003342:	dce9      	bgt.n	8003318 <prvUnlockQueue+0x60>
 8003344:	e000      	b.n	8003348 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003346:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	22ff      	movs	r2, #255	; 0xff
 800334c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003350:	f001 fc84 	bl	8004c5c <vPortExitCritical>
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003364:	f001 fc4a 	bl	8004bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003370:	2301      	movs	r3, #1
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e001      	b.n	800337a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800337a:	f001 fc6f 	bl	8004c5c <vPortExitCritical>

	return xReturn;
 800337e:	68fb      	ldr	r3, [r7, #12]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003390:	f001 fc34 	bl	8004bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	429a      	cmp	r2, r3
 800339e:	d102      	bne.n	80033a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	e001      	b.n	80033aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033aa:	f001 fc57 	bl	8004c5c <vPortExitCritical>

	return xReturn;
 80033ae:	68fb      	ldr	r3, [r7, #12]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	e01e      	b.n	8003406 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033c8:	4a13      	ldr	r2, [pc, #76]	; (8003418 <vQueueAddToRegistry+0x60>)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d115      	bne.n	8003400 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033d4:	4910      	ldr	r1, [pc, #64]	; (8003418 <vQueueAddToRegistry+0x60>)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033de:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <vQueueAddToRegistry+0x60>)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 fa3f 	bl	8006870 <SEGGER_SYSVIEW_ShrinkId>
 80033f2:	4601      	mov	r1, r0
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	2071      	movs	r0, #113	; 0x71
 80033fa:	f002 fd23 	bl	8005e44 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80033fe:	e006      	b.n	800340e <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b07      	cmp	r3, #7
 800340a:	d9dd      	bls.n	80033c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	200008a4 	.word	0x200008a4

0800341c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800342c:	f001 fbe6 	bl	8004bfc <vPortEnterCritical>
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003436:	b25b      	sxtb	r3, r3
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343c:	d103      	bne.n	8003446 <vQueueWaitForMessageRestricted+0x2a>
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800344c:	b25b      	sxtb	r3, r3
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d103      	bne.n	800345c <vQueueWaitForMessageRestricted+0x40>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800345c:	f001 fbfe 	bl	8004c5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	2b00      	cmp	r3, #0
 8003466:	d106      	bne.n	8003476 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3324      	adds	r3, #36	; 0x24
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fcab 	bl	8003dcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003476:	6978      	ldr	r0, [r7, #20]
 8003478:	f7ff ff1e 	bl	80032b8 <prvUnlockQueue>
	}
 800347c:	bf00      	nop
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08e      	sub	sp, #56	; 0x38
 8003488:	af04      	add	r7, sp, #16
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	623b      	str	r3, [r7, #32]
}
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <xTaskCreateStatic+0x46>
	__asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	61fb      	str	r3, [r7, #28]
}
 80034c6:	bf00      	nop
 80034c8:	e7fe      	b.n	80034c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034ca:	23bc      	movs	r3, #188	; 0xbc
 80034cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2bbc      	cmp	r3, #188	; 0xbc
 80034d2:	d00a      	beq.n	80034ea <xTaskCreateStatic+0x66>
	__asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	61bb      	str	r3, [r7, #24]
}
 80034e6:	bf00      	nop
 80034e8:	e7fe      	b.n	80034e8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01e      	beq.n	800352e <xTaskCreateStatic+0xaa>
 80034f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01b      	beq.n	800352e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	2202      	movs	r2, #2
 8003504:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003508:	2300      	movs	r3, #0
 800350a:	9303      	str	r3, [sp, #12]
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f851 	bl	80035c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003528:	f000 f8ec 	bl	8003704 <prvAddNewTaskToReadyList>
 800352c:	e001      	b.n	8003532 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003532:	697b      	ldr	r3, [r7, #20]
	}
 8003534:	4618      	mov	r0, r3
 8003536:	3728      	adds	r7, #40	; 0x28
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08c      	sub	sp, #48	; 0x30
 8003540:	af04      	add	r7, sp, #16
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4618      	mov	r0, r3
 8003552:	f001 fc53 	bl	8004dfc <pvPortMalloc>
 8003556:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00e      	beq.n	800357c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800355e:	20bc      	movs	r0, #188	; 0xbc
 8003560:	f001 fc4c 	bl	8004dfc <pvPortMalloc>
 8003564:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
 8003572:	e005      	b.n	8003580 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003574:	6978      	ldr	r0, [r7, #20]
 8003576:	f001 fd05 	bl	8004f84 <vPortFree>
 800357a:	e001      	b.n	8003580 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d017      	beq.n	80035b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	2300      	movs	r3, #0
 8003592:	9303      	str	r3, [sp, #12]
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	9302      	str	r3, [sp, #8]
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f80f 	bl	80035c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035aa:	69f8      	ldr	r0, [r7, #28]
 80035ac:	f000 f8aa 	bl	8003704 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035b0:	2301      	movs	r3, #1
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	e002      	b.n	80035bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035bc:	69bb      	ldr	r3, [r7, #24]
	}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	461a      	mov	r2, r3
 80035e0:	21a5      	movs	r1, #165	; 0xa5
 80035e2:	f003 fd32 	bl	800704a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035f0:	3b01      	subs	r3, #1
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	f023 0307 	bic.w	r3, r3, #7
 80035fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <prvInitialiseNewTask+0x58>
	__asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	617b      	str	r3, [r7, #20]
}
 800361c:	bf00      	nop
 800361e:	e7fe      	b.n	800361e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	e012      	b.n	800364c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	7819      	ldrb	r1, [r3, #0]
 800362e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	4413      	add	r3, r2
 8003634:	3334      	adds	r3, #52	; 0x34
 8003636:	460a      	mov	r2, r1
 8003638:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d006      	beq.n	8003654 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3301      	adds	r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b0f      	cmp	r3, #15
 8003650:	d9e9      	bls.n	8003626 <prvInitialiseNewTask+0x5e>
 8003652:	e000      	b.n	8003656 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003654:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	2b37      	cmp	r3, #55	; 0x37
 8003662:	d901      	bls.n	8003668 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003664:	2337      	movs	r3, #55	; 0x37
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800366c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003672:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	2200      	movs	r2, #0
 8003678:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	3304      	adds	r3, #4
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff f90f 	bl	80028a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	3318      	adds	r3, #24
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff f90a 	bl	80028a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003692:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	3354      	adds	r3, #84	; 0x54
 80036b8:	2260      	movs	r2, #96	; 0x60
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 fcc4 	bl	800704a <memset>
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <prvInitialiseNewTask+0x130>)
 80036c6:	659a      	str	r2, [r3, #88]	; 0x58
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	4a0c      	ldr	r2, [pc, #48]	; (80036fc <prvInitialiseNewTask+0x134>)
 80036cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <prvInitialiseNewTask+0x138>)
 80036d2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	69b8      	ldr	r0, [r7, #24]
 80036da:	f001 f9a1 	bl	8004a20 <pxPortInitialiseStack>
 80036de:	4602      	mov	r2, r0
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036f0:	bf00      	nop
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	08008358 	.word	0x08008358
 80036fc:	08008378 	.word	0x08008378
 8003700:	08008338 	.word	0x08008338

08003704 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003704:	b5b0      	push	{r4, r5, r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af02      	add	r7, sp, #8
 800370a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800370c:	f001 fa76 	bl	8004bfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003710:	4b3c      	ldr	r3, [pc, #240]	; (8003804 <prvAddNewTaskToReadyList+0x100>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	4a3b      	ldr	r2, [pc, #236]	; (8003804 <prvAddNewTaskToReadyList+0x100>)
 8003718:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800371a:	4b3b      	ldr	r3, [pc, #236]	; (8003808 <prvAddNewTaskToReadyList+0x104>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003722:	4a39      	ldr	r2, [pc, #228]	; (8003808 <prvAddNewTaskToReadyList+0x104>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003728:	4b36      	ldr	r3, [pc, #216]	; (8003804 <prvAddNewTaskToReadyList+0x100>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d110      	bne.n	8003752 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003730:	f000 fc7e 	bl	8004030 <prvInitialiseTaskLists>
 8003734:	e00d      	b.n	8003752 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003736:	4b35      	ldr	r3, [pc, #212]	; (800380c <prvAddNewTaskToReadyList+0x108>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800373e:	4b32      	ldr	r3, [pc, #200]	; (8003808 <prvAddNewTaskToReadyList+0x104>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	429a      	cmp	r2, r3
 800374a:	d802      	bhi.n	8003752 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800374c:	4a2e      	ldr	r2, [pc, #184]	; (8003808 <prvAddNewTaskToReadyList+0x104>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003752:	4b2f      	ldr	r3, [pc, #188]	; (8003810 <prvAddNewTaskToReadyList+0x10c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <prvAddNewTaskToReadyList+0x10c>)
 800375a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800375c:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <prvAddNewTaskToReadyList+0x10c>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d016      	beq.n	8003798 <prvAddNewTaskToReadyList+0x94>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4618      	mov	r0, r3
 800376e:	f002 ffb3 	bl	80066d8 <SEGGER_SYSVIEW_OnTaskCreate>
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	461d      	mov	r5, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461c      	mov	r4, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	1ae3      	subs	r3, r4, r3
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	462b      	mov	r3, r5
 8003794:	f003 fa8e 	bl	8006cb4 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4618      	mov	r0, r3
 800379c:	f003 f824 	bl	80067e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <prvAddNewTaskToReadyList+0x110>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d903      	bls.n	80037b4 <prvAddNewTaskToReadyList+0xb0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	4a18      	ldr	r2, [pc, #96]	; (8003814 <prvAddNewTaskToReadyList+0x110>)
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4a15      	ldr	r2, [pc, #84]	; (8003818 <prvAddNewTaskToReadyList+0x114>)
 80037c2:	441a      	add	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f7ff f875 	bl	80028ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037d0:	f001 fa44 	bl	8004c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037d4:	4b0d      	ldr	r3, [pc, #52]	; (800380c <prvAddNewTaskToReadyList+0x108>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00e      	beq.n	80037fa <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <prvAddNewTaskToReadyList+0x104>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d207      	bcs.n	80037fa <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037ea:	4b0c      	ldr	r3, [pc, #48]	; (800381c <prvAddNewTaskToReadyList+0x118>)
 80037ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bdb0      	pop	{r4, r5, r7, pc}
 8003802:	bf00      	nop
 8003804:	20000db8 	.word	0x20000db8
 8003808:	200008e4 	.word	0x200008e4
 800380c:	20000dc4 	.word	0x20000dc4
 8003810:	20000dd4 	.word	0x20000dd4
 8003814:	20000dc0 	.word	0x20000dc0
 8003818:	200008e8 	.word	0x200008e8
 800381c:	e000ed04 	.word	0xe000ed04

08003820 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01b      	beq.n	800386a <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <vTaskDelay+0x68>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <vTaskDelay+0x30>
	__asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	60bb      	str	r3, [r7, #8]
}
 800384c:	bf00      	nop
 800384e:	e7fe      	b.n	800384e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003850:	f000 f88e 	bl	8003970 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	2023      	movs	r0, #35	; 0x23
 8003858:	f002 fab8 	bl	8005dcc <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800385c:	2100      	movs	r1, #0
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fd78 	bl	8004354 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003864:	f000 f892 	bl	800398c <xTaskResumeAll>
 8003868:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d107      	bne.n	8003880 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <vTaskDelay+0x6c>)
 8003872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000de0 	.word	0x20000de0
 800388c:	e000ed04 	.word	0xe000ed04

08003890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800389e:	463a      	mov	r2, r7
 80038a0:	1d39      	adds	r1, r7, #4
 80038a2:	f107 0308 	add.w	r3, r7, #8
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe ffaa 	bl	8002800 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038ac:	6839      	ldr	r1, [r7, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	9202      	str	r2, [sp, #8]
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	2300      	movs	r3, #0
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	2300      	movs	r3, #0
 80038bc:	460a      	mov	r2, r1
 80038be:	4924      	ldr	r1, [pc, #144]	; (8003950 <vTaskStartScheduler+0xc0>)
 80038c0:	4824      	ldr	r0, [pc, #144]	; (8003954 <vTaskStartScheduler+0xc4>)
 80038c2:	f7ff fddf 	bl	8003484 <xTaskCreateStatic>
 80038c6:	4603      	mov	r3, r0
 80038c8:	4a23      	ldr	r2, [pc, #140]	; (8003958 <vTaskStartScheduler+0xc8>)
 80038ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038cc:	4b22      	ldr	r3, [pc, #136]	; (8003958 <vTaskStartScheduler+0xc8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038d4:	2301      	movs	r3, #1
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e001      	b.n	80038de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d102      	bne.n	80038ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038e4:	f000 fd8a 	bl	80043fc <xTimerCreateTimerTask>
 80038e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d11b      	bne.n	8003928 <vTaskStartScheduler+0x98>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	613b      	str	r3, [r7, #16]
}
 8003902:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003904:	4b15      	ldr	r3, [pc, #84]	; (800395c <vTaskStartScheduler+0xcc>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3354      	adds	r3, #84	; 0x54
 800390a:	4a15      	ldr	r2, [pc, #84]	; (8003960 <vTaskStartScheduler+0xd0>)
 800390c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800390e:	4b15      	ldr	r3, [pc, #84]	; (8003964 <vTaskStartScheduler+0xd4>)
 8003910:	f04f 32ff 	mov.w	r2, #4294967295
 8003914:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003916:	4b14      	ldr	r3, [pc, #80]	; (8003968 <vTaskStartScheduler+0xd8>)
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800391c:	4b13      	ldr	r3, [pc, #76]	; (800396c <vTaskStartScheduler+0xdc>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003922:	f001 f8f9 	bl	8004b18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003926:	e00e      	b.n	8003946 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d10a      	bne.n	8003946 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	60fb      	str	r3, [r7, #12]
}
 8003942:	bf00      	nop
 8003944:	e7fe      	b.n	8003944 <vTaskStartScheduler+0xb4>
}
 8003946:	bf00      	nop
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	08008214 	.word	0x08008214
 8003954:	08004001 	.word	0x08004001
 8003958:	20000ddc 	.word	0x20000ddc
 800395c:	200008e4 	.word	0x200008e4
 8003960:	20000010 	.word	0x20000010
 8003964:	20000dd8 	.word	0x20000dd8
 8003968:	20000dc4 	.word	0x20000dc4
 800396c:	20000dbc 	.word	0x20000dbc

08003970 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003974:	4b04      	ldr	r3, [pc, #16]	; (8003988 <vTaskSuspendAll+0x18>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	4a03      	ldr	r2, [pc, #12]	; (8003988 <vTaskSuspendAll+0x18>)
 800397c:	6013      	str	r3, [r2, #0]
}
 800397e:	bf00      	nop
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000de0 	.word	0x20000de0

0800398c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800399a:	4b44      	ldr	r3, [pc, #272]	; (8003aac <xTaskResumeAll+0x120>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	603b      	str	r3, [r7, #0]
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039b8:	f001 f920 	bl	8004bfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039bc:	4b3b      	ldr	r3, [pc, #236]	; (8003aac <xTaskResumeAll+0x120>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	4a3a      	ldr	r2, [pc, #232]	; (8003aac <xTaskResumeAll+0x120>)
 80039c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c6:	4b39      	ldr	r3, [pc, #228]	; (8003aac <xTaskResumeAll+0x120>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d166      	bne.n	8003a9c <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039ce:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <xTaskResumeAll+0x124>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d062      	beq.n	8003a9c <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039d6:	e033      	b.n	8003a40 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80039d8:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <xTaskResumeAll+0x128>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3318      	adds	r3, #24
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe ffc3 	bl	8002970 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe ffbe 	bl	8002970 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f002 fef6 	bl	80067e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	4b2d      	ldr	r3, [pc, #180]	; (8003ab8 <xTaskResumeAll+0x12c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d903      	bls.n	8003a10 <xTaskResumeAll+0x84>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <xTaskResumeAll+0x12c>)
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4a27      	ldr	r2, [pc, #156]	; (8003abc <xTaskResumeAll+0x130>)
 8003a1e:	441a      	add	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f7fe ff47 	bl	80028ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <xTaskResumeAll+0x134>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d302      	bcc.n	8003a40 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8003a3a:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <xTaskResumeAll+0x138>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a40:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <xTaskResumeAll+0x128>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1c7      	bne.n	80039d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a4e:	f000 fbc9 	bl	80041e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a52:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <xTaskResumeAll+0x13c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d010      	beq.n	8003a80 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a5e:	f000 f857 	bl	8003b10 <xTaskIncrementTick>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8003a68:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <xTaskResumeAll+0x138>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f1      	bne.n	8003a5e <xTaskResumeAll+0xd2>

						uxPendedTicks = 0;
 8003a7a:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <xTaskResumeAll+0x13c>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a80:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <xTaskResumeAll+0x138>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d009      	beq.n	8003a9c <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <xTaskResumeAll+0x140>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a9c:	f001 f8de 	bl	8004c5c <vPortExitCritical>

	return xAlreadyYielded;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000de0 	.word	0x20000de0
 8003ab0:	20000db8 	.word	0x20000db8
 8003ab4:	20000d78 	.word	0x20000d78
 8003ab8:	20000dc0 	.word	0x20000dc0
 8003abc:	200008e8 	.word	0x200008e8
 8003ac0:	200008e4 	.word	0x200008e4
 8003ac4:	20000dcc 	.word	0x20000dcc
 8003ac8:	20000dc8 	.word	0x20000dc8
 8003acc:	e000ed04 	.word	0xe000ed04

08003ad0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ad6:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <xTaskGetTickCount+0x18>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003adc:	687b      	ldr	r3, [r7, #4]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	20000dbc 	.word	0x20000dbc

08003aec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003af2:	f001 f945 	bl	8004d80 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003afa:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <xTaskGetTickCountFromISR+0x20>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b00:	683b      	ldr	r3, [r7, #0]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000dbc 	.word	0x20000dbc

08003b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b1a:	4b53      	ldr	r3, [pc, #332]	; (8003c68 <xTaskIncrementTick+0x158>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f040 8092 	bne.w	8003c48 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b24:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <xTaskIncrementTick+0x15c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b2c:	4a4f      	ldr	r2, [pc, #316]	; (8003c6c <xTaskIncrementTick+0x15c>)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d120      	bne.n	8003b7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b38:	4b4d      	ldr	r3, [pc, #308]	; (8003c70 <xTaskIncrementTick+0x160>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	603b      	str	r3, [r7, #0]
}
 8003b54:	bf00      	nop
 8003b56:	e7fe      	b.n	8003b56 <xTaskIncrementTick+0x46>
 8003b58:	4b45      	ldr	r3, [pc, #276]	; (8003c70 <xTaskIncrementTick+0x160>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	4b45      	ldr	r3, [pc, #276]	; (8003c74 <xTaskIncrementTick+0x164>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a43      	ldr	r2, [pc, #268]	; (8003c70 <xTaskIncrementTick+0x160>)
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4a43      	ldr	r2, [pc, #268]	; (8003c74 <xTaskIncrementTick+0x164>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	4b42      	ldr	r3, [pc, #264]	; (8003c78 <xTaskIncrementTick+0x168>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	4a41      	ldr	r2, [pc, #260]	; (8003c78 <xTaskIncrementTick+0x168>)
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	f000 fb35 	bl	80041e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b7a:	4b40      	ldr	r3, [pc, #256]	; (8003c7c <xTaskIncrementTick+0x16c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d352      	bcc.n	8003c2a <xTaskIncrementTick+0x11a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b84:	4b3a      	ldr	r3, [pc, #232]	; (8003c70 <xTaskIncrementTick+0x160>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <xTaskIncrementTick+0x82>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <xTaskIncrementTick+0x84>
 8003b92:	2300      	movs	r3, #0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b98:	4b38      	ldr	r3, [pc, #224]	; (8003c7c <xTaskIncrementTick+0x16c>)
 8003b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9e:	601a      	str	r2, [r3, #0]
					break;
 8003ba0:	e043      	b.n	8003c2a <xTaskIncrementTick+0x11a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ba2:	4b33      	ldr	r3, [pc, #204]	; (8003c70 <xTaskIncrementTick+0x160>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d203      	bcs.n	8003bc2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bba:	4a30      	ldr	r2, [pc, #192]	; (8003c7c <xTaskIncrementTick+0x16c>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6013      	str	r3, [r2, #0]
						break;
 8003bc0:	e033      	b.n	8003c2a <xTaskIncrementTick+0x11a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fed2 	bl	8002970 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	3318      	adds	r3, #24
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe fec9 	bl	8002970 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f002 fe01 	bl	80067e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bea:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <xTaskIncrementTick+0x170>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d903      	bls.n	8003bfa <xTaskIncrementTick+0xea>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <xTaskIncrementTick+0x170>)
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <xTaskIncrementTick+0x174>)
 8003c08:	441a      	add	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4610      	mov	r0, r2
 8003c12:	f7fe fe52 	bl	80028ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <xTaskIncrementTick+0x178>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d3af      	bcc.n	8003b84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c24:	2301      	movs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c28:	e7ac      	b.n	8003b84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c2a:	4b17      	ldr	r3, [pc, #92]	; (8003c88 <xTaskIncrementTick+0x178>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	4914      	ldr	r1, [pc, #80]	; (8003c84 <xTaskIncrementTick+0x174>)
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d907      	bls.n	8003c52 <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 8003c42:	2301      	movs	r3, #1
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	e004      	b.n	8003c52 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c48:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <xTaskIncrementTick+0x17c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	4a0f      	ldr	r2, [pc, #60]	; (8003c8c <xTaskIncrementTick+0x17c>)
 8003c50:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <xTaskIncrementTick+0x180>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c5e:	697b      	ldr	r3, [r7, #20]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000de0 	.word	0x20000de0
 8003c6c:	20000dbc 	.word	0x20000dbc
 8003c70:	20000d70 	.word	0x20000d70
 8003c74:	20000d74 	.word	0x20000d74
 8003c78:	20000dd0 	.word	0x20000dd0
 8003c7c:	20000dd8 	.word	0x20000dd8
 8003c80:	20000dc0 	.word	0x20000dc0
 8003c84:	200008e8 	.word	0x200008e8
 8003c88:	200008e4 	.word	0x200008e4
 8003c8c:	20000dc8 	.word	0x20000dc8
 8003c90:	20000dcc 	.word	0x20000dcc

08003c94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c9a:	4b33      	ldr	r3, [pc, #204]	; (8003d68 <vTaskSwitchContext+0xd4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ca2:	4b32      	ldr	r3, [pc, #200]	; (8003d6c <vTaskSwitchContext+0xd8>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ca8:	e059      	b.n	8003d5e <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8003caa:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <vTaskSwitchContext+0xd8>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003cb0:	4b2f      	ldr	r3, [pc, #188]	; (8003d70 <vTaskSwitchContext+0xdc>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e010      	b.n	8003cda <vTaskSwitchContext+0x46>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <vTaskSwitchContext+0x40>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	607b      	str	r3, [r7, #4]
}
 8003cd0:	bf00      	nop
 8003cd2:	e7fe      	b.n	8003cd2 <vTaskSwitchContext+0x3e>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	4926      	ldr	r1, [pc, #152]	; (8003d74 <vTaskSwitchContext+0xe0>)
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0e4      	beq.n	8003cb8 <vTaskSwitchContext+0x24>
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4a1e      	ldr	r2, [pc, #120]	; (8003d74 <vTaskSwitchContext+0xe0>)
 8003cfa:	4413      	add	r3, r2
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d104      	bne.n	8003d1e <vTaskSwitchContext+0x8a>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <vTaskSwitchContext+0xe4>)
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4a11      	ldr	r2, [pc, #68]	; (8003d70 <vTaskSwitchContext+0xdc>)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <vTaskSwitchContext+0xe4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3334      	adds	r3, #52	; 0x34
 8003d34:	2205      	movs	r2, #5
 8003d36:	4911      	ldr	r1, [pc, #68]	; (8003d7c <vTaskSwitchContext+0xe8>)
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f003 f968 	bl	800700e <memcmp>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <vTaskSwitchContext+0xbc>
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <vTaskSwitchContext+0xe4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f002 fd09 	bl	8006760 <SEGGER_SYSVIEW_OnTaskStartExec>
 8003d4e:	e001      	b.n	8003d54 <vTaskSwitchContext+0xc0>
 8003d50:	f002 fca6 	bl	80066a0 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <vTaskSwitchContext+0xe4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3354      	adds	r3, #84	; 0x54
 8003d5a:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <vTaskSwitchContext+0xec>)
 8003d5c:	6013      	str	r3, [r2, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000de0 	.word	0x20000de0
 8003d6c:	20000dcc 	.word	0x20000dcc
 8003d70:	20000dc0 	.word	0x20000dc0
 8003d74:	200008e8 	.word	0x200008e8
 8003d78:	200008e4 	.word	0x200008e4
 8003d7c:	08008214 	.word	0x08008214
 8003d80:	20000010 	.word	0x20000010

08003d84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	60fb      	str	r3, [r7, #12]
}
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003daa:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <vTaskPlaceOnEventList+0x44>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3318      	adds	r3, #24
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe fda4 	bl	8002900 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003db8:	2101      	movs	r1, #1
 8003dba:	6838      	ldr	r0, [r7, #0]
 8003dbc:	f000 faca 	bl	8004354 <prvAddCurrentTaskToDelayedList>
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	200008e4 	.word	0x200008e4

08003dcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	617b      	str	r3, [r7, #20]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <vTaskPlaceOnEventListRestricted+0x58>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3318      	adds	r3, #24
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7fe fd5c 	bl	80028ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e08:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003e0e:	2024      	movs	r0, #36	; 0x24
 8003e10:	f001 ffbe 	bl	8005d90 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	68b8      	ldr	r0, [r7, #8]
 8003e18:	f000 fa9c 	bl	8004354 <prvAddCurrentTaskToDelayedList>
	}
 8003e1c:	bf00      	nop
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	200008e4 	.word	0x200008e4

08003e28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	60fb      	str	r3, [r7, #12]
}
 8003e50:	bf00      	nop
 8003e52:	e7fe      	b.n	8003e52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	3318      	adds	r3, #24
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe fd89 	bl	8002970 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e5e:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <xTaskRemoveFromEventList+0xb8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d121      	bne.n	8003eaa <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fe fd80 	bl	8002970 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f002 fcb8 	bl	80067e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <xTaskRemoveFromEventList+0xbc>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d903      	bls.n	8003e8c <xTaskRemoveFromEventList+0x64>
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <xTaskRemoveFromEventList+0xbc>)
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <xTaskRemoveFromEventList+0xc0>)
 8003e9a:	441a      	add	r2, r3
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f7fe fd09 	bl	80028ba <vListInsertEnd>
 8003ea8:	e005      	b.n	8003eb6 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	3318      	adds	r3, #24
 8003eae:	4619      	mov	r1, r3
 8003eb0:	480e      	ldr	r0, [pc, #56]	; (8003eec <xTaskRemoveFromEventList+0xc4>)
 8003eb2:	f7fe fd02 	bl	80028ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <xTaskRemoveFromEventList+0xc8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d905      	bls.n	8003ed0 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <xTaskRemoveFromEventList+0xcc>)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e001      	b.n	8003ed4 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003ed4:	697b      	ldr	r3, [r7, #20]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000de0 	.word	0x20000de0
 8003ee4:	20000dc0 	.word	0x20000dc0
 8003ee8:	200008e8 	.word	0x200008e8
 8003eec:	20000d78 	.word	0x20000d78
 8003ef0:	200008e4 	.word	0x200008e4
 8003ef4:	20000dcc 	.word	0x20000dcc

08003ef8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <vTaskInternalSetTimeOutState+0x24>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <vTaskInternalSetTimeOutState+0x28>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	605a      	str	r2, [r3, #4]
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000dd0 	.word	0x20000dd0
 8003f20:	20000dbc 	.word	0x20000dbc

08003f24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	613b      	str	r3, [r7, #16]
}
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	60fb      	str	r3, [r7, #12]
}
 8003f62:	bf00      	nop
 8003f64:	e7fe      	b.n	8003f64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f66:	f000 fe49 	bl	8004bfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f6a:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <xTaskCheckForTimeOut+0xbc>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f82:	d102      	bne.n	8003f8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	e023      	b.n	8003fd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <xTaskCheckForTimeOut+0xc0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d007      	beq.n	8003fa6 <xTaskCheckForTimeOut+0x82>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d302      	bcc.n	8003fa6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	e015      	b.n	8003fd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d20b      	bcs.n	8003fc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	1ad2      	subs	r2, r2, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff ff9b 	bl	8003ef8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e004      	b.n	8003fd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fd2:	f000 fe43 	bl	8004c5c <vPortExitCritical>

	return xReturn;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000dbc 	.word	0x20000dbc
 8003fe4:	20000dd0 	.word	0x20000dd0

08003fe8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <vTaskMissedYield+0x14>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
}
 8003ff2:	bf00      	nop
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000dcc 	.word	0x20000dcc

08004000 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004008:	f000 f852 	bl	80040b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <prvIdleTask+0x28>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d9f9      	bls.n	8004008 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <prvIdleTask+0x2c>)
 8004016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004024:	e7f0      	b.n	8004008 <prvIdleTask+0x8>
 8004026:	bf00      	nop
 8004028:	200008e8 	.word	0x200008e8
 800402c:	e000ed04 	.word	0xe000ed04

08004030 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	e00c      	b.n	8004056 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4a12      	ldr	r2, [pc, #72]	; (8004090 <prvInitialiseTaskLists+0x60>)
 8004048:	4413      	add	r3, r2
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe fc0a 	bl	8002864 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3301      	adds	r3, #1
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b37      	cmp	r3, #55	; 0x37
 800405a:	d9ef      	bls.n	800403c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800405c:	480d      	ldr	r0, [pc, #52]	; (8004094 <prvInitialiseTaskLists+0x64>)
 800405e:	f7fe fc01 	bl	8002864 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004062:	480d      	ldr	r0, [pc, #52]	; (8004098 <prvInitialiseTaskLists+0x68>)
 8004064:	f7fe fbfe 	bl	8002864 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004068:	480c      	ldr	r0, [pc, #48]	; (800409c <prvInitialiseTaskLists+0x6c>)
 800406a:	f7fe fbfb 	bl	8002864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800406e:	480c      	ldr	r0, [pc, #48]	; (80040a0 <prvInitialiseTaskLists+0x70>)
 8004070:	f7fe fbf8 	bl	8002864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004074:	480b      	ldr	r0, [pc, #44]	; (80040a4 <prvInitialiseTaskLists+0x74>)
 8004076:	f7fe fbf5 	bl	8002864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800407a:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <prvInitialiseTaskLists+0x78>)
 800407c:	4a05      	ldr	r2, [pc, #20]	; (8004094 <prvInitialiseTaskLists+0x64>)
 800407e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <prvInitialiseTaskLists+0x7c>)
 8004082:	4a05      	ldr	r2, [pc, #20]	; (8004098 <prvInitialiseTaskLists+0x68>)
 8004084:	601a      	str	r2, [r3, #0]
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	200008e8 	.word	0x200008e8
 8004094:	20000d48 	.word	0x20000d48
 8004098:	20000d5c 	.word	0x20000d5c
 800409c:	20000d78 	.word	0x20000d78
 80040a0:	20000d8c 	.word	0x20000d8c
 80040a4:	20000da4 	.word	0x20000da4
 80040a8:	20000d70 	.word	0x20000d70
 80040ac:	20000d74 	.word	0x20000d74

080040b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040b6:	e019      	b.n	80040ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040b8:	f000 fda0 	bl	8004bfc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <prvCheckTasksWaitingTermination+0x50>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe fc51 	bl	8002970 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040ce:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <prvCheckTasksWaitingTermination+0x54>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <prvCheckTasksWaitingTermination+0x54>)
 80040d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <prvCheckTasksWaitingTermination+0x58>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3b01      	subs	r3, #1
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <prvCheckTasksWaitingTermination+0x58>)
 80040e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040e2:	f000 fdbb 	bl	8004c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f848 	bl	800417c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <prvCheckTasksWaitingTermination+0x58>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e1      	bne.n	80040b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000d8c 	.word	0x20000d8c
 8004104:	20000db8 	.word	0x20000db8
 8004108:	20000da0 	.word	0x20000da0

0800410c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004118:	e005      	b.n	8004126 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3301      	adds	r3, #1
 800411e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2ba5      	cmp	r3, #165	; 0xa5
 800412c:	d0f5      	beq.n	800411a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	b29b      	uxth	r3, r3
	}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
	...

08004144 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <uxTaskGetStackHighWaterMark+0x14>
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <uxTaskGetStackHighWaterMark+0x34>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	e000      	b.n	800415a <uxTaskGetStackHighWaterMark+0x16>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004162:	6938      	ldr	r0, [r7, #16]
 8004164:	f7ff ffd2 	bl	800410c <prvTaskCheckFreeStackSpace>
 8004168:	4603      	mov	r3, r0
 800416a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800416c:	68fb      	ldr	r3, [r7, #12]
	}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	200008e4 	.word	0x200008e4

0800417c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3354      	adds	r3, #84	; 0x54
 8004188:	4618      	mov	r0, r3
 800418a:	f003 f897 	bl	80072bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004194:	2b00      	cmp	r3, #0
 8004196:	d108      	bne.n	80041aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fef1 	bl	8004f84 <vPortFree>
				vPortFree( pxTCB );
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 feee 	bl	8004f84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041a8:	e018      	b.n	80041dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d103      	bne.n	80041bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fee5 	bl	8004f84 <vPortFree>
	}
 80041ba:	e00f      	b.n	80041dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d00a      	beq.n	80041dc <prvDeleteTCB+0x60>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	60fb      	str	r3, [r7, #12]
}
 80041d8:	bf00      	nop
 80041da:	e7fe      	b.n	80041da <prvDeleteTCB+0x5e>
	}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ea:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <prvResetNextTaskUnblockTime+0x40>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <prvResetNextTaskUnblockTime+0x14>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <prvResetNextTaskUnblockTime+0x16>
 80041f8:	2300      	movs	r3, #0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d004      	beq.n	8004208 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <prvResetNextTaskUnblockTime+0x44>)
 8004200:	f04f 32ff 	mov.w	r2, #4294967295
 8004204:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004206:	e008      	b.n	800421a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <prvResetNextTaskUnblockTime+0x40>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4a04      	ldr	r2, [pc, #16]	; (8004228 <prvResetNextTaskUnblockTime+0x44>)
 8004218:	6013      	str	r3, [r2, #0]
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	20000d70 	.word	0x20000d70
 8004228:	20000dd8 	.word	0x20000dd8

0800422c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <xTaskGetSchedulerState+0x34>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800423a:	2301      	movs	r3, #1
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	e008      	b.n	8004252 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004240:	4b08      	ldr	r3, [pc, #32]	; (8004264 <xTaskGetSchedulerState+0x38>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004248:	2302      	movs	r3, #2
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	e001      	b.n	8004252 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004252:	687b      	ldr	r3, [r7, #4]
	}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000dc4 	.word	0x20000dc4
 8004264:	20000de0 	.word	0x20000de0

08004268 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d05f      	beq.n	800433e <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800427e:	4b32      	ldr	r3, [pc, #200]	; (8004348 <xTaskPriorityDisinherit+0xe0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	429a      	cmp	r2, r3
 8004286:	d00a      	beq.n	800429e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	60fb      	str	r3, [r7, #12]
}
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	60bb      	str	r3, [r7, #8]
}
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c0:	1e5a      	subs	r2, r3, #1
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d035      	beq.n	800433e <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d131      	bne.n	800433e <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fb46 	bl	8002970 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4619      	mov	r1, r3
 80042e8:	204a      	movs	r0, #74	; 0x4a
 80042ea:	f001 fd6f 	bl	8005dcc <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4618      	mov	r0, r3
 8004306:	f002 fa6f 	bl	80067e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430e:	4b0f      	ldr	r3, [pc, #60]	; (800434c <xTaskPriorityDisinherit+0xe4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d903      	bls.n	800431e <xTaskPriorityDisinherit+0xb6>
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	4a0c      	ldr	r2, [pc, #48]	; (800434c <xTaskPriorityDisinherit+0xe4>)
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4a09      	ldr	r2, [pc, #36]	; (8004350 <xTaskPriorityDisinherit+0xe8>)
 800432c:	441a      	add	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	3304      	adds	r3, #4
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f7fe fac0 	bl	80028ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800433a:	2301      	movs	r3, #1
 800433c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800433e:	697b      	ldr	r3, [r7, #20]
	}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	200008e4 	.word	0x200008e4
 800434c:	20000dc0 	.word	0x20000dc0
 8004350:	200008e8 	.word	0x200008e8

08004354 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800435e:	4b21      	ldr	r3, [pc, #132]	; (80043e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004364:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3304      	adds	r3, #4
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe fb00 	bl	8002970 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d10a      	bne.n	800438e <prvAddCurrentTaskToDelayedList+0x3a>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3304      	adds	r3, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4819      	ldr	r0, [pc, #100]	; (80043ec <prvAddCurrentTaskToDelayedList+0x98>)
 8004388:	f7fe fa97 	bl	80028ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800438c:	e026      	b.n	80043dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d209      	bcs.n	80043ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f7fe faa4 	bl	8002900 <vListInsert>
}
 80043b8:	e010      	b.n	80043dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f7fe fa9a 	bl	8002900 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d202      	bcs.n	80043dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043d6:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	6013      	str	r3, [r2, #0]
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20000dbc 	.word	0x20000dbc
 80043e8:	200008e4 	.word	0x200008e4
 80043ec:	20000da4 	.word	0x20000da4
 80043f0:	20000d74 	.word	0x20000d74
 80043f4:	20000d70 	.word	0x20000d70
 80043f8:	20000dd8 	.word	0x20000dd8

080043fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	; 0x28
 8004400:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004406:	f000 facb 	bl	80049a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800440a:	4b1c      	ldr	r3, [pc, #112]	; (800447c <xTimerCreateTimerTask+0x80>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d021      	beq.n	8004456 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800441a:	1d3a      	adds	r2, r7, #4
 800441c:	f107 0108 	add.w	r1, r7, #8
 8004420:	f107 030c 	add.w	r3, r7, #12
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe fa03 	bl	8002830 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	9202      	str	r2, [sp, #8]
 8004432:	9301      	str	r3, [sp, #4]
 8004434:	2302      	movs	r3, #2
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	2300      	movs	r3, #0
 800443a:	460a      	mov	r2, r1
 800443c:	4910      	ldr	r1, [pc, #64]	; (8004480 <xTimerCreateTimerTask+0x84>)
 800443e:	4811      	ldr	r0, [pc, #68]	; (8004484 <xTimerCreateTimerTask+0x88>)
 8004440:	f7ff f820 	bl	8003484 <xTaskCreateStatic>
 8004444:	4603      	mov	r3, r0
 8004446:	4a10      	ldr	r2, [pc, #64]	; (8004488 <xTimerCreateTimerTask+0x8c>)
 8004448:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <xTimerCreateTimerTask+0x8c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004452:	2301      	movs	r3, #1
 8004454:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	613b      	str	r3, [r7, #16]
}
 800446e:	bf00      	nop
 8004470:	e7fe      	b.n	8004470 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004472:	697b      	ldr	r3, [r7, #20]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000e14 	.word	0x20000e14
 8004480:	0800821c 	.word	0x0800821c
 8004484:	080045a9 	.word	0x080045a9
 8004488:	20000e18 	.word	0x20000e18

0800448c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800449a:	2300      	movs	r3, #0
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	623b      	str	r3, [r7, #32]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044ba:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <xTimerGenericCommand+0x98>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d02a      	beq.n	8004518 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	dc18      	bgt.n	8004506 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044d4:	f7ff feaa 	bl	800422c <xTaskGetSchedulerState>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d109      	bne.n	80044f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <xTimerGenericCommand+0x98>)
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	f107 0110 	add.w	r1, r7, #16
 80044e6:	2300      	movs	r3, #0
 80044e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ea:	f7fe fb73 	bl	8002bd4 <xQueueGenericSend>
 80044ee:	6278      	str	r0, [r7, #36]	; 0x24
 80044f0:	e012      	b.n	8004518 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044f2:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <xTimerGenericCommand+0x98>)
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	f107 0110 	add.w	r1, r7, #16
 80044fa:	2300      	movs	r3, #0
 80044fc:	2200      	movs	r2, #0
 80044fe:	f7fe fb69 	bl	8002bd4 <xQueueGenericSend>
 8004502:	6278      	str	r0, [r7, #36]	; 0x24
 8004504:	e008      	b.n	8004518 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <xTimerGenericCommand+0x98>)
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	f107 0110 	add.w	r1, r7, #16
 800450e:	2300      	movs	r3, #0
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	f7fe fc85 	bl	8002e20 <xQueueGenericSendFromISR>
 8004516:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800451a:	4618      	mov	r0, r3
 800451c:	3728      	adds	r7, #40	; 0x28
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000e14 	.word	0x20000e14

08004528 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af02      	add	r7, sp, #8
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004532:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <prvProcessExpiredTimer+0x7c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	3304      	adds	r3, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe fa15 	bl	8002970 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d122      	bne.n	8004594 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	18d1      	adds	r1, r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	6978      	ldr	r0, [r7, #20]
 800455c:	f000 f8c8 	bl	80046f0 <prvInsertTimerInActiveList>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004566:	2300      	movs	r3, #0
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	2300      	movs	r3, #0
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	2100      	movs	r1, #0
 8004570:	6978      	ldr	r0, [r7, #20]
 8004572:	f7ff ff8b 	bl	800448c <xTimerGenericCommand>
 8004576:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	60fb      	str	r3, [r7, #12]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	6978      	ldr	r0, [r7, #20]
 800459a:	4798      	blx	r3
}
 800459c:	bf00      	nop
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000e0c 	.word	0x20000e0c

080045a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045b0:	f107 0308 	add.w	r3, r7, #8
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f857 	bl	8004668 <prvGetNextExpireTime>
 80045ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4619      	mov	r1, r3
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f803 	bl	80045cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045c6:	f000 f8d5 	bl	8004774 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ca:	e7f1      	b.n	80045b0 <prvTimerTask+0x8>

080045cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045d6:	f7ff f9cb 	bl	8003970 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045da:	f107 0308 	add.w	r3, r7, #8
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f866 	bl	80046b0 <prvSampleTimeNow>
 80045e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d130      	bne.n	800464e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <prvProcessTimerOrBlockTask+0x3c>
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d806      	bhi.n	8004608 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80045fa:	f7ff f9c7 	bl	800398c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045fe:	68f9      	ldr	r1, [r7, #12]
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff ff91 	bl	8004528 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004606:	e024      	b.n	8004652 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800460e:	4b13      	ldr	r3, [pc, #76]	; (800465c <prvProcessTimerOrBlockTask+0x90>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <prvProcessTimerOrBlockTask+0x94>)
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	4619      	mov	r1, r3
 800462e:	f7fe fef5 	bl	800341c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004632:	f7ff f9ab 	bl	800398c <xTaskResumeAll>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <prvProcessTimerOrBlockTask+0x98>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	f3bf 8f6f 	isb	sy
}
 800464c:	e001      	b.n	8004652 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800464e:	f7ff f99d 	bl	800398c <xTaskResumeAll>
}
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000e10 	.word	0x20000e10
 8004660:	20000e14 	.word	0x20000e14
 8004664:	e000ed04 	.word	0xe000ed04

08004668 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <prvGetNextExpireTime+0x44>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf0c      	ite	eq
 800467a:	2301      	moveq	r3, #1
 800467c:	2300      	movne	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d105      	bne.n	800469a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800468e:	4b07      	ldr	r3, [pc, #28]	; (80046ac <prvGetNextExpireTime+0x44>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	e001      	b.n	800469e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800469e:	68fb      	ldr	r3, [r7, #12]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20000e0c 	.word	0x20000e0c

080046b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046b8:	f7ff fa0a 	bl	8003ad0 <xTaskGetTickCount>
 80046bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046be:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <prvSampleTimeNow+0x3c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d205      	bcs.n	80046d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046c8:	f000 f908 	bl	80048dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e002      	b.n	80046da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80046da:	4a04      	ldr	r2, [pc, #16]	; (80046ec <prvSampleTimeNow+0x3c>)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80046e0:	68fb      	ldr	r3, [r7, #12]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000e1c 	.word	0x20000e1c

080046f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d812      	bhi.n	800473c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	1ad2      	subs	r2, r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	429a      	cmp	r2, r3
 8004722:	d302      	bcc.n	800472a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004724:	2301      	movs	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e01b      	b.n	8004762 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <prvInsertTimerInActiveList+0x7c>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3304      	adds	r3, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f7fe f8e3 	bl	8002900 <vListInsert>
 800473a:	e012      	b.n	8004762 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d206      	bcs.n	8004752 <prvInsertTimerInActiveList+0x62>
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e007      	b.n	8004762 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <prvInsertTimerInActiveList+0x80>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7fe f8cf 	bl	8002900 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004762:	697b      	ldr	r3, [r7, #20]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000e10 	.word	0x20000e10
 8004770:	20000e0c 	.word	0x20000e0c

08004774 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08e      	sub	sp, #56	; 0x38
 8004778:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800477a:	e09d      	b.n	80048b8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	da18      	bge.n	80047b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004782:	1d3b      	adds	r3, r7, #4
 8004784:	3304      	adds	r3, #4
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	61fb      	str	r3, [r7, #28]
}
 80047a0:	bf00      	nop
 80047a2:	e7fe      	b.n	80047a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047aa:	6850      	ldr	r0, [r2, #4]
 80047ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ae:	6892      	ldr	r2, [r2, #8]
 80047b0:	4611      	mov	r1, r2
 80047b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	db7d      	blt.n	80048b6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	3304      	adds	r3, #4
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe f8d0 	bl	8002970 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047d0:	463b      	mov	r3, r7
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff ff6c 	bl	80046b0 <prvSampleTimeNow>
 80047d8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b09      	cmp	r3, #9
 80047de:	d86b      	bhi.n	80048b8 <prvProcessReceivedCommands+0x144>
 80047e0:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <prvProcessReceivedCommands+0x74>)
 80047e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e6:	bf00      	nop
 80047e8:	08004811 	.word	0x08004811
 80047ec:	08004811 	.word	0x08004811
 80047f0:	08004811 	.word	0x08004811
 80047f4:	080048b9 	.word	0x080048b9
 80047f8:	0800486d 	.word	0x0800486d
 80047fc:	080048a5 	.word	0x080048a5
 8004800:	08004811 	.word	0x08004811
 8004804:	08004811 	.word	0x08004811
 8004808:	080048b9 	.word	0x080048b9
 800480c:	0800486d 	.word	0x0800486d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	18d1      	adds	r1, r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800481e:	f7ff ff67 	bl	80046f0 <prvInsertTimerInActiveList>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d047      	beq.n	80048b8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800482e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d13f      	bne.n	80048b8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	441a      	add	r2, r3
 8004840:	2300      	movs	r3, #0
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	2300      	movs	r3, #0
 8004846:	2100      	movs	r1, #0
 8004848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800484a:	f7ff fe1f 	bl	800448c <xTimerGenericCommand>
 800484e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d130      	bne.n	80048b8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	61bb      	str	r3, [r7, #24]
}
 8004868:	bf00      	nop
 800486a:	e7fe      	b.n	800486a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	617b      	str	r3, [r7, #20]
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	699a      	ldr	r2, [r3, #24]
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	18d1      	adds	r1, r2, r3
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800489e:	f7ff ff27 	bl	80046f0 <prvInsertTimerInActiveList>
					break;
 80048a2:	e009      	b.n	80048b8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80048ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048b0:	f000 fb68 	bl	8004f84 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048b4:	e000      	b.n	80048b8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80048b6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048b8:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <prvProcessReceivedCommands+0x164>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	1d39      	adds	r1, r7, #4
 80048be:	2200      	movs	r2, #0
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe fb59 	bl	8002f78 <xQueueReceive>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f47f af57 	bne.w	800477c <prvProcessReceivedCommands+0x8>
	}
}
 80048ce:	bf00      	nop
 80048d0:	bf00      	nop
 80048d2:	3730      	adds	r7, #48	; 0x30
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	20000e14 	.word	0x20000e14

080048dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048e2:	e045      	b.n	8004970 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048e4:	4b2c      	ldr	r3, [pc, #176]	; (8004998 <prvSwitchTimerLists+0xbc>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048ee:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <prvSwitchTimerLists+0xbc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe f837 	bl	8002970 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d12e      	bne.n	8004970 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4413      	add	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	429a      	cmp	r2, r3
 8004922:	d90e      	bls.n	8004942 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004930:	4b19      	ldr	r3, [pc, #100]	; (8004998 <prvSwitchTimerLists+0xbc>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f7fd ffe0 	bl	8002900 <vListInsert>
 8004940:	e016      	b.n	8004970 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004942:	2300      	movs	r3, #0
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	2300      	movs	r3, #0
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	2100      	movs	r1, #0
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7ff fd9d 	bl	800448c <xTimerGenericCommand>
 8004952:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <prvSwitchTimerLists+0x94>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	603b      	str	r3, [r7, #0]
}
 800496c:	bf00      	nop
 800496e:	e7fe      	b.n	800496e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <prvSwitchTimerLists+0xbc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1b4      	bne.n	80048e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <prvSwitchTimerLists+0xbc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <prvSwitchTimerLists+0xc0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a04      	ldr	r2, [pc, #16]	; (8004998 <prvSwitchTimerLists+0xbc>)
 8004986:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004988:	4a04      	ldr	r2, [pc, #16]	; (800499c <prvSwitchTimerLists+0xc0>)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	6013      	str	r3, [r2, #0]
}
 800498e:	bf00      	nop
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000e0c 	.word	0x20000e0c
 800499c:	20000e10 	.word	0x20000e10

080049a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80049a6:	f000 f929 	bl	8004bfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <prvCheckForValidListAndQueue+0x60>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d120      	bne.n	80049f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80049b2:	4814      	ldr	r0, [pc, #80]	; (8004a04 <prvCheckForValidListAndQueue+0x64>)
 80049b4:	f7fd ff56 	bl	8002864 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049b8:	4813      	ldr	r0, [pc, #76]	; (8004a08 <prvCheckForValidListAndQueue+0x68>)
 80049ba:	f7fd ff53 	bl	8002864 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <prvCheckForValidListAndQueue+0x6c>)
 80049c0:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <prvCheckForValidListAndQueue+0x64>)
 80049c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80049c4:	4b12      	ldr	r3, [pc, #72]	; (8004a10 <prvCheckForValidListAndQueue+0x70>)
 80049c6:	4a10      	ldr	r2, [pc, #64]	; (8004a08 <prvCheckForValidListAndQueue+0x68>)
 80049c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049ca:	2300      	movs	r3, #0
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <prvCheckForValidListAndQueue+0x74>)
 80049d0:	4a11      	ldr	r2, [pc, #68]	; (8004a18 <prvCheckForValidListAndQueue+0x78>)
 80049d2:	2110      	movs	r1, #16
 80049d4:	200a      	movs	r0, #10
 80049d6:	f7fe f85d 	bl	8002a94 <xQueueGenericCreateStatic>
 80049da:	4603      	mov	r3, r0
 80049dc:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <prvCheckForValidListAndQueue+0x60>)
 80049de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <prvCheckForValidListAndQueue+0x60>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <prvCheckForValidListAndQueue+0x60>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	490b      	ldr	r1, [pc, #44]	; (8004a1c <prvCheckForValidListAndQueue+0x7c>)
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fce2 	bl	80033b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049f4:	f000 f932 	bl	8004c5c <vPortExitCritical>
}
 80049f8:	bf00      	nop
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000e14 	.word	0x20000e14
 8004a04:	20000de4 	.word	0x20000de4
 8004a08:	20000df8 	.word	0x20000df8
 8004a0c:	20000e0c 	.word	0x20000e0c
 8004a10:	20000e10 	.word	0x20000e10
 8004a14:	20000ec0 	.word	0x20000ec0
 8004a18:	20000e20 	.word	0x20000e20
 8004a1c:	08008224 	.word	0x08008224

08004a20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3b04      	subs	r3, #4
 8004a30:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3b04      	subs	r3, #4
 8004a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f023 0201 	bic.w	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3b04      	subs	r3, #4
 8004a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a50:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <pxPortInitialiseStack+0x54>)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3b14      	subs	r3, #20
 8004a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3b20      	subs	r3, #32
 8004a66:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a68:	68fb      	ldr	r3, [r7, #12]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr
 8004a74:	08004a79 	.word	0x08004a79

08004a78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a82:	4b12      	ldr	r3, [pc, #72]	; (8004acc <prvTaskExitError+0x54>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d00a      	beq.n	8004aa2 <prvTaskExitError+0x2a>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	60fb      	str	r3, [r7, #12]
}
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <prvTaskExitError+0x28>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60bb      	str	r3, [r7, #8]
}
 8004ab4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ab6:	bf00      	nop
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0fc      	beq.n	8004ab8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004abe:	bf00      	nop
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	2000000c 	.word	0x2000000c

08004ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <pxCurrentTCBConst2>)
 8004ad2:	6819      	ldr	r1, [r3, #0]
 8004ad4:	6808      	ldr	r0, [r1, #0]
 8004ad6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ada:	f380 8809 	msr	PSP, r0
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f380 8811 	msr	BASEPRI, r0
 8004aea:	f04e 0e0d 	orr.w	lr, lr, #13
 8004aee:	4770      	bx	lr

08004af0 <pxCurrentTCBConst2>:
 8004af0:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop

08004af8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004af8:	4806      	ldr	r0, [pc, #24]	; (8004b14 <prvPortStartFirstTask+0x1c>)
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	6800      	ldr	r0, [r0, #0]
 8004afe:	f380 8808 	msr	MSP, r0
 8004b02:	b662      	cpsie	i
 8004b04:	b661      	cpsie	f
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	df00      	svc	0
 8004b10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b12:	bf00      	nop
 8004b14:	e000ed08 	.word	0xe000ed08

08004b18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b1e:	4b32      	ldr	r3, [pc, #200]	; (8004be8 <xPortStartScheduler+0xd0>)
 8004b20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	22ff      	movs	r2, #255	; 0xff
 8004b2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <xPortStartScheduler+0xd4>)
 8004b44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b46:	4b2a      	ldr	r3, [pc, #168]	; (8004bf0 <xPortStartScheduler+0xd8>)
 8004b48:	2207      	movs	r2, #7
 8004b4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b4c:	e009      	b.n	8004b62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004b4e:	4b28      	ldr	r3, [pc, #160]	; (8004bf0 <xPortStartScheduler+0xd8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <xPortStartScheduler+0xd8>)
 8004b56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6a:	2b80      	cmp	r3, #128	; 0x80
 8004b6c:	d0ef      	beq.n	8004b4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b6e:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <xPortStartScheduler+0xd8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f1c3 0307 	rsb	r3, r3, #7
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d00a      	beq.n	8004b90 <xPortStartScheduler+0x78>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	60bb      	str	r3, [r7, #8]
}
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b90:	4b17      	ldr	r3, [pc, #92]	; (8004bf0 <xPortStartScheduler+0xd8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	4a16      	ldr	r2, [pc, #88]	; (8004bf0 <xPortStartScheduler+0xd8>)
 8004b98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <xPortStartScheduler+0xd8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ba2:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <xPortStartScheduler+0xd8>)
 8004ba4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <xPortStartScheduler+0xdc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a10      	ldr	r2, [pc, #64]	; (8004bf4 <xPortStartScheduler+0xdc>)
 8004bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bba:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <xPortStartScheduler+0xdc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a0d      	ldr	r2, [pc, #52]	; (8004bf4 <xPortStartScheduler+0xdc>)
 8004bc0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bc4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bc6:	f000 f8b9 	bl	8004d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <xPortStartScheduler+0xe0>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bd0:	f7ff ff92 	bl	8004af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bd4:	f7ff f85e 	bl	8003c94 <vTaskSwitchContext>
	prvTaskExitError();
 8004bd8:	f7ff ff4e 	bl	8004a78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	e000e400 	.word	0xe000e400
 8004bec:	20000f10 	.word	0x20000f10
 8004bf0:	20000f14 	.word	0x20000f14
 8004bf4:	e000ed20 	.word	0xe000ed20
 8004bf8:	2000000c 	.word	0x2000000c

08004bfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	607b      	str	r3, [r7, #4]
}
 8004c14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c16:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <vPortEnterCritical+0x58>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	4a0d      	ldr	r2, [pc, #52]	; (8004c54 <vPortEnterCritical+0x58>)
 8004c1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <vPortEnterCritical+0x58>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d10f      	bne.n	8004c48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <vPortEnterCritical+0x5c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	603b      	str	r3, [r7, #0]
}
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <vPortEnterCritical+0x4a>
	}
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	2000000c 	.word	0x2000000c
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c62:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <vPortExitCritical+0x4c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <vPortExitCritical+0x24>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	607b      	str	r3, [r7, #4]
}
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c80:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <vPortExitCritical+0x4c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	4a08      	ldr	r2, [pc, #32]	; (8004ca8 <vPortExitCritical+0x4c>)
 8004c88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c8a:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <vPortExitCritical+0x4c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d105      	bne.n	8004c9e <vPortExitCritical+0x42>
 8004c92:	2300      	movs	r3, #0
 8004c94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f383 8811 	msr	BASEPRI, r3
}
 8004c9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	2000000c 	.word	0x2000000c
 8004cac:	00000000 	.word	0x00000000

08004cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cb0:	f3ef 8009 	mrs	r0, PSP
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <pxCurrentTCBConst>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cc0:	6010      	str	r0, [r2, #0]
 8004cc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004cc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cca:	f380 8811 	msr	BASEPRI, r0
 8004cce:	f7fe ffe1 	bl	8003c94 <vTaskSwitchContext>
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f380 8811 	msr	BASEPRI, r0
 8004cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	6808      	ldr	r0, [r1, #0]
 8004ce2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ce6:	f380 8809 	msr	PSP, r0
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	4770      	bx	lr

08004cf0 <pxCurrentTCBConst>:
 8004cf0:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop

08004cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	607b      	str	r3, [r7, #4]
}
 8004d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d12:	f7fe fefd 	bl	8003b10 <xTaskIncrementTick>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <SysTick_Handler+0x40>)
 8004d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	2300      	movs	r3, #0
 8004d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	f383 8811 	msr	BASEPRI, r3
}
 8004d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <vPortSetupTimerInterrupt+0x30>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <vPortSetupTimerInterrupt+0x34>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <vPortSetupTimerInterrupt+0x38>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <vPortSetupTimerInterrupt+0x3c>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	4a08      	ldr	r2, [pc, #32]	; (8004d7c <vPortSetupTimerInterrupt+0x40>)
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d5e:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <vPortSetupTimerInterrupt+0x30>)
 8004d60:	2207      	movs	r2, #7
 8004d62:	601a      	str	r2, [r3, #0]
}
 8004d64:	bf00      	nop
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	e000e010 	.word	0xe000e010
 8004d70:	e000e018 	.word	0xe000e018
 8004d74:	20000000 	.word	0x20000000
 8004d78:	10624dd3 	.word	0x10624dd3
 8004d7c:	e000e014 	.word	0xe000e014

08004d80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d86:	f3ef 8305 	mrs	r3, IPSR
 8004d8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b0f      	cmp	r3, #15
 8004d90:	d914      	bls.n	8004dbc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d92:	4a16      	ldr	r2, [pc, #88]	; (8004dec <vPortValidateInterruptPriority+0x6c>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d9c:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <vPortValidateInterruptPriority+0x70>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	7afa      	ldrb	r2, [r7, #11]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d20a      	bcs.n	8004dbc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	607b      	str	r3, [r7, #4]
}
 8004db8:	bf00      	nop
 8004dba:	e7fe      	b.n	8004dba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <vPortValidateInterruptPriority+0x74>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <vPortValidateInterruptPriority+0x78>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d90a      	bls.n	8004de2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	603b      	str	r3, [r7, #0]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <vPortValidateInterruptPriority+0x60>
	}
 8004de2:	bf00      	nop
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr
 8004dec:	e000e3f0 	.word	0xe000e3f0
 8004df0:	20000f10 	.word	0x20000f10
 8004df4:	e000ed0c 	.word	0xe000ed0c
 8004df8:	20000f14 	.word	0x20000f14

08004dfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	; 0x28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e08:	f7fe fdb2 	bl	8003970 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e0c:	4b58      	ldr	r3, [pc, #352]	; (8004f70 <pvPortMalloc+0x174>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e14:	f000 f910 	bl	8005038 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e18:	4b56      	ldr	r3, [pc, #344]	; (8004f74 <pvPortMalloc+0x178>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f040 808e 	bne.w	8004f42 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01d      	beq.n	8004e68 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4413      	add	r3, r2
 8004e32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d014      	beq.n	8004e68 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f023 0307 	bic.w	r3, r3, #7
 8004e44:	3308      	adds	r3, #8
 8004e46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <pvPortMalloc+0x6c>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	617b      	str	r3, [r7, #20]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d069      	beq.n	8004f42 <pvPortMalloc+0x146>
 8004e6e:	4b42      	ldr	r3, [pc, #264]	; (8004f78 <pvPortMalloc+0x17c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d864      	bhi.n	8004f42 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e78:	4b40      	ldr	r3, [pc, #256]	; (8004f7c <pvPortMalloc+0x180>)
 8004e7a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e7c:	4b3f      	ldr	r3, [pc, #252]	; (8004f7c <pvPortMalloc+0x180>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e82:	e004      	b.n	8004e8e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d903      	bls.n	8004ea0 <pvPortMalloc+0xa4>
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f1      	bne.n	8004e84 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ea0:	4b33      	ldr	r3, [pc, #204]	; (8004f70 <pvPortMalloc+0x174>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d04b      	beq.n	8004f42 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2208      	movs	r2, #8
 8004eb0:	4413      	add	r3, r2
 8004eb2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	1ad2      	subs	r2, r2, r3
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d91f      	bls.n	8004f0c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <pvPortMalloc+0xf8>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	613b      	str	r3, [r7, #16]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	1ad2      	subs	r2, r2, r3
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f06:	69b8      	ldr	r0, [r7, #24]
 8004f08:	f000 f8f8 	bl	80050fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <pvPortMalloc+0x17c>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	4a18      	ldr	r2, [pc, #96]	; (8004f78 <pvPortMalloc+0x17c>)
 8004f18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f1a:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <pvPortMalloc+0x17c>)
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <pvPortMalloc+0x184>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d203      	bcs.n	8004f2e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f26:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <pvPortMalloc+0x17c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a15      	ldr	r2, [pc, #84]	; (8004f80 <pvPortMalloc+0x184>)
 8004f2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <pvPortMalloc+0x178>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	431a      	orrs	r2, r3
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f42:	f7fe fd23 	bl	800398c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <pvPortMalloc+0x16a>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60fb      	str	r3, [r7, #12]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <pvPortMalloc+0x168>
	return pvReturn;
 8004f66:	69fb      	ldr	r3, [r7, #28]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3728      	adds	r7, #40	; 0x28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20001b20 	.word	0x20001b20
 8004f74:	20001b2c 	.word	0x20001b2c
 8004f78:	20001b24 	.word	0x20001b24
 8004f7c:	20001b18 	.word	0x20001b18
 8004f80:	20001b28 	.word	0x20001b28

08004f84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d048      	beq.n	8005028 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f96:	2308      	movs	r3, #8
 8004f98:	425b      	negs	r3, r3
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	4b21      	ldr	r3, [pc, #132]	; (8005030 <vPortFree+0xac>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <vPortFree+0x44>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	60fb      	str	r3, [r7, #12]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <vPortFree+0x62>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60bb      	str	r3, [r7, #8]
}
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	4b11      	ldr	r3, [pc, #68]	; (8005030 <vPortFree+0xac>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d019      	beq.n	8005028 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d115      	bne.n	8005028 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <vPortFree+0xac>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	43db      	mvns	r3, r3
 8005006:	401a      	ands	r2, r3
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800500c:	f7fe fcb0 	bl	8003970 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	4b07      	ldr	r3, [pc, #28]	; (8005034 <vPortFree+0xb0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4413      	add	r3, r2
 800501a:	4a06      	ldr	r2, [pc, #24]	; (8005034 <vPortFree+0xb0>)
 800501c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800501e:	6938      	ldr	r0, [r7, #16]
 8005020:	f000 f86c 	bl	80050fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005024:	f7fe fcb2 	bl	800398c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005028:	bf00      	nop
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20001b2c 	.word	0x20001b2c
 8005034:	20001b24 	.word	0x20001b24

08005038 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800503e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005042:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005044:	4b27      	ldr	r3, [pc, #156]	; (80050e4 <prvHeapInit+0xac>)
 8005046:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00c      	beq.n	800506c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3307      	adds	r3, #7
 8005056:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0307 	bic.w	r3, r3, #7
 800505e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <prvHeapInit+0xac>)
 8005068:	4413      	add	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005070:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <prvHeapInit+0xb0>)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005076:	4b1c      	ldr	r3, [pc, #112]	; (80050e8 <prvHeapInit+0xb0>)
 8005078:	2200      	movs	r2, #0
 800507a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	4413      	add	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005084:	2208      	movs	r2, #8
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0307 	bic.w	r3, r3, #7
 8005092:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4a15      	ldr	r2, [pc, #84]	; (80050ec <prvHeapInit+0xb4>)
 8005098:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800509a:	4b14      	ldr	r3, [pc, #80]	; (80050ec <prvHeapInit+0xb4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2200      	movs	r2, #0
 80050a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <prvHeapInit+0xb4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	1ad2      	subs	r2, r2, r3
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050b8:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <prvHeapInit+0xb4>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <prvHeapInit+0xb8>)
 80050c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <prvHeapInit+0xbc>)
 80050ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050d0:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <prvHeapInit+0xc0>)
 80050d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050d6:	601a      	str	r2, [r3, #0]
}
 80050d8:	bf00      	nop
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000f18 	.word	0x20000f18
 80050e8:	20001b18 	.word	0x20001b18
 80050ec:	20001b20 	.word	0x20001b20
 80050f0:	20001b28 	.word	0x20001b28
 80050f4:	20001b24 	.word	0x20001b24
 80050f8:	20001b2c 	.word	0x20001b2c

080050fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005104:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <prvInsertBlockIntoFreeList+0xa8>)
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e002      	b.n	8005110 <prvInsertBlockIntoFreeList+0x14>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d8f7      	bhi.n	800510a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	4413      	add	r3, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	429a      	cmp	r2, r3
 800512a:	d108      	bne.n	800513e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	441a      	add	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	441a      	add	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d118      	bne.n	8005184 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <prvInsertBlockIntoFreeList+0xac>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d00d      	beq.n	800517a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	441a      	add	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	e008      	b.n	800518c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <prvInsertBlockIntoFreeList+0xac>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	e003      	b.n	800518c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d002      	beq.n	800519a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr
 80051a4:	20001b18 	.word	0x20001b18
 80051a8:	20001b20 	.word	0x20001b20

080051ac <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80051b2:	4b21      	ldr	r3, [pc, #132]	; (8005238 <_DoInit+0x8c>)
 80051b4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2203      	movs	r2, #3
 80051ba:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2203      	movs	r2, #3
 80051c0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a1d      	ldr	r2, [pc, #116]	; (800523c <_DoInit+0x90>)
 80051c6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <_DoInit+0x94>)
 80051cc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051d4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a14      	ldr	r2, [pc, #80]	; (800523c <_DoInit+0x90>)
 80051ec:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a14      	ldr	r2, [pc, #80]	; (8005244 <_DoInit+0x98>)
 80051f2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2210      	movs	r2, #16
 80051f8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3307      	adds	r3, #7
 8005210:	4a0d      	ldr	r2, [pc, #52]	; (8005248 <_DoInit+0x9c>)
 8005212:	6810      	ldr	r0, [r2, #0]
 8005214:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a0c      	ldr	r2, [pc, #48]	; (800524c <_DoInit+0xa0>)
 800521a:	6810      	ldr	r0, [r2, #0]
 800521c:	6018      	str	r0, [r3, #0]
 800521e:	8891      	ldrh	r1, [r2, #4]
 8005220:	7992      	ldrb	r2, [r2, #6]
 8005222:	8099      	strh	r1, [r3, #4]
 8005224:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	719a      	strb	r2, [r3, #6]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	20001b30 	.word	0x20001b30
 800523c:	0800822c 	.word	0x0800822c
 8005240:	20001bd8 	.word	0x20001bd8
 8005244:	20001fd8 	.word	0x20001fd8
 8005248:	08008238 	.word	0x08008238
 800524c:	0800823c 	.word	0x0800823c

08005250 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800525c:	2300      	movs	r3, #0
 800525e:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	429a      	cmp	r2, r3
 8005272:	d905      	bls.n	8005280 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	61fb      	str	r3, [r7, #28]
 800527e:	e007      	b.n	8005290 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	6939      	ldr	r1, [r7, #16]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	1acb      	subs	r3, r1, r3
 800528a:	4413      	add	r3, r2
 800528c:	3b01      	subs	r3, #1
 800528e:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	4293      	cmp	r3, r2
 800529c:	bf28      	it	cs
 800529e:	4613      	movcs	r3, r2
 80052a0:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4293      	cmp	r3, r2
 80052a8:	bf28      	it	cs
 80052aa:	4613      	movcs	r3, r2
 80052ac:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	4413      	add	r3, r2
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 feb7 	bl	800702e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4413      	add	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d101      	bne.n	80052ee <_WriteBlocking+0x9e>
      WrOff = 0u;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1b5      	bne.n	8005266 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 80052fa:	69bb      	ldr	r3, [r7, #24]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3720      	adds	r7, #32
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	429a      	cmp	r2, r3
 8005326:	d90e      	bls.n	8005346 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	4618      	mov	r0, r3
 8005336:	f001 fe7a 	bl	800702e <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	441a      	add	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005344:	e01a      	b.n	800537c <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	4618      	mov	r0, r3
 8005358:	f001 fe69 	bl	800702e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6858      	ldr	r0, [r3, #4]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	4413      	add	r3, r2
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4619      	mov	r1, r3
 8005372:	f001 fe5c 	bl	800702e <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	60da      	str	r2, [r3, #12]
}
 800537c:	bf00      	nop
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	429a      	cmp	r2, r3
 800539e:	d808      	bhi.n	80053b2 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	1ad2      	subs	r2, r2, r3
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4413      	add	r3, r2
 80053ac:	3b01      	subs	r3, #1
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e004      	b.n	80053bc <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	617b      	str	r3, [r7, #20]
  }
  return r;
 80053bc:	697b      	ldr	r3, [r7, #20]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr

080053c8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	; 0x28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80053d4:	4b3c      	ldr	r3, [pc, #240]	; (80054c8 <SEGGER_RTT_ReadNoLock+0x100>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <SEGGER_RTT_ReadNoLock+0x18>
 80053dc:	f7ff fee6 	bl	80051ac <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4613      	mov	r3, r2
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	4413      	add	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	3360      	adds	r3, #96	; 0x60
 80053ec:	4a36      	ldr	r2, [pc, #216]	; (80054c8 <SEGGER_RTT_ReadNoLock+0x100>)
 80053ee:	4413      	add	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8005402:	2300      	movs	r3, #0
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005406:	6a3a      	ldr	r2, [r7, #32]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	429a      	cmp	r2, r3
 800540c:	d92a      	bls.n	8005464 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4293      	cmp	r3, r2
 800541e:	bf28      	it	cs
 8005420:	4613      	movcs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	4413      	add	r3, r2
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4619      	mov	r1, r3
 8005430:	69f8      	ldr	r0, [r7, #28]
 8005432:	f001 fdfc 	bl	800702e <memcpy>
    NumBytesRead += NumBytesRem;
 8005436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800544e:	6a3a      	ldr	r2, [r7, #32]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4413      	add	r3, r2
 8005454:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	6a3a      	ldr	r2, [r7, #32]
 800545c:	429a      	cmp	r2, r3
 800545e:	d101      	bne.n	8005464 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8005460:	2300      	movs	r3, #0
 8005462:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4293      	cmp	r3, r2
 8005472:	bf28      	it	cs
 8005474:	4613      	movcs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d018      	beq.n	80054b0 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	4413      	add	r3, r2
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4619      	mov	r1, r3
 800548a:	69f8      	ldr	r0, [r7, #28]
 800548c:	f001 fdcf 	bl	800702e <memcpy>
    NumBytesRead += NumBytesRem;
 8005490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4413      	add	r3, r2
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	4413      	add	r3, r2
 800549e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054a8:	6a3a      	ldr	r2, [r7, #32]
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4413      	add	r3, r2
 80054ae:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	6a3a      	ldr	r2, [r7, #32]
 80054ba:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3728      	adds	r7, #40	; 0x28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20001b30 	.word	0x20001b30

080054cc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <SEGGER_RTT_WriteNoLock+0x9c>)
 80054ea:	4413      	add	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d029      	beq.n	800554a <SEGGER_RTT_WriteNoLock+0x7e>
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d82e      	bhi.n	8005558 <SEGGER_RTT_WriteNoLock+0x8c>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <SEGGER_RTT_WriteNoLock+0x38>
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d013      	beq.n	800552a <SEGGER_RTT_WriteNoLock+0x5e>
 8005502:	e029      	b.n	8005558 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005504:	6978      	ldr	r0, [r7, #20]
 8005506:	f7ff ff3d 	bl	8005384 <_GetAvailWriteSpace>
 800550a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d202      	bcs.n	800551a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005518:	e021      	b.n	800555e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	69b9      	ldr	r1, [r7, #24]
 8005522:	6978      	ldr	r0, [r7, #20]
 8005524:	f7ff feee 	bl	8005304 <_WriteNoCheck>
    break;
 8005528:	e019      	b.n	800555e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800552a:	6978      	ldr	r0, [r7, #20]
 800552c:	f7ff ff2a 	bl	8005384 <_GetAvailWriteSpace>
 8005530:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4293      	cmp	r3, r2
 8005538:	bf28      	it	cs
 800553a:	4613      	movcs	r3, r2
 800553c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	69b9      	ldr	r1, [r7, #24]
 8005542:	6978      	ldr	r0, [r7, #20]
 8005544:	f7ff fede 	bl	8005304 <_WriteNoCheck>
    break;
 8005548:	e009      	b.n	800555e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	69b9      	ldr	r1, [r7, #24]
 800554e:	6978      	ldr	r0, [r7, #20]
 8005550:	f7ff fe7e 	bl	8005250 <_WriteBlocking>
 8005554:	61f8      	str	r0, [r7, #28]
    break;
 8005556:	e002      	b.n	800555e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005558:	2300      	movs	r3, #0
 800555a:	61fb      	str	r3, [r7, #28]
    break;
 800555c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800555e:	69fb      	ldr	r3, [r7, #28]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20001b30 	.word	0x20001b30

0800556c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8005578:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <SEGGER_RTT_Write+0x44>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <SEGGER_RTT_Write+0x18>
 8005580:	f7ff fe14 	bl	80051ac <_DoInit>
  SEGGER_RTT_LOCK();
 8005584:	f3ef 8311 	mrs	r3, BASEPRI
 8005588:	f04f 0120 	mov.w	r1, #32
 800558c:	f381 8811 	msr	BASEPRI, r1
 8005590:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff ff98 	bl	80054cc <SEGGER_RTT_WriteNoLock>
 800559c:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 80055a4:	693b      	ldr	r3, [r7, #16]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20001b30 	.word	0x20001b30

080055b4 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80055c2:	4b30      	ldr	r3, [pc, #192]	; (8005684 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80055ca:	f7ff fdef 	bl	80051ac <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80055ce:	4b2d      	ldr	r3, [pc, #180]	; (8005684 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	461a      	mov	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d24c      	bcs.n	8005674 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 80055da:	f3ef 8311 	mrs	r3, BASEPRI
 80055de:	f04f 0120 	mov.w	r1, #32
 80055e2:	f381 8811 	msr	BASEPRI, r1
 80055e6:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d032      	beq.n	8005654 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80055ee:	4925      	ldr	r1, [pc, #148]	; (8005684 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	4613      	mov	r3, r2
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	4413      	add	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	440b      	add	r3, r1
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005602:	4920      	ldr	r1, [pc, #128]	; (8005684 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	4613      	mov	r3, r2
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	4413      	add	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	440b      	add	r3, r1
 8005612:	3304      	adds	r3, #4
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005618:	491a      	ldr	r1, [pc, #104]	; (8005684 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	440b      	add	r3, r1
 8005626:	3320      	adds	r3, #32
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800562c:	4915      	ldr	r1, [pc, #84]	; (8005684 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4613      	mov	r3, r2
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	4413      	add	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	440b      	add	r3, r1
 800563a:	3328      	adds	r3, #40	; 0x28
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8005640:	4910      	ldr	r1, [pc, #64]	; (8005684 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4613      	mov	r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	4413      	add	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	440b      	add	r3, r1
 800564e:	3324      	adds	r3, #36	; 0x24
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8005654:	490b      	ldr	r1, [pc, #44]	; (8005684 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4613      	mov	r3, r2
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	4413      	add	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	440b      	add	r3, r1
 8005662:	332c      	adds	r3, #44	; 0x2c
 8005664:	6a3a      	ldr	r2, [r7, #32]
 8005666:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e002      	b.n	800567a <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8005674:	f04f 33ff 	mov.w	r3, #4294967295
 8005678:	617b      	str	r3, [r7, #20]
  }
  return r;
 800567a:	697b      	ldr	r3, [r7, #20]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20001b30 	.word	0x20001b30

08005688 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8005696:	4b30      	ldr	r3, [pc, #192]	; (8005758 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800569e:	f7ff fd85 	bl	80051ac <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80056a2:	4b2d      	ldr	r3, [pc, #180]	; (8005758 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	461a      	mov	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d24b      	bcs.n	8005746 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80056ae:	f3ef 8311 	mrs	r3, BASEPRI
 80056b2:	f04f 0120 	mov.w	r1, #32
 80056b6:	f381 8811 	msr	BASEPRI, r1
 80056ba:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d031      	beq.n	8005726 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80056c2:	4925      	ldr	r1, [pc, #148]	; (8005758 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4613      	mov	r3, r2
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	4413      	add	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	440b      	add	r3, r1
 80056d0:	3360      	adds	r3, #96	; 0x60
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80056d6:	4920      	ldr	r1, [pc, #128]	; (8005758 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4613      	mov	r3, r2
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	4413      	add	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	440b      	add	r3, r1
 80056e4:	3364      	adds	r3, #100	; 0x64
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80056ea:	491b      	ldr	r1, [pc, #108]	; (8005758 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4613      	mov	r3, r2
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	4413      	add	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	440b      	add	r3, r1
 80056f8:	3368      	adds	r3, #104	; 0x68
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80056fe:	4916      	ldr	r1, [pc, #88]	; (8005758 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4613      	mov	r3, r2
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	4413      	add	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	440b      	add	r3, r1
 800570c:	3370      	adds	r3, #112	; 0x70
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8005712:	4911      	ldr	r1, [pc, #68]	; (8005758 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4613      	mov	r3, r2
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	4413      	add	r3, r2
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	440b      	add	r3, r1
 8005720:	336c      	adds	r3, #108	; 0x6c
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8005726:	490c      	ldr	r1, [pc, #48]	; (8005758 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4613      	mov	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4413      	add	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	440b      	add	r3, r1
 8005734:	3374      	adds	r3, #116	; 0x74
 8005736:	6a3a      	ldr	r2, [r7, #32]
 8005738:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e002      	b.n	800574c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8005746:	f04f 33ff 	mov.w	r3, #4294967295
 800574a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800574c:	697b      	ldr	r3, [r7, #20]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20001b30 	.word	0x20001b30

0800575c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
int _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	2000      	movs	r0, #0
 8005770:	f7ff fefc 	bl	800556c <SEGGER_RTT_Write>
  return len;
 8005774:	683b      	ldr	r3, [r7, #0]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800577e:	b480      	push	{r7}
 8005780:	b087      	sub	sp, #28
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800578e:	e002      	b.n	8005796 <_EncodeStr+0x18>
    Len++;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	3301      	adds	r3, #1
 8005794:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4413      	add	r3, r2
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f6      	bne.n	8005790 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d901      	bls.n	80057ae <_EncodeStr+0x30>
    Len = Limit;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2bfe      	cmp	r3, #254	; 0xfe
 80057b2:	d806      	bhi.n	80057c2 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	60fa      	str	r2, [r7, #12]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	e011      	b.n	80057e6 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	60fa      	str	r2, [r7, #12]
 80057c8:	22ff      	movs	r2, #255	; 0xff
 80057ca:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	60fa      	str	r2, [r7, #12]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	0a19      	lsrs	r1, r3, #8
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	60fa      	str	r2, [r7, #12]
 80057e2:	b2ca      	uxtb	r2, r1
 80057e4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80057ea:	e00a      	b.n	8005802 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	1c53      	adds	r3, r2, #1
 80057f0:	60bb      	str	r3, [r7, #8]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1c59      	adds	r1, r3, #1
 80057f6:	60f9      	str	r1, [r7, #12]
 80057f8:	7812      	ldrb	r2, [r2, #0]
 80057fa:	701a      	strb	r2, [r3, #0]
    n++;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	3301      	adds	r3, #1
 8005800:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	d3f0      	bcc.n	80057ec <_EncodeStr+0x6e>
  }
  return pPayload;
 800580a:	68fb      	ldr	r3, [r7, #12]
}
 800580c:	4618      	mov	r0, r3
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr

08005816 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3304      	adds	r3, #4
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005832:	1cfb      	adds	r3, r7, #3
 8005834:	2201      	movs	r2, #1
 8005836:	4619      	mov	r1, r3
 8005838:	2001      	movs	r0, #1
 800583a:	f7ff fdc5 	bl	80053c8 <SEGGER_RTT_ReadNoLock>
 800583e:	4603      	mov	r3, r0
 8005840:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	dd4c      	ble.n	80058e2 <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	2b07      	cmp	r3, #7
 800584c:	dc16      	bgt.n	800587c <_HandleIncomingPacket+0x50>
 800584e:	2b00      	cmp	r3, #0
 8005850:	dd3c      	ble.n	80058cc <_HandleIncomingPacket+0xa0>
 8005852:	3b01      	subs	r3, #1
 8005854:	2b06      	cmp	r3, #6
 8005856:	d839      	bhi.n	80058cc <_HandleIncomingPacket+0xa0>
 8005858:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <_HandleIncomingPacket+0x34>)
 800585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585e:	bf00      	nop
 8005860:	08005883 	.word	0x08005883
 8005864:	08005889 	.word	0x08005889
 8005868:	0800588f 	.word	0x0800588f
 800586c:	08005895 	.word	0x08005895
 8005870:	0800589b 	.word	0x0800589b
 8005874:	080058a1 	.word	0x080058a1
 8005878:	080058a7 	.word	0x080058a7
 800587c:	2b80      	cmp	r3, #128	; 0x80
 800587e:	d015      	beq.n	80058ac <_HandleIncomingPacket+0x80>
 8005880:	e024      	b.n	80058cc <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005882:	f000 fc41 	bl	8006108 <SEGGER_SYSVIEW_Start>
      break;
 8005886:	e031      	b.n	80058ec <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005888:	f000 fcfa 	bl	8006280 <SEGGER_SYSVIEW_Stop>
      break;
 800588c:	e02e      	b.n	80058ec <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800588e:	f000 fed5 	bl	800663c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005892:	e02b      	b.n	80058ec <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005894:	f000 fe9a 	bl	80065cc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005898:	e028      	b.n	80058ec <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800589a:	f000 fd17 	bl	80062cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800589e:	e025      	b.n	80058ec <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80058a0:	f001 f894 	bl	80069cc <SEGGER_SYSVIEW_SendNumModules>
      break;
 80058a4:	e022      	b.n	80058ec <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80058a6:	f001 f873 	bl	8006990 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80058aa:	e01f      	b.n	80058ec <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058ac:	1cfb      	adds	r3, r7, #3
 80058ae:	2201      	movs	r2, #1
 80058b0:	4619      	mov	r1, r3
 80058b2:	2001      	movs	r0, #1
 80058b4:	f7ff fd88 	bl	80053c8 <SEGGER_RTT_ReadNoLock>
 80058b8:	4603      	mov	r3, r0
 80058ba:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	dd11      	ble.n	80058e6 <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 ffe3 	bl	8006890 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80058ca:	e00c      	b.n	80058e6 <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	b25b      	sxtb	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	da0a      	bge.n	80058ea <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058d4:	1cfb      	adds	r3, r7, #3
 80058d6:	2201      	movs	r2, #1
 80058d8:	4619      	mov	r1, r3
 80058da:	2001      	movs	r0, #1
 80058dc:	f7ff fd74 	bl	80053c8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80058e0:	e003      	b.n	80058ea <_HandleIncomingPacket+0xbe>
    }
  }
 80058e2:	bf00      	nop
 80058e4:	e002      	b.n	80058ec <_HandleIncomingPacket+0xc0>
      break;
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <_HandleIncomingPacket+0xc0>
      break;
 80058ea:	bf00      	nop
}
 80058ec:	bf00      	nop
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08c      	sub	sp, #48	; 0x30
 80058f8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80058fa:	2301      	movs	r3, #1
 80058fc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80058fe:	1d3b      	adds	r3, r7, #4
 8005900:	3301      	adds	r3, #1
 8005902:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005908:	4b30      	ldr	r3, [pc, #192]	; (80059cc <_TrySendOverflowPacket+0xd8>)
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
 800590e:	e00b      	b.n	8005928 <_TrySendOverflowPacket+0x34>
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	b2da      	uxtb	r2, r3
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	1c59      	adds	r1, r3, #1
 8005918:	62f9      	str	r1, [r7, #44]	; 0x2c
 800591a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	09db      	lsrs	r3, r3, #7
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	2b7f      	cmp	r3, #127	; 0x7f
 800592c:	d8f0      	bhi.n	8005910 <_TrySendOverflowPacket+0x1c>
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800593e:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <_TrySendOverflowPacket+0xdc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005944:	4b21      	ldr	r3, [pc, #132]	; (80059cc <_TrySendOverflowPacket+0xd8>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	623b      	str	r3, [r7, #32]
 8005956:	e00b      	b.n	8005970 <_TrySendOverflowPacket+0x7c>
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	b2da      	uxtb	r2, r3
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	1c59      	adds	r1, r3, #1
 8005960:	6279      	str	r1, [r7, #36]	; 0x24
 8005962:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	09db      	lsrs	r3, r3, #7
 800596e:	623b      	str	r3, [r7, #32]
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	2b7f      	cmp	r3, #127	; 0x7f
 8005974:	d8f0      	bhi.n	8005958 <_TrySendOverflowPacket+0x64>
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	627a      	str	r2, [r7, #36]	; 0x24
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005986:	1d3b      	adds	r3, r7, #4
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	461a      	mov	r2, r3
 800598e:	1d3b      	adds	r3, r7, #4
 8005990:	4619      	mov	r1, r3
 8005992:	2001      	movs	r0, #1
 8005994:	f7fa fbdc 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005998:	4603      	mov	r3, r0
 800599a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80059a2:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <_TrySendOverflowPacket+0xd8>)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80059a8:	4b08      	ldr	r3, [pc, #32]	; (80059cc <_TrySendOverflowPacket+0xd8>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	4b06      	ldr	r3, [pc, #24]	; (80059cc <_TrySendOverflowPacket+0xd8>)
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	e004      	b.n	80059c0 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80059b6:	4b05      	ldr	r3, [pc, #20]	; (80059cc <_TrySendOverflowPacket+0xd8>)
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	3301      	adds	r3, #1
 80059bc:	4a03      	ldr	r2, [pc, #12]	; (80059cc <_TrySendOverflowPacket+0xd8>)
 80059be:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80059c0:	693b      	ldr	r3, [r7, #16]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3730      	adds	r7, #48	; 0x30
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200023f0 	.word	0x200023f0
 80059d0:	e0001004 	.word	0xe0001004

080059d4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08a      	sub	sp, #40	; 0x28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80059e0:	4b63      	ldr	r3, [pc, #396]	; (8005b70 <_SendPacket+0x19c>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d010      	beq.n	8005a0a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80059e8:	4b61      	ldr	r3, [pc, #388]	; (8005b70 <_SendPacket+0x19c>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80a1 	beq.w	8005b34 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80059f2:	4b5f      	ldr	r3, [pc, #380]	; (8005b70 <_SendPacket+0x19c>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d109      	bne.n	8005a0e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80059fa:	f7ff ff7b 	bl	80058f4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80059fe:	4b5c      	ldr	r3, [pc, #368]	; (8005b70 <_SendPacket+0x19c>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	f040 8098 	bne.w	8005b38 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8005a08:	e001      	b.n	8005a0e <_SendPacket+0x3a>
    goto Send;
 8005a0a:	bf00      	nop
 8005a0c:	e000      	b.n	8005a10 <_SendPacket+0x3c>
Send:
 8005a0e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b1f      	cmp	r3, #31
 8005a14:	d809      	bhi.n	8005a2a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005a16:	4b56      	ldr	r3, [pc, #344]	; (8005b70 <_SendPacket+0x19c>)
 8005a18:	69da      	ldr	r2, [r3, #28]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f040 8089 	bne.w	8005b3c <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b17      	cmp	r3, #23
 8005a2e:	d807      	bhi.n	8005a40 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e03d      	b.n	8005abc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a4c:	d912      	bls.n	8005a74 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	09da      	lsrs	r2, r3, #7
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	3a01      	subs	r2, #1
 8005a66:	60fa      	str	r2, [r7, #12]
 8005a68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e006      	b.n	8005a82 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b7f      	cmp	r3, #127	; 0x7f
 8005a86:	d912      	bls.n	8005aae <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	09da      	lsrs	r2, r3, #7
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	3a01      	subs	r2, #1
 8005aa0:	60fa      	str	r2, [r7, #12]
 8005aa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	e006      	b.n	8005abc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005abc:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <_SendPacket+0x1a0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ac2:	4b2b      	ldr	r3, [pc, #172]	; (8005b70 <_SendPacket+0x19c>)
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	e00b      	b.n	8005aee <_SendPacket+0x11a>
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	1c59      	adds	r1, r3, #1
 8005ade:	6279      	str	r1, [r7, #36]	; 0x24
 8005ae0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	09db      	lsrs	r3, r3, #7
 8005aec:	623b      	str	r3, [r7, #32]
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	2b7f      	cmp	r3, #127	; 0x7f
 8005af2:	d8f0      	bhi.n	8005ad6 <_SendPacket+0x102>
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	627a      	str	r2, [r7, #36]	; 0x24
 8005afa:	6a3a      	ldr	r2, [r7, #32]
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	68f9      	ldr	r1, [r7, #12]
 8005b0e:	2001      	movs	r0, #1
 8005b10:	f7fa fb1e 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005b14:	4603      	mov	r3, r0
 8005b16:	613b      	str	r3, [r7, #16]
  if (Status) {
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005b1e:	4a14      	ldr	r2, [pc, #80]	; (8005b70 <_SendPacket+0x19c>)
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	60d3      	str	r3, [r2, #12]
 8005b24:	e00b      	b.n	8005b3e <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005b26:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <_SendPacket+0x19c>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <_SendPacket+0x19c>)
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	e004      	b.n	8005b3e <_SendPacket+0x16a>
    goto SendDone;
 8005b34:	bf00      	nop
 8005b36:	e002      	b.n	8005b3e <_SendPacket+0x16a>
      goto SendDone;
 8005b38:	bf00      	nop
 8005b3a:	e000      	b.n	8005b3e <_SendPacket+0x16a>
      goto SendDone;
 8005b3c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <_SendPacket+0x1a4>)
 8005b40:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005b44:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <_SendPacket+0x1a4>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d00b      	beq.n	8005b66 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b4e:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <_SendPacket+0x19c>)
 8005b50:	789b      	ldrb	r3, [r3, #2]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d107      	bne.n	8005b66 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b56:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <_SendPacket+0x19c>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b5c:	f7ff fe66 	bl	800582c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b60:	4b03      	ldr	r3, [pc, #12]	; (8005b70 <_SendPacket+0x19c>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005b66:	bf00      	nop
 8005b68:	3728      	adds	r7, #40	; 0x28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	200023f0 	.word	0x200023f0
 8005b74:	e0001004 	.word	0xe0001004
 8005b78:	20001b30 	.word	0x20001b30

08005b7c <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b0a2      	sub	sp, #136	; 0x88
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8005b92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8005b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01d      	beq.n	8005be2 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8005ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005baa:	2b25      	cmp	r3, #37	; 0x25
 8005bac:	d1f1      	bne.n	8005b92 <_VPrintHost+0x16>
      c = *p;
 8005bae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	1d19      	adds	r1, r3, #4
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6011      	str	r1, [r2, #0]
 8005bc0:	6819      	ldr	r1, [r3, #0]
 8005bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bcc:	460a      	mov	r2, r1
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	3388      	adds	r3, #136	; 0x88
 8005bd2:	443b      	add	r3, r7
 8005bd4:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8005bd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bdc:	2b10      	cmp	r3, #16
 8005bde:	d002      	beq.n	8005be6 <_VPrintHost+0x6a>
    c = *p++;
 8005be0:	e7d7      	b.n	8005b92 <_VPrintHost+0x16>
      break;
 8005be2:	bf00      	nop
 8005be4:	e000      	b.n	8005be8 <_VPrintHost+0x6c>
        break;
 8005be6:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8005be8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bec:	f04f 0120 	mov.w	r1, #32
 8005bf0:	f381 8811 	msr	BASEPRI, r1
 8005bf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bf6:	483f      	ldr	r0, [pc, #252]	; (8005cf4 <_VPrintHost+0x178>)
 8005bf8:	f7ff fe0d 	bl	8005816 <_PreparePacket>
 8005bfc:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bfe:	2280      	movs	r2, #128	; 0x80
 8005c00:	68f9      	ldr	r1, [r7, #12]
 8005c02:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005c04:	f7ff fdbb 	bl	800577e <_EncodeStr>
 8005c08:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8005c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c0c:	677b      	str	r3, [r7, #116]	; 0x74
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	673b      	str	r3, [r7, #112]	; 0x70
 8005c12:	e00b      	b.n	8005c2c <_VPrintHost+0xb0>
 8005c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	6779      	str	r1, [r7, #116]	; 0x74
 8005c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c28:	09db      	lsrs	r3, r3, #7
 8005c2a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c30:	d8f0      	bhi.n	8005c14 <_VPrintHost+0x98>
 8005c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	677a      	str	r2, [r7, #116]	; 0x74
 8005c38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c40:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8005c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c4c:	e00b      	b.n	8005c66 <_VPrintHost+0xea>
 8005c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c54:	1c59      	adds	r1, r3, #1
 8005c56:	66f9      	str	r1, [r7, #108]	; 0x6c
 8005c58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c62:	09db      	lsrs	r3, r3, #7
 8005c64:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c68:	2b7f      	cmp	r3, #127	; 0x7f
 8005c6a:	d8f0      	bhi.n	8005c4e <_VPrintHost+0xd2>
 8005c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7a:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8005c7c:	f107 0314 	add.w	r3, r7, #20
 8005c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8005c84:	e022      	b.n	8005ccc <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8005c86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c88:	667b      	str	r3, [r7, #100]	; 0x64
 8005c8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	663b      	str	r3, [r7, #96]	; 0x60
 8005c92:	e00b      	b.n	8005cac <_VPrintHost+0x130>
 8005c94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9a:	1c59      	adds	r1, r3, #1
 8005c9c:	6679      	str	r1, [r7, #100]	; 0x64
 8005c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ca8:	09db      	lsrs	r3, r3, #7
 8005caa:	663b      	str	r3, [r7, #96]	; 0x60
 8005cac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cae:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb0:	d8f0      	bhi.n	8005c94 <_VPrintHost+0x118>
 8005cb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	667a      	str	r2, [r7, #100]	; 0x64
 8005cb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cc0:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8005cc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8005ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cd0:	1e5a      	subs	r2, r3, #1
 8005cd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1d5      	bne.n	8005c86 <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005cda:	221a      	movs	r2, #26
 8005cdc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005cde:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005ce0:	f7ff fe78 	bl	80059d4 <_SendPacket>
    RECORD_END();
 8005ce4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ce6:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3788      	adds	r7, #136	; 0x88
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	20002420 	.word	0x20002420

08005cf8 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005d06:	2300      	movs	r3, #0
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d0e:	4a14      	ldr	r2, [pc, #80]	; (8005d60 <SEGGER_SYSVIEW_Init+0x68>)
 8005d10:	4914      	ldr	r1, [pc, #80]	; (8005d64 <SEGGER_SYSVIEW_Init+0x6c>)
 8005d12:	2001      	movs	r0, #1
 8005d14:	f7ff fc4e 	bl	80055b4 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005d18:	2300      	movs	r3, #0
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <SEGGER_SYSVIEW_Init+0x70>)
 8005d20:	4910      	ldr	r1, [pc, #64]	; (8005d64 <SEGGER_SYSVIEW_Init+0x6c>)
 8005d22:	2001      	movs	r0, #1
 8005d24:	f7ff fcb0 	bl	8005688 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005d28:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <SEGGER_SYSVIEW_Init+0x74>)
 8005d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d30:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <SEGGER_SYSVIEW_Init+0x78>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a0d      	ldr	r2, [pc, #52]	; (8005d6c <SEGGER_SYSVIEW_Init+0x74>)
 8005d36:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005d38:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <SEGGER_SYSVIEW_Init+0x74>)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005d3e:	4a0b      	ldr	r2, [pc, #44]	; (8005d6c <SEGGER_SYSVIEW_Init+0x74>)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005d44:	4a09      	ldr	r2, [pc, #36]	; (8005d6c <SEGGER_SYSVIEW_Init+0x74>)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005d4a:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <SEGGER_SYSVIEW_Init+0x74>)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005d50:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <SEGGER_SYSVIEW_Init+0x74>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005d56:	bf00      	nop
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20001fe8 	.word	0x20001fe8
 8005d64:	08008244 	.word	0x08008244
 8005d68:	200023e8 	.word	0x200023e8
 8005d6c:	200023f0 	.word	0x200023f0
 8005d70:	e0001004 	.word	0xe0001004

08005d74 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005d7c:	4a03      	ldr	r2, [pc, #12]	; (8005d8c <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6113      	str	r3, [r2, #16]
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr
 8005d8c:	200023f0 	.word	0x200023f0

08005d90 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d98:	f3ef 8311 	mrs	r3, BASEPRI
 8005d9c:	f04f 0120 	mov.w	r1, #32
 8005da0:	f381 8811 	msr	BASEPRI, r1
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	4808      	ldr	r0, [pc, #32]	; (8005dc8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005da8:	f7ff fd35 	bl	8005816 <_PreparePacket>
 8005dac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	68b8      	ldr	r0, [r7, #8]
 8005db4:	f7ff fe0e 	bl	80059d4 <_SendPacket>
  RECORD_END();
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f383 8811 	msr	BASEPRI, r3
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20002420 	.word	0x20002420

08005dcc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dda:	f04f 0120 	mov.w	r1, #32
 8005dde:	f381 8811 	msr	BASEPRI, r1
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	4816      	ldr	r0, [pc, #88]	; (8005e40 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005de6:	f7ff fd16 	bl	8005816 <_PreparePacket>
 8005dea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	e00b      	b.n	8005e12 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	1c59      	adds	r1, r3, #1
 8005e02:	61f9      	str	r1, [r7, #28]
 8005e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	09db      	lsrs	r3, r3, #7
 8005e10:	61bb      	str	r3, [r7, #24]
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b7f      	cmp	r3, #127	; 0x7f
 8005e16:	d8f0      	bhi.n	8005dfa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	61fa      	str	r2, [r7, #28]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	6938      	ldr	r0, [r7, #16]
 8005e2e:	f7ff fdd1 	bl	80059d4 <_SendPacket>
  RECORD_END();
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f383 8811 	msr	BASEPRI, r3
}
 8005e38:	bf00      	nop
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	20002420 	.word	0x20002420

08005e44 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08c      	sub	sp, #48	; 0x30
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e50:	f3ef 8311 	mrs	r3, BASEPRI
 8005e54:	f04f 0120 	mov.w	r1, #32
 8005e58:	f381 8811 	msr	BASEPRI, r1
 8005e5c:	61fb      	str	r3, [r7, #28]
 8005e5e:	4825      	ldr	r0, [pc, #148]	; (8005ef4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005e60:	f7ff fcd9 	bl	8005816 <_PreparePacket>
 8005e64:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e72:	e00b      	b.n	8005e8c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	1c59      	adds	r1, r3, #1
 8005e7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	09db      	lsrs	r3, r3, #7
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e90:	d8f0      	bhi.n	8005e74 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	e00b      	b.n	8005ec4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	1c59      	adds	r1, r3, #1
 8005eb4:	6279      	str	r1, [r7, #36]	; 0x24
 8005eb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	09db      	lsrs	r3, r3, #7
 8005ec2:	623b      	str	r3, [r7, #32]
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec8:	d8f0      	bhi.n	8005eac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	627a      	str	r2, [r7, #36]	; 0x24
 8005ed0:	6a3a      	ldr	r2, [r7, #32]
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	6979      	ldr	r1, [r7, #20]
 8005ede:	69b8      	ldr	r0, [r7, #24]
 8005ee0:	f7ff fd78 	bl	80059d4 <_SendPacket>
  RECORD_END();
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f383 8811 	msr	BASEPRI, r3
}
 8005eea:	bf00      	nop
 8005eec:	3730      	adds	r7, #48	; 0x30
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20002420 	.word	0x20002420

08005ef8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08e      	sub	sp, #56	; 0x38
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f06:	f3ef 8311 	mrs	r3, BASEPRI
 8005f0a:	f04f 0120 	mov.w	r1, #32
 8005f0e:	f381 8811 	msr	BASEPRI, r1
 8005f12:	61fb      	str	r3, [r7, #28]
 8005f14:	4832      	ldr	r0, [pc, #200]	; (8005fe0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005f16:	f7ff fc7e 	bl	8005816 <_PreparePacket>
 8005f1a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	633b      	str	r3, [r7, #48]	; 0x30
 8005f28:	e00b      	b.n	8005f42 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f30:	1c59      	adds	r1, r3, #1
 8005f32:	6379      	str	r1, [r7, #52]	; 0x34
 8005f34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	09db      	lsrs	r3, r3, #7
 8005f40:	633b      	str	r3, [r7, #48]	; 0x30
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	2b7f      	cmp	r3, #127	; 0x7f
 8005f46:	d8f0      	bhi.n	8005f2a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	637a      	str	r2, [r7, #52]	; 0x34
 8005f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f60:	e00b      	b.n	8005f7a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	1c59      	adds	r1, r3, #1
 8005f6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	09db      	lsrs	r3, r3, #7
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7e:	d8f0      	bhi.n	8005f62 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	623b      	str	r3, [r7, #32]
 8005f98:	e00b      	b.n	8005fb2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	1c59      	adds	r1, r3, #1
 8005fa2:	6279      	str	r1, [r7, #36]	; 0x24
 8005fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	09db      	lsrs	r3, r3, #7
 8005fb0:	623b      	str	r3, [r7, #32]
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fb6:	d8f0      	bhi.n	8005f9a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	627a      	str	r2, [r7, #36]	; 0x24
 8005fbe:	6a3a      	ldr	r2, [r7, #32]
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	701a      	strb	r2, [r3, #0]
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	6979      	ldr	r1, [r7, #20]
 8005fcc:	69b8      	ldr	r0, [r7, #24]
 8005fce:	f7ff fd01 	bl	80059d4 <_SendPacket>
  RECORD_END();
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f383 8811 	msr	BASEPRI, r3
}
 8005fd8:	bf00      	nop
 8005fda:	3738      	adds	r7, #56	; 0x38
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20002420 	.word	0x20002420

08005fe4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b090      	sub	sp, #64	; 0x40
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff6:	f04f 0120 	mov.w	r1, #32
 8005ffa:	f381 8811 	msr	BASEPRI, r1
 8005ffe:	61fb      	str	r3, [r7, #28]
 8006000:	4840      	ldr	r0, [pc, #256]	; (8006104 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006002:	f7ff fc08 	bl	8005816 <_PreparePacket>
 8006006:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	63bb      	str	r3, [r7, #56]	; 0x38
 8006014:	e00b      	b.n	800602e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	b2da      	uxtb	r2, r3
 800601a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601c:	1c59      	adds	r1, r3, #1
 800601e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006020:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	09db      	lsrs	r3, r3, #7
 800602c:	63bb      	str	r3, [r7, #56]	; 0x38
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	2b7f      	cmp	r3, #127	; 0x7f
 8006032:	d8f0      	bhi.n	8006016 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	63fa      	str	r2, [r7, #60]	; 0x3c
 800603a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006042:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	637b      	str	r3, [r7, #52]	; 0x34
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	633b      	str	r3, [r7, #48]	; 0x30
 800604c:	e00b      	b.n	8006066 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	b2da      	uxtb	r2, r3
 8006052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006054:	1c59      	adds	r1, r3, #1
 8006056:	6379      	str	r1, [r7, #52]	; 0x34
 8006058:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	09db      	lsrs	r3, r3, #7
 8006064:	633b      	str	r3, [r7, #48]	; 0x30
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	2b7f      	cmp	r3, #127	; 0x7f
 800606a:	d8f0      	bhi.n	800604e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	637a      	str	r2, [r7, #52]	; 0x34
 8006072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28
 8006084:	e00b      	b.n	800609e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	b2da      	uxtb	r2, r3
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	1c59      	adds	r1, r3, #1
 800608e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006090:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	09db      	lsrs	r3, r3, #7
 800609c:	62bb      	str	r3, [r7, #40]	; 0x28
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	2b7f      	cmp	r3, #127	; 0x7f
 80060a2:	d8f0      	bhi.n	8006086 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
 80060b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060ba:	623b      	str	r3, [r7, #32]
 80060bc:	e00b      	b.n	80060d6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	1c59      	adds	r1, r3, #1
 80060c6:	6279      	str	r1, [r7, #36]	; 0x24
 80060c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	09db      	lsrs	r3, r3, #7
 80060d4:	623b      	str	r3, [r7, #32]
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	2b7f      	cmp	r3, #127	; 0x7f
 80060da:	d8f0      	bhi.n	80060be <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	627a      	str	r2, [r7, #36]	; 0x24
 80060e2:	6a3a      	ldr	r2, [r7, #32]
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	6979      	ldr	r1, [r7, #20]
 80060f0:	69b8      	ldr	r0, [r7, #24]
 80060f2:	f7ff fc6f 	bl	80059d4 <_SendPacket>
  RECORD_END();
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	f383 8811 	msr	BASEPRI, r3
}
 80060fc:	bf00      	nop
 80060fe:	3740      	adds	r7, #64	; 0x40
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20002420 	.word	0x20002420

08006108 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b08c      	sub	sp, #48	; 0x30
 800610c:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800610e:	4b59      	ldr	r3, [pc, #356]	; (8006274 <SEGGER_SYSVIEW_Start+0x16c>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	f040 80aa 	bne.w	800626c <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8006118:	4b56      	ldr	r3, [pc, #344]	; (8006274 <SEGGER_SYSVIEW_Start+0x16c>)
 800611a:	2201      	movs	r2, #1
 800611c:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800611e:	f3ef 8311 	mrs	r3, BASEPRI
 8006122:	f04f 0120 	mov.w	r1, #32
 8006126:	f381 8811 	msr	BASEPRI, r1
 800612a:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800612c:	220a      	movs	r2, #10
 800612e:	4952      	ldr	r1, [pc, #328]	; (8006278 <SEGGER_SYSVIEW_Start+0x170>)
 8006130:	2001      	movs	r0, #1
 8006132:	f7fa f80d 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800613c:	200a      	movs	r0, #10
 800613e:	f7ff fe27 	bl	8005d90 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006142:	f3ef 8311 	mrs	r3, BASEPRI
 8006146:	f04f 0120 	mov.w	r1, #32
 800614a:	f381 8811 	msr	BASEPRI, r1
 800614e:	60bb      	str	r3, [r7, #8]
 8006150:	484a      	ldr	r0, [pc, #296]	; (800627c <SEGGER_SYSVIEW_Start+0x174>)
 8006152:	f7ff fb60 	bl	8005816 <_PreparePacket>
 8006156:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006160:	4b44      	ldr	r3, [pc, #272]	; (8006274 <SEGGER_SYSVIEW_Start+0x16c>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	62bb      	str	r3, [r7, #40]	; 0x28
 8006166:	e00b      	b.n	8006180 <SEGGER_SYSVIEW_Start+0x78>
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	b2da      	uxtb	r2, r3
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	1c59      	adds	r1, r3, #1
 8006170:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006172:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	09db      	lsrs	r3, r3, #7
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2b7f      	cmp	r3, #127	; 0x7f
 8006184:	d8f0      	bhi.n	8006168 <SEGGER_SYSVIEW_Start+0x60>
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800618c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
 800619a:	4b36      	ldr	r3, [pc, #216]	; (8006274 <SEGGER_SYSVIEW_Start+0x16c>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	623b      	str	r3, [r7, #32]
 80061a0:	e00b      	b.n	80061ba <SEGGER_SYSVIEW_Start+0xb2>
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	1c59      	adds	r1, r3, #1
 80061aa:	6279      	str	r1, [r7, #36]	; 0x24
 80061ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	09db      	lsrs	r3, r3, #7
 80061b8:	623b      	str	r3, [r7, #32]
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	2b7f      	cmp	r3, #127	; 0x7f
 80061be:	d8f0      	bhi.n	80061a2 <SEGGER_SYSVIEW_Start+0x9a>
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	627a      	str	r2, [r7, #36]	; 0x24
 80061c6:	6a3a      	ldr	r2, [r7, #32]
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	61fb      	str	r3, [r7, #28]
 80061d4:	4b27      	ldr	r3, [pc, #156]	; (8006274 <SEGGER_SYSVIEW_Start+0x16c>)
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	e00b      	b.n	80061f4 <SEGGER_SYSVIEW_Start+0xec>
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	1c59      	adds	r1, r3, #1
 80061e4:	61f9      	str	r1, [r7, #28]
 80061e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	09db      	lsrs	r3, r3, #7
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	2b7f      	cmp	r3, #127	; 0x7f
 80061f8:	d8f0      	bhi.n	80061dc <SEGGER_SYSVIEW_Start+0xd4>
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	61fa      	str	r2, [r7, #28]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	2302      	movs	r3, #2
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	e00b      	b.n	800622c <SEGGER_SYSVIEW_Start+0x124>
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	b2da      	uxtb	r2, r3
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	6179      	str	r1, [r7, #20]
 800621e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	09db      	lsrs	r3, r3, #7
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b7f      	cmp	r3, #127	; 0x7f
 8006230:	d8f0      	bhi.n	8006214 <SEGGER_SYSVIEW_Start+0x10c>
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	617a      	str	r2, [r7, #20]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006242:	2218      	movs	r2, #24
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7ff fbc4 	bl	80059d4 <_SendPacket>
      RECORD_END();
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <SEGGER_SYSVIEW_Start+0x16c>)
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800625a:	4b06      	ldr	r3, [pc, #24]	; (8006274 <SEGGER_SYSVIEW_Start+0x16c>)
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006260:	f000 f9ec 	bl	800663c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006264:	f000 f9b2 	bl	80065cc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006268:	f000 fbb0 	bl	80069cc <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800626c:	bf00      	nop
 800626e:	3730      	adds	r7, #48	; 0x30
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	200023f0 	.word	0x200023f0
 8006278:	08008324 	.word	0x08008324
 800627c:	20002420 	.word	0x20002420

08006280 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006286:	f3ef 8311 	mrs	r3, BASEPRI
 800628a:	f04f 0120 	mov.w	r1, #32
 800628e:	f381 8811 	msr	BASEPRI, r1
 8006292:	607b      	str	r3, [r7, #4]
 8006294:	480b      	ldr	r0, [pc, #44]	; (80062c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006296:	f7ff fabe 	bl	8005816 <_PreparePacket>
 800629a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800629c:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d007      	beq.n	80062b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80062a4:	220b      	movs	r2, #11
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6838      	ldr	r0, [r7, #0]
 80062aa:	f7ff fb93 	bl	80059d4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80062ae:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f383 8811 	msr	BASEPRI, r3
}
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20002420 	.word	0x20002420
 80062c8:	200023f0 	.word	0x200023f0

080062cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08c      	sub	sp, #48	; 0x30
 80062d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80062d2:	f3ef 8311 	mrs	r3, BASEPRI
 80062d6:	f04f 0120 	mov.w	r1, #32
 80062da:	f381 8811 	msr	BASEPRI, r1
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	4845      	ldr	r0, [pc, #276]	; (80063f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80062e2:	f7ff fa98 	bl	8005816 <_PreparePacket>
 80062e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f0:	4b42      	ldr	r3, [pc, #264]	; (80063fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f6:	e00b      	b.n	8006310 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	1c59      	adds	r1, r3, #1
 8006300:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	09db      	lsrs	r3, r3, #7
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	2b7f      	cmp	r3, #127	; 0x7f
 8006314:	d8f0      	bhi.n	80062f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800631c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
 800632a:	4b34      	ldr	r3, [pc, #208]	; (80063fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	e00b      	b.n	800634a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	b2da      	uxtb	r2, r3
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	1c59      	adds	r1, r3, #1
 800633a:	6279      	str	r1, [r7, #36]	; 0x24
 800633c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	09db      	lsrs	r3, r3, #7
 8006348:	623b      	str	r3, [r7, #32]
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	2b7f      	cmp	r3, #127	; 0x7f
 800634e:	d8f0      	bhi.n	8006332 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	627a      	str	r2, [r7, #36]	; 0x24
 8006356:	6a3a      	ldr	r2, [r7, #32]
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	4b25      	ldr	r3, [pc, #148]	; (80063fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	61bb      	str	r3, [r7, #24]
 800636a:	e00b      	b.n	8006384 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	b2da      	uxtb	r2, r3
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	1c59      	adds	r1, r3, #1
 8006374:	61f9      	str	r1, [r7, #28]
 8006376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	09db      	lsrs	r3, r3, #7
 8006382:	61bb      	str	r3, [r7, #24]
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	2b7f      	cmp	r3, #127	; 0x7f
 8006388:	d8f0      	bhi.n	800636c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	61fa      	str	r2, [r7, #28]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	2302      	movs	r3, #2
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	e00b      	b.n	80063bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	1c59      	adds	r1, r3, #1
 80063ac:	6179      	str	r1, [r7, #20]
 80063ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	09db      	lsrs	r3, r3, #7
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b7f      	cmp	r3, #127	; 0x7f
 80063c0:	d8f0      	bhi.n	80063a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	617a      	str	r2, [r7, #20]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80063d2:	2218      	movs	r2, #24
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	68b8      	ldr	r0, [r7, #8]
 80063d8:	f7ff fafc 	bl	80059d4 <_SendPacket>
  RECORD_END();
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80063e2:	4b06      	ldr	r3, [pc, #24]	; (80063fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80063ea:	4b04      	ldr	r3, [pc, #16]	; (80063fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	4798      	blx	r3
  }
}
 80063f0:	bf00      	nop
 80063f2:	3730      	adds	r7, #48	; 0x30
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20002420 	.word	0x20002420
 80063fc:	200023f0 	.word	0x200023f0

08006400 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b092      	sub	sp, #72	; 0x48
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006408:	f3ef 8311 	mrs	r3, BASEPRI
 800640c:	f04f 0120 	mov.w	r1, #32
 8006410:	f381 8811 	msr	BASEPRI, r1
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	486b      	ldr	r0, [pc, #428]	; (80065c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006418:	f7ff f9fd 	bl	8005816 <_PreparePacket>
 800641c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	647b      	str	r3, [r7, #68]	; 0x44
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4b67      	ldr	r3, [pc, #412]	; (80065c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	643b      	str	r3, [r7, #64]	; 0x40
 8006434:	e00b      	b.n	800644e <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8006436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006438:	b2da      	uxtb	r2, r3
 800643a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800643c:	1c59      	adds	r1, r3, #1
 800643e:	6479      	str	r1, [r7, #68]	; 0x44
 8006440:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]
 8006448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800644a:	09db      	lsrs	r3, r3, #7
 800644c:	643b      	str	r3, [r7, #64]	; 0x40
 800644e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006450:	2b7f      	cmp	r3, #127	; 0x7f
 8006452:	d8f0      	bhi.n	8006436 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8006454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	647a      	str	r2, [r7, #68]	; 0x44
 800645a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006462:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	63bb      	str	r3, [r7, #56]	; 0x38
 800646e:	e00b      	b.n	8006488 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8006470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006472:	b2da      	uxtb	r2, r3
 8006474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006476:	1c59      	adds	r1, r3, #1
 8006478:	63f9      	str	r1, [r7, #60]	; 0x3c
 800647a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006484:	09db      	lsrs	r3, r3, #7
 8006486:	63bb      	str	r3, [r7, #56]	; 0x38
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	2b7f      	cmp	r3, #127	; 0x7f
 800648c:	d8f0      	bhi.n	8006470 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800648e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649c:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	4619      	mov	r1, r3
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f7ff f969 	bl	800577e <_EncodeStr>
 80064ac:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80064ae:	2209      	movs	r2, #9
 80064b0:	68f9      	ldr	r1, [r7, #12]
 80064b2:	6938      	ldr	r0, [r7, #16]
 80064b4:	f7ff fa8e 	bl	80059d4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	4b40      	ldr	r3, [pc, #256]	; (80065c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	089b      	lsrs	r3, r3, #2
 80064cc:	633b      	str	r3, [r7, #48]	; 0x30
 80064ce:	e00b      	b.n	80064e8 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d6:	1c59      	adds	r1, r3, #1
 80064d8:	6379      	str	r1, [r7, #52]	; 0x34
 80064da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	09db      	lsrs	r3, r3, #7
 80064e6:	633b      	str	r3, [r7, #48]	; 0x30
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	2b7f      	cmp	r3, #127	; 0x7f
 80064ec:	d8f0      	bhi.n	80064d0 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	637a      	str	r2, [r7, #52]	; 0x34
 80064f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	62bb      	str	r3, [r7, #40]	; 0x28
 8006508:	e00b      	b.n	8006522 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	b2da      	uxtb	r2, r3
 800650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006510:	1c59      	adds	r1, r3, #1
 8006512:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	09db      	lsrs	r3, r3, #7
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	2b7f      	cmp	r3, #127	; 0x7f
 8006526:	d8f0      	bhi.n	800650a <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800652e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	701a      	strb	r2, [r3, #0]
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	627b      	str	r3, [r7, #36]	; 0x24
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	623b      	str	r3, [r7, #32]
 8006542:	e00b      	b.n	800655c <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	b2da      	uxtb	r2, r3
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	1c59      	adds	r1, r3, #1
 800654c:	6279      	str	r1, [r7, #36]	; 0x24
 800654e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	09db      	lsrs	r3, r3, #7
 800655a:	623b      	str	r3, [r7, #32]
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	2b7f      	cmp	r3, #127	; 0x7f
 8006560:	d8f0      	bhi.n	8006544 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	627a      	str	r2, [r7, #36]	; 0x24
 8006568:	6a3a      	ldr	r2, [r7, #32]
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	61fb      	str	r3, [r7, #28]
 8006576:	2300      	movs	r3, #0
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	e00b      	b.n	8006594 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	1c59      	adds	r1, r3, #1
 8006584:	61f9      	str	r1, [r7, #28]
 8006586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	09db      	lsrs	r3, r3, #7
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b7f      	cmp	r3, #127	; 0x7f
 8006598:	d8f0      	bhi.n	800657c <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	61fa      	str	r2, [r7, #28]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80065aa:	2215      	movs	r2, #21
 80065ac:	68f9      	ldr	r1, [r7, #12]
 80065ae:	6938      	ldr	r0, [r7, #16]
 80065b0:	f7ff fa10 	bl	80059d4 <_SendPacket>
  RECORD_END();
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f383 8811 	msr	BASEPRI, r3
}
 80065ba:	bf00      	nop
 80065bc:	3748      	adds	r7, #72	; 0x48
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20002420 	.word	0x20002420
 80065c8:	200023f0 	.word	0x200023f0

080065cc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80065d0:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80065d8:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80065e2:	4b03      	ldr	r3, [pc, #12]	; (80065f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	4798      	blx	r3
  }
}
 80065ea:	bf00      	nop
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	200023f0 	.word	0x200023f0

080065f4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006600:	f04f 0120 	mov.w	r1, #32
 8006604:	f381 8811 	msr	BASEPRI, r1
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	480b      	ldr	r0, [pc, #44]	; (8006638 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800660c:	f7ff f903 	bl	8005816 <_PreparePacket>
 8006610:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006612:	2280      	movs	r2, #128	; 0x80
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	6938      	ldr	r0, [r7, #16]
 8006618:	f7ff f8b1 	bl	800577e <_EncodeStr>
 800661c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800661e:	220e      	movs	r2, #14
 8006620:	68f9      	ldr	r1, [r7, #12]
 8006622:	6938      	ldr	r0, [r7, #16]
 8006624:	f7ff f9d6 	bl	80059d4 <_SendPacket>
  RECORD_END();
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f383 8811 	msr	BASEPRI, r3
}
 800662e:	bf00      	nop
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20002420 	.word	0x20002420

0800663c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006642:	4b15      	ldr	r3, [pc, #84]	; (8006698 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01a      	beq.n	8006680 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800664a:	4b13      	ldr	r3, [pc, #76]	; (8006698 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d015      	beq.n	8006680 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006654:	4b10      	ldr	r3, [pc, #64]	; (8006698 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4798      	blx	r3
 800665c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006660:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006666:	f04f 0200 	mov.w	r2, #0
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	000a      	movs	r2, r1
 8006670:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006672:	4613      	mov	r3, r2
 8006674:	461a      	mov	r2, r3
 8006676:	4621      	mov	r1, r4
 8006678:	200d      	movs	r0, #13
 800667a:	f7ff fbe3 	bl	8005e44 <SEGGER_SYSVIEW_RecordU32x2>
 800667e:	e006      	b.n	800668e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4619      	mov	r1, r3
 8006686:	200c      	movs	r0, #12
 8006688:	f7ff fba0 	bl	8005dcc <SEGGER_SYSVIEW_RecordU32>
  }
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bd90      	pop	{r4, r7, pc}
 8006696:	bf00      	nop
 8006698:	200023f0 	.word	0x200023f0
 800669c:	e0001004 	.word	0xe0001004

080066a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066a6:	f3ef 8311 	mrs	r3, BASEPRI
 80066aa:	f04f 0120 	mov.w	r1, #32
 80066ae:	f381 8811 	msr	BASEPRI, r1
 80066b2:	607b      	str	r3, [r7, #4]
 80066b4:	4807      	ldr	r0, [pc, #28]	; (80066d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80066b6:	f7ff f8ae 	bl	8005816 <_PreparePacket>
 80066ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80066bc:	2211      	movs	r2, #17
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6838      	ldr	r0, [r7, #0]
 80066c2:	f7ff f987 	bl	80059d4 <_SendPacket>
  RECORD_END();
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f383 8811 	msr	BASEPRI, r3
}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20002420 	.word	0x20002420

080066d8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066e0:	f3ef 8311 	mrs	r3, BASEPRI
 80066e4:	f04f 0120 	mov.w	r1, #32
 80066e8:	f381 8811 	msr	BASEPRI, r1
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	481a      	ldr	r0, [pc, #104]	; (8006758 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80066f0:	f7ff f891 	bl	8005816 <_PreparePacket>
 80066f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066fa:	4b18      	ldr	r3, [pc, #96]	; (800675c <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	089b      	lsrs	r3, r3, #2
 8006704:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	61fb      	str	r3, [r7, #28]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	e00b      	b.n	8006728 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	b2da      	uxtb	r2, r3
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	1c59      	adds	r1, r3, #1
 8006718:	61f9      	str	r1, [r7, #28]
 800671a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	09db      	lsrs	r3, r3, #7
 8006726:	61bb      	str	r3, [r7, #24]
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	2b7f      	cmp	r3, #127	; 0x7f
 800672c:	d8f0      	bhi.n	8006710 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	61fa      	str	r2, [r7, #28]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800673e:	2208      	movs	r2, #8
 8006740:	68f9      	ldr	r1, [r7, #12]
 8006742:	6938      	ldr	r0, [r7, #16]
 8006744:	f7ff f946 	bl	80059d4 <_SendPacket>
  RECORD_END();
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f383 8811 	msr	BASEPRI, r3
}
 800674e:	bf00      	nop
 8006750:	3720      	adds	r7, #32
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20002420 	.word	0x20002420
 800675c:	200023f0 	.word	0x200023f0

08006760 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006768:	f3ef 8311 	mrs	r3, BASEPRI
 800676c:	f04f 0120 	mov.w	r1, #32
 8006770:	f381 8811 	msr	BASEPRI, r1
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	481a      	ldr	r0, [pc, #104]	; (80067e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006778:	f7ff f84d 	bl	8005816 <_PreparePacket>
 800677c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006782:	4b18      	ldr	r3, [pc, #96]	; (80067e4 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	089b      	lsrs	r3, r3, #2
 800678c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	61fb      	str	r3, [r7, #28]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	e00b      	b.n	80067b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	b2da      	uxtb	r2, r3
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	1c59      	adds	r1, r3, #1
 80067a0:	61f9      	str	r1, [r7, #28]
 80067a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	09db      	lsrs	r3, r3, #7
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b7f      	cmp	r3, #127	; 0x7f
 80067b4:	d8f0      	bhi.n	8006798 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	61fa      	str	r2, [r7, #28]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80067c6:	2204      	movs	r2, #4
 80067c8:	68f9      	ldr	r1, [r7, #12]
 80067ca:	6938      	ldr	r0, [r7, #16]
 80067cc:	f7ff f902 	bl	80059d4 <_SendPacket>
  RECORD_END();
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f383 8811 	msr	BASEPRI, r3
}
 80067d6:	bf00      	nop
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20002420 	.word	0x20002420
 80067e4:	200023f0 	.word	0x200023f0

080067e8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067f0:	f3ef 8311 	mrs	r3, BASEPRI
 80067f4:	f04f 0120 	mov.w	r1, #32
 80067f8:	f381 8811 	msr	BASEPRI, r1
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	481a      	ldr	r0, [pc, #104]	; (8006868 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006800:	f7ff f809 	bl	8005816 <_PreparePacket>
 8006804:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800680a:	4b18      	ldr	r3, [pc, #96]	; (800686c <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	089b      	lsrs	r3, r3, #2
 8006814:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	e00b      	b.n	8006838 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	1c59      	adds	r1, r3, #1
 8006828:	61f9      	str	r1, [r7, #28]
 800682a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	09db      	lsrs	r3, r3, #7
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b7f      	cmp	r3, #127	; 0x7f
 800683c:	d8f0      	bhi.n	8006820 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	61fa      	str	r2, [r7, #28]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800684e:	2206      	movs	r2, #6
 8006850:	68f9      	ldr	r1, [r7, #12]
 8006852:	6938      	ldr	r0, [r7, #16]
 8006854:	f7ff f8be 	bl	80059d4 <_SendPacket>
  RECORD_END();
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f383 8811 	msr	BASEPRI, r3
}
 800685e:	bf00      	nop
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20002420 	.word	0x20002420
 800686c:	200023f0 	.word	0x200023f0

08006870 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006878:	4b04      	ldr	r3, [pc, #16]	; (800688c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	089b      	lsrs	r3, r3, #2
}
 8006882:	4618      	mov	r0, r3
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	bc80      	pop	{r7}
 800688a:	4770      	bx	lr
 800688c:	200023f0 	.word	0x200023f0

08006890 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b08c      	sub	sp, #48	; 0x30
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800689a:	4b3b      	ldr	r3, [pc, #236]	; (8006988 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d06d      	beq.n	800697e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80068a2:	4b39      	ldr	r3, [pc, #228]	; (8006988 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80068a8:	2300      	movs	r3, #0
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ac:	e008      	b.n	80068c0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80068b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d007      	beq.n	80068ca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	3301      	adds	r3, #1
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d3f2      	bcc.n	80068ae <SEGGER_SYSVIEW_SendModule+0x1e>
 80068c8:	e000      	b.n	80068cc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80068ca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d055      	beq.n	800697e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068d2:	f3ef 8311 	mrs	r3, BASEPRI
 80068d6:	f04f 0120 	mov.w	r1, #32
 80068da:	f381 8811 	msr	BASEPRI, r1
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	482a      	ldr	r0, [pc, #168]	; (800698c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80068e2:	f7fe ff98 	bl	8005816 <_PreparePacket>
 80068e6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	623b      	str	r3, [r7, #32]
 80068f4:	e00b      	b.n	800690e <SEGGER_SYSVIEW_SendModule+0x7e>
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	1c59      	adds	r1, r3, #1
 80068fe:	6279      	str	r1, [r7, #36]	; 0x24
 8006900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	09db      	lsrs	r3, r3, #7
 800690c:	623b      	str	r3, [r7, #32]
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	2b7f      	cmp	r3, #127	; 0x7f
 8006912:	d8f0      	bhi.n	80068f6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	627a      	str	r2, [r7, #36]	; 0x24
 800691a:	6a3a      	ldr	r2, [r7, #32]
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	e00b      	b.n	8006948 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	b2da      	uxtb	r2, r3
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	1c59      	adds	r1, r3, #1
 8006938:	61f9      	str	r1, [r7, #28]
 800693a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	09db      	lsrs	r3, r3, #7
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	2b7f      	cmp	r3, #127	; 0x7f
 800694c:	d8f0      	bhi.n	8006930 <SEGGER_SYSVIEW_SendModule+0xa0>
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	61fa      	str	r2, [r7, #28]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2280      	movs	r2, #128	; 0x80
 8006964:	4619      	mov	r1, r3
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f7fe ff09 	bl	800577e <_EncodeStr>
 800696c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800696e:	2216      	movs	r2, #22
 8006970:	68f9      	ldr	r1, [r7, #12]
 8006972:	6938      	ldr	r0, [r7, #16]
 8006974:	f7ff f82e 	bl	80059d4 <_SendPacket>
      RECORD_END();
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800697e:	bf00      	nop
 8006980:	3730      	adds	r7, #48	; 0x30
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20002418 	.word	0x20002418
 800698c:	20002420 	.word	0x20002420

08006990 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006996:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00f      	beq.n	80069be <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800699e:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f2      	bne.n	80069a4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20002418 	.word	0x20002418

080069cc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80069d2:	f3ef 8311 	mrs	r3, BASEPRI
 80069d6:	f04f 0120 	mov.w	r1, #32
 80069da:	f381 8811 	msr	BASEPRI, r1
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	4817      	ldr	r0, [pc, #92]	; (8006a40 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80069e2:	f7fe ff18 	bl	8005816 <_PreparePacket>
 80069e6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	e00b      	b.n	8006a10 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	1c59      	adds	r1, r3, #1
 8006a00:	6179      	str	r1, [r7, #20]
 8006a02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	09db      	lsrs	r3, r3, #7
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b7f      	cmp	r3, #127	; 0x7f
 8006a14:	d8f0      	bhi.n	80069f8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	617a      	str	r2, [r7, #20]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006a26:	221b      	movs	r2, #27
 8006a28:	6879      	ldr	r1, [r7, #4]
 8006a2a:	68b8      	ldr	r0, [r7, #8]
 8006a2c:	f7fe ffd2 	bl	80059d4 <_SendPacket>
  RECORD_END();
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f383 8811 	msr	BASEPRI, r3
}
 8006a36:	bf00      	nop
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20002420 	.word	0x20002420
 8006a44:	2000241c 	.word	0x2000241c

08006a48 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8006a48:	b40f      	push	{r0, r1, r2, r3}
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b082      	sub	sp, #8
 8006a4e:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8006a50:	f107 0314 	add.w	r3, r7, #20
 8006a54:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006a56:	1d3b      	adds	r3, r7, #4
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	6938      	ldr	r0, [r7, #16]
 8006a5e:	f7ff f88d 	bl	8005b7c <_VPrintHost>
  va_end(ParamList);
#endif
}
 8006a62:	bf00      	nop
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a6c:	b004      	add	sp, #16
 8006a6e:	4770      	bx	lr

08006a70 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a78:	f3ef 8311 	mrs	r3, BASEPRI
 8006a7c:	f04f 0120 	mov.w	r1, #32
 8006a80:	f381 8811 	msr	BASEPRI, r1
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	4827      	ldr	r0, [pc, #156]	; (8006b24 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006a88:	f7fe fec5 	bl	8005816 <_PreparePacket>
 8006a8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a8e:	2280      	movs	r2, #128	; 0x80
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	6938      	ldr	r0, [r7, #16]
 8006a94:	f7fe fe73 	bl	800577e <_EncodeStr>
 8006a98:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	623b      	str	r3, [r7, #32]
 8006aa2:	e00b      	b.n	8006abc <SEGGER_SYSVIEW_Warn+0x4c>
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	1c59      	adds	r1, r3, #1
 8006aac:	6279      	str	r1, [r7, #36]	; 0x24
 8006aae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	09db      	lsrs	r3, r3, #7
 8006aba:	623b      	str	r3, [r7, #32]
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac0:	d8f0      	bhi.n	8006aa4 <SEGGER_SYSVIEW_Warn+0x34>
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	e00b      	b.n	8006af4 <SEGGER_SYSVIEW_Warn+0x84>
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	1c59      	adds	r1, r3, #1
 8006ae4:	61f9      	str	r1, [r7, #28]
 8006ae6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	09db      	lsrs	r3, r3, #7
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2b7f      	cmp	r3, #127	; 0x7f
 8006af8:	d8f0      	bhi.n	8006adc <SEGGER_SYSVIEW_Warn+0x6c>
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	61fa      	str	r2, [r7, #28]
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006b0a:	221a      	movs	r2, #26
 8006b0c:	68f9      	ldr	r1, [r7, #12]
 8006b0e:	6938      	ldr	r0, [r7, #16]
 8006b10:	f7fe ff60 	bl	80059d4 <_SendPacket>
  RECORD_END();
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f383 8811 	msr	BASEPRI, r3
}
 8006b1a:	bf00      	nop
 8006b1c:	3728      	adds	r7, #40	; 0x28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20002420 	.word	0x20002420

08006b28 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006b2c:	4803      	ldr	r0, [pc, #12]	; (8006b3c <_cbSendSystemDesc+0x14>)
 8006b2e:	f7ff fd61 	bl	80065f4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006b32:	4803      	ldr	r0, [pc, #12]	; (8006b40 <_cbSendSystemDesc+0x18>)
 8006b34:	f7ff fd5e 	bl	80065f4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006b38:	bf00      	nop
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	0800824c 	.word	0x0800824c
 8006b40:	08008280 	.word	0x08008280

08006b44 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006b48:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <SEGGER_SYSVIEW_Conf+0x20>)
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <SEGGER_SYSVIEW_Conf+0x20>)
 8006b4e:	6819      	ldr	r1, [r3, #0]
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <SEGGER_SYSVIEW_Conf+0x24>)
 8006b52:	4a06      	ldr	r2, [pc, #24]	; (8006b6c <SEGGER_SYSVIEW_Conf+0x28>)
 8006b54:	f7ff f8d0 	bl	8005cf8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006b58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006b5c:	f7ff f90a 	bl	8005d74 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006b60:	bf00      	nop
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20000000 	.word	0x20000000
 8006b68:	08006b29 	.word	0x08006b29
 8006b6c:	08008330 	.word	0x08008330

08006b70 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006b76:	2300      	movs	r3, #0
 8006b78:	607b      	str	r3, [r7, #4]
 8006b7a:	e048      	b.n	8006c0e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8006b7c:	4929      	ldr	r1, [pc, #164]	; (8006c24 <_cbSendTaskList+0xb4>)
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	440b      	add	r3, r1
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fd fad9 	bl	8004144 <uxTaskGetStackHighWaterMark>
 8006b92:	4601      	mov	r1, r0
 8006b94:	4823      	ldr	r0, [pc, #140]	; (8006c24 <_cbSendTaskList+0xb4>)
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4403      	add	r3, r0
 8006ba2:	3310      	adds	r3, #16
 8006ba4:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006ba6:	491f      	ldr	r1, [pc, #124]	; (8006c24 <_cbSendTaskList+0xb4>)
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	491b      	ldr	r1, [pc, #108]	; (8006c24 <_cbSendTaskList+0xb4>)
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	6819      	ldr	r1, [r3, #0]
 8006bc8:	4c16      	ldr	r4, [pc, #88]	; (8006c24 <_cbSendTaskList+0xb4>)
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4423      	add	r3, r4
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	681c      	ldr	r4, [r3, #0]
 8006bda:	4d12      	ldr	r5, [pc, #72]	; (8006c24 <_cbSendTaskList+0xb4>)
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	442b      	add	r3, r5
 8006be8:	330c      	adds	r3, #12
 8006bea:	681d      	ldr	r5, [r3, #0]
 8006bec:	4e0d      	ldr	r6, [pc, #52]	; (8006c24 <_cbSendTaskList+0xb4>)
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4433      	add	r3, r6
 8006bfa:	3310      	adds	r3, #16
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	462b      	mov	r3, r5
 8006c02:	4622      	mov	r2, r4
 8006c04:	f000 f8be 	bl	8006d84 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	607b      	str	r3, [r7, #4]
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <_cbSendTaskList+0xb8>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d3b1      	bcc.n	8006b7c <_cbSendTaskList+0xc>
  }
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20002504 	.word	0x20002504
 8006c28:	200025a4 	.word	0x200025a4

08006c2c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006c34:	f7fc ff5a 	bl	8003aec <xTaskGetTickCountFromISR>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	469a      	mov	sl, r3
 8006c3e:	4693      	mov	fp, r2
 8006c40:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006c44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	f04f 0a00 	mov.w	sl, #0
 8006c50:	f04f 0b00 	mov.w	fp, #0
 8006c54:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006c58:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006c5c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006c60:	4652      	mov	r2, sl
 8006c62:	465b      	mov	r3, fp
 8006c64:	1a14      	subs	r4, r2, r0
 8006c66:	eb63 0501 	sbc.w	r5, r3, r1
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	00ab      	lsls	r3, r5, #2
 8006c74:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006c78:	00a2      	lsls	r2, r4, #2
 8006c7a:	4614      	mov	r4, r2
 8006c7c:	461d      	mov	r5, r3
 8006c7e:	eb14 0800 	adds.w	r8, r4, r0
 8006c82:	eb45 0901 	adc.w	r9, r5, r1
 8006c86:	f04f 0200 	mov.w	r2, #0
 8006c8a:	f04f 0300 	mov.w	r3, #0
 8006c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c9a:	4690      	mov	r8, r2
 8006c9c:	4699      	mov	r9, r3
 8006c9e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006cb4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006cc2:	2205      	movs	r2, #5
 8006cc4:	492b      	ldr	r1, [pc, #172]	; (8006d74 <SYSVIEW_AddTask+0xc0>)
 8006cc6:	68b8      	ldr	r0, [r7, #8]
 8006cc8:	f000 f9a1 	bl	800700e <memcmp>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d04b      	beq.n	8006d6a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006cd2:	4b29      	ldr	r3, [pc, #164]	; (8006d78 <SYSVIEW_AddTask+0xc4>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b07      	cmp	r3, #7
 8006cd8:	d903      	bls.n	8006ce2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006cda:	4828      	ldr	r0, [pc, #160]	; (8006d7c <SYSVIEW_AddTask+0xc8>)
 8006cdc:	f7ff fec8 	bl	8006a70 <SEGGER_SYSVIEW_Warn>
    return;
 8006ce0:	e044      	b.n	8006d6c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006ce2:	4b25      	ldr	r3, [pc, #148]	; (8006d78 <SYSVIEW_AddTask+0xc4>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	4926      	ldr	r1, [pc, #152]	; (8006d80 <SYSVIEW_AddTask+0xcc>)
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006cf6:	4b20      	ldr	r3, [pc, #128]	; (8006d78 <SYSVIEW_AddTask+0xc4>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4921      	ldr	r1, [pc, #132]	; (8006d80 <SYSVIEW_AddTask+0xcc>)
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	440b      	add	r3, r1
 8006d06:	3304      	adds	r3, #4
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006d0c:	4b1a      	ldr	r3, [pc, #104]	; (8006d78 <SYSVIEW_AddTask+0xc4>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	491b      	ldr	r1, [pc, #108]	; (8006d80 <SYSVIEW_AddTask+0xcc>)
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006d22:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <SYSVIEW_AddTask+0xc4>)
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4916      	ldr	r1, [pc, #88]	; (8006d80 <SYSVIEW_AddTask+0xcc>)
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	330c      	adds	r3, #12
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006d38:	4b0f      	ldr	r3, [pc, #60]	; (8006d78 <SYSVIEW_AddTask+0xc4>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4910      	ldr	r1, [pc, #64]	; (8006d80 <SYSVIEW_AddTask+0xcc>)
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	3310      	adds	r3, #16
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <SYSVIEW_AddTask+0xc4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3301      	adds	r3, #1
 8006d54:	4a08      	ldr	r2, [pc, #32]	; (8006d78 <SYSVIEW_AddTask+0xc4>)
 8006d56:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f80e 	bl	8006d84 <SYSVIEW_SendTaskInfo>
 8006d68:	e000      	b.n	8006d6c <SYSVIEW_AddTask+0xb8>
    return;
 8006d6a:	bf00      	nop

}
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	08008290 	.word	0x08008290
 8006d78:	200025a4 	.word	0x200025a4
 8006d7c:	08008298 	.word	0x08008298
 8006d80:	20002504 	.word	0x20002504

08006d84 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08a      	sub	sp, #40	; 0x28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006d92:	f107 0314 	add.w	r3, r7, #20
 8006d96:	2214      	movs	r2, #20
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f955 	bl	800704a <memset>
  TaskInfo.TaskID     = TaskID;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006db4:	f107 0314 	add.w	r3, r7, #20
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff fb21 	bl	8006400 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006dbe:	bf00      	nop
 8006dc0:	3728      	adds	r7, #40	; 0x28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <__errno>:
 8006dc8:	4b01      	ldr	r3, [pc, #4]	; (8006dd0 <__errno+0x8>)
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	20000010 	.word	0x20000010

08006dd4 <std>:
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	4604      	mov	r4, r0
 8006dda:	e9c0 3300 	strd	r3, r3, [r0]
 8006dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006de2:	6083      	str	r3, [r0, #8]
 8006de4:	8181      	strh	r1, [r0, #12]
 8006de6:	6643      	str	r3, [r0, #100]	; 0x64
 8006de8:	81c2      	strh	r2, [r0, #14]
 8006dea:	6183      	str	r3, [r0, #24]
 8006dec:	4619      	mov	r1, r3
 8006dee:	2208      	movs	r2, #8
 8006df0:	305c      	adds	r0, #92	; 0x5c
 8006df2:	f000 f92a 	bl	800704a <memset>
 8006df6:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <std+0x38>)
 8006df8:	6224      	str	r4, [r4, #32]
 8006dfa:	6263      	str	r3, [r4, #36]	; 0x24
 8006dfc:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <std+0x3c>)
 8006dfe:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e00:	4b04      	ldr	r3, [pc, #16]	; (8006e14 <std+0x40>)
 8006e02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e04:	4b04      	ldr	r3, [pc, #16]	; (8006e18 <std+0x44>)
 8006e06:	6323      	str	r3, [r4, #48]	; 0x30
 8006e08:	bd10      	pop	{r4, pc}
 8006e0a:	bf00      	nop
 8006e0c:	08007395 	.word	0x08007395
 8006e10:	080073b7 	.word	0x080073b7
 8006e14:	080073ef 	.word	0x080073ef
 8006e18:	08007413 	.word	0x08007413

08006e1c <_cleanup_r>:
 8006e1c:	4901      	ldr	r1, [pc, #4]	; (8006e24 <_cleanup_r+0x8>)
 8006e1e:	f000 b8af 	b.w	8006f80 <_fwalk_reent>
 8006e22:	bf00      	nop
 8006e24:	080076c1 	.word	0x080076c1

08006e28 <__sfmoreglue>:
 8006e28:	2268      	movs	r2, #104	; 0x68
 8006e2a:	b570      	push	{r4, r5, r6, lr}
 8006e2c:	1e4d      	subs	r5, r1, #1
 8006e2e:	4355      	muls	r5, r2
 8006e30:	460e      	mov	r6, r1
 8006e32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e36:	f000 f931 	bl	800709c <_malloc_r>
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	b140      	cbz	r0, 8006e50 <__sfmoreglue+0x28>
 8006e3e:	2100      	movs	r1, #0
 8006e40:	e9c0 1600 	strd	r1, r6, [r0]
 8006e44:	300c      	adds	r0, #12
 8006e46:	60a0      	str	r0, [r4, #8]
 8006e48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e4c:	f000 f8fd 	bl	800704a <memset>
 8006e50:	4620      	mov	r0, r4
 8006e52:	bd70      	pop	{r4, r5, r6, pc}

08006e54 <__sfp_lock_acquire>:
 8006e54:	4801      	ldr	r0, [pc, #4]	; (8006e5c <__sfp_lock_acquire+0x8>)
 8006e56:	f000 b8d8 	b.w	800700a <__retarget_lock_acquire_recursive>
 8006e5a:	bf00      	nop
 8006e5c:	200025a9 	.word	0x200025a9

08006e60 <__sfp_lock_release>:
 8006e60:	4801      	ldr	r0, [pc, #4]	; (8006e68 <__sfp_lock_release+0x8>)
 8006e62:	f000 b8d3 	b.w	800700c <__retarget_lock_release_recursive>
 8006e66:	bf00      	nop
 8006e68:	200025a9 	.word	0x200025a9

08006e6c <__sinit_lock_acquire>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	; (8006e74 <__sinit_lock_acquire+0x8>)
 8006e6e:	f000 b8cc 	b.w	800700a <__retarget_lock_acquire_recursive>
 8006e72:	bf00      	nop
 8006e74:	200025aa 	.word	0x200025aa

08006e78 <__sinit_lock_release>:
 8006e78:	4801      	ldr	r0, [pc, #4]	; (8006e80 <__sinit_lock_release+0x8>)
 8006e7a:	f000 b8c7 	b.w	800700c <__retarget_lock_release_recursive>
 8006e7e:	bf00      	nop
 8006e80:	200025aa 	.word	0x200025aa

08006e84 <__sinit>:
 8006e84:	b510      	push	{r4, lr}
 8006e86:	4604      	mov	r4, r0
 8006e88:	f7ff fff0 	bl	8006e6c <__sinit_lock_acquire>
 8006e8c:	69a3      	ldr	r3, [r4, #24]
 8006e8e:	b11b      	cbz	r3, 8006e98 <__sinit+0x14>
 8006e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e94:	f7ff bff0 	b.w	8006e78 <__sinit_lock_release>
 8006e98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e9c:	6523      	str	r3, [r4, #80]	; 0x50
 8006e9e:	4b13      	ldr	r3, [pc, #76]	; (8006eec <__sinit+0x68>)
 8006ea0:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <__sinit+0x6c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ea6:	42a3      	cmp	r3, r4
 8006ea8:	bf08      	it	eq
 8006eaa:	2301      	moveq	r3, #1
 8006eac:	4620      	mov	r0, r4
 8006eae:	bf08      	it	eq
 8006eb0:	61a3      	streq	r3, [r4, #24]
 8006eb2:	f000 f81f 	bl	8006ef4 <__sfp>
 8006eb6:	6060      	str	r0, [r4, #4]
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 f81b 	bl	8006ef4 <__sfp>
 8006ebe:	60a0      	str	r0, [r4, #8]
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 f817 	bl	8006ef4 <__sfp>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2104      	movs	r1, #4
 8006eca:	60e0      	str	r0, [r4, #12]
 8006ecc:	6860      	ldr	r0, [r4, #4]
 8006ece:	f7ff ff81 	bl	8006dd4 <std>
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	2109      	movs	r1, #9
 8006ed6:	68a0      	ldr	r0, [r4, #8]
 8006ed8:	f7ff ff7c 	bl	8006dd4 <std>
 8006edc:	2202      	movs	r2, #2
 8006ede:	2112      	movs	r1, #18
 8006ee0:	68e0      	ldr	r0, [r4, #12]
 8006ee2:	f7ff ff77 	bl	8006dd4 <std>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	61a3      	str	r3, [r4, #24]
 8006eea:	e7d1      	b.n	8006e90 <__sinit+0xc>
 8006eec:	08008398 	.word	0x08008398
 8006ef0:	08006e1d 	.word	0x08006e1d

08006ef4 <__sfp>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	4607      	mov	r7, r0
 8006ef8:	f7ff ffac 	bl	8006e54 <__sfp_lock_acquire>
 8006efc:	4b1e      	ldr	r3, [pc, #120]	; (8006f78 <__sfp+0x84>)
 8006efe:	681e      	ldr	r6, [r3, #0]
 8006f00:	69b3      	ldr	r3, [r6, #24]
 8006f02:	b913      	cbnz	r3, 8006f0a <__sfp+0x16>
 8006f04:	4630      	mov	r0, r6
 8006f06:	f7ff ffbd 	bl	8006e84 <__sinit>
 8006f0a:	3648      	adds	r6, #72	; 0x48
 8006f0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	d503      	bpl.n	8006f1c <__sfp+0x28>
 8006f14:	6833      	ldr	r3, [r6, #0]
 8006f16:	b30b      	cbz	r3, 8006f5c <__sfp+0x68>
 8006f18:	6836      	ldr	r6, [r6, #0]
 8006f1a:	e7f7      	b.n	8006f0c <__sfp+0x18>
 8006f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f20:	b9d5      	cbnz	r5, 8006f58 <__sfp+0x64>
 8006f22:	4b16      	ldr	r3, [pc, #88]	; (8006f7c <__sfp+0x88>)
 8006f24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f28:	60e3      	str	r3, [r4, #12]
 8006f2a:	6665      	str	r5, [r4, #100]	; 0x64
 8006f2c:	f000 f86c 	bl	8007008 <__retarget_lock_init_recursive>
 8006f30:	f7ff ff96 	bl	8006e60 <__sfp_lock_release>
 8006f34:	2208      	movs	r2, #8
 8006f36:	4629      	mov	r1, r5
 8006f38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f40:	6025      	str	r5, [r4, #0]
 8006f42:	61a5      	str	r5, [r4, #24]
 8006f44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f48:	f000 f87f 	bl	800704a <memset>
 8006f4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f54:	4620      	mov	r0, r4
 8006f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f58:	3468      	adds	r4, #104	; 0x68
 8006f5a:	e7d9      	b.n	8006f10 <__sfp+0x1c>
 8006f5c:	2104      	movs	r1, #4
 8006f5e:	4638      	mov	r0, r7
 8006f60:	f7ff ff62 	bl	8006e28 <__sfmoreglue>
 8006f64:	4604      	mov	r4, r0
 8006f66:	6030      	str	r0, [r6, #0]
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d1d5      	bne.n	8006f18 <__sfp+0x24>
 8006f6c:	f7ff ff78 	bl	8006e60 <__sfp_lock_release>
 8006f70:	230c      	movs	r3, #12
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	e7ee      	b.n	8006f54 <__sfp+0x60>
 8006f76:	bf00      	nop
 8006f78:	08008398 	.word	0x08008398
 8006f7c:	ffff0001 	.word	0xffff0001

08006f80 <_fwalk_reent>:
 8006f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f84:	4606      	mov	r6, r0
 8006f86:	4688      	mov	r8, r1
 8006f88:	2700      	movs	r7, #0
 8006f8a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f92:	f1b9 0901 	subs.w	r9, r9, #1
 8006f96:	d505      	bpl.n	8006fa4 <_fwalk_reent+0x24>
 8006f98:	6824      	ldr	r4, [r4, #0]
 8006f9a:	2c00      	cmp	r4, #0
 8006f9c:	d1f7      	bne.n	8006f8e <_fwalk_reent+0xe>
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fa4:	89ab      	ldrh	r3, [r5, #12]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d907      	bls.n	8006fba <_fwalk_reent+0x3a>
 8006faa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	d003      	beq.n	8006fba <_fwalk_reent+0x3a>
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	47c0      	blx	r8
 8006fb8:	4307      	orrs	r7, r0
 8006fba:	3568      	adds	r5, #104	; 0x68
 8006fbc:	e7e9      	b.n	8006f92 <_fwalk_reent+0x12>
	...

08006fc0 <__libc_init_array>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	2600      	movs	r6, #0
 8006fc4:	4d0c      	ldr	r5, [pc, #48]	; (8006ff8 <__libc_init_array+0x38>)
 8006fc6:	4c0d      	ldr	r4, [pc, #52]	; (8006ffc <__libc_init_array+0x3c>)
 8006fc8:	1b64      	subs	r4, r4, r5
 8006fca:	10a4      	asrs	r4, r4, #2
 8006fcc:	42a6      	cmp	r6, r4
 8006fce:	d109      	bne.n	8006fe4 <__libc_init_array+0x24>
 8006fd0:	f000 ffae 	bl	8007f30 <_init>
 8006fd4:	2600      	movs	r6, #0
 8006fd6:	4d0a      	ldr	r5, [pc, #40]	; (8007000 <__libc_init_array+0x40>)
 8006fd8:	4c0a      	ldr	r4, [pc, #40]	; (8007004 <__libc_init_array+0x44>)
 8006fda:	1b64      	subs	r4, r4, r5
 8006fdc:	10a4      	asrs	r4, r4, #2
 8006fde:	42a6      	cmp	r6, r4
 8006fe0:	d105      	bne.n	8006fee <__libc_init_array+0x2e>
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe8:	4798      	blx	r3
 8006fea:	3601      	adds	r6, #1
 8006fec:	e7ee      	b.n	8006fcc <__libc_init_array+0xc>
 8006fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff2:	4798      	blx	r3
 8006ff4:	3601      	adds	r6, #1
 8006ff6:	e7f2      	b.n	8006fde <__libc_init_array+0x1e>
 8006ff8:	080083d0 	.word	0x080083d0
 8006ffc:	080083d0 	.word	0x080083d0
 8007000:	080083d0 	.word	0x080083d0
 8007004:	080083d4 	.word	0x080083d4

08007008 <__retarget_lock_init_recursive>:
 8007008:	4770      	bx	lr

0800700a <__retarget_lock_acquire_recursive>:
 800700a:	4770      	bx	lr

0800700c <__retarget_lock_release_recursive>:
 800700c:	4770      	bx	lr

0800700e <memcmp>:
 800700e:	b510      	push	{r4, lr}
 8007010:	3901      	subs	r1, #1
 8007012:	4402      	add	r2, r0
 8007014:	4290      	cmp	r0, r2
 8007016:	d101      	bne.n	800701c <memcmp+0xe>
 8007018:	2000      	movs	r0, #0
 800701a:	e005      	b.n	8007028 <memcmp+0x1a>
 800701c:	7803      	ldrb	r3, [r0, #0]
 800701e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007022:	42a3      	cmp	r3, r4
 8007024:	d001      	beq.n	800702a <memcmp+0x1c>
 8007026:	1b18      	subs	r0, r3, r4
 8007028:	bd10      	pop	{r4, pc}
 800702a:	3001      	adds	r0, #1
 800702c:	e7f2      	b.n	8007014 <memcmp+0x6>

0800702e <memcpy>:
 800702e:	440a      	add	r2, r1
 8007030:	4291      	cmp	r1, r2
 8007032:	f100 33ff 	add.w	r3, r0, #4294967295
 8007036:	d100      	bne.n	800703a <memcpy+0xc>
 8007038:	4770      	bx	lr
 800703a:	b510      	push	{r4, lr}
 800703c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007040:	4291      	cmp	r1, r2
 8007042:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007046:	d1f9      	bne.n	800703c <memcpy+0xe>
 8007048:	bd10      	pop	{r4, pc}

0800704a <memset>:
 800704a:	4603      	mov	r3, r0
 800704c:	4402      	add	r2, r0
 800704e:	4293      	cmp	r3, r2
 8007050:	d100      	bne.n	8007054 <memset+0xa>
 8007052:	4770      	bx	lr
 8007054:	f803 1b01 	strb.w	r1, [r3], #1
 8007058:	e7f9      	b.n	800704e <memset+0x4>
	...

0800705c <sbrk_aligned>:
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	4e0e      	ldr	r6, [pc, #56]	; (8007098 <sbrk_aligned+0x3c>)
 8007060:	460c      	mov	r4, r1
 8007062:	6831      	ldr	r1, [r6, #0]
 8007064:	4605      	mov	r5, r0
 8007066:	b911      	cbnz	r1, 800706e <sbrk_aligned+0x12>
 8007068:	f000 f984 	bl	8007374 <_sbrk_r>
 800706c:	6030      	str	r0, [r6, #0]
 800706e:	4621      	mov	r1, r4
 8007070:	4628      	mov	r0, r5
 8007072:	f000 f97f 	bl	8007374 <_sbrk_r>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	d00a      	beq.n	8007090 <sbrk_aligned+0x34>
 800707a:	1cc4      	adds	r4, r0, #3
 800707c:	f024 0403 	bic.w	r4, r4, #3
 8007080:	42a0      	cmp	r0, r4
 8007082:	d007      	beq.n	8007094 <sbrk_aligned+0x38>
 8007084:	1a21      	subs	r1, r4, r0
 8007086:	4628      	mov	r0, r5
 8007088:	f000 f974 	bl	8007374 <_sbrk_r>
 800708c:	3001      	adds	r0, #1
 800708e:	d101      	bne.n	8007094 <sbrk_aligned+0x38>
 8007090:	f04f 34ff 	mov.w	r4, #4294967295
 8007094:	4620      	mov	r0, r4
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	200025b0 	.word	0x200025b0

0800709c <_malloc_r>:
 800709c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a0:	1ccd      	adds	r5, r1, #3
 80070a2:	f025 0503 	bic.w	r5, r5, #3
 80070a6:	3508      	adds	r5, #8
 80070a8:	2d0c      	cmp	r5, #12
 80070aa:	bf38      	it	cc
 80070ac:	250c      	movcc	r5, #12
 80070ae:	2d00      	cmp	r5, #0
 80070b0:	4607      	mov	r7, r0
 80070b2:	db01      	blt.n	80070b8 <_malloc_r+0x1c>
 80070b4:	42a9      	cmp	r1, r5
 80070b6:	d905      	bls.n	80070c4 <_malloc_r+0x28>
 80070b8:	230c      	movs	r3, #12
 80070ba:	2600      	movs	r6, #0
 80070bc:	603b      	str	r3, [r7, #0]
 80070be:	4630      	mov	r0, r6
 80070c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c4:	4e2e      	ldr	r6, [pc, #184]	; (8007180 <_malloc_r+0xe4>)
 80070c6:	f000 fbaf 	bl	8007828 <__malloc_lock>
 80070ca:	6833      	ldr	r3, [r6, #0]
 80070cc:	461c      	mov	r4, r3
 80070ce:	bb34      	cbnz	r4, 800711e <_malloc_r+0x82>
 80070d0:	4629      	mov	r1, r5
 80070d2:	4638      	mov	r0, r7
 80070d4:	f7ff ffc2 	bl	800705c <sbrk_aligned>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	4604      	mov	r4, r0
 80070dc:	d14d      	bne.n	800717a <_malloc_r+0xde>
 80070de:	6834      	ldr	r4, [r6, #0]
 80070e0:	4626      	mov	r6, r4
 80070e2:	2e00      	cmp	r6, #0
 80070e4:	d140      	bne.n	8007168 <_malloc_r+0xcc>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	4631      	mov	r1, r6
 80070ea:	4638      	mov	r0, r7
 80070ec:	eb04 0803 	add.w	r8, r4, r3
 80070f0:	f000 f940 	bl	8007374 <_sbrk_r>
 80070f4:	4580      	cmp	r8, r0
 80070f6:	d13a      	bne.n	800716e <_malloc_r+0xd2>
 80070f8:	6821      	ldr	r1, [r4, #0]
 80070fa:	3503      	adds	r5, #3
 80070fc:	1a6d      	subs	r5, r5, r1
 80070fe:	f025 0503 	bic.w	r5, r5, #3
 8007102:	3508      	adds	r5, #8
 8007104:	2d0c      	cmp	r5, #12
 8007106:	bf38      	it	cc
 8007108:	250c      	movcc	r5, #12
 800710a:	4638      	mov	r0, r7
 800710c:	4629      	mov	r1, r5
 800710e:	f7ff ffa5 	bl	800705c <sbrk_aligned>
 8007112:	3001      	adds	r0, #1
 8007114:	d02b      	beq.n	800716e <_malloc_r+0xd2>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	442b      	add	r3, r5
 800711a:	6023      	str	r3, [r4, #0]
 800711c:	e00e      	b.n	800713c <_malloc_r+0xa0>
 800711e:	6822      	ldr	r2, [r4, #0]
 8007120:	1b52      	subs	r2, r2, r5
 8007122:	d41e      	bmi.n	8007162 <_malloc_r+0xc6>
 8007124:	2a0b      	cmp	r2, #11
 8007126:	d916      	bls.n	8007156 <_malloc_r+0xba>
 8007128:	1961      	adds	r1, r4, r5
 800712a:	42a3      	cmp	r3, r4
 800712c:	6025      	str	r5, [r4, #0]
 800712e:	bf18      	it	ne
 8007130:	6059      	strne	r1, [r3, #4]
 8007132:	6863      	ldr	r3, [r4, #4]
 8007134:	bf08      	it	eq
 8007136:	6031      	streq	r1, [r6, #0]
 8007138:	5162      	str	r2, [r4, r5]
 800713a:	604b      	str	r3, [r1, #4]
 800713c:	4638      	mov	r0, r7
 800713e:	f104 060b 	add.w	r6, r4, #11
 8007142:	f000 fb77 	bl	8007834 <__malloc_unlock>
 8007146:	f026 0607 	bic.w	r6, r6, #7
 800714a:	1d23      	adds	r3, r4, #4
 800714c:	1af2      	subs	r2, r6, r3
 800714e:	d0b6      	beq.n	80070be <_malloc_r+0x22>
 8007150:	1b9b      	subs	r3, r3, r6
 8007152:	50a3      	str	r3, [r4, r2]
 8007154:	e7b3      	b.n	80070be <_malloc_r+0x22>
 8007156:	6862      	ldr	r2, [r4, #4]
 8007158:	42a3      	cmp	r3, r4
 800715a:	bf0c      	ite	eq
 800715c:	6032      	streq	r2, [r6, #0]
 800715e:	605a      	strne	r2, [r3, #4]
 8007160:	e7ec      	b.n	800713c <_malloc_r+0xa0>
 8007162:	4623      	mov	r3, r4
 8007164:	6864      	ldr	r4, [r4, #4]
 8007166:	e7b2      	b.n	80070ce <_malloc_r+0x32>
 8007168:	4634      	mov	r4, r6
 800716a:	6876      	ldr	r6, [r6, #4]
 800716c:	e7b9      	b.n	80070e2 <_malloc_r+0x46>
 800716e:	230c      	movs	r3, #12
 8007170:	4638      	mov	r0, r7
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	f000 fb5e 	bl	8007834 <__malloc_unlock>
 8007178:	e7a1      	b.n	80070be <_malloc_r+0x22>
 800717a:	6025      	str	r5, [r4, #0]
 800717c:	e7de      	b.n	800713c <_malloc_r+0xa0>
 800717e:	bf00      	nop
 8007180:	200025ac 	.word	0x200025ac

08007184 <iprintf>:
 8007184:	b40f      	push	{r0, r1, r2, r3}
 8007186:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <iprintf+0x2c>)
 8007188:	b513      	push	{r0, r1, r4, lr}
 800718a:	681c      	ldr	r4, [r3, #0]
 800718c:	b124      	cbz	r4, 8007198 <iprintf+0x14>
 800718e:	69a3      	ldr	r3, [r4, #24]
 8007190:	b913      	cbnz	r3, 8007198 <iprintf+0x14>
 8007192:	4620      	mov	r0, r4
 8007194:	f7ff fe76 	bl	8006e84 <__sinit>
 8007198:	ab05      	add	r3, sp, #20
 800719a:	4620      	mov	r0, r4
 800719c:	9a04      	ldr	r2, [sp, #16]
 800719e:	68a1      	ldr	r1, [r4, #8]
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	f000 fbbd 	bl	8007920 <_vfiprintf_r>
 80071a6:	b002      	add	sp, #8
 80071a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ac:	b004      	add	sp, #16
 80071ae:	4770      	bx	lr
 80071b0:	20000010 	.word	0x20000010

080071b4 <_puts_r>:
 80071b4:	b570      	push	{r4, r5, r6, lr}
 80071b6:	460e      	mov	r6, r1
 80071b8:	4605      	mov	r5, r0
 80071ba:	b118      	cbz	r0, 80071c4 <_puts_r+0x10>
 80071bc:	6983      	ldr	r3, [r0, #24]
 80071be:	b90b      	cbnz	r3, 80071c4 <_puts_r+0x10>
 80071c0:	f7ff fe60 	bl	8006e84 <__sinit>
 80071c4:	69ab      	ldr	r3, [r5, #24]
 80071c6:	68ac      	ldr	r4, [r5, #8]
 80071c8:	b913      	cbnz	r3, 80071d0 <_puts_r+0x1c>
 80071ca:	4628      	mov	r0, r5
 80071cc:	f7ff fe5a 	bl	8006e84 <__sinit>
 80071d0:	4b2c      	ldr	r3, [pc, #176]	; (8007284 <_puts_r+0xd0>)
 80071d2:	429c      	cmp	r4, r3
 80071d4:	d120      	bne.n	8007218 <_puts_r+0x64>
 80071d6:	686c      	ldr	r4, [r5, #4]
 80071d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071da:	07db      	lsls	r3, r3, #31
 80071dc:	d405      	bmi.n	80071ea <_puts_r+0x36>
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	0598      	lsls	r0, r3, #22
 80071e2:	d402      	bmi.n	80071ea <_puts_r+0x36>
 80071e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071e6:	f7ff ff10 	bl	800700a <__retarget_lock_acquire_recursive>
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	0719      	lsls	r1, r3, #28
 80071ee:	d51d      	bpl.n	800722c <_puts_r+0x78>
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	b1db      	cbz	r3, 800722c <_puts_r+0x78>
 80071f4:	3e01      	subs	r6, #1
 80071f6:	68a3      	ldr	r3, [r4, #8]
 80071f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071fc:	3b01      	subs	r3, #1
 80071fe:	60a3      	str	r3, [r4, #8]
 8007200:	bb39      	cbnz	r1, 8007252 <_puts_r+0x9e>
 8007202:	2b00      	cmp	r3, #0
 8007204:	da38      	bge.n	8007278 <_puts_r+0xc4>
 8007206:	4622      	mov	r2, r4
 8007208:	210a      	movs	r1, #10
 800720a:	4628      	mov	r0, r5
 800720c:	f000 f906 	bl	800741c <__swbuf_r>
 8007210:	3001      	adds	r0, #1
 8007212:	d011      	beq.n	8007238 <_puts_r+0x84>
 8007214:	250a      	movs	r5, #10
 8007216:	e011      	b.n	800723c <_puts_r+0x88>
 8007218:	4b1b      	ldr	r3, [pc, #108]	; (8007288 <_puts_r+0xd4>)
 800721a:	429c      	cmp	r4, r3
 800721c:	d101      	bne.n	8007222 <_puts_r+0x6e>
 800721e:	68ac      	ldr	r4, [r5, #8]
 8007220:	e7da      	b.n	80071d8 <_puts_r+0x24>
 8007222:	4b1a      	ldr	r3, [pc, #104]	; (800728c <_puts_r+0xd8>)
 8007224:	429c      	cmp	r4, r3
 8007226:	bf08      	it	eq
 8007228:	68ec      	ldreq	r4, [r5, #12]
 800722a:	e7d5      	b.n	80071d8 <_puts_r+0x24>
 800722c:	4621      	mov	r1, r4
 800722e:	4628      	mov	r0, r5
 8007230:	f000 f946 	bl	80074c0 <__swsetup_r>
 8007234:	2800      	cmp	r0, #0
 8007236:	d0dd      	beq.n	80071f4 <_puts_r+0x40>
 8007238:	f04f 35ff 	mov.w	r5, #4294967295
 800723c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800723e:	07da      	lsls	r2, r3, #31
 8007240:	d405      	bmi.n	800724e <_puts_r+0x9a>
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	059b      	lsls	r3, r3, #22
 8007246:	d402      	bmi.n	800724e <_puts_r+0x9a>
 8007248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800724a:	f7ff fedf 	bl	800700c <__retarget_lock_release_recursive>
 800724e:	4628      	mov	r0, r5
 8007250:	bd70      	pop	{r4, r5, r6, pc}
 8007252:	2b00      	cmp	r3, #0
 8007254:	da04      	bge.n	8007260 <_puts_r+0xac>
 8007256:	69a2      	ldr	r2, [r4, #24]
 8007258:	429a      	cmp	r2, r3
 800725a:	dc06      	bgt.n	800726a <_puts_r+0xb6>
 800725c:	290a      	cmp	r1, #10
 800725e:	d004      	beq.n	800726a <_puts_r+0xb6>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	6022      	str	r2, [r4, #0]
 8007266:	7019      	strb	r1, [r3, #0]
 8007268:	e7c5      	b.n	80071f6 <_puts_r+0x42>
 800726a:	4622      	mov	r2, r4
 800726c:	4628      	mov	r0, r5
 800726e:	f000 f8d5 	bl	800741c <__swbuf_r>
 8007272:	3001      	adds	r0, #1
 8007274:	d1bf      	bne.n	80071f6 <_puts_r+0x42>
 8007276:	e7df      	b.n	8007238 <_puts_r+0x84>
 8007278:	250a      	movs	r5, #10
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	6022      	str	r2, [r4, #0]
 8007280:	701d      	strb	r5, [r3, #0]
 8007282:	e7db      	b.n	800723c <_puts_r+0x88>
 8007284:	08008358 	.word	0x08008358
 8007288:	08008378 	.word	0x08008378
 800728c:	08008338 	.word	0x08008338

08007290 <puts>:
 8007290:	4b02      	ldr	r3, [pc, #8]	; (800729c <puts+0xc>)
 8007292:	4601      	mov	r1, r0
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	f7ff bf8d 	b.w	80071b4 <_puts_r>
 800729a:	bf00      	nop
 800729c:	20000010 	.word	0x20000010

080072a0 <cleanup_glue>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	460c      	mov	r4, r1
 80072a4:	6809      	ldr	r1, [r1, #0]
 80072a6:	4605      	mov	r5, r0
 80072a8:	b109      	cbz	r1, 80072ae <cleanup_glue+0xe>
 80072aa:	f7ff fff9 	bl	80072a0 <cleanup_glue>
 80072ae:	4621      	mov	r1, r4
 80072b0:	4628      	mov	r0, r5
 80072b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072b6:	f000 bac3 	b.w	8007840 <_free_r>
	...

080072bc <_reclaim_reent>:
 80072bc:	4b2c      	ldr	r3, [pc, #176]	; (8007370 <_reclaim_reent+0xb4>)
 80072be:	b570      	push	{r4, r5, r6, lr}
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4604      	mov	r4, r0
 80072c4:	4283      	cmp	r3, r0
 80072c6:	d051      	beq.n	800736c <_reclaim_reent+0xb0>
 80072c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80072ca:	b143      	cbz	r3, 80072de <_reclaim_reent+0x22>
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d14a      	bne.n	8007368 <_reclaim_reent+0xac>
 80072d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072d4:	6819      	ldr	r1, [r3, #0]
 80072d6:	b111      	cbz	r1, 80072de <_reclaim_reent+0x22>
 80072d8:	4620      	mov	r0, r4
 80072da:	f000 fab1 	bl	8007840 <_free_r>
 80072de:	6961      	ldr	r1, [r4, #20]
 80072e0:	b111      	cbz	r1, 80072e8 <_reclaim_reent+0x2c>
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 faac 	bl	8007840 <_free_r>
 80072e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072ea:	b111      	cbz	r1, 80072f2 <_reclaim_reent+0x36>
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 faa7 	bl	8007840 <_free_r>
 80072f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80072f4:	b111      	cbz	r1, 80072fc <_reclaim_reent+0x40>
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 faa2 	bl	8007840 <_free_r>
 80072fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80072fe:	b111      	cbz	r1, 8007306 <_reclaim_reent+0x4a>
 8007300:	4620      	mov	r0, r4
 8007302:	f000 fa9d 	bl	8007840 <_free_r>
 8007306:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007308:	b111      	cbz	r1, 8007310 <_reclaim_reent+0x54>
 800730a:	4620      	mov	r0, r4
 800730c:	f000 fa98 	bl	8007840 <_free_r>
 8007310:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007312:	b111      	cbz	r1, 800731a <_reclaim_reent+0x5e>
 8007314:	4620      	mov	r0, r4
 8007316:	f000 fa93 	bl	8007840 <_free_r>
 800731a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800731c:	b111      	cbz	r1, 8007324 <_reclaim_reent+0x68>
 800731e:	4620      	mov	r0, r4
 8007320:	f000 fa8e 	bl	8007840 <_free_r>
 8007324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007326:	b111      	cbz	r1, 800732e <_reclaim_reent+0x72>
 8007328:	4620      	mov	r0, r4
 800732a:	f000 fa89 	bl	8007840 <_free_r>
 800732e:	69a3      	ldr	r3, [r4, #24]
 8007330:	b1e3      	cbz	r3, 800736c <_reclaim_reent+0xb0>
 8007332:	4620      	mov	r0, r4
 8007334:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007336:	4798      	blx	r3
 8007338:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800733a:	b1b9      	cbz	r1, 800736c <_reclaim_reent+0xb0>
 800733c:	4620      	mov	r0, r4
 800733e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007342:	f7ff bfad 	b.w	80072a0 <cleanup_glue>
 8007346:	5949      	ldr	r1, [r1, r5]
 8007348:	b941      	cbnz	r1, 800735c <_reclaim_reent+0xa0>
 800734a:	3504      	adds	r5, #4
 800734c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800734e:	2d80      	cmp	r5, #128	; 0x80
 8007350:	68d9      	ldr	r1, [r3, #12]
 8007352:	d1f8      	bne.n	8007346 <_reclaim_reent+0x8a>
 8007354:	4620      	mov	r0, r4
 8007356:	f000 fa73 	bl	8007840 <_free_r>
 800735a:	e7ba      	b.n	80072d2 <_reclaim_reent+0x16>
 800735c:	680e      	ldr	r6, [r1, #0]
 800735e:	4620      	mov	r0, r4
 8007360:	f000 fa6e 	bl	8007840 <_free_r>
 8007364:	4631      	mov	r1, r6
 8007366:	e7ef      	b.n	8007348 <_reclaim_reent+0x8c>
 8007368:	2500      	movs	r5, #0
 800736a:	e7ef      	b.n	800734c <_reclaim_reent+0x90>
 800736c:	bd70      	pop	{r4, r5, r6, pc}
 800736e:	bf00      	nop
 8007370:	20000010 	.word	0x20000010

08007374 <_sbrk_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	2300      	movs	r3, #0
 8007378:	4d05      	ldr	r5, [pc, #20]	; (8007390 <_sbrk_r+0x1c>)
 800737a:	4604      	mov	r4, r0
 800737c:	4608      	mov	r0, r1
 800737e:	602b      	str	r3, [r5, #0]
 8007380:	f7f9 f9e8 	bl	8000754 <_sbrk>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d102      	bne.n	800738e <_sbrk_r+0x1a>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b103      	cbz	r3, 800738e <_sbrk_r+0x1a>
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	200025b4 	.word	0x200025b4

08007394 <__sread>:
 8007394:	b510      	push	{r4, lr}
 8007396:	460c      	mov	r4, r1
 8007398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739c:	f000 fd86 	bl	8007eac <_read_r>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	bfab      	itete	ge
 80073a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073a6:	89a3      	ldrhlt	r3, [r4, #12]
 80073a8:	181b      	addge	r3, r3, r0
 80073aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ae:	bfac      	ite	ge
 80073b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80073b2:	81a3      	strhlt	r3, [r4, #12]
 80073b4:	bd10      	pop	{r4, pc}

080073b6 <__swrite>:
 80073b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ba:	461f      	mov	r7, r3
 80073bc:	898b      	ldrh	r3, [r1, #12]
 80073be:	4605      	mov	r5, r0
 80073c0:	05db      	lsls	r3, r3, #23
 80073c2:	460c      	mov	r4, r1
 80073c4:	4616      	mov	r6, r2
 80073c6:	d505      	bpl.n	80073d4 <__swrite+0x1e>
 80073c8:	2302      	movs	r3, #2
 80073ca:	2200      	movs	r2, #0
 80073cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d0:	f000 f9b2 	bl	8007738 <_lseek_r>
 80073d4:	89a3      	ldrh	r3, [r4, #12]
 80073d6:	4632      	mov	r2, r6
 80073d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073dc:	81a3      	strh	r3, [r4, #12]
 80073de:	4628      	mov	r0, r5
 80073e0:	463b      	mov	r3, r7
 80073e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ea:	f7fe b9b7 	b.w	800575c <_write_r>

080073ee <__sseek>:
 80073ee:	b510      	push	{r4, lr}
 80073f0:	460c      	mov	r4, r1
 80073f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f6:	f000 f99f 	bl	8007738 <_lseek_r>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	bf15      	itete	ne
 8007400:	6560      	strne	r0, [r4, #84]	; 0x54
 8007402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800740a:	81a3      	strheq	r3, [r4, #12]
 800740c:	bf18      	it	ne
 800740e:	81a3      	strhne	r3, [r4, #12]
 8007410:	bd10      	pop	{r4, pc}

08007412 <__sclose>:
 8007412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007416:	f000 b8c1 	b.w	800759c <_close_r>
	...

0800741c <__swbuf_r>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	460e      	mov	r6, r1
 8007420:	4614      	mov	r4, r2
 8007422:	4605      	mov	r5, r0
 8007424:	b118      	cbz	r0, 800742e <__swbuf_r+0x12>
 8007426:	6983      	ldr	r3, [r0, #24]
 8007428:	b90b      	cbnz	r3, 800742e <__swbuf_r+0x12>
 800742a:	f7ff fd2b 	bl	8006e84 <__sinit>
 800742e:	4b21      	ldr	r3, [pc, #132]	; (80074b4 <__swbuf_r+0x98>)
 8007430:	429c      	cmp	r4, r3
 8007432:	d12b      	bne.n	800748c <__swbuf_r+0x70>
 8007434:	686c      	ldr	r4, [r5, #4]
 8007436:	69a3      	ldr	r3, [r4, #24]
 8007438:	60a3      	str	r3, [r4, #8]
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	071a      	lsls	r2, r3, #28
 800743e:	d52f      	bpl.n	80074a0 <__swbuf_r+0x84>
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	b36b      	cbz	r3, 80074a0 <__swbuf_r+0x84>
 8007444:	6923      	ldr	r3, [r4, #16]
 8007446:	6820      	ldr	r0, [r4, #0]
 8007448:	b2f6      	uxtb	r6, r6
 800744a:	1ac0      	subs	r0, r0, r3
 800744c:	6963      	ldr	r3, [r4, #20]
 800744e:	4637      	mov	r7, r6
 8007450:	4283      	cmp	r3, r0
 8007452:	dc04      	bgt.n	800745e <__swbuf_r+0x42>
 8007454:	4621      	mov	r1, r4
 8007456:	4628      	mov	r0, r5
 8007458:	f000 f932 	bl	80076c0 <_fflush_r>
 800745c:	bb30      	cbnz	r0, 80074ac <__swbuf_r+0x90>
 800745e:	68a3      	ldr	r3, [r4, #8]
 8007460:	3001      	adds	r0, #1
 8007462:	3b01      	subs	r3, #1
 8007464:	60a3      	str	r3, [r4, #8]
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	6022      	str	r2, [r4, #0]
 800746c:	701e      	strb	r6, [r3, #0]
 800746e:	6963      	ldr	r3, [r4, #20]
 8007470:	4283      	cmp	r3, r0
 8007472:	d004      	beq.n	800747e <__swbuf_r+0x62>
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	07db      	lsls	r3, r3, #31
 8007478:	d506      	bpl.n	8007488 <__swbuf_r+0x6c>
 800747a:	2e0a      	cmp	r6, #10
 800747c:	d104      	bne.n	8007488 <__swbuf_r+0x6c>
 800747e:	4621      	mov	r1, r4
 8007480:	4628      	mov	r0, r5
 8007482:	f000 f91d 	bl	80076c0 <_fflush_r>
 8007486:	b988      	cbnz	r0, 80074ac <__swbuf_r+0x90>
 8007488:	4638      	mov	r0, r7
 800748a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800748c:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <__swbuf_r+0x9c>)
 800748e:	429c      	cmp	r4, r3
 8007490:	d101      	bne.n	8007496 <__swbuf_r+0x7a>
 8007492:	68ac      	ldr	r4, [r5, #8]
 8007494:	e7cf      	b.n	8007436 <__swbuf_r+0x1a>
 8007496:	4b09      	ldr	r3, [pc, #36]	; (80074bc <__swbuf_r+0xa0>)
 8007498:	429c      	cmp	r4, r3
 800749a:	bf08      	it	eq
 800749c:	68ec      	ldreq	r4, [r5, #12]
 800749e:	e7ca      	b.n	8007436 <__swbuf_r+0x1a>
 80074a0:	4621      	mov	r1, r4
 80074a2:	4628      	mov	r0, r5
 80074a4:	f000 f80c 	bl	80074c0 <__swsetup_r>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d0cb      	beq.n	8007444 <__swbuf_r+0x28>
 80074ac:	f04f 37ff 	mov.w	r7, #4294967295
 80074b0:	e7ea      	b.n	8007488 <__swbuf_r+0x6c>
 80074b2:	bf00      	nop
 80074b4:	08008358 	.word	0x08008358
 80074b8:	08008378 	.word	0x08008378
 80074bc:	08008338 	.word	0x08008338

080074c0 <__swsetup_r>:
 80074c0:	4b32      	ldr	r3, [pc, #200]	; (800758c <__swsetup_r+0xcc>)
 80074c2:	b570      	push	{r4, r5, r6, lr}
 80074c4:	681d      	ldr	r5, [r3, #0]
 80074c6:	4606      	mov	r6, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	b125      	cbz	r5, 80074d6 <__swsetup_r+0x16>
 80074cc:	69ab      	ldr	r3, [r5, #24]
 80074ce:	b913      	cbnz	r3, 80074d6 <__swsetup_r+0x16>
 80074d0:	4628      	mov	r0, r5
 80074d2:	f7ff fcd7 	bl	8006e84 <__sinit>
 80074d6:	4b2e      	ldr	r3, [pc, #184]	; (8007590 <__swsetup_r+0xd0>)
 80074d8:	429c      	cmp	r4, r3
 80074da:	d10f      	bne.n	80074fc <__swsetup_r+0x3c>
 80074dc:	686c      	ldr	r4, [r5, #4]
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074e4:	0719      	lsls	r1, r3, #28
 80074e6:	d42c      	bmi.n	8007542 <__swsetup_r+0x82>
 80074e8:	06dd      	lsls	r5, r3, #27
 80074ea:	d411      	bmi.n	8007510 <__swsetup_r+0x50>
 80074ec:	2309      	movs	r3, #9
 80074ee:	6033      	str	r3, [r6, #0]
 80074f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	e03e      	b.n	800757a <__swsetup_r+0xba>
 80074fc:	4b25      	ldr	r3, [pc, #148]	; (8007594 <__swsetup_r+0xd4>)
 80074fe:	429c      	cmp	r4, r3
 8007500:	d101      	bne.n	8007506 <__swsetup_r+0x46>
 8007502:	68ac      	ldr	r4, [r5, #8]
 8007504:	e7eb      	b.n	80074de <__swsetup_r+0x1e>
 8007506:	4b24      	ldr	r3, [pc, #144]	; (8007598 <__swsetup_r+0xd8>)
 8007508:	429c      	cmp	r4, r3
 800750a:	bf08      	it	eq
 800750c:	68ec      	ldreq	r4, [r5, #12]
 800750e:	e7e6      	b.n	80074de <__swsetup_r+0x1e>
 8007510:	0758      	lsls	r0, r3, #29
 8007512:	d512      	bpl.n	800753a <__swsetup_r+0x7a>
 8007514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007516:	b141      	cbz	r1, 800752a <__swsetup_r+0x6a>
 8007518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800751c:	4299      	cmp	r1, r3
 800751e:	d002      	beq.n	8007526 <__swsetup_r+0x66>
 8007520:	4630      	mov	r0, r6
 8007522:	f000 f98d 	bl	8007840 <_free_r>
 8007526:	2300      	movs	r3, #0
 8007528:	6363      	str	r3, [r4, #52]	; 0x34
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	2300      	movs	r3, #0
 8007534:	6063      	str	r3, [r4, #4]
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	f043 0308 	orr.w	r3, r3, #8
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	b94b      	cbnz	r3, 800755a <__swsetup_r+0x9a>
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800754c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007550:	d003      	beq.n	800755a <__swsetup_r+0x9a>
 8007552:	4621      	mov	r1, r4
 8007554:	4630      	mov	r0, r6
 8007556:	f000 f927 	bl	80077a8 <__smakebuf_r>
 800755a:	89a0      	ldrh	r0, [r4, #12]
 800755c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007560:	f010 0301 	ands.w	r3, r0, #1
 8007564:	d00a      	beq.n	800757c <__swsetup_r+0xbc>
 8007566:	2300      	movs	r3, #0
 8007568:	60a3      	str	r3, [r4, #8]
 800756a:	6963      	ldr	r3, [r4, #20]
 800756c:	425b      	negs	r3, r3
 800756e:	61a3      	str	r3, [r4, #24]
 8007570:	6923      	ldr	r3, [r4, #16]
 8007572:	b943      	cbnz	r3, 8007586 <__swsetup_r+0xc6>
 8007574:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007578:	d1ba      	bne.n	80074f0 <__swsetup_r+0x30>
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	0781      	lsls	r1, r0, #30
 800757e:	bf58      	it	pl
 8007580:	6963      	ldrpl	r3, [r4, #20]
 8007582:	60a3      	str	r3, [r4, #8]
 8007584:	e7f4      	b.n	8007570 <__swsetup_r+0xb0>
 8007586:	2000      	movs	r0, #0
 8007588:	e7f7      	b.n	800757a <__swsetup_r+0xba>
 800758a:	bf00      	nop
 800758c:	20000010 	.word	0x20000010
 8007590:	08008358 	.word	0x08008358
 8007594:	08008378 	.word	0x08008378
 8007598:	08008338 	.word	0x08008338

0800759c <_close_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	2300      	movs	r3, #0
 80075a0:	4d05      	ldr	r5, [pc, #20]	; (80075b8 <_close_r+0x1c>)
 80075a2:	4604      	mov	r4, r0
 80075a4:	4608      	mov	r0, r1
 80075a6:	602b      	str	r3, [r5, #0]
 80075a8:	f7f9 f8a3 	bl	80006f2 <_close>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_close_r+0x1a>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_close_r+0x1a>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	200025b4 	.word	0x200025b4

080075bc <__sflush_r>:
 80075bc:	898a      	ldrh	r2, [r1, #12]
 80075be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c0:	4605      	mov	r5, r0
 80075c2:	0710      	lsls	r0, r2, #28
 80075c4:	460c      	mov	r4, r1
 80075c6:	d457      	bmi.n	8007678 <__sflush_r+0xbc>
 80075c8:	684b      	ldr	r3, [r1, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	dc04      	bgt.n	80075d8 <__sflush_r+0x1c>
 80075ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dc01      	bgt.n	80075d8 <__sflush_r+0x1c>
 80075d4:	2000      	movs	r0, #0
 80075d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075da:	2e00      	cmp	r6, #0
 80075dc:	d0fa      	beq.n	80075d4 <__sflush_r+0x18>
 80075de:	2300      	movs	r3, #0
 80075e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075e4:	682f      	ldr	r7, [r5, #0]
 80075e6:	602b      	str	r3, [r5, #0]
 80075e8:	d032      	beq.n	8007650 <__sflush_r+0x94>
 80075ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	075a      	lsls	r2, r3, #29
 80075f0:	d505      	bpl.n	80075fe <__sflush_r+0x42>
 80075f2:	6863      	ldr	r3, [r4, #4]
 80075f4:	1ac0      	subs	r0, r0, r3
 80075f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075f8:	b10b      	cbz	r3, 80075fe <__sflush_r+0x42>
 80075fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075fc:	1ac0      	subs	r0, r0, r3
 80075fe:	2300      	movs	r3, #0
 8007600:	4602      	mov	r2, r0
 8007602:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007604:	4628      	mov	r0, r5
 8007606:	6a21      	ldr	r1, [r4, #32]
 8007608:	47b0      	blx	r6
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	d106      	bne.n	800761e <__sflush_r+0x62>
 8007610:	6829      	ldr	r1, [r5, #0]
 8007612:	291d      	cmp	r1, #29
 8007614:	d82c      	bhi.n	8007670 <__sflush_r+0xb4>
 8007616:	4a29      	ldr	r2, [pc, #164]	; (80076bc <__sflush_r+0x100>)
 8007618:	40ca      	lsrs	r2, r1
 800761a:	07d6      	lsls	r6, r2, #31
 800761c:	d528      	bpl.n	8007670 <__sflush_r+0xb4>
 800761e:	2200      	movs	r2, #0
 8007620:	6062      	str	r2, [r4, #4]
 8007622:	6922      	ldr	r2, [r4, #16]
 8007624:	04d9      	lsls	r1, r3, #19
 8007626:	6022      	str	r2, [r4, #0]
 8007628:	d504      	bpl.n	8007634 <__sflush_r+0x78>
 800762a:	1c42      	adds	r2, r0, #1
 800762c:	d101      	bne.n	8007632 <__sflush_r+0x76>
 800762e:	682b      	ldr	r3, [r5, #0]
 8007630:	b903      	cbnz	r3, 8007634 <__sflush_r+0x78>
 8007632:	6560      	str	r0, [r4, #84]	; 0x54
 8007634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007636:	602f      	str	r7, [r5, #0]
 8007638:	2900      	cmp	r1, #0
 800763a:	d0cb      	beq.n	80075d4 <__sflush_r+0x18>
 800763c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007640:	4299      	cmp	r1, r3
 8007642:	d002      	beq.n	800764a <__sflush_r+0x8e>
 8007644:	4628      	mov	r0, r5
 8007646:	f000 f8fb 	bl	8007840 <_free_r>
 800764a:	2000      	movs	r0, #0
 800764c:	6360      	str	r0, [r4, #52]	; 0x34
 800764e:	e7c2      	b.n	80075d6 <__sflush_r+0x1a>
 8007650:	6a21      	ldr	r1, [r4, #32]
 8007652:	2301      	movs	r3, #1
 8007654:	4628      	mov	r0, r5
 8007656:	47b0      	blx	r6
 8007658:	1c41      	adds	r1, r0, #1
 800765a:	d1c7      	bne.n	80075ec <__sflush_r+0x30>
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0c4      	beq.n	80075ec <__sflush_r+0x30>
 8007662:	2b1d      	cmp	r3, #29
 8007664:	d001      	beq.n	800766a <__sflush_r+0xae>
 8007666:	2b16      	cmp	r3, #22
 8007668:	d101      	bne.n	800766e <__sflush_r+0xb2>
 800766a:	602f      	str	r7, [r5, #0]
 800766c:	e7b2      	b.n	80075d4 <__sflush_r+0x18>
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007674:	81a3      	strh	r3, [r4, #12]
 8007676:	e7ae      	b.n	80075d6 <__sflush_r+0x1a>
 8007678:	690f      	ldr	r7, [r1, #16]
 800767a:	2f00      	cmp	r7, #0
 800767c:	d0aa      	beq.n	80075d4 <__sflush_r+0x18>
 800767e:	0793      	lsls	r3, r2, #30
 8007680:	bf18      	it	ne
 8007682:	2300      	movne	r3, #0
 8007684:	680e      	ldr	r6, [r1, #0]
 8007686:	bf08      	it	eq
 8007688:	694b      	ldreq	r3, [r1, #20]
 800768a:	1bf6      	subs	r6, r6, r7
 800768c:	600f      	str	r7, [r1, #0]
 800768e:	608b      	str	r3, [r1, #8]
 8007690:	2e00      	cmp	r6, #0
 8007692:	dd9f      	ble.n	80075d4 <__sflush_r+0x18>
 8007694:	4633      	mov	r3, r6
 8007696:	463a      	mov	r2, r7
 8007698:	4628      	mov	r0, r5
 800769a:	6a21      	ldr	r1, [r4, #32]
 800769c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80076a0:	47e0      	blx	ip
 80076a2:	2800      	cmp	r0, #0
 80076a4:	dc06      	bgt.n	80076b4 <__sflush_r+0xf8>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	e790      	b.n	80075d6 <__sflush_r+0x1a>
 80076b4:	4407      	add	r7, r0
 80076b6:	1a36      	subs	r6, r6, r0
 80076b8:	e7ea      	b.n	8007690 <__sflush_r+0xd4>
 80076ba:	bf00      	nop
 80076bc:	20400001 	.word	0x20400001

080076c0 <_fflush_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	690b      	ldr	r3, [r1, #16]
 80076c4:	4605      	mov	r5, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	b913      	cbnz	r3, 80076d0 <_fflush_r+0x10>
 80076ca:	2500      	movs	r5, #0
 80076cc:	4628      	mov	r0, r5
 80076ce:	bd38      	pop	{r3, r4, r5, pc}
 80076d0:	b118      	cbz	r0, 80076da <_fflush_r+0x1a>
 80076d2:	6983      	ldr	r3, [r0, #24]
 80076d4:	b90b      	cbnz	r3, 80076da <_fflush_r+0x1a>
 80076d6:	f7ff fbd5 	bl	8006e84 <__sinit>
 80076da:	4b14      	ldr	r3, [pc, #80]	; (800772c <_fflush_r+0x6c>)
 80076dc:	429c      	cmp	r4, r3
 80076de:	d11b      	bne.n	8007718 <_fflush_r+0x58>
 80076e0:	686c      	ldr	r4, [r5, #4]
 80076e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0ef      	beq.n	80076ca <_fflush_r+0xa>
 80076ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076ec:	07d0      	lsls	r0, r2, #31
 80076ee:	d404      	bmi.n	80076fa <_fflush_r+0x3a>
 80076f0:	0599      	lsls	r1, r3, #22
 80076f2:	d402      	bmi.n	80076fa <_fflush_r+0x3a>
 80076f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076f6:	f7ff fc88 	bl	800700a <__retarget_lock_acquire_recursive>
 80076fa:	4628      	mov	r0, r5
 80076fc:	4621      	mov	r1, r4
 80076fe:	f7ff ff5d 	bl	80075bc <__sflush_r>
 8007702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007704:	4605      	mov	r5, r0
 8007706:	07da      	lsls	r2, r3, #31
 8007708:	d4e0      	bmi.n	80076cc <_fflush_r+0xc>
 800770a:	89a3      	ldrh	r3, [r4, #12]
 800770c:	059b      	lsls	r3, r3, #22
 800770e:	d4dd      	bmi.n	80076cc <_fflush_r+0xc>
 8007710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007712:	f7ff fc7b 	bl	800700c <__retarget_lock_release_recursive>
 8007716:	e7d9      	b.n	80076cc <_fflush_r+0xc>
 8007718:	4b05      	ldr	r3, [pc, #20]	; (8007730 <_fflush_r+0x70>)
 800771a:	429c      	cmp	r4, r3
 800771c:	d101      	bne.n	8007722 <_fflush_r+0x62>
 800771e:	68ac      	ldr	r4, [r5, #8]
 8007720:	e7df      	b.n	80076e2 <_fflush_r+0x22>
 8007722:	4b04      	ldr	r3, [pc, #16]	; (8007734 <_fflush_r+0x74>)
 8007724:	429c      	cmp	r4, r3
 8007726:	bf08      	it	eq
 8007728:	68ec      	ldreq	r4, [r5, #12]
 800772a:	e7da      	b.n	80076e2 <_fflush_r+0x22>
 800772c:	08008358 	.word	0x08008358
 8007730:	08008378 	.word	0x08008378
 8007734:	08008338 	.word	0x08008338

08007738 <_lseek_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4604      	mov	r4, r0
 800773c:	4608      	mov	r0, r1
 800773e:	4611      	mov	r1, r2
 8007740:	2200      	movs	r2, #0
 8007742:	4d05      	ldr	r5, [pc, #20]	; (8007758 <_lseek_r+0x20>)
 8007744:	602a      	str	r2, [r5, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	f7f8 fff7 	bl	800073a <_lseek>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_lseek_r+0x1e>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_lseek_r+0x1e>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	200025b4 	.word	0x200025b4

0800775c <__swhatbuf_r>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	460e      	mov	r6, r1
 8007760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007764:	4614      	mov	r4, r2
 8007766:	2900      	cmp	r1, #0
 8007768:	461d      	mov	r5, r3
 800776a:	b096      	sub	sp, #88	; 0x58
 800776c:	da08      	bge.n	8007780 <__swhatbuf_r+0x24>
 800776e:	2200      	movs	r2, #0
 8007770:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007774:	602a      	str	r2, [r5, #0]
 8007776:	061a      	lsls	r2, r3, #24
 8007778:	d410      	bmi.n	800779c <__swhatbuf_r+0x40>
 800777a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800777e:	e00e      	b.n	800779e <__swhatbuf_r+0x42>
 8007780:	466a      	mov	r2, sp
 8007782:	f000 fba5 	bl	8007ed0 <_fstat_r>
 8007786:	2800      	cmp	r0, #0
 8007788:	dbf1      	blt.n	800776e <__swhatbuf_r+0x12>
 800778a:	9a01      	ldr	r2, [sp, #4]
 800778c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007790:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007794:	425a      	negs	r2, r3
 8007796:	415a      	adcs	r2, r3
 8007798:	602a      	str	r2, [r5, #0]
 800779a:	e7ee      	b.n	800777a <__swhatbuf_r+0x1e>
 800779c:	2340      	movs	r3, #64	; 0x40
 800779e:	2000      	movs	r0, #0
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	b016      	add	sp, #88	; 0x58
 80077a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080077a8 <__smakebuf_r>:
 80077a8:	898b      	ldrh	r3, [r1, #12]
 80077aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077ac:	079d      	lsls	r5, r3, #30
 80077ae:	4606      	mov	r6, r0
 80077b0:	460c      	mov	r4, r1
 80077b2:	d507      	bpl.n	80077c4 <__smakebuf_r+0x1c>
 80077b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	6123      	str	r3, [r4, #16]
 80077bc:	2301      	movs	r3, #1
 80077be:	6163      	str	r3, [r4, #20]
 80077c0:	b002      	add	sp, #8
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
 80077c4:	466a      	mov	r2, sp
 80077c6:	ab01      	add	r3, sp, #4
 80077c8:	f7ff ffc8 	bl	800775c <__swhatbuf_r>
 80077cc:	9900      	ldr	r1, [sp, #0]
 80077ce:	4605      	mov	r5, r0
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff fc63 	bl	800709c <_malloc_r>
 80077d6:	b948      	cbnz	r0, 80077ec <__smakebuf_r+0x44>
 80077d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077dc:	059a      	lsls	r2, r3, #22
 80077de:	d4ef      	bmi.n	80077c0 <__smakebuf_r+0x18>
 80077e0:	f023 0303 	bic.w	r3, r3, #3
 80077e4:	f043 0302 	orr.w	r3, r3, #2
 80077e8:	81a3      	strh	r3, [r4, #12]
 80077ea:	e7e3      	b.n	80077b4 <__smakebuf_r+0xc>
 80077ec:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <__smakebuf_r+0x7c>)
 80077ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	6020      	str	r0, [r4, #0]
 80077f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f8:	81a3      	strh	r3, [r4, #12]
 80077fa:	9b00      	ldr	r3, [sp, #0]
 80077fc:	6120      	str	r0, [r4, #16]
 80077fe:	6163      	str	r3, [r4, #20]
 8007800:	9b01      	ldr	r3, [sp, #4]
 8007802:	b15b      	cbz	r3, 800781c <__smakebuf_r+0x74>
 8007804:	4630      	mov	r0, r6
 8007806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800780a:	f000 fb73 	bl	8007ef4 <_isatty_r>
 800780e:	b128      	cbz	r0, 800781c <__smakebuf_r+0x74>
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	f023 0303 	bic.w	r3, r3, #3
 8007816:	f043 0301 	orr.w	r3, r3, #1
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	89a0      	ldrh	r0, [r4, #12]
 800781e:	4305      	orrs	r5, r0
 8007820:	81a5      	strh	r5, [r4, #12]
 8007822:	e7cd      	b.n	80077c0 <__smakebuf_r+0x18>
 8007824:	08006e1d 	.word	0x08006e1d

08007828 <__malloc_lock>:
 8007828:	4801      	ldr	r0, [pc, #4]	; (8007830 <__malloc_lock+0x8>)
 800782a:	f7ff bbee 	b.w	800700a <__retarget_lock_acquire_recursive>
 800782e:	bf00      	nop
 8007830:	200025a8 	.word	0x200025a8

08007834 <__malloc_unlock>:
 8007834:	4801      	ldr	r0, [pc, #4]	; (800783c <__malloc_unlock+0x8>)
 8007836:	f7ff bbe9 	b.w	800700c <__retarget_lock_release_recursive>
 800783a:	bf00      	nop
 800783c:	200025a8 	.word	0x200025a8

08007840 <_free_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4605      	mov	r5, r0
 8007844:	2900      	cmp	r1, #0
 8007846:	d040      	beq.n	80078ca <_free_r+0x8a>
 8007848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800784c:	1f0c      	subs	r4, r1, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	bfb8      	it	lt
 8007852:	18e4      	addlt	r4, r4, r3
 8007854:	f7ff ffe8 	bl	8007828 <__malloc_lock>
 8007858:	4a1c      	ldr	r2, [pc, #112]	; (80078cc <_free_r+0x8c>)
 800785a:	6813      	ldr	r3, [r2, #0]
 800785c:	b933      	cbnz	r3, 800786c <_free_r+0x2c>
 800785e:	6063      	str	r3, [r4, #4]
 8007860:	6014      	str	r4, [r2, #0]
 8007862:	4628      	mov	r0, r5
 8007864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007868:	f7ff bfe4 	b.w	8007834 <__malloc_unlock>
 800786c:	42a3      	cmp	r3, r4
 800786e:	d908      	bls.n	8007882 <_free_r+0x42>
 8007870:	6820      	ldr	r0, [r4, #0]
 8007872:	1821      	adds	r1, r4, r0
 8007874:	428b      	cmp	r3, r1
 8007876:	bf01      	itttt	eq
 8007878:	6819      	ldreq	r1, [r3, #0]
 800787a:	685b      	ldreq	r3, [r3, #4]
 800787c:	1809      	addeq	r1, r1, r0
 800787e:	6021      	streq	r1, [r4, #0]
 8007880:	e7ed      	b.n	800785e <_free_r+0x1e>
 8007882:	461a      	mov	r2, r3
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	b10b      	cbz	r3, 800788c <_free_r+0x4c>
 8007888:	42a3      	cmp	r3, r4
 800788a:	d9fa      	bls.n	8007882 <_free_r+0x42>
 800788c:	6811      	ldr	r1, [r2, #0]
 800788e:	1850      	adds	r0, r2, r1
 8007890:	42a0      	cmp	r0, r4
 8007892:	d10b      	bne.n	80078ac <_free_r+0x6c>
 8007894:	6820      	ldr	r0, [r4, #0]
 8007896:	4401      	add	r1, r0
 8007898:	1850      	adds	r0, r2, r1
 800789a:	4283      	cmp	r3, r0
 800789c:	6011      	str	r1, [r2, #0]
 800789e:	d1e0      	bne.n	8007862 <_free_r+0x22>
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	4401      	add	r1, r0
 80078a6:	6011      	str	r1, [r2, #0]
 80078a8:	6053      	str	r3, [r2, #4]
 80078aa:	e7da      	b.n	8007862 <_free_r+0x22>
 80078ac:	d902      	bls.n	80078b4 <_free_r+0x74>
 80078ae:	230c      	movs	r3, #12
 80078b0:	602b      	str	r3, [r5, #0]
 80078b2:	e7d6      	b.n	8007862 <_free_r+0x22>
 80078b4:	6820      	ldr	r0, [r4, #0]
 80078b6:	1821      	adds	r1, r4, r0
 80078b8:	428b      	cmp	r3, r1
 80078ba:	bf01      	itttt	eq
 80078bc:	6819      	ldreq	r1, [r3, #0]
 80078be:	685b      	ldreq	r3, [r3, #4]
 80078c0:	1809      	addeq	r1, r1, r0
 80078c2:	6021      	streq	r1, [r4, #0]
 80078c4:	6063      	str	r3, [r4, #4]
 80078c6:	6054      	str	r4, [r2, #4]
 80078c8:	e7cb      	b.n	8007862 <_free_r+0x22>
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	200025ac 	.word	0x200025ac

080078d0 <__sfputc_r>:
 80078d0:	6893      	ldr	r3, [r2, #8]
 80078d2:	b410      	push	{r4}
 80078d4:	3b01      	subs	r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	6093      	str	r3, [r2, #8]
 80078da:	da07      	bge.n	80078ec <__sfputc_r+0x1c>
 80078dc:	6994      	ldr	r4, [r2, #24]
 80078de:	42a3      	cmp	r3, r4
 80078e0:	db01      	blt.n	80078e6 <__sfputc_r+0x16>
 80078e2:	290a      	cmp	r1, #10
 80078e4:	d102      	bne.n	80078ec <__sfputc_r+0x1c>
 80078e6:	bc10      	pop	{r4}
 80078e8:	f7ff bd98 	b.w	800741c <__swbuf_r>
 80078ec:	6813      	ldr	r3, [r2, #0]
 80078ee:	1c58      	adds	r0, r3, #1
 80078f0:	6010      	str	r0, [r2, #0]
 80078f2:	7019      	strb	r1, [r3, #0]
 80078f4:	4608      	mov	r0, r1
 80078f6:	bc10      	pop	{r4}
 80078f8:	4770      	bx	lr

080078fa <__sfputs_r>:
 80078fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fc:	4606      	mov	r6, r0
 80078fe:	460f      	mov	r7, r1
 8007900:	4614      	mov	r4, r2
 8007902:	18d5      	adds	r5, r2, r3
 8007904:	42ac      	cmp	r4, r5
 8007906:	d101      	bne.n	800790c <__sfputs_r+0x12>
 8007908:	2000      	movs	r0, #0
 800790a:	e007      	b.n	800791c <__sfputs_r+0x22>
 800790c:	463a      	mov	r2, r7
 800790e:	4630      	mov	r0, r6
 8007910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007914:	f7ff ffdc 	bl	80078d0 <__sfputc_r>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d1f3      	bne.n	8007904 <__sfputs_r+0xa>
 800791c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007920 <_vfiprintf_r>:
 8007920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	460d      	mov	r5, r1
 8007926:	4614      	mov	r4, r2
 8007928:	4698      	mov	r8, r3
 800792a:	4606      	mov	r6, r0
 800792c:	b09d      	sub	sp, #116	; 0x74
 800792e:	b118      	cbz	r0, 8007938 <_vfiprintf_r+0x18>
 8007930:	6983      	ldr	r3, [r0, #24]
 8007932:	b90b      	cbnz	r3, 8007938 <_vfiprintf_r+0x18>
 8007934:	f7ff faa6 	bl	8006e84 <__sinit>
 8007938:	4b89      	ldr	r3, [pc, #548]	; (8007b60 <_vfiprintf_r+0x240>)
 800793a:	429d      	cmp	r5, r3
 800793c:	d11b      	bne.n	8007976 <_vfiprintf_r+0x56>
 800793e:	6875      	ldr	r5, [r6, #4]
 8007940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007942:	07d9      	lsls	r1, r3, #31
 8007944:	d405      	bmi.n	8007952 <_vfiprintf_r+0x32>
 8007946:	89ab      	ldrh	r3, [r5, #12]
 8007948:	059a      	lsls	r2, r3, #22
 800794a:	d402      	bmi.n	8007952 <_vfiprintf_r+0x32>
 800794c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800794e:	f7ff fb5c 	bl	800700a <__retarget_lock_acquire_recursive>
 8007952:	89ab      	ldrh	r3, [r5, #12]
 8007954:	071b      	lsls	r3, r3, #28
 8007956:	d501      	bpl.n	800795c <_vfiprintf_r+0x3c>
 8007958:	692b      	ldr	r3, [r5, #16]
 800795a:	b9eb      	cbnz	r3, 8007998 <_vfiprintf_r+0x78>
 800795c:	4629      	mov	r1, r5
 800795e:	4630      	mov	r0, r6
 8007960:	f7ff fdae 	bl	80074c0 <__swsetup_r>
 8007964:	b1c0      	cbz	r0, 8007998 <_vfiprintf_r+0x78>
 8007966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007968:	07dc      	lsls	r4, r3, #31
 800796a:	d50e      	bpl.n	800798a <_vfiprintf_r+0x6a>
 800796c:	f04f 30ff 	mov.w	r0, #4294967295
 8007970:	b01d      	add	sp, #116	; 0x74
 8007972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007976:	4b7b      	ldr	r3, [pc, #492]	; (8007b64 <_vfiprintf_r+0x244>)
 8007978:	429d      	cmp	r5, r3
 800797a:	d101      	bne.n	8007980 <_vfiprintf_r+0x60>
 800797c:	68b5      	ldr	r5, [r6, #8]
 800797e:	e7df      	b.n	8007940 <_vfiprintf_r+0x20>
 8007980:	4b79      	ldr	r3, [pc, #484]	; (8007b68 <_vfiprintf_r+0x248>)
 8007982:	429d      	cmp	r5, r3
 8007984:	bf08      	it	eq
 8007986:	68f5      	ldreq	r5, [r6, #12]
 8007988:	e7da      	b.n	8007940 <_vfiprintf_r+0x20>
 800798a:	89ab      	ldrh	r3, [r5, #12]
 800798c:	0598      	lsls	r0, r3, #22
 800798e:	d4ed      	bmi.n	800796c <_vfiprintf_r+0x4c>
 8007990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007992:	f7ff fb3b 	bl	800700c <__retarget_lock_release_recursive>
 8007996:	e7e9      	b.n	800796c <_vfiprintf_r+0x4c>
 8007998:	2300      	movs	r3, #0
 800799a:	9309      	str	r3, [sp, #36]	; 0x24
 800799c:	2320      	movs	r3, #32
 800799e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079a2:	2330      	movs	r3, #48	; 0x30
 80079a4:	f04f 0901 	mov.w	r9, #1
 80079a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80079ac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007b6c <_vfiprintf_r+0x24c>
 80079b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079b4:	4623      	mov	r3, r4
 80079b6:	469a      	mov	sl, r3
 80079b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079bc:	b10a      	cbz	r2, 80079c2 <_vfiprintf_r+0xa2>
 80079be:	2a25      	cmp	r2, #37	; 0x25
 80079c0:	d1f9      	bne.n	80079b6 <_vfiprintf_r+0x96>
 80079c2:	ebba 0b04 	subs.w	fp, sl, r4
 80079c6:	d00b      	beq.n	80079e0 <_vfiprintf_r+0xc0>
 80079c8:	465b      	mov	r3, fp
 80079ca:	4622      	mov	r2, r4
 80079cc:	4629      	mov	r1, r5
 80079ce:	4630      	mov	r0, r6
 80079d0:	f7ff ff93 	bl	80078fa <__sfputs_r>
 80079d4:	3001      	adds	r0, #1
 80079d6:	f000 80aa 	beq.w	8007b2e <_vfiprintf_r+0x20e>
 80079da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079dc:	445a      	add	r2, fp
 80079de:	9209      	str	r2, [sp, #36]	; 0x24
 80079e0:	f89a 3000 	ldrb.w	r3, [sl]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 80a2 	beq.w	8007b2e <_vfiprintf_r+0x20e>
 80079ea:	2300      	movs	r3, #0
 80079ec:	f04f 32ff 	mov.w	r2, #4294967295
 80079f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079f4:	f10a 0a01 	add.w	sl, sl, #1
 80079f8:	9304      	str	r3, [sp, #16]
 80079fa:	9307      	str	r3, [sp, #28]
 80079fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a00:	931a      	str	r3, [sp, #104]	; 0x68
 8007a02:	4654      	mov	r4, sl
 8007a04:	2205      	movs	r2, #5
 8007a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a0a:	4858      	ldr	r0, [pc, #352]	; (8007b6c <_vfiprintf_r+0x24c>)
 8007a0c:	f000 fa82 	bl	8007f14 <memchr>
 8007a10:	9a04      	ldr	r2, [sp, #16]
 8007a12:	b9d8      	cbnz	r0, 8007a4c <_vfiprintf_r+0x12c>
 8007a14:	06d1      	lsls	r1, r2, #27
 8007a16:	bf44      	itt	mi
 8007a18:	2320      	movmi	r3, #32
 8007a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1e:	0713      	lsls	r3, r2, #28
 8007a20:	bf44      	itt	mi
 8007a22:	232b      	movmi	r3, #43	; 0x2b
 8007a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a28:	f89a 3000 	ldrb.w	r3, [sl]
 8007a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a2e:	d015      	beq.n	8007a5c <_vfiprintf_r+0x13c>
 8007a30:	4654      	mov	r4, sl
 8007a32:	2000      	movs	r0, #0
 8007a34:	f04f 0c0a 	mov.w	ip, #10
 8007a38:	9a07      	ldr	r2, [sp, #28]
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a40:	3b30      	subs	r3, #48	; 0x30
 8007a42:	2b09      	cmp	r3, #9
 8007a44:	d94e      	bls.n	8007ae4 <_vfiprintf_r+0x1c4>
 8007a46:	b1b0      	cbz	r0, 8007a76 <_vfiprintf_r+0x156>
 8007a48:	9207      	str	r2, [sp, #28]
 8007a4a:	e014      	b.n	8007a76 <_vfiprintf_r+0x156>
 8007a4c:	eba0 0308 	sub.w	r3, r0, r8
 8007a50:	fa09 f303 	lsl.w	r3, r9, r3
 8007a54:	4313      	orrs	r3, r2
 8007a56:	46a2      	mov	sl, r4
 8007a58:	9304      	str	r3, [sp, #16]
 8007a5a:	e7d2      	b.n	8007a02 <_vfiprintf_r+0xe2>
 8007a5c:	9b03      	ldr	r3, [sp, #12]
 8007a5e:	1d19      	adds	r1, r3, #4
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	9103      	str	r1, [sp, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bfbb      	ittet	lt
 8007a68:	425b      	neglt	r3, r3
 8007a6a:	f042 0202 	orrlt.w	r2, r2, #2
 8007a6e:	9307      	strge	r3, [sp, #28]
 8007a70:	9307      	strlt	r3, [sp, #28]
 8007a72:	bfb8      	it	lt
 8007a74:	9204      	strlt	r2, [sp, #16]
 8007a76:	7823      	ldrb	r3, [r4, #0]
 8007a78:	2b2e      	cmp	r3, #46	; 0x2e
 8007a7a:	d10c      	bne.n	8007a96 <_vfiprintf_r+0x176>
 8007a7c:	7863      	ldrb	r3, [r4, #1]
 8007a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a80:	d135      	bne.n	8007aee <_vfiprintf_r+0x1ce>
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	3402      	adds	r4, #2
 8007a86:	1d1a      	adds	r2, r3, #4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	9203      	str	r2, [sp, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bfb8      	it	lt
 8007a90:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a94:	9305      	str	r3, [sp, #20]
 8007a96:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007b70 <_vfiprintf_r+0x250>
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	4650      	mov	r0, sl
 8007a9e:	7821      	ldrb	r1, [r4, #0]
 8007aa0:	f000 fa38 	bl	8007f14 <memchr>
 8007aa4:	b140      	cbz	r0, 8007ab8 <_vfiprintf_r+0x198>
 8007aa6:	2340      	movs	r3, #64	; 0x40
 8007aa8:	eba0 000a 	sub.w	r0, r0, sl
 8007aac:	fa03 f000 	lsl.w	r0, r3, r0
 8007ab0:	9b04      	ldr	r3, [sp, #16]
 8007ab2:	3401      	adds	r4, #1
 8007ab4:	4303      	orrs	r3, r0
 8007ab6:	9304      	str	r3, [sp, #16]
 8007ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007abc:	2206      	movs	r2, #6
 8007abe:	482d      	ldr	r0, [pc, #180]	; (8007b74 <_vfiprintf_r+0x254>)
 8007ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ac4:	f000 fa26 	bl	8007f14 <memchr>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d03f      	beq.n	8007b4c <_vfiprintf_r+0x22c>
 8007acc:	4b2a      	ldr	r3, [pc, #168]	; (8007b78 <_vfiprintf_r+0x258>)
 8007ace:	bb1b      	cbnz	r3, 8007b18 <_vfiprintf_r+0x1f8>
 8007ad0:	9b03      	ldr	r3, [sp, #12]
 8007ad2:	3307      	adds	r3, #7
 8007ad4:	f023 0307 	bic.w	r3, r3, #7
 8007ad8:	3308      	adds	r3, #8
 8007ada:	9303      	str	r3, [sp, #12]
 8007adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ade:	443b      	add	r3, r7
 8007ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae2:	e767      	b.n	80079b4 <_vfiprintf_r+0x94>
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	2001      	movs	r0, #1
 8007ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aec:	e7a5      	b.n	8007a3a <_vfiprintf_r+0x11a>
 8007aee:	2300      	movs	r3, #0
 8007af0:	f04f 0c0a 	mov.w	ip, #10
 8007af4:	4619      	mov	r1, r3
 8007af6:	3401      	adds	r4, #1
 8007af8:	9305      	str	r3, [sp, #20]
 8007afa:	4620      	mov	r0, r4
 8007afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b00:	3a30      	subs	r2, #48	; 0x30
 8007b02:	2a09      	cmp	r2, #9
 8007b04:	d903      	bls.n	8007b0e <_vfiprintf_r+0x1ee>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0c5      	beq.n	8007a96 <_vfiprintf_r+0x176>
 8007b0a:	9105      	str	r1, [sp, #20]
 8007b0c:	e7c3      	b.n	8007a96 <_vfiprintf_r+0x176>
 8007b0e:	4604      	mov	r4, r0
 8007b10:	2301      	movs	r3, #1
 8007b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b16:	e7f0      	b.n	8007afa <_vfiprintf_r+0x1da>
 8007b18:	ab03      	add	r3, sp, #12
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	462a      	mov	r2, r5
 8007b1e:	4630      	mov	r0, r6
 8007b20:	4b16      	ldr	r3, [pc, #88]	; (8007b7c <_vfiprintf_r+0x25c>)
 8007b22:	a904      	add	r1, sp, #16
 8007b24:	f3af 8000 	nop.w
 8007b28:	4607      	mov	r7, r0
 8007b2a:	1c78      	adds	r0, r7, #1
 8007b2c:	d1d6      	bne.n	8007adc <_vfiprintf_r+0x1bc>
 8007b2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b30:	07d9      	lsls	r1, r3, #31
 8007b32:	d405      	bmi.n	8007b40 <_vfiprintf_r+0x220>
 8007b34:	89ab      	ldrh	r3, [r5, #12]
 8007b36:	059a      	lsls	r2, r3, #22
 8007b38:	d402      	bmi.n	8007b40 <_vfiprintf_r+0x220>
 8007b3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b3c:	f7ff fa66 	bl	800700c <__retarget_lock_release_recursive>
 8007b40:	89ab      	ldrh	r3, [r5, #12]
 8007b42:	065b      	lsls	r3, r3, #25
 8007b44:	f53f af12 	bmi.w	800796c <_vfiprintf_r+0x4c>
 8007b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b4a:	e711      	b.n	8007970 <_vfiprintf_r+0x50>
 8007b4c:	ab03      	add	r3, sp, #12
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	462a      	mov	r2, r5
 8007b52:	4630      	mov	r0, r6
 8007b54:	4b09      	ldr	r3, [pc, #36]	; (8007b7c <_vfiprintf_r+0x25c>)
 8007b56:	a904      	add	r1, sp, #16
 8007b58:	f000 f882 	bl	8007c60 <_printf_i>
 8007b5c:	e7e4      	b.n	8007b28 <_vfiprintf_r+0x208>
 8007b5e:	bf00      	nop
 8007b60:	08008358 	.word	0x08008358
 8007b64:	08008378 	.word	0x08008378
 8007b68:	08008338 	.word	0x08008338
 8007b6c:	0800839c 	.word	0x0800839c
 8007b70:	080083a2 	.word	0x080083a2
 8007b74:	080083a6 	.word	0x080083a6
 8007b78:	00000000 	.word	0x00000000
 8007b7c:	080078fb 	.word	0x080078fb

08007b80 <_printf_common>:
 8007b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b84:	4616      	mov	r6, r2
 8007b86:	4699      	mov	r9, r3
 8007b88:	688a      	ldr	r2, [r1, #8]
 8007b8a:	690b      	ldr	r3, [r1, #16]
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	bfb8      	it	lt
 8007b92:	4613      	movlt	r3, r2
 8007b94:	6033      	str	r3, [r6, #0]
 8007b96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ba0:	b10a      	cbz	r2, 8007ba6 <_printf_common+0x26>
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	6033      	str	r3, [r6, #0]
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	0699      	lsls	r1, r3, #26
 8007baa:	bf42      	ittt	mi
 8007bac:	6833      	ldrmi	r3, [r6, #0]
 8007bae:	3302      	addmi	r3, #2
 8007bb0:	6033      	strmi	r3, [r6, #0]
 8007bb2:	6825      	ldr	r5, [r4, #0]
 8007bb4:	f015 0506 	ands.w	r5, r5, #6
 8007bb8:	d106      	bne.n	8007bc8 <_printf_common+0x48>
 8007bba:	f104 0a19 	add.w	sl, r4, #25
 8007bbe:	68e3      	ldr	r3, [r4, #12]
 8007bc0:	6832      	ldr	r2, [r6, #0]
 8007bc2:	1a9b      	subs	r3, r3, r2
 8007bc4:	42ab      	cmp	r3, r5
 8007bc6:	dc28      	bgt.n	8007c1a <_printf_common+0x9a>
 8007bc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bcc:	1e13      	subs	r3, r2, #0
 8007bce:	6822      	ldr	r2, [r4, #0]
 8007bd0:	bf18      	it	ne
 8007bd2:	2301      	movne	r3, #1
 8007bd4:	0692      	lsls	r2, r2, #26
 8007bd6:	d42d      	bmi.n	8007c34 <_printf_common+0xb4>
 8007bd8:	4649      	mov	r1, r9
 8007bda:	4638      	mov	r0, r7
 8007bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007be0:	47c0      	blx	r8
 8007be2:	3001      	adds	r0, #1
 8007be4:	d020      	beq.n	8007c28 <_printf_common+0xa8>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	68e5      	ldr	r5, [r4, #12]
 8007bea:	f003 0306 	and.w	r3, r3, #6
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	bf18      	it	ne
 8007bf2:	2500      	movne	r5, #0
 8007bf4:	6832      	ldr	r2, [r6, #0]
 8007bf6:	f04f 0600 	mov.w	r6, #0
 8007bfa:	68a3      	ldr	r3, [r4, #8]
 8007bfc:	bf08      	it	eq
 8007bfe:	1aad      	subeq	r5, r5, r2
 8007c00:	6922      	ldr	r2, [r4, #16]
 8007c02:	bf08      	it	eq
 8007c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	bfc4      	itt	gt
 8007c0c:	1a9b      	subgt	r3, r3, r2
 8007c0e:	18ed      	addgt	r5, r5, r3
 8007c10:	341a      	adds	r4, #26
 8007c12:	42b5      	cmp	r5, r6
 8007c14:	d11a      	bne.n	8007c4c <_printf_common+0xcc>
 8007c16:	2000      	movs	r0, #0
 8007c18:	e008      	b.n	8007c2c <_printf_common+0xac>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	4649      	mov	r1, r9
 8007c20:	4638      	mov	r0, r7
 8007c22:	47c0      	blx	r8
 8007c24:	3001      	adds	r0, #1
 8007c26:	d103      	bne.n	8007c30 <_printf_common+0xb0>
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c30:	3501      	adds	r5, #1
 8007c32:	e7c4      	b.n	8007bbe <_printf_common+0x3e>
 8007c34:	2030      	movs	r0, #48	; 0x30
 8007c36:	18e1      	adds	r1, r4, r3
 8007c38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c42:	4422      	add	r2, r4
 8007c44:	3302      	adds	r3, #2
 8007c46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c4a:	e7c5      	b.n	8007bd8 <_printf_common+0x58>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4622      	mov	r2, r4
 8007c50:	4649      	mov	r1, r9
 8007c52:	4638      	mov	r0, r7
 8007c54:	47c0      	blx	r8
 8007c56:	3001      	adds	r0, #1
 8007c58:	d0e6      	beq.n	8007c28 <_printf_common+0xa8>
 8007c5a:	3601      	adds	r6, #1
 8007c5c:	e7d9      	b.n	8007c12 <_printf_common+0x92>
	...

08007c60 <_printf_i>:
 8007c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c64:	7e0f      	ldrb	r7, [r1, #24]
 8007c66:	4691      	mov	r9, r2
 8007c68:	2f78      	cmp	r7, #120	; 0x78
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	469a      	mov	sl, r3
 8007c70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c76:	d807      	bhi.n	8007c88 <_printf_i+0x28>
 8007c78:	2f62      	cmp	r7, #98	; 0x62
 8007c7a:	d80a      	bhi.n	8007c92 <_printf_i+0x32>
 8007c7c:	2f00      	cmp	r7, #0
 8007c7e:	f000 80d9 	beq.w	8007e34 <_printf_i+0x1d4>
 8007c82:	2f58      	cmp	r7, #88	; 0x58
 8007c84:	f000 80a4 	beq.w	8007dd0 <_printf_i+0x170>
 8007c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c90:	e03a      	b.n	8007d08 <_printf_i+0xa8>
 8007c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c96:	2b15      	cmp	r3, #21
 8007c98:	d8f6      	bhi.n	8007c88 <_printf_i+0x28>
 8007c9a:	a101      	add	r1, pc, #4	; (adr r1, 8007ca0 <_printf_i+0x40>)
 8007c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ca0:	08007cf9 	.word	0x08007cf9
 8007ca4:	08007d0d 	.word	0x08007d0d
 8007ca8:	08007c89 	.word	0x08007c89
 8007cac:	08007c89 	.word	0x08007c89
 8007cb0:	08007c89 	.word	0x08007c89
 8007cb4:	08007c89 	.word	0x08007c89
 8007cb8:	08007d0d 	.word	0x08007d0d
 8007cbc:	08007c89 	.word	0x08007c89
 8007cc0:	08007c89 	.word	0x08007c89
 8007cc4:	08007c89 	.word	0x08007c89
 8007cc8:	08007c89 	.word	0x08007c89
 8007ccc:	08007e1b 	.word	0x08007e1b
 8007cd0:	08007d3d 	.word	0x08007d3d
 8007cd4:	08007dfd 	.word	0x08007dfd
 8007cd8:	08007c89 	.word	0x08007c89
 8007cdc:	08007c89 	.word	0x08007c89
 8007ce0:	08007e3d 	.word	0x08007e3d
 8007ce4:	08007c89 	.word	0x08007c89
 8007ce8:	08007d3d 	.word	0x08007d3d
 8007cec:	08007c89 	.word	0x08007c89
 8007cf0:	08007c89 	.word	0x08007c89
 8007cf4:	08007e05 	.word	0x08007e05
 8007cf8:	682b      	ldr	r3, [r5, #0]
 8007cfa:	1d1a      	adds	r2, r3, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	602a      	str	r2, [r5, #0]
 8007d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e0a4      	b.n	8007e56 <_printf_i+0x1f6>
 8007d0c:	6820      	ldr	r0, [r4, #0]
 8007d0e:	6829      	ldr	r1, [r5, #0]
 8007d10:	0606      	lsls	r6, r0, #24
 8007d12:	f101 0304 	add.w	r3, r1, #4
 8007d16:	d50a      	bpl.n	8007d2e <_printf_i+0xce>
 8007d18:	680e      	ldr	r6, [r1, #0]
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	2e00      	cmp	r6, #0
 8007d1e:	da03      	bge.n	8007d28 <_printf_i+0xc8>
 8007d20:	232d      	movs	r3, #45	; 0x2d
 8007d22:	4276      	negs	r6, r6
 8007d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d28:	230a      	movs	r3, #10
 8007d2a:	485e      	ldr	r0, [pc, #376]	; (8007ea4 <_printf_i+0x244>)
 8007d2c:	e019      	b.n	8007d62 <_printf_i+0x102>
 8007d2e:	680e      	ldr	r6, [r1, #0]
 8007d30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d34:	602b      	str	r3, [r5, #0]
 8007d36:	bf18      	it	ne
 8007d38:	b236      	sxthne	r6, r6
 8007d3a:	e7ef      	b.n	8007d1c <_printf_i+0xbc>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	6820      	ldr	r0, [r4, #0]
 8007d40:	1d19      	adds	r1, r3, #4
 8007d42:	6029      	str	r1, [r5, #0]
 8007d44:	0601      	lsls	r1, r0, #24
 8007d46:	d501      	bpl.n	8007d4c <_printf_i+0xec>
 8007d48:	681e      	ldr	r6, [r3, #0]
 8007d4a:	e002      	b.n	8007d52 <_printf_i+0xf2>
 8007d4c:	0646      	lsls	r6, r0, #25
 8007d4e:	d5fb      	bpl.n	8007d48 <_printf_i+0xe8>
 8007d50:	881e      	ldrh	r6, [r3, #0]
 8007d52:	2f6f      	cmp	r7, #111	; 0x6f
 8007d54:	bf0c      	ite	eq
 8007d56:	2308      	moveq	r3, #8
 8007d58:	230a      	movne	r3, #10
 8007d5a:	4852      	ldr	r0, [pc, #328]	; (8007ea4 <_printf_i+0x244>)
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d62:	6865      	ldr	r5, [r4, #4]
 8007d64:	2d00      	cmp	r5, #0
 8007d66:	bfa8      	it	ge
 8007d68:	6821      	ldrge	r1, [r4, #0]
 8007d6a:	60a5      	str	r5, [r4, #8]
 8007d6c:	bfa4      	itt	ge
 8007d6e:	f021 0104 	bicge.w	r1, r1, #4
 8007d72:	6021      	strge	r1, [r4, #0]
 8007d74:	b90e      	cbnz	r6, 8007d7a <_printf_i+0x11a>
 8007d76:	2d00      	cmp	r5, #0
 8007d78:	d04d      	beq.n	8007e16 <_printf_i+0x1b6>
 8007d7a:	4615      	mov	r5, r2
 8007d7c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d80:	fb03 6711 	mls	r7, r3, r1, r6
 8007d84:	5dc7      	ldrb	r7, [r0, r7]
 8007d86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d8a:	4637      	mov	r7, r6
 8007d8c:	42bb      	cmp	r3, r7
 8007d8e:	460e      	mov	r6, r1
 8007d90:	d9f4      	bls.n	8007d7c <_printf_i+0x11c>
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	d10b      	bne.n	8007dae <_printf_i+0x14e>
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	07de      	lsls	r6, r3, #31
 8007d9a:	d508      	bpl.n	8007dae <_printf_i+0x14e>
 8007d9c:	6923      	ldr	r3, [r4, #16]
 8007d9e:	6861      	ldr	r1, [r4, #4]
 8007da0:	4299      	cmp	r1, r3
 8007da2:	bfde      	ittt	le
 8007da4:	2330      	movle	r3, #48	; 0x30
 8007da6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007daa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007dae:	1b52      	subs	r2, r2, r5
 8007db0:	6122      	str	r2, [r4, #16]
 8007db2:	464b      	mov	r3, r9
 8007db4:	4621      	mov	r1, r4
 8007db6:	4640      	mov	r0, r8
 8007db8:	f8cd a000 	str.w	sl, [sp]
 8007dbc:	aa03      	add	r2, sp, #12
 8007dbe:	f7ff fedf 	bl	8007b80 <_printf_common>
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	d14c      	bne.n	8007e60 <_printf_i+0x200>
 8007dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dca:	b004      	add	sp, #16
 8007dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd0:	4834      	ldr	r0, [pc, #208]	; (8007ea4 <_printf_i+0x244>)
 8007dd2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007dd6:	6829      	ldr	r1, [r5, #0]
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	f851 6b04 	ldr.w	r6, [r1], #4
 8007dde:	6029      	str	r1, [r5, #0]
 8007de0:	061d      	lsls	r5, r3, #24
 8007de2:	d514      	bpl.n	8007e0e <_printf_i+0x1ae>
 8007de4:	07df      	lsls	r7, r3, #31
 8007de6:	bf44      	itt	mi
 8007de8:	f043 0320 	orrmi.w	r3, r3, #32
 8007dec:	6023      	strmi	r3, [r4, #0]
 8007dee:	b91e      	cbnz	r6, 8007df8 <_printf_i+0x198>
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	f023 0320 	bic.w	r3, r3, #32
 8007df6:	6023      	str	r3, [r4, #0]
 8007df8:	2310      	movs	r3, #16
 8007dfa:	e7af      	b.n	8007d5c <_printf_i+0xfc>
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	f043 0320 	orr.w	r3, r3, #32
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	2378      	movs	r3, #120	; 0x78
 8007e06:	4828      	ldr	r0, [pc, #160]	; (8007ea8 <_printf_i+0x248>)
 8007e08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e0c:	e7e3      	b.n	8007dd6 <_printf_i+0x176>
 8007e0e:	0659      	lsls	r1, r3, #25
 8007e10:	bf48      	it	mi
 8007e12:	b2b6      	uxthmi	r6, r6
 8007e14:	e7e6      	b.n	8007de4 <_printf_i+0x184>
 8007e16:	4615      	mov	r5, r2
 8007e18:	e7bb      	b.n	8007d92 <_printf_i+0x132>
 8007e1a:	682b      	ldr	r3, [r5, #0]
 8007e1c:	6826      	ldr	r6, [r4, #0]
 8007e1e:	1d18      	adds	r0, r3, #4
 8007e20:	6961      	ldr	r1, [r4, #20]
 8007e22:	6028      	str	r0, [r5, #0]
 8007e24:	0635      	lsls	r5, r6, #24
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	d501      	bpl.n	8007e2e <_printf_i+0x1ce>
 8007e2a:	6019      	str	r1, [r3, #0]
 8007e2c:	e002      	b.n	8007e34 <_printf_i+0x1d4>
 8007e2e:	0670      	lsls	r0, r6, #25
 8007e30:	d5fb      	bpl.n	8007e2a <_printf_i+0x1ca>
 8007e32:	8019      	strh	r1, [r3, #0]
 8007e34:	2300      	movs	r3, #0
 8007e36:	4615      	mov	r5, r2
 8007e38:	6123      	str	r3, [r4, #16]
 8007e3a:	e7ba      	b.n	8007db2 <_printf_i+0x152>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	2100      	movs	r1, #0
 8007e40:	1d1a      	adds	r2, r3, #4
 8007e42:	602a      	str	r2, [r5, #0]
 8007e44:	681d      	ldr	r5, [r3, #0]
 8007e46:	6862      	ldr	r2, [r4, #4]
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f000 f863 	bl	8007f14 <memchr>
 8007e4e:	b108      	cbz	r0, 8007e54 <_printf_i+0x1f4>
 8007e50:	1b40      	subs	r0, r0, r5
 8007e52:	6060      	str	r0, [r4, #4]
 8007e54:	6863      	ldr	r3, [r4, #4]
 8007e56:	6123      	str	r3, [r4, #16]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e5e:	e7a8      	b.n	8007db2 <_printf_i+0x152>
 8007e60:	462a      	mov	r2, r5
 8007e62:	4649      	mov	r1, r9
 8007e64:	4640      	mov	r0, r8
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	47d0      	blx	sl
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	d0ab      	beq.n	8007dc6 <_printf_i+0x166>
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	079b      	lsls	r3, r3, #30
 8007e72:	d413      	bmi.n	8007e9c <_printf_i+0x23c>
 8007e74:	68e0      	ldr	r0, [r4, #12]
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	4298      	cmp	r0, r3
 8007e7a:	bfb8      	it	lt
 8007e7c:	4618      	movlt	r0, r3
 8007e7e:	e7a4      	b.n	8007dca <_printf_i+0x16a>
 8007e80:	2301      	movs	r3, #1
 8007e82:	4632      	mov	r2, r6
 8007e84:	4649      	mov	r1, r9
 8007e86:	4640      	mov	r0, r8
 8007e88:	47d0      	blx	sl
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	d09b      	beq.n	8007dc6 <_printf_i+0x166>
 8007e8e:	3501      	adds	r5, #1
 8007e90:	68e3      	ldr	r3, [r4, #12]
 8007e92:	9903      	ldr	r1, [sp, #12]
 8007e94:	1a5b      	subs	r3, r3, r1
 8007e96:	42ab      	cmp	r3, r5
 8007e98:	dcf2      	bgt.n	8007e80 <_printf_i+0x220>
 8007e9a:	e7eb      	b.n	8007e74 <_printf_i+0x214>
 8007e9c:	2500      	movs	r5, #0
 8007e9e:	f104 0619 	add.w	r6, r4, #25
 8007ea2:	e7f5      	b.n	8007e90 <_printf_i+0x230>
 8007ea4:	080083ad 	.word	0x080083ad
 8007ea8:	080083be 	.word	0x080083be

08007eac <_read_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4604      	mov	r4, r0
 8007eb0:	4608      	mov	r0, r1
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	4d05      	ldr	r5, [pc, #20]	; (8007ecc <_read_r+0x20>)
 8007eb8:	602a      	str	r2, [r5, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f7f8 fbfc 	bl	80006b8 <_read>
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	d102      	bne.n	8007eca <_read_r+0x1e>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	b103      	cbz	r3, 8007eca <_read_r+0x1e>
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	200025b4 	.word	0x200025b4

08007ed0 <_fstat_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	4d06      	ldr	r5, [pc, #24]	; (8007ef0 <_fstat_r+0x20>)
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	4608      	mov	r0, r1
 8007eda:	4611      	mov	r1, r2
 8007edc:	602b      	str	r3, [r5, #0]
 8007ede:	f7f8 fc13 	bl	8000708 <_fstat>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	d102      	bne.n	8007eec <_fstat_r+0x1c>
 8007ee6:	682b      	ldr	r3, [r5, #0]
 8007ee8:	b103      	cbz	r3, 8007eec <_fstat_r+0x1c>
 8007eea:	6023      	str	r3, [r4, #0]
 8007eec:	bd38      	pop	{r3, r4, r5, pc}
 8007eee:	bf00      	nop
 8007ef0:	200025b4 	.word	0x200025b4

08007ef4 <_isatty_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	4d05      	ldr	r5, [pc, #20]	; (8007f10 <_isatty_r+0x1c>)
 8007efa:	4604      	mov	r4, r0
 8007efc:	4608      	mov	r0, r1
 8007efe:	602b      	str	r3, [r5, #0]
 8007f00:	f7f8 fc11 	bl	8000726 <_isatty>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d102      	bne.n	8007f0e <_isatty_r+0x1a>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	b103      	cbz	r3, 8007f0e <_isatty_r+0x1a>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	200025b4 	.word	0x200025b4

08007f14 <memchr>:
 8007f14:	4603      	mov	r3, r0
 8007f16:	b510      	push	{r4, lr}
 8007f18:	b2c9      	uxtb	r1, r1
 8007f1a:	4402      	add	r2, r0
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	d101      	bne.n	8007f26 <memchr+0x12>
 8007f22:	2000      	movs	r0, #0
 8007f24:	e003      	b.n	8007f2e <memchr+0x1a>
 8007f26:	7804      	ldrb	r4, [r0, #0]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	428c      	cmp	r4, r1
 8007f2c:	d1f6      	bne.n	8007f1c <memchr+0x8>
 8007f2e:	bd10      	pop	{r4, pc}

08007f30 <_init>:
 8007f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f32:	bf00      	nop
 8007f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f36:	bc08      	pop	{r3}
 8007f38:	469e      	mov	lr, r3
 8007f3a:	4770      	bx	lr

08007f3c <_fini>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	bf00      	nop
 8007f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f42:	bc08      	pop	{r3}
 8007f44:	469e      	mov	lr, r3
 8007f46:	4770      	bx	lr
