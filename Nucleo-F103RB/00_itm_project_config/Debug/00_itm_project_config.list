
00_itm_project_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006150  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08006260  08006260  00016260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800661c  0800661c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800661c  0800661c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800661c  0800661c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800661c  0800661c  0001661c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006620  08006620  00016620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad0  20000078  0800669c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b48  0800669c  00021b48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166c2  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003722  00000000  00000000  00036763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00039e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b09e  00000000  00000000  0003c580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181ad  00000000  00000000  0005761e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095dbf  00000000  00000000  0006f7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010558a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b14  00000000  00000000  001055dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006248 	.word	0x08006248

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006248 	.word	0x08006248

08000150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000158:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800015c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000160:	f003 0301 	and.w	r3, r3, #1
 8000164:	2b00      	cmp	r3, #0
 8000166:	d013      	beq.n	8000190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800016c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00b      	beq.n	8000190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	e000      	b.n	800017c <ITM_SendChar+0x2c>
    {
      __NOP();
 800017a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800017c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f9      	beq.n	800017a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000186:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	b2d2      	uxtb	r2, r2
 800018e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000190:	687b      	ldr	r3, [r7, #4]
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <__io_putchar>:

  return ch;
}

int __io_putchar(int ch)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
    // Write character to ITM ch.0
    // return (itm_send_char(ch, 0));
    return (ITM_SendChar(ch));
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	4618      	mov	r0, r3
 80001a8:	f7ff ffd2 	bl	8000150 <ITM_SendChar>
 80001ac:	4603      	mov	r3, r0
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
	...

080001b8 <log_message_set_level>:

uint8_t log_message_set_level(log_level_t level)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	71fb      	strb	r3, [r7, #7]
    if (IS_VALID_LOG_LEVEL(level))
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	2b04      	cmp	r3, #4
 80001c6:	d804      	bhi.n	80001d2 <log_message_set_level+0x1a>
    {
        current_log_level = level;
 80001c8:	4a05      	ldr	r2, [pc, #20]	; (80001e0 <log_message_set_level+0x28>)
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	7013      	strb	r3, [r2, #0]
        return 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <log_message_set_level+0x1c>
    }
    return 1; 
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	20000000 	.word	0x20000000

080001e4 <log_message_get_level>:

log_level_t log_message_get_level(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
    return current_log_level;
 80001e8:	4b02      	ldr	r3, [pc, #8]	; (80001f4 <log_message_get_level+0x10>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000000 	.word	0x20000000

080001f8 <log_test>:
    va_end(args);
}
#endif 

void log_test(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b086      	sub	sp, #24
 80001fc:	af00      	add	r7, sp, #0
    log_message(LOG_LEVEL_ERROR, "Error: Something went wrong!\r\n");
 80001fe:	f7ff fff1 	bl	80001e4 <log_message_get_level>
 8000202:	4b2f      	ldr	r3, [pc, #188]	; (80002c0 <log_test+0xc8>)
 8000204:	617b      	str	r3, [r7, #20]
 8000206:	4b2f      	ldr	r3, [pc, #188]	; (80002c4 <log_test+0xcc>)
 8000208:	617b      	str	r3, [r7, #20]
 800020a:	bf00      	nop
 800020c:	6978      	ldr	r0, [r7, #20]
 800020e:	f005 f933 	bl	8005478 <iprintf>
 8000212:	482d      	ldr	r0, [pc, #180]	; (80002c8 <log_test+0xd0>)
 8000214:	f005 f9b6 	bl	8005584 <puts>
 8000218:	482c      	ldr	r0, [pc, #176]	; (80002cc <log_test+0xd4>)
 800021a:	f005 f92d 	bl	8005478 <iprintf>
    log_message(LOG_LEVEL_WARNING, "Warning: Something might be wrong...\r\n");
 800021e:	f7ff ffe1 	bl	80001e4 <log_message_get_level>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d00d      	beq.n	8000244 <log_test+0x4c>
 8000228:	4b25      	ldr	r3, [pc, #148]	; (80002c0 <log_test+0xc8>)
 800022a:	613b      	str	r3, [r7, #16]
 800022c:	4b28      	ldr	r3, [pc, #160]	; (80002d0 <log_test+0xd8>)
 800022e:	613b      	str	r3, [r7, #16]
 8000230:	bf00      	nop
 8000232:	6938      	ldr	r0, [r7, #16]
 8000234:	f005 f920 	bl	8005478 <iprintf>
 8000238:	4826      	ldr	r0, [pc, #152]	; (80002d4 <log_test+0xdc>)
 800023a:	f005 f9a3 	bl	8005584 <puts>
 800023e:	4823      	ldr	r0, [pc, #140]	; (80002cc <log_test+0xd4>)
 8000240:	f005 f91a 	bl	8005478 <iprintf>
    log_message(LOG_LEVEL_INFO, "Starting program...\r\n");
 8000244:	f7ff ffce 	bl	80001e4 <log_message_get_level>
 8000248:	4603      	mov	r3, r0
 800024a:	2b01      	cmp	r3, #1
 800024c:	d90d      	bls.n	800026a <log_test+0x72>
 800024e:	4b1c      	ldr	r3, [pc, #112]	; (80002c0 <log_test+0xc8>)
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	4b21      	ldr	r3, [pc, #132]	; (80002d8 <log_test+0xe0>)
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	bf00      	nop
 8000258:	68f8      	ldr	r0, [r7, #12]
 800025a:	f005 f90d 	bl	8005478 <iprintf>
 800025e:	481f      	ldr	r0, [pc, #124]	; (80002dc <log_test+0xe4>)
 8000260:	f005 f990 	bl	8005584 <puts>
 8000264:	4819      	ldr	r0, [pc, #100]	; (80002cc <log_test+0xd4>)
 8000266:	f005 f907 	bl	8005478 <iprintf>
    log_message(LOG_LEVEL_DEBUG, "Debugging information...\r\n");
 800026a:	f7ff ffbb 	bl	80001e4 <log_message_get_level>
 800026e:	4603      	mov	r3, r0
 8000270:	2b02      	cmp	r3, #2
 8000272:	d90d      	bls.n	8000290 <log_test+0x98>
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <log_test+0xc8>)
 8000276:	60bb      	str	r3, [r7, #8]
 8000278:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <log_test+0xe8>)
 800027a:	60bb      	str	r3, [r7, #8]
 800027c:	bf00      	nop
 800027e:	68b8      	ldr	r0, [r7, #8]
 8000280:	f005 f8fa 	bl	8005478 <iprintf>
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <log_test+0xec>)
 8000286:	f005 f97d 	bl	8005584 <puts>
 800028a:	4810      	ldr	r0, [pc, #64]	; (80002cc <log_test+0xd4>)
 800028c:	f005 f8f4 	bl	8005478 <iprintf>
    log_message(LOG_LEVEL_TRACE, "Trace: acquiring some data!\r\n");
 8000290:	f7ff ffa8 	bl	80001e4 <log_message_get_level>
 8000294:	4603      	mov	r3, r0
 8000296:	2b03      	cmp	r3, #3
 8000298:	d90d      	bls.n	80002b6 <log_test+0xbe>
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <log_test+0xc8>)
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <log_test+0xf0>)
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	bf00      	nop
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f005 f8e7 	bl	8005478 <iprintf>
 80002aa:	4810      	ldr	r0, [pc, #64]	; (80002ec <log_test+0xf4>)
 80002ac:	f005 f96a 	bl	8005584 <puts>
 80002b0:	4806      	ldr	r0, [pc, #24]	; (80002cc <log_test+0xd4>)
 80002b2:	f005 f8e1 	bl	8005478 <iprintf>
}
 80002b6:	bf00      	nop
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	08006260 	.word	0x08006260
 80002c4:	08006264 	.word	0x08006264
 80002c8:	0800626c 	.word	0x0800626c
 80002cc:	0800628c 	.word	0x0800628c
 80002d0:	08006294 	.word	0x08006294
 80002d4:	0800629c 	.word	0x0800629c
 80002d8:	080062c4 	.word	0x080062c4
 80002dc:	080062cc 	.word	0x080062cc
 80002e0:	080062e4 	.word	0x080062e4
 80002e4:	080062ec 	.word	0x080062ec
 80002e8:	08006308 	.word	0x08006308
 80002ec:	08006310 	.word	0x08006310

080002f0 <blink_led_non_blocking>:
uint8_t counter = 0;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void blink_led_non_blocking(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80002f6:	2120      	movs	r1, #32
 80002f8:	4812      	ldr	r0, [pc, #72]	; (8000344 <blink_led_non_blocking+0x54>)
 80002fa:	f000 ff7f 	bl	80011fc <HAL_GPIO_TogglePin>
    log_message(LOG_LEVEL_INFO, "Led2 toggle! -> [%d]\r\n", counter++);
 80002fe:	f7ff ff71 	bl	80001e4 <log_message_get_level>
 8000302:	4603      	mov	r3, r0
 8000304:	2b01      	cmp	r3, #1
 8000306:	d914      	bls.n	8000332 <blink_led_non_blocking+0x42>
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <blink_led_non_blocking+0x58>)
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <blink_led_non_blocking+0x5c>)
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	bf00      	nop
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f005 f8b0 	bl	8005478 <iprintf>
 8000318:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <blink_led_non_blocking+0x60>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	1c5a      	adds	r2, r3, #1
 800031e:	b2d1      	uxtb	r1, r2
 8000320:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <blink_led_non_blocking+0x60>)
 8000322:	7011      	strb	r1, [r2, #0]
 8000324:	4619      	mov	r1, r3
 8000326:	480b      	ldr	r0, [pc, #44]	; (8000354 <blink_led_non_blocking+0x64>)
 8000328:	f005 f8a6 	bl	8005478 <iprintf>
 800032c:	480a      	ldr	r0, [pc, #40]	; (8000358 <blink_led_non_blocking+0x68>)
 800032e:	f005 f8a3 	bl	8005478 <iprintf>
//    SEGGER_SYSVIEW_PrintfHost("Sysview : Led2 toggle!");

    osDelay(1000);
 8000332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000336:	f002 fadf 	bl	80028f8 <osDelay>
}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40010800 	.word	0x40010800
 8000348:	0800633c 	.word	0x0800633c
 800034c:	08006340 	.word	0x08006340
 8000350:	20000098 	.word	0x20000098
 8000354:	08006348 	.word	0x08006348
 8000358:	08006360 	.word	0x08006360

0800035c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of defaultTask */
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000360:	4a04      	ldr	r2, [pc, #16]	; (8000374 <MX_FREERTOS_Init+0x18>)
 8000362:	2100      	movs	r1, #0
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_FREERTOS_Init+0x1c>)
 8000366:	f002 fa1d 	bl	80027a4 <osThreadNew>
 800036a:	4603      	mov	r3, r0
 800036c:	4a03      	ldr	r2, [pc, #12]	; (800037c <MX_FREERTOS_Init+0x20>)
 800036e:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	08006548 	.word	0x08006548
 8000378:	08000381 	.word	0x08000381
 800037c:	20000094 	.word	0x20000094

08000380 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	blink_led_non_blocking();
 8000388:	f7ff ffb2 	bl	80002f0 <blink_led_non_blocking>
 800038c:	e7fc      	b.n	8000388 <StartDefaultTask+0x8>
	...

08000390 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a4:	4b2d      	ldr	r3, [pc, #180]	; (800045c <MX_GPIO_Init+0xcc>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a2c      	ldr	r2, [pc, #176]	; (800045c <MX_GPIO_Init+0xcc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b2a      	ldr	r3, [pc, #168]	; (800045c <MX_GPIO_Init+0xcc>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0310 	and.w	r3, r3, #16
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003bc:	4b27      	ldr	r3, [pc, #156]	; (800045c <MX_GPIO_Init+0xcc>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a26      	ldr	r2, [pc, #152]	; (800045c <MX_GPIO_Init+0xcc>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b24      	ldr	r3, [pc, #144]	; (800045c <MX_GPIO_Init+0xcc>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0320 	and.w	r3, r3, #32
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b21      	ldr	r3, [pc, #132]	; (800045c <MX_GPIO_Init+0xcc>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a20      	ldr	r2, [pc, #128]	; (800045c <MX_GPIO_Init+0xcc>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b1e      	ldr	r3, [pc, #120]	; (800045c <MX_GPIO_Init+0xcc>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_GPIO_Init+0xcc>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a1a      	ldr	r2, [pc, #104]	; (800045c <MX_GPIO_Init+0xcc>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_GPIO_Init+0xcc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	603b      	str	r3, [r7, #0]
 8000402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2160      	movs	r1, #96	; 0x60
 8000408:	4815      	ldr	r0, [pc, #84]	; (8000460 <MX_GPIO_Init+0xd0>)
 800040a:	f000 fec5 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800040e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000414:	4b13      	ldr	r3, [pc, #76]	; (8000464 <MX_GPIO_Init+0xd4>)
 8000416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	4619      	mov	r1, r3
 8000422:	4811      	ldr	r0, [pc, #68]	; (8000468 <MX_GPIO_Init+0xd8>)
 8000424:	f000 fc4a 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 8000428:	2360      	movs	r3, #96	; 0x60
 800042a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000434:	2302      	movs	r3, #2
 8000436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	4808      	ldr	r0, [pc, #32]	; (8000460 <MX_GPIO_Init+0xd0>)
 8000440:	f000 fc3c 	bl	8000cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2105      	movs	r1, #5
 8000448:	2028      	movs	r0, #40	; 0x28
 800044a:	f000 fbf3 	bl	8000c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800044e:	2028      	movs	r0, #40	; 0x28
 8000450:	f000 fc1c 	bl	8000c8c <HAL_NVIC_EnableIRQ>

}
 8000454:	bf00      	nop
 8000456:	3720      	adds	r7, #32
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800
 8000464:	10110000 	.word	0x10110000
 8000468:	40011000 	.word	0x40011000

0800046c <print_startup_msg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_startup_msg(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
	log_message(LOG_LEVEL_INFO,"************************************\r\n");
 8000472:	f7ff feb7 	bl	80001e4 <log_message_get_level>
 8000476:	4603      	mov	r3, r0
 8000478:	2b01      	cmp	r3, #1
 800047a:	d90d      	bls.n	8000498 <print_startup_msg+0x2c>
 800047c:	4b26      	ldr	r3, [pc, #152]	; (8000518 <print_startup_msg+0xac>)
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	4b26      	ldr	r3, [pc, #152]	; (800051c <print_startup_msg+0xb0>)
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	bf00      	nop
 8000486:	68f8      	ldr	r0, [r7, #12]
 8000488:	f004 fff6 	bl	8005478 <iprintf>
 800048c:	4824      	ldr	r0, [pc, #144]	; (8000520 <print_startup_msg+0xb4>)
 800048e:	f005 f879 	bl	8005584 <puts>
 8000492:	4824      	ldr	r0, [pc, #144]	; (8000524 <print_startup_msg+0xb8>)
 8000494:	f004 fff0 	bl	8005478 <iprintf>
	log_message(LOG_LEVEL_INFO,"***** %s - %s ****/\r\n", __DATE__, __TIME__);
 8000498:	f7ff fea4 	bl	80001e4 <log_message_get_level>
 800049c:	4603      	mov	r3, r0
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d90f      	bls.n	80004c2 <print_startup_msg+0x56>
 80004a2:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <print_startup_msg+0xac>)
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	4b1d      	ldr	r3, [pc, #116]	; (800051c <print_startup_msg+0xb0>)
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	bf00      	nop
 80004ac:	68b8      	ldr	r0, [r7, #8]
 80004ae:	f004 ffe3 	bl	8005478 <iprintf>
 80004b2:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <print_startup_msg+0xbc>)
 80004b4:	491d      	ldr	r1, [pc, #116]	; (800052c <print_startup_msg+0xc0>)
 80004b6:	481e      	ldr	r0, [pc, #120]	; (8000530 <print_startup_msg+0xc4>)
 80004b8:	f004 ffde 	bl	8005478 <iprintf>
 80004bc:	4819      	ldr	r0, [pc, #100]	; (8000524 <print_startup_msg+0xb8>)
 80004be:	f004 ffdb 	bl	8005478 <iprintf>
	log_message(LOG_LEVEL_INFO,"***** Author : Bayron Cabrera ******\r\n");
 80004c2:	f7ff fe8f 	bl	80001e4 <log_message_get_level>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d90d      	bls.n	80004e8 <print_startup_msg+0x7c>
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <print_startup_msg+0xac>)
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	4b12      	ldr	r3, [pc, #72]	; (800051c <print_startup_msg+0xb0>)
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	bf00      	nop
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f004 ffce 	bl	8005478 <iprintf>
 80004dc:	4815      	ldr	r0, [pc, #84]	; (8000534 <print_startup_msg+0xc8>)
 80004de:	f005 f851 	bl	8005584 <puts>
 80004e2:	4810      	ldr	r0, [pc, #64]	; (8000524 <print_startup_msg+0xb8>)
 80004e4:	f004 ffc8 	bl	8005478 <iprintf>
	log_message(LOG_LEVEL_INFO,"************************************\r\n");
 80004e8:	f7ff fe7c 	bl	80001e4 <log_message_get_level>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d90d      	bls.n	800050e <print_startup_msg+0xa2>
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <print_startup_msg+0xac>)
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <print_startup_msg+0xb0>)
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	bf00      	nop
 80004fc:	6838      	ldr	r0, [r7, #0]
 80004fe:	f004 ffbb 	bl	8005478 <iprintf>
 8000502:	4807      	ldr	r0, [pc, #28]	; (8000520 <print_startup_msg+0xb4>)
 8000504:	f005 f83e 	bl	8005584 <puts>
 8000508:	4806      	ldr	r0, [pc, #24]	; (8000524 <print_startup_msg+0xb8>)
 800050a:	f004 ffb5 	bl	8005478 <iprintf>
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	08006368 	.word	0x08006368
 800051c:	0800636c 	.word	0x0800636c
 8000520:	08006374 	.word	0x08006374
 8000524:	0800639c 	.word	0x0800639c
 8000528:	080063a4 	.word	0x080063a4
 800052c:	080063b0 	.word	0x080063b0
 8000530:	080063bc 	.word	0x080063bc
 8000534:	080063d4 	.word	0x080063d4

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fa7e 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f812 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f7ff ff24 	bl	8000390 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000548:	f000 f9ea 	bl	8000920 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  log_message_set_level(LOG_LEVEL_TRACE);
 800054c:	2004      	movs	r0, #4
 800054e:	f7ff fe33 	bl	80001b8 <log_message_set_level>
  print_startup_msg();
 8000552:	f7ff ff8b 	bl	800046c <print_startup_msg>
  log_test();
 8000556:	f7ff fe4f 	bl	80001f8 <log_test>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800055a:	f002 f8bd 	bl	80026d8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800055e:	f7ff fefd 	bl	800035c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000562:	f002 f8eb 	bl	800273c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000566:	e7fe      	b.n	8000566 <main+0x2e>

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b090      	sub	sp, #64	; 0x40
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	2228      	movs	r2, #40	; 0x28
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fee1 	bl	800533e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2310      	movs	r3, #16
 8000594:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800059a:	2300      	movs	r3, #0
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800059e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0318 	add.w	r3, r7, #24
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fe71 	bl	8001290 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005b4:	f000 f82c 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2102      	movs	r1, #2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f9ca 	bl	800196c <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005de:	f000 f817 	bl	8000610 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3740      	adds	r7, #64	; 0x40
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005fe:	f000 fa33 	bl	8000a68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40012c00 	.word	0x40012c00

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>

0800061a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
	...

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_MspInit+0x68>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a17      	ldr	r2, [pc, #92]	; (8000698 <HAL_MspInit+0x68>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_MspInit+0x68>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_MspInit+0x68>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <HAL_MspInit+0x68>)
 8000654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <HAL_MspInit+0x68>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	210f      	movs	r1, #15
 800066a:	f06f 0001 	mvn.w	r0, #1
 800066e:	f000 fae1 	bl	8000c34 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_MspInit+0x6c>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_MspInit+0x6c>)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	40010000 	.word	0x40010000

080006a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	; 0x30
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006b6:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <HAL_InitTick+0xd0>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a2d      	ldr	r2, [pc, #180]	; (8000770 <HAL_InitTick+0xd0>)
 80006bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <HAL_InitTick+0xd0>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006ce:	f107 020c 	add.w	r2, r7, #12
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fb67 	bl	8001dac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006de:	f001 fb51 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 80006e2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e6:	4a23      	ldr	r2, [pc, #140]	; (8000774 <HAL_InitTick+0xd4>)
 80006e8:	fba2 2303 	umull	r2, r3, r2, r3
 80006ec:	0c9b      	lsrs	r3, r3, #18
 80006ee:	3b01      	subs	r3, #1
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <HAL_InitTick+0xd8>)
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <HAL_InitTick+0xdc>)
 80006f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <HAL_InitTick+0xd8>)
 80006fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006fe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000700:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <HAL_InitTick+0xd8>)
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <HAL_InitTick+0xd8>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <HAL_InitTick+0xd8>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <HAL_InitTick+0xd8>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000718:	4817      	ldr	r0, [pc, #92]	; (8000778 <HAL_InitTick+0xd8>)
 800071a:	f001 fba7 	bl	8001e6c <HAL_TIM_Base_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000728:	2b00      	cmp	r3, #0
 800072a:	d11b      	bne.n	8000764 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800072c:	4812      	ldr	r0, [pc, #72]	; (8000778 <HAL_InitTick+0xd8>)
 800072e:	f001 fc51 	bl	8001fd4 <HAL_TIM_Base_Start_IT>
 8000732:	4603      	mov	r3, r0
 8000734:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800073c:	2b00      	cmp	r3, #0
 800073e:	d111      	bne.n	8000764 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000740:	2019      	movs	r0, #25
 8000742:	f000 faa3 	bl	8000c8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d808      	bhi.n	800075e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800074c:	2200      	movs	r2, #0
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	2019      	movs	r0, #25
 8000752:	f000 fa6f 	bl	8000c34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <HAL_InitTick+0xe0>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	e002      	b.n	8000764 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000764:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000768:	4618      	mov	r0, r3
 800076a:	3730      	adds	r7, #48	; 0x30
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40021000 	.word	0x40021000
 8000774:	431bde83 	.word	0x431bde83
 8000778:	2000009c 	.word	0x2000009c
 800077c:	40012c00 	.word	0x40012c00
 8000780:	20000008 	.word	0x20000008

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <NMI_Handler+0x4>

0800078a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <MemManage_Handler+0x4>

08000796 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
	...

080007b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <TIM1_UP_IRQHandler+0x10>)
 80007b6:	f001 fc79 	bl	80020ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000009c 	.word	0x2000009c

080007c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80007c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007cc:	f000 fd3e 	bl	800124c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	e00a      	b.n	80007fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007e6:	f3af 8000 	nop.w
 80007ea:	4601      	mov	r1, r0
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	b2ca      	uxtb	r2, r1
 80007f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbf0      	blt.n	80007e6 <_read+0x12>
  }

  return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b086      	sub	sp, #24
 8000812:	af00      	add	r7, sp, #0
 8000814:	60f8      	str	r0, [r7, #12]
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	e009      	b.n	8000834 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	60ba      	str	r2, [r7, #8]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fcb7 	bl	800019c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	dbf1      	blt.n	8000820 <_write+0x12>
  }
  return len;
 800083c:	687b      	ldr	r3, [r7, #4]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_close>:

int _close(int file)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800086c:	605a      	str	r2, [r3, #4]
  return 0;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <_isatty>:

int _isatty(int file)
{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000882:	2301      	movs	r3, #1
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800088e:	b480      	push	{r7}
 8000890:	b085      	sub	sp, #20
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
	...

080008a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b0:	4a14      	ldr	r2, [pc, #80]	; (8000904 <_sbrk+0x5c>)
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <_sbrk+0x60>)
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <_sbrk+0x64>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d102      	bne.n	80008ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <_sbrk+0x64>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <_sbrk+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d207      	bcs.n	80008e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d8:	f004 fc00 	bl	80050dc <__errno>
 80008dc:	4603      	mov	r3, r0
 80008de:	220c      	movs	r2, #12
 80008e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	e009      	b.n	80008fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <_sbrk+0x64>)
 80008f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008fa:	68fb      	ldr	r3, [r7, #12]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20005000 	.word	0x20005000
 8000908:	00000400 	.word	0x00000400
 800090c:	200000e4 	.word	0x200000e4
 8000910:	20001b48 	.word	0x20001b48

08000914 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_USART2_UART_Init+0x50>)
 8000928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_USART2_UART_Init+0x4c>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART2_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000958:	f001 fd48 	bl	80023ec <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000962:	f7ff fe55 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000e8 	.word	0x200000e8
 8000970:	40004400 	.word	0x40004400

08000974 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <HAL_UART_MspInit+0x70>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d123      	bne.n	80009dc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_UART_MspInit+0x74>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <HAL_UART_MspInit+0x74>)
 800099a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099e:	61d3      	str	r3, [r2, #28]
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_UART_MspInit+0x74>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_UART_MspInit+0x74>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <HAL_UART_MspInit+0x74>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_UART_MspInit+0x74>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c4:	230c      	movs	r3, #12
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <HAL_UART_MspInit+0x78>)
 80009d8:	f000 f970 	bl	8000cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40004400 	.word	0x40004400
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010800 	.word	0x40010800

080009f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009f2:	490d      	ldr	r1, [pc, #52]	; (8000a28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a08:	4c0a      	ldr	r4, [pc, #40]	; (8000a34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a16:	f7ff ff7d 	bl	8000914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f004 fc5b 	bl	80052d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1e:	f7ff fd8b 	bl	8000538 <main>
  bx lr
 8000a22:	4770      	bx	lr
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a2c:	08006624 	.word	0x08006624
  ldr r2, =_sbss
 8000a30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a34:	20001b48 	.word	0x20001b48

08000a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_2_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x28>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x28>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f8d1 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	200f      	movs	r0, #15
 8000a54:	f7ff fe24 	bl	80006a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff fdea 	bl	8000630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40022000 	.word	0x40022000

08000a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_IncTick+0x1c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_IncTick+0x20>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <HAL_IncTick+0x20>)
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	2000000c 	.word	0x2000000c
 8000a88:	2000012c 	.word	0x2000012c

08000a8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a90:	4b02      	ldr	r3, [pc, #8]	; (8000a9c <HAL_GetTick+0x10>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	2000012c 	.word	0x2000012c

08000aa0 <__NVIC_SetPriorityGrouping>:
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_GetPriorityGrouping>:
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_EnableIRQ>:
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db0b      	blt.n	8000b2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f003 021f 	and.w	r2, r3, #31
 8000b1c:	4906      	ldr	r1, [pc, #24]	; (8000b38 <__NVIC_EnableIRQ+0x34>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	095b      	lsrs	r3, r3, #5
 8000b24:	2001      	movs	r0, #1
 8000b26:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d00f      	beq.n	8000c22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b06      	cmp	r3, #6
 8000c06:	d00c      	beq.n	8000c22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b05      	cmp	r3, #5
 8000c0c:	d009      	beq.n	8000c22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d006      	beq.n	8000c22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d003      	beq.n	8000c22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c1a:	2192      	movs	r1, #146	; 0x92
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c1e:	f7ff fcfc 	bl	800061a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ff3c 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	080063fc 	.word	0x080063fc

08000c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d903      	bls.n	8000c54 <HAL_NVIC_SetPriority+0x20>
 8000c4c:	21aa      	movs	r1, #170	; 0xaa
 8000c4e:	480e      	ldr	r0, [pc, #56]	; (8000c88 <HAL_NVIC_SetPriority+0x54>)
 8000c50:	f7ff fce3 	bl	800061a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	2b0f      	cmp	r3, #15
 8000c58:	d903      	bls.n	8000c62 <HAL_NVIC_SetPriority+0x2e>
 8000c5a:	21ab      	movs	r1, #171	; 0xab
 8000c5c:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_NVIC_SetPriority+0x54>)
 8000c5e:	f7ff fcdc 	bl	800061a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c62:	f7ff ff41 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	68b9      	ldr	r1, [r7, #8]
 8000c6c:	6978      	ldr	r0, [r7, #20]
 8000c6e:	f7ff ff8f 	bl	8000b90 <NVIC_EncodePriority>
 8000c72:	4602      	mov	r2, r0
 8000c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff5e 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	080063fc 	.word	0x080063fc

08000c8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da03      	bge.n	8000ca6 <HAL_NVIC_EnableIRQ+0x1a>
 8000c9e:	21be      	movs	r1, #190	; 0xbe
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <HAL_NVIC_EnableIRQ+0x2c>)
 8000ca2:	f7ff fcba 	bl	800061a <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff2a 	bl	8000b04 <__NVIC_EnableIRQ>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	080063fc 	.word	0x080063fc

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a96      	ldr	r2, [pc, #600]	; (8000f2c <HAL_GPIO_Init+0x270>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d013      	beq.n	8000cfe <HAL_GPIO_Init+0x42>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a95      	ldr	r2, [pc, #596]	; (8000f30 <HAL_GPIO_Init+0x274>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d00f      	beq.n	8000cfe <HAL_GPIO_Init+0x42>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a94      	ldr	r2, [pc, #592]	; (8000f34 <HAL_GPIO_Init+0x278>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d00b      	beq.n	8000cfe <HAL_GPIO_Init+0x42>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a93      	ldr	r2, [pc, #588]	; (8000f38 <HAL_GPIO_Init+0x27c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d007      	beq.n	8000cfe <HAL_GPIO_Init+0x42>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a92      	ldr	r2, [pc, #584]	; (8000f3c <HAL_GPIO_Init+0x280>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x42>
 8000cf6:	21bd      	movs	r1, #189	; 0xbd
 8000cf8:	4891      	ldr	r0, [pc, #580]	; (8000f40 <HAL_GPIO_Init+0x284>)
 8000cfa:	f7ff fc8e 	bl	800061a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d005      	beq.n	8000d14 <HAL_GPIO_Init+0x58>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	0c1b      	lsrs	r3, r3, #16
 8000d0e:	041b      	lsls	r3, r3, #16
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0x60>
 8000d14:	21be      	movs	r1, #190	; 0xbe
 8000d16:	488a      	ldr	r0, [pc, #552]	; (8000f40 <HAL_GPIO_Init+0x284>)
 8000d18:	f7ff fc7f 	bl	800061a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f000 821c 	beq.w	800115e <HAL_GPIO_Init+0x4a2>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	f000 8217 	beq.w	800115e <HAL_GPIO_Init+0x4a2>
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b11      	cmp	r3, #17
 8000d36:	f000 8212 	beq.w	800115e <HAL_GPIO_Init+0x4a2>
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	f000 820d 	beq.w	800115e <HAL_GPIO_Init+0x4a2>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b12      	cmp	r3, #18
 8000d4a:	f000 8208 	beq.w	800115e <HAL_GPIO_Init+0x4a2>
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	4a7c      	ldr	r2, [pc, #496]	; (8000f44 <HAL_GPIO_Init+0x288>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	f000 8202 	beq.w	800115e <HAL_GPIO_Init+0x4a2>
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	4a7a      	ldr	r2, [pc, #488]	; (8000f48 <HAL_GPIO_Init+0x28c>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	f000 81fc 	beq.w	800115e <HAL_GPIO_Init+0x4a2>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4a78      	ldr	r2, [pc, #480]	; (8000f4c <HAL_GPIO_Init+0x290>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	f000 81f6 	beq.w	800115e <HAL_GPIO_Init+0x4a2>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	4a76      	ldr	r2, [pc, #472]	; (8000f50 <HAL_GPIO_Init+0x294>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	f000 81f0 	beq.w	800115e <HAL_GPIO_Init+0x4a2>
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	4a74      	ldr	r2, [pc, #464]	; (8000f54 <HAL_GPIO_Init+0x298>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	f000 81ea 	beq.w	800115e <HAL_GPIO_Init+0x4a2>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	4a72      	ldr	r2, [pc, #456]	; (8000f58 <HAL_GPIO_Init+0x29c>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	f000 81e4 	beq.w	800115e <HAL_GPIO_Init+0x4a2>
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	f000 81df 	beq.w	800115e <HAL_GPIO_Init+0x4a2>
 8000da0:	21bf      	movs	r1, #191	; 0xbf
 8000da2:	4867      	ldr	r0, [pc, #412]	; (8000f40 <HAL_GPIO_Init+0x284>)
 8000da4:	f7ff fc39 	bl	800061a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da8:	e1d9      	b.n	800115e <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000daa:	2201      	movs	r2, #1
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	69fa      	ldr	r2, [r7, #28]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	f040 81c8 	bne.w	8001158 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a58      	ldr	r2, [pc, #352]	; (8000f2c <HAL_GPIO_Init+0x270>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d013      	beq.n	8000df8 <HAL_GPIO_Init+0x13c>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a57      	ldr	r2, [pc, #348]	; (8000f30 <HAL_GPIO_Init+0x274>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d00f      	beq.n	8000df8 <HAL_GPIO_Init+0x13c>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a56      	ldr	r2, [pc, #344]	; (8000f34 <HAL_GPIO_Init+0x278>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d00b      	beq.n	8000df8 <HAL_GPIO_Init+0x13c>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a55      	ldr	r2, [pc, #340]	; (8000f38 <HAL_GPIO_Init+0x27c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d007      	beq.n	8000df8 <HAL_GPIO_Init+0x13c>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a54      	ldr	r2, [pc, #336]	; (8000f3c <HAL_GPIO_Init+0x280>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x13c>
 8000df0:	21cd      	movs	r1, #205	; 0xcd
 8000df2:	4853      	ldr	r0, [pc, #332]	; (8000f40 <HAL_GPIO_Init+0x284>)
 8000df4:	f7ff fc11 	bl	800061a <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4a56      	ldr	r2, [pc, #344]	; (8000f58 <HAL_GPIO_Init+0x29c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	f000 80c1 	beq.w	8000f86 <HAL_GPIO_Init+0x2ca>
 8000e04:	4a54      	ldr	r2, [pc, #336]	; (8000f58 <HAL_GPIO_Init+0x29c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	f200 80e7 	bhi.w	8000fda <HAL_GPIO_Init+0x31e>
 8000e0c:	4a4f      	ldr	r2, [pc, #316]	; (8000f4c <HAL_GPIO_Init+0x290>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	f000 80b9 	beq.w	8000f86 <HAL_GPIO_Init+0x2ca>
 8000e14:	4a4d      	ldr	r2, [pc, #308]	; (8000f4c <HAL_GPIO_Init+0x290>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	f200 80df 	bhi.w	8000fda <HAL_GPIO_Init+0x31e>
 8000e1c:	4a4d      	ldr	r2, [pc, #308]	; (8000f54 <HAL_GPIO_Init+0x298>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	f000 80b1 	beq.w	8000f86 <HAL_GPIO_Init+0x2ca>
 8000e24:	4a4b      	ldr	r2, [pc, #300]	; (8000f54 <HAL_GPIO_Init+0x298>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	f200 80d7 	bhi.w	8000fda <HAL_GPIO_Init+0x31e>
 8000e2c:	4a46      	ldr	r2, [pc, #280]	; (8000f48 <HAL_GPIO_Init+0x28c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	f000 80a9 	beq.w	8000f86 <HAL_GPIO_Init+0x2ca>
 8000e34:	4a44      	ldr	r2, [pc, #272]	; (8000f48 <HAL_GPIO_Init+0x28c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	f200 80cf 	bhi.w	8000fda <HAL_GPIO_Init+0x31e>
 8000e3c:	4a44      	ldr	r2, [pc, #272]	; (8000f50 <HAL_GPIO_Init+0x294>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	f000 80a1 	beq.w	8000f86 <HAL_GPIO_Init+0x2ca>
 8000e44:	4a42      	ldr	r2, [pc, #264]	; (8000f50 <HAL_GPIO_Init+0x294>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	f200 80c7 	bhi.w	8000fda <HAL_GPIO_Init+0x31e>
 8000e4c:	2b12      	cmp	r3, #18
 8000e4e:	d82b      	bhi.n	8000ea8 <HAL_GPIO_Init+0x1ec>
 8000e50:	2b12      	cmp	r3, #18
 8000e52:	f200 80c2 	bhi.w	8000fda <HAL_GPIO_Init+0x31e>
 8000e56:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <HAL_GPIO_Init+0x1a0>)
 8000e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5c:	08000f87 	.word	0x08000f87
 8000e60:	08000eb1 	.word	0x08000eb1
 8000e64:	08000f03 	.word	0x08000f03
 8000e68:	08000fd5 	.word	0x08000fd5
 8000e6c:	08000fdb 	.word	0x08000fdb
 8000e70:	08000fdb 	.word	0x08000fdb
 8000e74:	08000fdb 	.word	0x08000fdb
 8000e78:	08000fdb 	.word	0x08000fdb
 8000e7c:	08000fdb 	.word	0x08000fdb
 8000e80:	08000fdb 	.word	0x08000fdb
 8000e84:	08000fdb 	.word	0x08000fdb
 8000e88:	08000fdb 	.word	0x08000fdb
 8000e8c:	08000fdb 	.word	0x08000fdb
 8000e90:	08000fdb 	.word	0x08000fdb
 8000e94:	08000fdb 	.word	0x08000fdb
 8000e98:	08000fdb 	.word	0x08000fdb
 8000e9c:	08000fdb 	.word	0x08000fdb
 8000ea0:	08000ed9 	.word	0x08000ed9
 8000ea4:	08000f5d 	.word	0x08000f5d
 8000ea8:	4a26      	ldr	r2, [pc, #152]	; (8000f44 <HAL_GPIO_Init+0x288>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d06b      	beq.n	8000f86 <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eae:	e094      	b.n	8000fda <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d00b      	beq.n	8000ed0 <HAL_GPIO_Init+0x214>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d007      	beq.n	8000ed0 <HAL_GPIO_Init+0x214>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x214>
 8000ec8:	21d5      	movs	r1, #213	; 0xd5
 8000eca:	481d      	ldr	r0, [pc, #116]	; (8000f40 <HAL_GPIO_Init+0x284>)
 8000ecc:	f7ff fba5 	bl	800061a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	623b      	str	r3, [r7, #32]
          break;
 8000ed6:	e081      	b.n	8000fdc <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d00b      	beq.n	8000ef8 <HAL_GPIO_Init+0x23c>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d007      	beq.n	8000ef8 <HAL_GPIO_Init+0x23c>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x23c>
 8000ef0:	21dc      	movs	r1, #220	; 0xdc
 8000ef2:	4813      	ldr	r0, [pc, #76]	; (8000f40 <HAL_GPIO_Init+0x284>)
 8000ef4:	f7ff fb91 	bl	800061a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	3304      	adds	r3, #4
 8000efe:	623b      	str	r3, [r7, #32]
          break;
 8000f00:	e06c      	b.n	8000fdc <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d00b      	beq.n	8000f22 <HAL_GPIO_Init+0x266>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x266>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x266>
 8000f1a:	21e3      	movs	r1, #227	; 0xe3
 8000f1c:	4808      	ldr	r0, [pc, #32]	; (8000f40 <HAL_GPIO_Init+0x284>)
 8000f1e:	f7ff fb7c 	bl	800061a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	3308      	adds	r3, #8
 8000f28:	623b      	str	r3, [r7, #32]
          break;
 8000f2a:	e057      	b.n	8000fdc <HAL_GPIO_Init+0x320>
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	40010c00 	.word	0x40010c00
 8000f34:	40011000 	.word	0x40011000
 8000f38:	40011400 	.word	0x40011400
 8000f3c:	40011800 	.word	0x40011800
 8000f40:	08006438 	.word	0x08006438
 8000f44:	10110000 	.word	0x10110000
 8000f48:	10210000 	.word	0x10210000
 8000f4c:	10310000 	.word	0x10310000
 8000f50:	10120000 	.word	0x10120000
 8000f54:	10220000 	.word	0x10220000
 8000f58:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d00b      	beq.n	8000f7c <HAL_GPIO_Init+0x2c0>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d007      	beq.n	8000f7c <HAL_GPIO_Init+0x2c0>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x2c0>
 8000f74:	21ea      	movs	r1, #234	; 0xea
 8000f76:	4880      	ldr	r0, [pc, #512]	; (8001178 <HAL_GPIO_Init+0x4bc>)
 8000f78:	f7ff fb4f 	bl	800061a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	330c      	adds	r3, #12
 8000f82:	623b      	str	r3, [r7, #32]
          break;
 8000f84:	e02a      	b.n	8000fdc <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_GPIO_Init+0x2ea>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x2ea>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x2ea>
 8000f9e:	21f7      	movs	r1, #247	; 0xf7
 8000fa0:	4875      	ldr	r0, [pc, #468]	; (8001178 <HAL_GPIO_Init+0x4bc>)
 8000fa2:	f7ff fb3a 	bl	800061a <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	623b      	str	r3, [r7, #32]
          break;
 8000fb2:	e013      	b.n	8000fdc <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d105      	bne.n	8000fc8 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	611a      	str	r2, [r3, #16]
          break;
 8000fc6:	e009      	b.n	8000fdc <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	615a      	str	r2, [r3, #20]
          break;
 8000fd2:	e003      	b.n	8000fdc <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x320>
          break;
 8000fda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	2bff      	cmp	r3, #255	; 0xff
 8000fe0:	d801      	bhi.n	8000fe6 <HAL_GPIO_Init+0x32a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	e001      	b.n	8000fea <HAL_GPIO_Init+0x32e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2bff      	cmp	r3, #255	; 0xff
 8000ff0:	d802      	bhi.n	8000ff8 <HAL_GPIO_Init+0x33c>
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	e002      	b.n	8000ffe <HAL_GPIO_Init+0x342>
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	3b08      	subs	r3, #8
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	210f      	movs	r1, #15
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	401a      	ands	r2, r3
 8001010:	6a39      	ldr	r1, [r7, #32]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	431a      	orrs	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8096 	beq.w	8001158 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800102c:	4b53      	ldr	r3, [pc, #332]	; (800117c <HAL_GPIO_Init+0x4c0>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_GPIO_Init+0x4c0>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b50      	ldr	r3, [pc, #320]	; (800117c <HAL_GPIO_Init+0x4c0>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001044:	4a4e      	ldr	r2, [pc, #312]	; (8001180 <HAL_GPIO_Init+0x4c4>)
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001050:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a46      	ldr	r2, [pc, #280]	; (8001184 <HAL_GPIO_Init+0x4c8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d013      	beq.n	8001098 <HAL_GPIO_Init+0x3dc>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a45      	ldr	r2, [pc, #276]	; (8001188 <HAL_GPIO_Init+0x4cc>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d00d      	beq.n	8001094 <HAL_GPIO_Init+0x3d8>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a44      	ldr	r2, [pc, #272]	; (800118c <HAL_GPIO_Init+0x4d0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d007      	beq.n	8001090 <HAL_GPIO_Init+0x3d4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a43      	ldr	r2, [pc, #268]	; (8001190 <HAL_GPIO_Init+0x4d4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d101      	bne.n	800108c <HAL_GPIO_Init+0x3d0>
 8001088:	2303      	movs	r3, #3
 800108a:	e006      	b.n	800109a <HAL_GPIO_Init+0x3de>
 800108c:	2304      	movs	r3, #4
 800108e:	e004      	b.n	800109a <HAL_GPIO_Init+0x3de>
 8001090:	2302      	movs	r3, #2
 8001092:	e002      	b.n	800109a <HAL_GPIO_Init+0x3de>
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <HAL_GPIO_Init+0x3de>
 8001098:	2300      	movs	r3, #0
 800109a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109c:	f002 0203 	and.w	r2, r2, #3
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	4093      	lsls	r3, r2
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010aa:	4935      	ldr	r1, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x4c4>)
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010c4:	4b33      	ldr	r3, [pc, #204]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4932      	ldr	r1, [pc, #200]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	600b      	str	r3, [r1, #0]
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010d2:	4b30      	ldr	r3, [pc, #192]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	43db      	mvns	r3, r3
 80010da:	492e      	ldr	r1, [pc, #184]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 80010dc:	4013      	ands	r3, r2
 80010de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010ec:	4b29      	ldr	r3, [pc, #164]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4928      	ldr	r1, [pc, #160]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	4924      	ldr	r1, [pc, #144]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 8001104:	4013      	ands	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	491e      	ldr	r1, [pc, #120]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	608b      	str	r3, [r1, #8]
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	43db      	mvns	r3, r3
 800112a:	491a      	ldr	r1, [pc, #104]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 800112c:	4013      	ands	r3, r2
 800112e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	4914      	ldr	r1, [pc, #80]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	60cb      	str	r3, [r1, #12]
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	43db      	mvns	r3, r3
 8001152:	4910      	ldr	r1, [pc, #64]	; (8001194 <HAL_GPIO_Init+0x4d8>)
 8001154:	4013      	ands	r3, r2
 8001156:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	3301      	adds	r3, #1
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	fa22 f303 	lsr.w	r3, r2, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	f47f ae1e 	bne.w	8000daa <HAL_GPIO_Init+0xee>
  }
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	08006438 	.word	0x08006438
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000
 8001184:	40010800 	.word	0x40010800
 8001188:	40010c00 	.word	0x40010c00
 800118c:	40011000 	.word	0x40011000
 8001190:	40011400 	.word	0x40011400
 8001194:	40010400 	.word	0x40010400

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <HAL_GPIO_WritePin+0x20>
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	0c1b      	lsrs	r3, r3, #16
 80011b2:	041b      	lsls	r3, r3, #16
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <HAL_GPIO_WritePin+0x2a>
 80011b8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80011bc:	480e      	ldr	r0, [pc, #56]	; (80011f8 <HAL_GPIO_WritePin+0x60>)
 80011be:	f7ff fa2c 	bl	800061a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80011c2:	787b      	ldrb	r3, [r7, #1]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <HAL_GPIO_WritePin+0x40>
 80011c8:	787b      	ldrb	r3, [r7, #1]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d004      	beq.n	80011d8 <HAL_GPIO_WritePin+0x40>
 80011ce:	f240 11d5 	movw	r1, #469	; 0x1d5
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <HAL_GPIO_WritePin+0x60>)
 80011d4:	f7ff fa21 	bl	800061a <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011e4:	e003      	b.n	80011ee <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	041a      	lsls	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	611a      	str	r2, [r3, #16]
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	08006438 	.word	0x08006438

080011fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001208:	887b      	ldrh	r3, [r7, #2]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <HAL_GPIO_TogglePin+0x1c>
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	0c1b      	lsrs	r3, r3, #16
 8001212:	041b      	lsls	r3, r3, #16
 8001214:	2b00      	cmp	r3, #0
 8001216:	d004      	beq.n	8001222 <HAL_GPIO_TogglePin+0x26>
 8001218:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800121c:	480a      	ldr	r0, [pc, #40]	; (8001248 <HAL_GPIO_TogglePin+0x4c>)
 800121e:	f7ff f9fc 	bl	800061a <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001228:	887a      	ldrh	r2, [r7, #2]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4013      	ands	r3, r2
 800122e:	041a      	lsls	r2, r3, #16
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43d9      	mvns	r1, r3
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	400b      	ands	r3, r1
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	611a      	str	r2, [r3, #16]
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	08006438 	.word	0x08006438

0800124c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f806 	bl	800127c <HAL_GPIO_EXTI_Callback>
  }
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40010400 	.word	0x40010400

0800127c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e35a      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d01c      	beq.n	80012e4 <HAL_RCC_OscConfig+0x54>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d116      	bne.n	80012e4 <HAL_RCC_OscConfig+0x54>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d110      	bne.n	80012e4 <HAL_RCC_OscConfig+0x54>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10a      	bne.n	80012e4 <HAL_RCC_OscConfig+0x54>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d104      	bne.n	80012e4 <HAL_RCC_OscConfig+0x54>
 80012da:	f240 1167 	movw	r1, #359	; 0x167
 80012de:	488f      	ldr	r0, [pc, #572]	; (800151c <HAL_RCC_OscConfig+0x28c>)
 80012e0:	f7ff f99b 	bl	800061a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 809a 	beq.w	8001426 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00e      	beq.n	8001318 <HAL_RCC_OscConfig+0x88>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001302:	d009      	beq.n	8001318 <HAL_RCC_OscConfig+0x88>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800130c:	d004      	beq.n	8001318 <HAL_RCC_OscConfig+0x88>
 800130e:	f240 116d 	movw	r1, #365	; 0x16d
 8001312:	4882      	ldr	r0, [pc, #520]	; (800151c <HAL_RCC_OscConfig+0x28c>)
 8001314:	f7ff f981 	bl	800061a <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001318:	4b81      	ldr	r3, [pc, #516]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b04      	cmp	r3, #4
 8001322:	d00c      	beq.n	800133e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001324:	4b7e      	ldr	r3, [pc, #504]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b08      	cmp	r3, #8
 800132e:	d112      	bne.n	8001356 <HAL_RCC_OscConfig+0xc6>
 8001330:	4b7b      	ldr	r3, [pc, #492]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133c:	d10b      	bne.n	8001356 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133e:	4b78      	ldr	r3, [pc, #480]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d06c      	beq.n	8001424 <HAL_RCC_OscConfig+0x194>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d168      	bne.n	8001424 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e300      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0xde>
 8001360:	4b6f      	ldr	r3, [pc, #444]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a6e      	ldr	r2, [pc, #440]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 8001366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	e02e      	b.n	80013cc <HAL_RCC_OscConfig+0x13c>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x100>
 8001376:	4b6a      	ldr	r3, [pc, #424]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a69      	ldr	r2, [pc, #420]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 800137c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b67      	ldr	r3, [pc, #412]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a66      	ldr	r2, [pc, #408]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 8001388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e01d      	b.n	80013cc <HAL_RCC_OscConfig+0x13c>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x124>
 800139a:	4b61      	ldr	r3, [pc, #388]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a60      	ldr	r2, [pc, #384]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 80013a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b5e      	ldr	r3, [pc, #376]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a5d      	ldr	r2, [pc, #372]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e00b      	b.n	80013cc <HAL_RCC_OscConfig+0x13c>
 80013b4:	4b5a      	ldr	r3, [pc, #360]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a59      	ldr	r2, [pc, #356]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 80013ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b57      	ldr	r3, [pc, #348]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a56      	ldr	r2, [pc, #344]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 80013c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb5a 	bl	8000a8c <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fb56 	bl	8000a8c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e2b4      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x14c>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fb46 	bl	8000a8c <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fb42 	bl	8000a8c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e2a0      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x174>
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8080 	beq.w	8001534 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <HAL_RCC_OscConfig+0x1be>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d004      	beq.n	800144e <HAL_RCC_OscConfig+0x1be>
 8001444:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001448:	4834      	ldr	r0, [pc, #208]	; (800151c <HAL_RCC_OscConfig+0x28c>)
 800144a:	f7ff f8e6 	bl	800061a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	2b1f      	cmp	r3, #31
 8001454:	d904      	bls.n	8001460 <HAL_RCC_OscConfig+0x1d0>
 8001456:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800145a:	4830      	ldr	r0, [pc, #192]	; (800151c <HAL_RCC_OscConfig+0x28c>)
 800145c:	f7ff f8dd 	bl	800061a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001460:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00b      	beq.n	8001484 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800146c:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b08      	cmp	r3, #8
 8001476:	d11c      	bne.n	80014b2 <HAL_RCC_OscConfig+0x222>
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d116      	bne.n	80014b2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001484:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x20c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d001      	beq.n	800149c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e25d      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	491d      	ldr	r1, [pc, #116]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b0:	e040      	b.n	8001534 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d020      	beq.n	80014fc <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_RCC_OscConfig+0x294>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fae4 	bl	8000a8c <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff fae0 	bl	8000a8c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e23e      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	490a      	ldr	r1, [pc, #40]	; (8001520 <HAL_RCC_OscConfig+0x290>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
 80014fa:	e01b      	b.n	8001534 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_RCC_OscConfig+0x294>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fac3 	bl	8000a8c <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001508:	e00e      	b.n	8001528 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150a:	f7ff fabf 	bl	8000a8c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d907      	bls.n	8001528 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e21d      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
 800151c:	08006474 	.word	0x08006474
 8001520:	40021000 	.word	0x40021000
 8001524:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001528:	4b7d      	ldr	r3, [pc, #500]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1ea      	bne.n	800150a <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d040      	beq.n	80015c2 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_RCC_OscConfig+0x2ca>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d004      	beq.n	800155a <HAL_RCC_OscConfig+0x2ca>
 8001550:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001554:	4873      	ldr	r0, [pc, #460]	; (8001724 <HAL_RCC_OscConfig+0x494>)
 8001556:	f7ff f860 	bl	800061a <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d019      	beq.n	8001596 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001562:	4b71      	ldr	r3, [pc, #452]	; (8001728 <HAL_RCC_OscConfig+0x498>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001568:	f7ff fa90 	bl	8000a8c <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff fa8c 	bl	8000a8c <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1ea      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001582:	4b67      	ldr	r3, [pc, #412]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800158e:	2001      	movs	r0, #1
 8001590:	f000 fc4e 	bl	8001e30 <RCC_Delay>
 8001594:	e015      	b.n	80015c2 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001596:	4b64      	ldr	r3, [pc, #400]	; (8001728 <HAL_RCC_OscConfig+0x498>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fa76 	bl	8000a8c <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fa72 	bl	8000a8c <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1d0      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b6:	4b5a      	ldr	r3, [pc, #360]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80bf 	beq.w	800174e <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00c      	beq.n	80015f6 <HAL_RCC_OscConfig+0x366>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d008      	beq.n	80015f6 <HAL_RCC_OscConfig+0x366>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d004      	beq.n	80015f6 <HAL_RCC_OscConfig+0x366>
 80015ec:	f240 2111 	movw	r1, #529	; 0x211
 80015f0:	484c      	ldr	r0, [pc, #304]	; (8001724 <HAL_RCC_OscConfig+0x494>)
 80015f2:	f7ff f812 	bl	800061a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10d      	bne.n	800161e <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a46      	ldr	r2, [pc, #280]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b44      	ldr	r3, [pc, #272]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	4b43      	ldr	r3, [pc, #268]	; (800172c <HAL_RCC_OscConfig+0x49c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162a:	4b40      	ldr	r3, [pc, #256]	; (800172c <HAL_RCC_OscConfig+0x49c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a3f      	ldr	r2, [pc, #252]	; (800172c <HAL_RCC_OscConfig+0x49c>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001636:	f7ff fa29 	bl	8000a8c <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7ff fa25 	bl	8000a8c <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	; 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e183      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	4b36      	ldr	r3, [pc, #216]	; (800172c <HAL_RCC_OscConfig+0x49c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x3e2>
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	e02d      	b.n	80016ce <HAL_RCC_OscConfig+0x43e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x404>
 800167a:	4b29      	ldr	r3, [pc, #164]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a28      	ldr	r2, [pc, #160]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a25      	ldr	r2, [pc, #148]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6213      	str	r3, [r2, #32]
 8001692:	e01c      	b.n	80016ce <HAL_RCC_OscConfig+0x43e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x426>
 800169c:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6213      	str	r3, [r2, #32]
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0x43e>
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6213      	str	r3, [r2, #32]
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a16      	ldr	r2, [pc, #88]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d015      	beq.n	8001702 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff f9d9 	bl	8000a8c <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff f9d5 	bl	8000a8c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e131      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_RCC_OscConfig+0x490>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ee      	beq.n	80016de <HAL_RCC_OscConfig+0x44e>
 8001700:	e01c      	b.n	800173c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff f9c3 	bl	8000a8c <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	e012      	b.n	8001730 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff f9bf 	bl	8000a8c <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d909      	bls.n	8001730 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e11b      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
 8001720:	40021000 	.word	0x40021000
 8001724:	08006474 	.word	0x08006474
 8001728:	42420480 	.word	0x42420480
 800172c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	4b8b      	ldr	r3, [pc, #556]	; (8001960 <HAL_RCC_OscConfig+0x6d0>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1e6      	bne.n	800170a <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d105      	bne.n	800174e <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001742:	4b87      	ldr	r3, [pc, #540]	; (8001960 <HAL_RCC_OscConfig+0x6d0>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a86      	ldr	r2, [pc, #536]	; (8001960 <HAL_RCC_OscConfig+0x6d0>)
 8001748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800174c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00c      	beq.n	8001770 <HAL_RCC_OscConfig+0x4e0>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d008      	beq.n	8001770 <HAL_RCC_OscConfig+0x4e0>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d004      	beq.n	8001770 <HAL_RCC_OscConfig+0x4e0>
 8001766:	f240 21af 	movw	r1, #687	; 0x2af
 800176a:	487e      	ldr	r0, [pc, #504]	; (8001964 <HAL_RCC_OscConfig+0x6d4>)
 800176c:	f7fe ff55 	bl	800061a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80ee 	beq.w	8001956 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177a:	4b79      	ldr	r3, [pc, #484]	; (8001960 <HAL_RCC_OscConfig+0x6d0>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b08      	cmp	r3, #8
 8001784:	f000 80ce 	beq.w	8001924 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	2b02      	cmp	r3, #2
 800178e:	f040 80b2 	bne.w	80018f6 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_RCC_OscConfig+0x51e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a2:	d004      	beq.n	80017ae <HAL_RCC_OscConfig+0x51e>
 80017a4:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80017a8:	486e      	ldr	r0, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x6d4>)
 80017aa:	f7fe ff36 	bl	800061a <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d04a      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017be:	d045      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017c8:	d040      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80017d2:	d03b      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017dc:	d036      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80017e6:	d031      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80017f0:	d02c      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80017fa:	d027      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001804:	d022      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800180e:	d01d      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001818:	d018      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001822:	d013      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800182c:	d00e      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001836:	d009      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001840:	d004      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 8001842:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001846:	4847      	ldr	r0, [pc, #284]	; (8001964 <HAL_RCC_OscConfig+0x6d4>)
 8001848:	f7fe fee7 	bl	800061a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b46      	ldr	r3, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x6d8>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff f91b 	bl	8000a8c <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff f917 	bl	8000a8c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e075      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186c:	4b3c      	ldr	r3, [pc, #240]	; (8001960 <HAL_RCC_OscConfig+0x6d0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001880:	d116      	bne.n	80018b0 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_OscConfig+0x60e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001892:	d004      	beq.n	800189e <HAL_RCC_OscConfig+0x60e>
 8001894:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001898:	4832      	ldr	r0, [pc, #200]	; (8001964 <HAL_RCC_OscConfig+0x6d4>)
 800189a:	f7fe febe 	bl	800061a <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <HAL_RCC_OscConfig+0x6d0>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	492d      	ldr	r1, [pc, #180]	; (8001960 <HAL_RCC_OscConfig+0x6d0>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_OscConfig+0x6d0>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a19      	ldr	r1, [r3, #32]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	430b      	orrs	r3, r1
 80018c2:	4927      	ldr	r1, [pc, #156]	; (8001960 <HAL_RCC_OscConfig+0x6d0>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <HAL_RCC_OscConfig+0x6d8>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff f8dd 	bl	8000a8c <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d6:	f7ff f8d9 	bl	8000a8c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e037      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_RCC_OscConfig+0x6d0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x646>
 80018f4:	e02f      	b.n	8001956 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_RCC_OscConfig+0x6d8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff f8c6 	bl	8000a8c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f8c2 	bl	8000a8c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e020      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_RCC_OscConfig+0x6d0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x674>
 8001922:	e018      	b.n	8001956 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e013      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_OscConfig+0x6d0>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	429a      	cmp	r2, r3
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000
 8001964:	08006474 	.word	0x08006474
 8001968:	42420060 	.word	0x42420060

0800196c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e176      	b.n	8001c6e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d116      	bne.n	80019ba <HAL_RCC_ClockConfig+0x4e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d110      	bne.n	80019ba <HAL_RCC_ClockConfig+0x4e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10a      	bne.n	80019ba <HAL_RCC_ClockConfig+0x4e>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d104      	bne.n	80019ba <HAL_RCC_ClockConfig+0x4e>
 80019b0:	f44f 714e 	mov.w	r1, #824	; 0x338
 80019b4:	4874      	ldr	r0, [pc, #464]	; (8001b88 <HAL_RCC_ClockConfig+0x21c>)
 80019b6:	f7fe fe30 	bl	800061a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00a      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x6a>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d007      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x6a>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d004      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x6a>
 80019cc:	f240 3139 	movw	r1, #825	; 0x339
 80019d0:	486d      	ldr	r0, [pc, #436]	; (8001b88 <HAL_RCC_ClockConfig+0x21c>)
 80019d2:	f7fe fe22 	bl	800061a <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d6:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <HAL_RCC_ClockConfig+0x220>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d910      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e4:	4b69      	ldr	r3, [pc, #420]	; (8001b8c <HAL_RCC_ClockConfig+0x220>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 0207 	bic.w	r2, r3, #7
 80019ec:	4967      	ldr	r1, [pc, #412]	; (8001b8c <HAL_RCC_ClockConfig+0x220>)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f4:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <HAL_RCC_ClockConfig+0x220>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e133      	b.n	8001c6e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d049      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a1e:	4b5c      	ldr	r3, [pc, #368]	; (8001b90 <HAL_RCC_ClockConfig+0x224>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4a5b      	ldr	r2, [pc, #364]	; (8001b90 <HAL_RCC_ClockConfig+0x224>)
 8001a24:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a28:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a36:	4b56      	ldr	r3, [pc, #344]	; (8001b90 <HAL_RCC_ClockConfig+0x224>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a55      	ldr	r2, [pc, #340]	; (8001b90 <HAL_RCC_ClockConfig+0x224>)
 8001a3c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a40:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d024      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x128>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b80      	cmp	r3, #128	; 0x80
 8001a50:	d020      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x128>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b90      	cmp	r3, #144	; 0x90
 8001a58:	d01c      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x128>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2ba0      	cmp	r3, #160	; 0xa0
 8001a60:	d018      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x128>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2bb0      	cmp	r3, #176	; 0xb0
 8001a68:	d014      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x128>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8001a70:	d010      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x128>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2bd0      	cmp	r3, #208	; 0xd0
 8001a78:	d00c      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x128>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2be0      	cmp	r3, #224	; 0xe0
 8001a80:	d008      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x128>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2bf0      	cmp	r3, #240	; 0xf0
 8001a88:	d004      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x128>
 8001a8a:	f240 315f 	movw	r1, #863	; 0x35f
 8001a8e:	483e      	ldr	r0, [pc, #248]	; (8001b88 <HAL_RCC_ClockConfig+0x21c>)
 8001a90:	f7fe fdc3 	bl	800061a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a94:	4b3e      	ldr	r3, [pc, #248]	; (8001b90 <HAL_RCC_ClockConfig+0x224>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	493b      	ldr	r1, [pc, #236]	; (8001b90 <HAL_RCC_ClockConfig+0x224>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d051      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00c      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x168>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d008      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x168>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d004      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x168>
 8001aca:	f240 3166 	movw	r1, #870	; 0x366
 8001ace:	482e      	ldr	r0, [pc, #184]	; (8001b88 <HAL_RCC_ClockConfig+0x21c>)
 8001ad0:	f7fe fda3 	bl	800061a <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001adc:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <HAL_RCC_ClockConfig+0x224>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d115      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0c0      	b.n	8001c6e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af4:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <HAL_RCC_ClockConfig+0x224>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b4      	b.n	8001c6e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <HAL_RCC_ClockConfig+0x224>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0ac      	b.n	8001c6e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_ClockConfig+0x224>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f023 0203 	bic.w	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	491b      	ldr	r1, [pc, #108]	; (8001b90 <HAL_RCC_ClockConfig+0x224>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b26:	f7fe ffb1 	bl	8000a8c <HAL_GetTick>
 8001b2a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2e:	f7fe ffad 	bl	8000a8c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e094      	b.n	8001c6e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_ClockConfig+0x224>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 020c 	and.w	r2, r3, #12
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d1eb      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_RCC_ClockConfig+0x220>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d217      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_ClockConfig+0x220>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 0207 	bic.w	r2, r3, #7
 8001b6c:	4907      	ldr	r1, [pc, #28]	; (8001b8c <HAL_RCC_ClockConfig+0x220>)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_ClockConfig+0x220>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d008      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e073      	b.n	8001c6e <HAL_RCC_ClockConfig+0x302>
 8001b86:	bf00      	nop
 8001b88:	08006474 	.word	0x08006474
 8001b8c:	40022000 	.word	0x40022000
 8001b90:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d025      	beq.n	8001bec <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d018      	beq.n	8001bda <HAL_RCC_ClockConfig+0x26e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb0:	d013      	beq.n	8001bda <HAL_RCC_ClockConfig+0x26e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001bba:	d00e      	beq.n	8001bda <HAL_RCC_ClockConfig+0x26e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x26e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bce:	d004      	beq.n	8001bda <HAL_RCC_ClockConfig+0x26e>
 8001bd0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001bd4:	4828      	ldr	r0, [pc, #160]	; (8001c78 <HAL_RCC_ClockConfig+0x30c>)
 8001bd6:	f7fe fd20 	bl	800061a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bda:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <HAL_RCC_ClockConfig+0x310>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	4925      	ldr	r1, [pc, #148]	; (8001c7c <HAL_RCC_ClockConfig+0x310>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d026      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d018      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x2c6>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c08:	d013      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x2c6>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001c12:	d00e      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x2c6>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001c1c:	d009      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x2c6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c26:	d004      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x2c6>
 8001c28:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001c2c:	4812      	ldr	r0, [pc, #72]	; (8001c78 <HAL_RCC_ClockConfig+0x30c>)
 8001c2e:	f7fe fcf4 	bl	800061a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_RCC_ClockConfig+0x310>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	490e      	ldr	r1, [pc, #56]	; (8001c7c <HAL_RCC_ClockConfig+0x310>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c46:	f000 f821 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_ClockConfig+0x310>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	490a      	ldr	r1, [pc, #40]	; (8001c80 <HAL_RCC_ClockConfig+0x314>)
 8001c58:	5ccb      	ldrb	r3, [r1, r3]
 8001c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5e:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x318>)
 8001c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x31c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fd1a 	bl	80006a0 <HAL_InitTick>

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	08006474 	.word	0x08006474
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	0800656c 	.word	0x0800656c
 8001c84:	20000004 	.word	0x20000004
 8001c88:	20000008 	.word	0x20000008

08001c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c8c:	b490      	push	{r4, r7}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c94:	1d3c      	adds	r4, r7, #4
 8001c96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c9c:	f240 2301 	movw	r3, #513	; 0x201
 8001ca0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d002      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x40>
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x46>
 8001cca:	e02b      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cce:	623b      	str	r3, [r7, #32]
      break;
 8001cd0:	e02b      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	0c9b      	lsrs	r3, r3, #18
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3328      	adds	r3, #40	; 0x28
 8001cdc:	443b      	add	r3, r7
 8001cde:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ce2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d012      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	0c5b      	lsrs	r3, r3, #17
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	3328      	adds	r3, #40	; 0x28
 8001cfa:	443b      	add	r3, r7
 8001cfc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d06:	fb03 f202 	mul.w	r2, r3, r2
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	e004      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	623b      	str	r3, [r7, #32]
      break;
 8001d22:	e002      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d26:	623b      	str	r3, [r7, #32]
      break;
 8001d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3728      	adds	r7, #40	; 0x28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc90      	pop	{r4, r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	080064ac 	.word	0x080064ac
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	007a1200 	.word	0x007a1200
 8001d44:	003d0900 	.word	0x003d0900

08001d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d4c:	4b02      	ldr	r3, [pc, #8]	; (8001d58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d60:	f7ff fff2 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	0a1b      	lsrs	r3, r3, #8
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4903      	ldr	r1, [pc, #12]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	0800657c 	.word	0x0800657c

08001d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d88:	f7ff ffde 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	0adb      	lsrs	r3, r3, #11
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4903      	ldr	r1, [pc, #12]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	0800657c 	.word	0x0800657c

08001dac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d104      	bne.n	8001dc6 <HAL_RCC_GetClockConfig+0x1a>
 8001dbc:	f240 5123 	movw	r1, #1315	; 0x523
 8001dc0:	4818      	ldr	r0, [pc, #96]	; (8001e24 <HAL_RCC_GetClockConfig+0x78>)
 8001dc2:	f7fe fc2a 	bl	800061a <assert_failed>
  assert_param(pFLatency != NULL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d104      	bne.n	8001dd6 <HAL_RCC_GetClockConfig+0x2a>
 8001dcc:	f240 5124 	movw	r1, #1316	; 0x524
 8001dd0:	4814      	ldr	r0, [pc, #80]	; (8001e24 <HAL_RCC_GetClockConfig+0x78>)
 8001dd2:	f7fe fc22 	bl	800061a <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	220f      	movs	r2, #15
 8001dda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_RCC_GetClockConfig+0x7c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0203 	and.w	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_RCC_GetClockConfig+0x7c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_RCC_GetClockConfig+0x7c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_GetClockConfig+0x7c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_RCC_GetClockConfig+0x80>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0207 	and.w	r2, r3, #7
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	08006474 	.word	0x08006474
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40022000 	.word	0x40022000

08001e30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <RCC_Delay+0x34>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <RCC_Delay+0x38>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0a5b      	lsrs	r3, r3, #9
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e4c:	bf00      	nop
  }
  while (Delay --);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1e5a      	subs	r2, r3, #1
 8001e52:	60fa      	str	r2, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f9      	bne.n	8001e4c <RCC_Delay+0x1c>
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	20000004 	.word	0x20000004
 8001e68:	10624dd3 	.word	0x10624dd3

08001e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e093      	b.n	8001fa6 <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a4b      	ldr	r2, [pc, #300]	; (8001fb0 <HAL_TIM_Base_Init+0x144>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d013      	beq.n	8001eb0 <HAL_TIM_Base_Init+0x44>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e90:	d00e      	beq.n	8001eb0 <HAL_TIM_Base_Init+0x44>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a47      	ldr	r2, [pc, #284]	; (8001fb4 <HAL_TIM_Base_Init+0x148>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d009      	beq.n	8001eb0 <HAL_TIM_Base_Init+0x44>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <HAL_TIM_Base_Init+0x14c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d004      	beq.n	8001eb0 <HAL_TIM_Base_Init+0x44>
 8001ea6:	f240 1113 	movw	r1, #275	; 0x113
 8001eaa:	4844      	ldr	r0, [pc, #272]	; (8001fbc <HAL_TIM_Base_Init+0x150>)
 8001eac:	f7fe fbb5 	bl	800061a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d014      	beq.n	8001ee2 <HAL_TIM_Base_Init+0x76>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	d010      	beq.n	8001ee2 <HAL_TIM_Base_Init+0x76>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d00c      	beq.n	8001ee2 <HAL_TIM_Base_Init+0x76>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b40      	cmp	r3, #64	; 0x40
 8001ece:	d008      	beq.n	8001ee2 <HAL_TIM_Base_Init+0x76>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b60      	cmp	r3, #96	; 0x60
 8001ed6:	d004      	beq.n	8001ee2 <HAL_TIM_Base_Init+0x76>
 8001ed8:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001edc:	4837      	ldr	r0, [pc, #220]	; (8001fbc <HAL_TIM_Base_Init+0x150>)
 8001ede:	f7fe fb9c 	bl	800061a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00e      	beq.n	8001f08 <HAL_TIM_Base_Init+0x9c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef2:	d009      	beq.n	8001f08 <HAL_TIM_Base_Init+0x9c>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efc:	d004      	beq.n	8001f08 <HAL_TIM_Base_Init+0x9c>
 8001efe:	f240 1115 	movw	r1, #277	; 0x115
 8001f02:	482e      	ldr	r0, [pc, #184]	; (8001fbc <HAL_TIM_Base_Init+0x150>)
 8001f04:	f7fe fb89 	bl	800061a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_TIM_Base_Init+0xb6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2b80      	cmp	r3, #128	; 0x80
 8001f16:	d004      	beq.n	8001f22 <HAL_TIM_Base_Init+0xb6>
 8001f18:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001f1c:	4827      	ldr	r0, [pc, #156]	; (8001fbc <HAL_TIM_Base_Init+0x150>)
 8001f1e:	f7fe fb7c 	bl	800061a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f842 	bl	8001fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f000 f9d8 	bl	8002304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40012c00 	.word	0x40012c00
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	080064bc 	.word	0x080064bc

08001fc0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a2e      	ldr	r2, [pc, #184]	; (800209c <HAL_TIM_Base_Start_IT+0xc8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_TIM_Base_Start_IT+0x3a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fee:	d00e      	beq.n	800200e <HAL_TIM_Base_Start_IT+0x3a>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d009      	beq.n	800200e <HAL_TIM_Base_Start_IT+0x3a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a29      	ldr	r2, [pc, #164]	; (80020a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d004      	beq.n	800200e <HAL_TIM_Base_Start_IT+0x3a>
 8002004:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002008:	4827      	ldr	r0, [pc, #156]	; (80020a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800200a:	f7fe fb06 	bl	800061a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d001      	beq.n	800201e <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e03a      	b.n	8002094 <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_TIM_Base_Start_IT+0xc8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00e      	beq.n	800205e <HAL_TIM_Base_Start_IT+0x8a>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002048:	d009      	beq.n	800205e <HAL_TIM_Base_Start_IT+0x8a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d004      	beq.n	800205e <HAL_TIM_Base_Start_IT+0x8a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d111      	bne.n	8002082 <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b06      	cmp	r3, #6
 800206e:	d010      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002080:	e007      	b.n	8002092 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40012c00 	.word	0x40012c00
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800
 80020a8:	080064bc 	.word	0x080064bc

080020ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d122      	bne.n	8002108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d11b      	bne.n	8002108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0202 	mvn.w	r2, #2
 80020d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8ed 	bl	80022ce <HAL_TIM_IC_CaptureCallback>
 80020f4:	e005      	b.n	8002102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8e0 	bl	80022bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f8ef 	bl	80022e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b04      	cmp	r3, #4
 8002114:	d122      	bne.n	800215c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b04      	cmp	r3, #4
 8002122:	d11b      	bne.n	800215c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0204 	mvn.w	r2, #4
 800212c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8c3 	bl	80022ce <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8b6 	bl	80022bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f8c5 	bl	80022e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b08      	cmp	r3, #8
 8002168:	d122      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b08      	cmp	r3, #8
 8002176:	d11b      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0208 	mvn.w	r2, #8
 8002180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2204      	movs	r2, #4
 8002186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f899 	bl	80022ce <HAL_TIM_IC_CaptureCallback>
 800219c:	e005      	b.n	80021aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f88c 	bl	80022bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f89b 	bl	80022e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d122      	bne.n	8002204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b10      	cmp	r3, #16
 80021ca:	d11b      	bne.n	8002204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0210 	mvn.w	r2, #16
 80021d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2208      	movs	r2, #8
 80021da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f86f 	bl	80022ce <HAL_TIM_IC_CaptureCallback>
 80021f0:	e005      	b.n	80021fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f862 	bl	80022bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f871 	bl	80022e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d10e      	bne.n	8002230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d107      	bne.n	8002230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0201 	mvn.w	r2, #1
 8002228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe f9de 	bl	80005ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223a:	2b80      	cmp	r3, #128	; 0x80
 800223c:	d10e      	bne.n	800225c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d107      	bne.n	800225c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f8bf 	bl	80023da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002266:	2b40      	cmp	r3, #64	; 0x40
 8002268:	d10e      	bne.n	8002288 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d107      	bne.n	8002288 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f835 	bl	80022f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b20      	cmp	r3, #32
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0220 	mvn.w	r2, #32
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f88a 	bl	80023c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a29      	ldr	r2, [pc, #164]	; (80023bc <TIM_Base_SetConfig+0xb8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d00b      	beq.n	8002334 <TIM_Base_SetConfig+0x30>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002322:	d007      	beq.n	8002334 <TIM_Base_SetConfig+0x30>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a26      	ldr	r2, [pc, #152]	; (80023c0 <TIM_Base_SetConfig+0xbc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <TIM_Base_SetConfig+0x30>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a25      	ldr	r2, [pc, #148]	; (80023c4 <TIM_Base_SetConfig+0xc0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d108      	bne.n	8002346 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <TIM_Base_SetConfig+0xb8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00b      	beq.n	8002366 <TIM_Base_SetConfig+0x62>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002354:	d007      	beq.n	8002366 <TIM_Base_SetConfig+0x62>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <TIM_Base_SetConfig+0xbc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d003      	beq.n	8002366 <TIM_Base_SetConfig+0x62>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <TIM_Base_SetConfig+0xc0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d108      	bne.n	8002378 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800236c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a07      	ldr	r2, [pc, #28]	; (80023bc <TIM_Base_SetConfig+0xb8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d103      	bne.n	80023ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	615a      	str	r2, [r3, #20]
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40012c00 	.word	0x40012c00
 80023c0:	40000400 	.word	0x40000400
 80023c4:	40000800 	.word	0x40000800

080023c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e092      	b.n	8002524 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d02c      	beq.n	8002460 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a48      	ldr	r2, [pc, #288]	; (800252c <HAL_UART_Init+0x140>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00e      	beq.n	800242e <HAL_UART_Init+0x42>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a46      	ldr	r2, [pc, #280]	; (8002530 <HAL_UART_Init+0x144>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d009      	beq.n	800242e <HAL_UART_Init+0x42>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a45      	ldr	r2, [pc, #276]	; (8002534 <HAL_UART_Init+0x148>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_UART_Init+0x42>
 8002424:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8002428:	4843      	ldr	r0, [pc, #268]	; (8002538 <HAL_UART_Init+0x14c>)
 800242a:	f7fe f8f6 	bl	800061a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d028      	beq.n	8002488 <HAL_UART_Init+0x9c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243e:	d023      	beq.n	8002488 <HAL_UART_Init+0x9c>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002448:	d01e      	beq.n	8002488 <HAL_UART_Init+0x9c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002452:	d019      	beq.n	8002488 <HAL_UART_Init+0x9c>
 8002454:	f240 116d 	movw	r1, #365	; 0x16d
 8002458:	4837      	ldr	r0, [pc, #220]	; (8002538 <HAL_UART_Init+0x14c>)
 800245a:	f7fe f8de 	bl	800061a <assert_failed>
 800245e:	e013      	b.n	8002488 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a31      	ldr	r2, [pc, #196]	; (800252c <HAL_UART_Init+0x140>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00e      	beq.n	8002488 <HAL_UART_Init+0x9c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a30      	ldr	r2, [pc, #192]	; (8002530 <HAL_UART_Init+0x144>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d009      	beq.n	8002488 <HAL_UART_Init+0x9c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2e      	ldr	r2, [pc, #184]	; (8002534 <HAL_UART_Init+0x148>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <HAL_UART_Init+0x9c>
 800247e:	f240 1171 	movw	r1, #369	; 0x171
 8002482:	482d      	ldr	r0, [pc, #180]	; (8002538 <HAL_UART_Init+0x14c>)
 8002484:	f7fe f8c9 	bl	800061a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_UART_Init+0xb8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002498:	d004      	beq.n	80024a4 <HAL_UART_Init+0xb8>
 800249a:	f240 1173 	movw	r1, #371	; 0x173
 800249e:	4826      	ldr	r0, [pc, #152]	; (8002538 <HAL_UART_Init+0x14c>)
 80024a0:	f7fe f8bb 	bl	800061a <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d106      	bne.n	80024be <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7fe fa5b 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2224      	movs	r2, #36	; 0x24
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f830 	bl	800253c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800250a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2220      	movs	r2, #32
 800251e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40013800 	.word	0x40013800
 8002530:	40004400 	.word	0x40004400
 8002534:	40004800 	.word	0x40004800
 8002538:	080064f4 	.word	0x080064f4

0800253c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a5f      	ldr	r2, [pc, #380]	; (80026c8 <UART_SetConfig+0x18c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d904      	bls.n	8002558 <UART_SetConfig+0x1c>
 800254e:	f640 6153 	movw	r1, #3667	; 0xe53
 8002552:	485e      	ldr	r0, [pc, #376]	; (80026cc <UART_SetConfig+0x190>)
 8002554:	f7fe f861 	bl	800061a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <UART_SetConfig+0x38>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002568:	d004      	beq.n	8002574 <UART_SetConfig+0x38>
 800256a:	f640 6154 	movw	r1, #3668	; 0xe54
 800256e:	4857      	ldr	r0, [pc, #348]	; (80026cc <UART_SetConfig+0x190>)
 8002570:	f7fe f853 	bl	800061a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00e      	beq.n	800259a <UART_SetConfig+0x5e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002584:	d009      	beq.n	800259a <UART_SetConfig+0x5e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800258e:	d004      	beq.n	800259a <UART_SetConfig+0x5e>
 8002590:	f640 6155 	movw	r1, #3669	; 0xe55
 8002594:	484d      	ldr	r0, [pc, #308]	; (80026cc <UART_SetConfig+0x190>)
 8002596:	f7fe f840 	bl	800061a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d103      	bne.n	80025b0 <UART_SetConfig+0x74>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d104      	bne.n	80025ba <UART_SetConfig+0x7e>
 80025b0:	f640 6156 	movw	r1, #3670	; 0xe56
 80025b4:	4845      	ldr	r0, [pc, #276]	; (80026cc <UART_SetConfig+0x190>)
 80025b6:	f7fe f830 	bl	800061a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025ec:	f023 030c 	bic.w	r3, r3, #12
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	430b      	orrs	r3, r1
 80025f8:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2e      	ldr	r2, [pc, #184]	; (80026d0 <UART_SetConfig+0x194>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d103      	bne.n	8002622 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800261a:	f7ff fbb3 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	e002      	b.n	8002628 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002622:	f7ff fb9b 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 8002626:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	009a      	lsls	r2, r3, #2
 8002632:	441a      	add	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <UART_SetConfig+0x198>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	0119      	lsls	r1, r3, #4
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	009a      	lsls	r2, r3, #2
 8002652:	441a      	add	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	fbb2 f2f3 	udiv	r2, r2, r3
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <UART_SetConfig+0x198>)
 8002660:	fba3 0302 	umull	r0, r3, r3, r2
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	2064      	movs	r0, #100	; 0x64
 8002668:	fb00 f303 	mul.w	r3, r0, r3
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	3332      	adds	r3, #50	; 0x32
 8002672:	4a18      	ldr	r2, [pc, #96]	; (80026d4 <UART_SetConfig+0x198>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267e:	4419      	add	r1, r3
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	009a      	lsls	r2, r3, #2
 800268a:	441a      	add	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	fbb2 f2f3 	udiv	r2, r2, r3
 8002696:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <UART_SetConfig+0x198>)
 8002698:	fba3 0302 	umull	r0, r3, r3, r2
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	2064      	movs	r0, #100	; 0x64
 80026a0:	fb00 f303 	mul.w	r3, r0, r3
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	3332      	adds	r3, #50	; 0x32
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <UART_SetConfig+0x198>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	f003 020f 	and.w	r2, r3, #15
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	440a      	add	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	0044aa20 	.word	0x0044aa20
 80026cc:	080064f4 	.word	0x080064f4
 80026d0:	40013800 	.word	0x40013800
 80026d4:	51eb851f 	.word	0x51eb851f

080026d8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026de:	f3ef 8305 	mrs	r3, IPSR
 80026e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80026e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ea:	f3ef 8310 	mrs	r3, PRIMASK
 80026ee:	607b      	str	r3, [r7, #4]
  return(result);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <osKernelInitialize+0x32>
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <osKernelInitialize+0x60>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d109      	bne.n	8002712 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026fe:	f3ef 8311 	mrs	r3, BASEPRI
 8002702:	603b      	str	r3, [r7, #0]
  return(result);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800270a:	f06f 0305 	mvn.w	r3, #5
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	e00c      	b.n	800272c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <osKernelInitialize+0x60>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <osKernelInitialize+0x60>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	e002      	b.n	800272c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800272c:	68fb      	ldr	r3, [r7, #12]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	20000130 	.word	0x20000130

0800273c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002742:	f3ef 8305 	mrs	r3, IPSR
 8002746:	60bb      	str	r3, [r7, #8]
  return(result);
 8002748:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800274e:	f3ef 8310 	mrs	r3, PRIMASK
 8002752:	607b      	str	r3, [r7, #4]
  return(result);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <osKernelStart+0x32>
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <osKernelStart+0x64>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d109      	bne.n	8002776 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002762:	f3ef 8311 	mrs	r3, BASEPRI
 8002766:	603b      	str	r3, [r7, #0]
  return(result);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <osKernelStart+0x3a>
    stat = osErrorISR;
 800276e:	f06f 0305 	mvn.w	r3, #5
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e00e      	b.n	8002794 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <osKernelStart+0x64>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <osKernelStart+0x64>)
 8002780:	2202      	movs	r2, #2
 8002782:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002784:	f001 f890 	bl	80038a8 <vTaskStartScheduler>
      stat = osOK;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	e002      	b.n	8002794 <osKernelStart+0x58>
    } else {
      stat = osError;
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002794:	68fb      	ldr	r3, [r7, #12]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000130 	.word	0x20000130

080027a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b092      	sub	sp, #72	; 0x48
 80027a8:	af04      	add	r7, sp, #16
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027b4:	f3ef 8305 	mrs	r3, IPSR
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f040 8094 	bne.w	80028ea <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c2:	f3ef 8310 	mrs	r3, PRIMASK
 80027c6:	623b      	str	r3, [r7, #32]
  return(result);
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f040 808d 	bne.w	80028ea <osThreadNew+0x146>
 80027d0:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <osThreadNew+0x150>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d106      	bne.n	80027e6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027d8:	f3ef 8311 	mrs	r3, BASEPRI
 80027dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f040 8082 	bne.w	80028ea <osThreadNew+0x146>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d07e      	beq.n	80028ea <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80027f0:	2318      	movs	r3, #24
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80027f4:	2300      	movs	r3, #0
 80027f6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80027f8:	f107 031b 	add.w	r3, r7, #27
 80027fc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d045      	beq.n	8002896 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <osThreadNew+0x74>
        name = attr->name;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <osThreadNew+0x9a>
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	2b38      	cmp	r3, #56	; 0x38
 8002830:	d805      	bhi.n	800283e <osThreadNew+0x9a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <osThreadNew+0x9e>
        return (NULL);
 800283e:	2300      	movs	r3, #0
 8002840:	e054      	b.n	80028ec <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00e      	beq.n	8002878 <osThreadNew+0xd4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2bbb      	cmp	r3, #187	; 0xbb
 8002860:	d90a      	bls.n	8002878 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002866:	2b00      	cmp	r3, #0
 8002868:	d006      	beq.n	8002878 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <osThreadNew+0xd4>
        mem = 1;
 8002872:	2301      	movs	r3, #1
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
 8002876:	e010      	b.n	800289a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10c      	bne.n	800289a <osThreadNew+0xf6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d108      	bne.n	800289a <osThreadNew+0xf6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d104      	bne.n	800289a <osThreadNew+0xf6>
          mem = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
 8002894:	e001      	b.n	800289a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	2b01      	cmp	r3, #1
 800289e:	d110      	bne.n	80028c2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028a8:	9202      	str	r2, [sp, #8]
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fe12 	bl	80034e0 <xTaskCreateStatic>
 80028bc:	4603      	mov	r3, r0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	e013      	b.n	80028ea <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d110      	bne.n	80028ea <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fe5c 	bl	8003598 <xTaskCreate>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d001      	beq.n	80028ea <osThreadNew+0x146>
          hTask = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028ea:	697b      	ldr	r3, [r7, #20]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3738      	adds	r7, #56	; 0x38
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000130 	.word	0x20000130

080028f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002900:	f3ef 8305 	mrs	r3, IPSR
 8002904:	613b      	str	r3, [r7, #16]
  return(result);
 8002906:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10f      	bne.n	800292c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290c:	f3ef 8310 	mrs	r3, PRIMASK
 8002910:	60fb      	str	r3, [r7, #12]
  return(result);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d109      	bne.n	800292c <osDelay+0x34>
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <osDelay+0x58>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d109      	bne.n	8002934 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002920:	f3ef 8311 	mrs	r3, BASEPRI
 8002924:	60bb      	str	r3, [r7, #8]
  return(result);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <osDelay+0x3c>
    stat = osErrorISR;
 800292c:	f06f 0305 	mvn.w	r3, #5
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	e007      	b.n	8002944 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <osDelay+0x4c>
      vTaskDelay(ticks);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 ff7e 	bl	8003840 <vTaskDelay>
    }
  }

  return (stat);
 8002944:	697b      	ldr	r3, [r7, #20]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000130 	.word	0x20000130

08002954 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4a06      	ldr	r2, [pc, #24]	; (800297c <vApplicationGetIdleTaskMemory+0x28>)
 8002964:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <vApplicationGetIdleTaskMemory+0x2c>)
 800296a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	601a      	str	r2, [r3, #0]
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	20000134 	.word	0x20000134
 8002980:	200001f0 	.word	0x200001f0

08002984 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002994:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <vApplicationGetTimerTaskMemory+0x30>)
 800299a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a2:	601a      	str	r2, [r3, #0]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	200003f0 	.word	0x200003f0
 80029b4:	200004ac 	.word	0x200004ac

080029b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f103 0208 	add.w	r2, r3, #8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f103 0208 	add.w	r2, r3, #8
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f103 0208 	add.w	r2, r3, #8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b085      	sub	sp, #20
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	601a      	str	r2, [r3, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d103      	bne.n	8002a74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e00c      	b.n	8002a8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3308      	adds	r3, #8
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	e002      	b.n	8002a82 <vListInsert+0x2e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d2f6      	bcs.n	8002a7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	601a      	str	r2, [r3, #0]
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6892      	ldr	r2, [r2, #8]
 8002ada:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6852      	ldr	r2, [r2, #4]
 8002ae4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d103      	bne.n	8002af8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	1e5a      	subs	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
	...

08002b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b3e:	bf00      	nop
 8002b40:	e7fe      	b.n	8002b40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b42:	f001 fff3 	bl	8004b2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	441a      	add	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	3b01      	subs	r3, #1
 8002b74:	68f9      	ldr	r1, [r7, #12]
 8002b76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	441a      	add	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	22ff      	movs	r2, #255	; 0xff
 8002b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d114      	bne.n	8002bc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01a      	beq.n	8002bd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3310      	adds	r3, #16
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 f91b 	bl	8003de0 <xTaskRemoveFromEventList>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <xQueueGenericReset+0xcc>)
 8002bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	e009      	b.n	8002bd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3310      	adds	r3, #16
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fef6 	bl	80029b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3324      	adds	r3, #36	; 0x24
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fef1 	bl	80029b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bd6:	f001 ffd9 	bl	8004b8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bda:	2301      	movs	r3, #1
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	e000ed04 	.word	0xe000ed04

08002be8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08e      	sub	sp, #56	; 0x38
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <xQueueGenericCreateStatic+0x52>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <xQueueGenericCreateStatic+0x56>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <xQueueGenericCreateStatic+0x58>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	623b      	str	r3, [r7, #32]
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <xQueueGenericCreateStatic+0x7e>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <xQueueGenericCreateStatic+0x82>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <xQueueGenericCreateStatic+0x84>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	61fb      	str	r3, [r7, #28]
}
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c86:	2350      	movs	r3, #80	; 0x50
 8002c88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b50      	cmp	r3, #80	; 0x50
 8002c8e:	d00a      	beq.n	8002ca6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	61bb      	str	r3, [r7, #24]
}
 8002ca2:	bf00      	nop
 8002ca4:	e7fe      	b.n	8002ca4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cb8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f805 	bl	8002cd6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3730      	adds	r7, #48	; 0x30
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d103      	bne.n	8002cf2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e002      	b.n	8002cf8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d04:	2101      	movs	r1, #1
 8002d06:	69b8      	ldr	r0, [r7, #24]
 8002d08:	f7ff ff06 	bl	8002b18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08e      	sub	sp, #56	; 0x38
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <xQueueGenericSend+0x32>
	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d4a:	bf00      	nop
 8002d4c:	e7fe      	b.n	8002d4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d103      	bne.n	8002d5c <xQueueGenericSend+0x40>
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <xQueueGenericSend+0x44>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <xQueueGenericSend+0x46>
 8002d60:	2300      	movs	r3, #0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <xQueueGenericSend+0x60>
	__asm volatile
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d78:	bf00      	nop
 8002d7a:	e7fe      	b.n	8002d7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d103      	bne.n	8002d8a <xQueueGenericSend+0x6e>
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <xQueueGenericSend+0x72>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <xQueueGenericSend+0x74>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <xQueueGenericSend+0x8e>
	__asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	623b      	str	r3, [r7, #32]
}
 8002da6:	bf00      	nop
 8002da8:	e7fe      	b.n	8002da8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002daa:	f001 f9df 	bl	800416c <xTaskGetSchedulerState>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <xQueueGenericSend+0x9e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <xQueueGenericSend+0xa2>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <xQueueGenericSend+0xa4>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <xQueueGenericSend+0xbe>
	__asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	61fb      	str	r3, [r7, #28]
}
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dda:	f001 fea7 	bl	8004b2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <xQueueGenericSend+0xd4>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d129      	bne.n	8002e44 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df6:	f000 fa07 	bl	8003208 <prvCopyDataToQueue>
 8002dfa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	3324      	adds	r3, #36	; 0x24
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 ffe9 	bl	8003de0 <xTaskRemoveFromEventList>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e14:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <xQueueGenericSend+0x1f8>)
 8002e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	e00a      	b.n	8002e3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e2c:	4b39      	ldr	r3, [pc, #228]	; (8002f14 <xQueueGenericSend+0x1f8>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e3c:	f001 fea6 	bl	8004b8c <vPortExitCritical>
				return pdPASS;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e063      	b.n	8002f0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d103      	bne.n	8002e52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e4a:	f001 fe9f 	bl	8004b8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e05c      	b.n	8002f0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f001 f823 	bl	8003ea8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e62:	2301      	movs	r3, #1
 8002e64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e66:	f001 fe91 	bl	8004b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e6a:	f000 fd8d 	bl	8003988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e6e:	f001 fe5d 	bl	8004b2c <vPortEnterCritical>
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d103      	bne.n	8002e88 <xQueueGenericSend+0x16c>
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e8e:	b25b      	sxtb	r3, r3
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d103      	bne.n	8002e9e <xQueueGenericSend+0x182>
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e9e:	f001 fe75 	bl	8004b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea2:	1d3a      	adds	r2, r7, #4
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 f812 	bl	8003ed4 <xTaskCheckForTimeOut>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d124      	bne.n	8002f00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb8:	f000 fa9e 	bl	80033f8 <prvIsQueueFull>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d018      	beq.n	8002ef4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	3310      	adds	r3, #16
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 ff38 	bl	8003d40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed2:	f000 fa29 	bl	8003328 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ed6:	f000 fd65 	bl	80039a4 <xTaskResumeAll>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f47f af7c 	bne.w	8002dda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <xQueueGenericSend+0x1f8>)
 8002ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	e772      	b.n	8002dda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef6:	f000 fa17 	bl	8003328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002efa:	f000 fd53 	bl	80039a4 <xTaskResumeAll>
 8002efe:	e76c      	b.n	8002dda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f02:	f000 fa11 	bl	8003328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f06:	f000 fd4d 	bl	80039a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f0a:	2300      	movs	r3, #0
		}
	}
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3738      	adds	r7, #56	; 0x38
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	e000ed04 	.word	0xe000ed04

08002f18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08e      	sub	sp, #56	; 0x38
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f42:	bf00      	nop
 8002f44:	e7fe      	b.n	8002f44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d103      	bne.n	8002f54 <xQueueGenericSendFromISR+0x3c>
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <xQueueGenericSendFromISR+0x40>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <xQueueGenericSendFromISR+0x42>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	623b      	str	r3, [r7, #32]
}
 8002f70:	bf00      	nop
 8002f72:	e7fe      	b.n	8002f72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d103      	bne.n	8002f82 <xQueueGenericSendFromISR+0x6a>
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <xQueueGenericSendFromISR+0x6e>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <xQueueGenericSendFromISR+0x70>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	61fb      	str	r3, [r7, #28]
}
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fa2:	f001 fe85 	bl	8004cb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fa6:	f3ef 8211 	mrs	r2, BASEPRI
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	61ba      	str	r2, [r7, #24]
 8002fbc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <xQueueGenericSendFromISR+0xbc>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d12c      	bne.n	800302e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fe4:	f000 f910 	bl	8003208 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fe8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d112      	bne.n	8003018 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	3324      	adds	r3, #36	; 0x24
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 feee 	bl	8003de0 <xTaskRemoveFromEventList>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e007      	b.n	8003028 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003018:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800301c:	3301      	adds	r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	b25a      	sxtb	r2, r3
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003028:	2301      	movs	r3, #1
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800302c:	e001      	b.n	8003032 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800302e:	2300      	movs	r3, #0
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800303c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800303e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003040:	4618      	mov	r0, r3
 8003042:	3738      	adds	r7, #56	; 0x38
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08c      	sub	sp, #48	; 0x30
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003054:	2300      	movs	r3, #0
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <xQueueReceive+0x30>
	__asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	623b      	str	r3, [r7, #32]
}
 8003074:	bf00      	nop
 8003076:	e7fe      	b.n	8003076 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d103      	bne.n	8003086 <xQueueReceive+0x3e>
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <xQueueReceive+0x42>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <xQueueReceive+0x44>
 800308a:	2300      	movs	r3, #0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <xQueueReceive+0x5e>
	__asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	61fb      	str	r3, [r7, #28]
}
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030a6:	f001 f861 	bl	800416c <xTaskGetSchedulerState>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <xQueueReceive+0x6e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <xQueueReceive+0x72>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <xQueueReceive+0x74>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <xQueueReceive+0x8e>
	__asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	61bb      	str	r3, [r7, #24]
}
 80030d2:	bf00      	nop
 80030d4:	e7fe      	b.n	80030d4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80030d6:	f001 fd29 	bl	8004b2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01f      	beq.n	8003126 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ea:	f000 f8f7 	bl	80032dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	1e5a      	subs	r2, r3, #1
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00f      	beq.n	800311e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	3310      	adds	r3, #16
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fe6c 	bl	8003de0 <xTaskRemoveFromEventList>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <xQueueReceive+0x1bc>)
 8003110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800311e:	f001 fd35 	bl	8004b8c <vPortExitCritical>
				return pdPASS;
 8003122:	2301      	movs	r3, #1
 8003124:	e069      	b.n	80031fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800312c:	f001 fd2e 	bl	8004b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003130:	2300      	movs	r3, #0
 8003132:	e062      	b.n	80031fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800313a:	f107 0310 	add.w	r3, r7, #16
 800313e:	4618      	mov	r0, r3
 8003140:	f000 feb2 	bl	8003ea8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003144:	2301      	movs	r3, #1
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003148:	f001 fd20 	bl	8004b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800314c:	f000 fc1c 	bl	8003988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003150:	f001 fcec 	bl	8004b2c <vPortEnterCritical>
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800315a:	b25b      	sxtb	r3, r3
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d103      	bne.n	800316a <xQueueReceive+0x122>
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003170:	b25b      	sxtb	r3, r3
 8003172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003176:	d103      	bne.n	8003180 <xQueueReceive+0x138>
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003180:	f001 fd04 	bl	8004b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003184:	1d3a      	adds	r2, r7, #4
 8003186:	f107 0310 	add.w	r3, r7, #16
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fea1 	bl	8003ed4 <xTaskCheckForTimeOut>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d123      	bne.n	80031e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800319a:	f000 f917 	bl	80033cc <prvIsQueueEmpty>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d017      	beq.n	80031d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a6:	3324      	adds	r3, #36	; 0x24
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fdc7 	bl	8003d40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b4:	f000 f8b8 	bl	8003328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031b8:	f000 fbf4 	bl	80039a4 <xTaskResumeAll>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d189      	bne.n	80030d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <xQueueReceive+0x1bc>)
 80031c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	e780      	b.n	80030d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d6:	f000 f8a7 	bl	8003328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031da:	f000 fbe3 	bl	80039a4 <xTaskResumeAll>
 80031de:	e77a      	b.n	80030d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e2:	f000 f8a1 	bl	8003328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031e6:	f000 fbdd 	bl	80039a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ec:	f000 f8ee 	bl	80033cc <prvIsQueueEmpty>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f43f af6f 	beq.w	80030d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3730      	adds	r7, #48	; 0x30
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	e000ed04 	.word	0xe000ed04

08003208 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10d      	bne.n	8003242 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d14d      	bne.n	80032ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 ffb8 	bl	80041a8 <xTaskPriorityDisinherit>
 8003238:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	e043      	b.n	80032ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d119      	bne.n	800327c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6898      	ldr	r0, [r3, #8]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	461a      	mov	r2, r3
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	f002 f865 	bl	8005322 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	441a      	add	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	429a      	cmp	r2, r3
 8003270:	d32b      	bcc.n	80032ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	e026      	b.n	80032ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68d8      	ldr	r0, [r3, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	461a      	mov	r2, r3
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	f002 f84b 	bl	8005322 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	425b      	negs	r3, r3
 8003296:	441a      	add	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d207      	bcs.n	80032b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	425b      	negs	r3, r3
 80032b2:	441a      	add	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d105      	bne.n	80032ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032d2:	697b      	ldr	r3, [r7, #20]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d018      	beq.n	8003320 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	441a      	add	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	429a      	cmp	r2, r3
 8003306:	d303      	bcc.n	8003310 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68d9      	ldr	r1, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	461a      	mov	r2, r3
 800331a:	6838      	ldr	r0, [r7, #0]
 800331c:	f002 f801 	bl	8005322 <memcpy>
	}
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003330:	f001 fbfc 	bl	8004b2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800333a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800333c:	e011      	b.n	8003362 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d012      	beq.n	800336c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3324      	adds	r3, #36	; 0x24
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fd48 	bl	8003de0 <xTaskRemoveFromEventList>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003356:	f000 fe1f 	bl	8003f98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	3b01      	subs	r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	dce9      	bgt.n	800333e <prvUnlockQueue+0x16>
 800336a:	e000      	b.n	800336e <prvUnlockQueue+0x46>
					break;
 800336c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	22ff      	movs	r2, #255	; 0xff
 8003372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003376:	f001 fc09 	bl	8004b8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800337a:	f001 fbd7 	bl	8004b2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003384:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003386:	e011      	b.n	80033ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3310      	adds	r3, #16
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fd23 	bl	8003de0 <xTaskRemoveFromEventList>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033a0:	f000 fdfa 	bl	8003f98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033a4:	7bbb      	ldrb	r3, [r7, #14]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	dce9      	bgt.n	8003388 <prvUnlockQueue+0x60>
 80033b4:	e000      	b.n	80033b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	22ff      	movs	r2, #255	; 0xff
 80033bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033c0:	f001 fbe4 	bl	8004b8c <vPortExitCritical>
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033d4:	f001 fbaa 	bl	8004b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e001      	b.n	80033ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ea:	f001 fbcf 	bl	8004b8c <vPortExitCritical>

	return xReturn;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003400:	f001 fb94 	bl	8004b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340c:	429a      	cmp	r2, r3
 800340e:	d102      	bne.n	8003416 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003410:	2301      	movs	r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e001      	b.n	800341a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800341a:	f001 fbb7 	bl	8004b8c <vPortExitCritical>

	return xReturn;
 800341e:	68fb      	ldr	r3, [r7, #12]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	e014      	b.n	8003462 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003438:	4a0e      	ldr	r2, [pc, #56]	; (8003474 <vQueueAddToRegistry+0x4c>)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10b      	bne.n	800345c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003444:	490b      	ldr	r1, [pc, #44]	; (8003474 <vQueueAddToRegistry+0x4c>)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800344e:	4a09      	ldr	r2, [pc, #36]	; (8003474 <vQueueAddToRegistry+0x4c>)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800345a:	e006      	b.n	800346a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3301      	adds	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b07      	cmp	r3, #7
 8003466:	d9e7      	bls.n	8003438 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	200008ac 	.word	0x200008ac

08003478 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003488:	f001 fb50 	bl	8004b2c <vPortEnterCritical>
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003492:	b25b      	sxtb	r3, r3
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d103      	bne.n	80034a2 <vQueueWaitForMessageRestricted+0x2a>
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d103      	bne.n	80034b8 <vQueueWaitForMessageRestricted+0x40>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b8:	f001 fb68 	bl	8004b8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3324      	adds	r3, #36	; 0x24
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fc5b 	bl	8003d88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034d2:	6978      	ldr	r0, [r7, #20]
 80034d4:	f7ff ff28 	bl	8003328 <prvUnlockQueue>
	}
 80034d8:	bf00      	nop
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08e      	sub	sp, #56	; 0x38
 80034e4:	af04      	add	r7, sp, #16
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xTaskCreateStatic+0x2a>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	623b      	str	r3, [r7, #32]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <xTaskCreateStatic+0x46>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	61fb      	str	r3, [r7, #28]
}
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003526:	23bc      	movs	r3, #188	; 0xbc
 8003528:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2bbc      	cmp	r3, #188	; 0xbc
 800352e:	d00a      	beq.n	8003546 <xTaskCreateStatic+0x66>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	61bb      	str	r3, [r7, #24]
}
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01e      	beq.n	800358a <xTaskCreateStatic+0xaa>
 800354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01b      	beq.n	800358a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800355a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	2202      	movs	r2, #2
 8003560:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003564:	2300      	movs	r3, #0
 8003566:	9303      	str	r3, [sp, #12]
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	9302      	str	r3, [sp, #8]
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f851 	bl	8003624 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003582:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003584:	f000 f8ec 	bl	8003760 <prvAddNewTaskToReadyList>
 8003588:	e001      	b.n	800358e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800358e:	697b      	ldr	r3, [r7, #20]
	}
 8003590:	4618      	mov	r0, r3
 8003592:	3728      	adds	r7, #40	; 0x28
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08c      	sub	sp, #48	; 0x30
 800359c:	af04      	add	r7, sp, #16
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 fbbd 	bl	8004d2c <pvPortMalloc>
 80035b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00e      	beq.n	80035d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80035ba:	20bc      	movs	r0, #188	; 0xbc
 80035bc:	f001 fbb6 	bl	8004d2c <pvPortMalloc>
 80035c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
 80035ce:	e005      	b.n	80035dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035d0:	6978      	ldr	r0, [r7, #20]
 80035d2:	f001 fc6f 	bl	8004eb4 <vPortFree>
 80035d6:	e001      	b.n	80035dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d017      	beq.n	8003612 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	2300      	movs	r3, #0
 80035ee:	9303      	str	r3, [sp, #12]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	9302      	str	r3, [sp, #8]
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f80f 	bl	8003624 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003606:	69f8      	ldr	r0, [r7, #28]
 8003608:	f000 f8aa 	bl	8003760 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800360c:	2301      	movs	r3, #1
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e002      	b.n	8003618 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
 8003616:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003618:	69bb      	ldr	r3, [r7, #24]
	}
 800361a:	4618      	mov	r0, r3
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003634:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	461a      	mov	r2, r3
 800363c:	21a5      	movs	r1, #165	; 0xa5
 800363e:	f001 fe7e 	bl	800533e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800364c:	3b01      	subs	r3, #1
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f023 0307 	bic.w	r3, r3, #7
 800365a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	617b      	str	r3, [r7, #20]
}
 8003678:	bf00      	nop
 800367a:	e7fe      	b.n	800367a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	e012      	b.n	80036a8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	4413      	add	r3, r2
 8003688:	7819      	ldrb	r1, [r3, #0]
 800368a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	4413      	add	r3, r2
 8003690:	3334      	adds	r3, #52	; 0x34
 8003692:	460a      	mov	r2, r1
 8003694:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d006      	beq.n	80036b0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3301      	adds	r3, #1
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b0f      	cmp	r3, #15
 80036ac:	d9e9      	bls.n	8003682 <prvInitialiseNewTask+0x5e>
 80036ae:	e000      	b.n	80036b2 <prvInitialiseNewTask+0x8e>
		{
			break;
 80036b0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	2b37      	cmp	r3, #55	; 0x37
 80036be:	d901      	bls.n	80036c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036c0:	2337      	movs	r3, #55	; 0x37
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	2200      	movs	r2, #0
 80036d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	3304      	adds	r3, #4
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f98b 	bl	80029f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	3318      	adds	r3, #24
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff f986 	bl	80029f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	2200      	movs	r2, #0
 8003704:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	2200      	movs	r2, #0
 800370c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	3354      	adds	r3, #84	; 0x54
 8003714:	2260      	movs	r2, #96	; 0x60
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f001 fe10 	bl	800533e <memset>
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	4a0c      	ldr	r2, [pc, #48]	; (8003754 <prvInitialiseNewTask+0x130>)
 8003722:	659a      	str	r2, [r3, #88]	; 0x58
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <prvInitialiseNewTask+0x134>)
 8003728:	65da      	str	r2, [r3, #92]	; 0x5c
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	4a0b      	ldr	r2, [pc, #44]	; (800375c <prvInitialiseNewTask+0x138>)
 800372e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	68f9      	ldr	r1, [r7, #12]
 8003734:	69b8      	ldr	r0, [r7, #24]
 8003736:	f001 f90b 	bl	8004950 <pxPortInitialiseStack>
 800373a:	4602      	mov	r2, r0
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800374a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800374c:	bf00      	nop
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	080065a4 	.word	0x080065a4
 8003758:	080065c4 	.word	0x080065c4
 800375c:	08006584 	.word	0x08006584

08003760 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003768:	f001 f9e0 	bl	8004b2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800376c:	4b2d      	ldr	r3, [pc, #180]	; (8003824 <prvAddNewTaskToReadyList+0xc4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	4a2c      	ldr	r2, [pc, #176]	; (8003824 <prvAddNewTaskToReadyList+0xc4>)
 8003774:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <prvAddNewTaskToReadyList+0xc8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800377e:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <prvAddNewTaskToReadyList+0xc8>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <prvAddNewTaskToReadyList+0xc4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d110      	bne.n	80037ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800378c:	f000 fc28 	bl	8003fe0 <prvInitialiseTaskLists>
 8003790:	e00d      	b.n	80037ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003792:	4b26      	ldr	r3, [pc, #152]	; (800382c <prvAddNewTaskToReadyList+0xcc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800379a:	4b23      	ldr	r3, [pc, #140]	; (8003828 <prvAddNewTaskToReadyList+0xc8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d802      	bhi.n	80037ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037a8:	4a1f      	ldr	r2, [pc, #124]	; (8003828 <prvAddNewTaskToReadyList+0xc8>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <prvAddNewTaskToReadyList+0xd0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <prvAddNewTaskToReadyList+0xd0>)
 80037b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037b8:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <prvAddNewTaskToReadyList+0xd0>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <prvAddNewTaskToReadyList+0xd4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d903      	bls.n	80037d4 <prvAddNewTaskToReadyList+0x74>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <prvAddNewTaskToReadyList+0xd4>)
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4a15      	ldr	r2, [pc, #84]	; (8003838 <prvAddNewTaskToReadyList+0xd8>)
 80037e2:	441a      	add	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	4610      	mov	r0, r2
 80037ec:	f7ff f90f 	bl	8002a0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037f0:	f001 f9cc 	bl	8004b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037f4:	4b0d      	ldr	r3, [pc, #52]	; (800382c <prvAddNewTaskToReadyList+0xcc>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00e      	beq.n	800381a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <prvAddNewTaskToReadyList+0xc8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	429a      	cmp	r2, r3
 8003808:	d207      	bcs.n	800381a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <prvAddNewTaskToReadyList+0xdc>)
 800380c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000dc0 	.word	0x20000dc0
 8003828:	200008ec 	.word	0x200008ec
 800382c:	20000dcc 	.word	0x20000dcc
 8003830:	20000ddc 	.word	0x20000ddc
 8003834:	20000dc8 	.word	0x20000dc8
 8003838:	200008f0 	.word	0x200008f0
 800383c:	e000ed04 	.word	0xe000ed04

08003840 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d017      	beq.n	8003882 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <vTaskDelay+0x60>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <vTaskDelay+0x30>
	__asm volatile
 800385a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	60bb      	str	r3, [r7, #8]
}
 800386c:	bf00      	nop
 800386e:	e7fe      	b.n	800386e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003870:	f000 f88a 	bl	8003988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003874:	2100      	movs	r1, #0
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fd04 	bl	8004284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800387c:	f000 f892 	bl	80039a4 <xTaskResumeAll>
 8003880:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d107      	bne.n	8003898 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <vTaskDelay+0x64>)
 800388a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000de8 	.word	0x20000de8
 80038a4:	e000ed04 	.word	0xe000ed04

080038a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038b6:	463a      	mov	r2, r7
 80038b8:	1d39      	adds	r1, r7, #4
 80038ba:	f107 0308 	add.w	r3, r7, #8
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff f848 	bl	8002954 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038c4:	6839      	ldr	r1, [r7, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	9202      	str	r2, [sp, #8]
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	2300      	movs	r3, #0
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	2300      	movs	r3, #0
 80038d4:	460a      	mov	r2, r1
 80038d6:	4924      	ldr	r1, [pc, #144]	; (8003968 <vTaskStartScheduler+0xc0>)
 80038d8:	4824      	ldr	r0, [pc, #144]	; (800396c <vTaskStartScheduler+0xc4>)
 80038da:	f7ff fe01 	bl	80034e0 <xTaskCreateStatic>
 80038de:	4603      	mov	r3, r0
 80038e0:	4a23      	ldr	r2, [pc, #140]	; (8003970 <vTaskStartScheduler+0xc8>)
 80038e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <vTaskStartScheduler+0xc8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038ec:	2301      	movs	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	e001      	b.n	80038f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d102      	bne.n	8003902 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038fc:	f000 fd16 	bl	800432c <xTimerCreateTimerTask>
 8003900:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d11b      	bne.n	8003940 <vTaskStartScheduler+0x98>
	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	613b      	str	r3, [r7, #16]
}
 800391a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800391c:	4b15      	ldr	r3, [pc, #84]	; (8003974 <vTaskStartScheduler+0xcc>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3354      	adds	r3, #84	; 0x54
 8003922:	4a15      	ldr	r2, [pc, #84]	; (8003978 <vTaskStartScheduler+0xd0>)
 8003924:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <vTaskStartScheduler+0xd4>)
 8003928:	f04f 32ff 	mov.w	r2, #4294967295
 800392c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800392e:	4b14      	ldr	r3, [pc, #80]	; (8003980 <vTaskStartScheduler+0xd8>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <vTaskStartScheduler+0xdc>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800393a:	f001 f885 	bl	8004a48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800393e:	e00e      	b.n	800395e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003946:	d10a      	bne.n	800395e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	60fb      	str	r3, [r7, #12]
}
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <vTaskStartScheduler+0xb4>
}
 800395e:	bf00      	nop
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	08006530 	.word	0x08006530
 800396c:	08003fb1 	.word	0x08003fb1
 8003970:	20000de4 	.word	0x20000de4
 8003974:	200008ec 	.word	0x200008ec
 8003978:	20000014 	.word	0x20000014
 800397c:	20000de0 	.word	0x20000de0
 8003980:	20000dcc 	.word	0x20000dcc
 8003984:	20000dc4 	.word	0x20000dc4

08003988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <vTaskSuspendAll+0x18>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	4a03      	ldr	r2, [pc, #12]	; (80039a0 <vTaskSuspendAll+0x18>)
 8003994:	6013      	str	r3, [r2, #0]
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000de8 	.word	0x20000de8

080039a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039b2:	4b42      	ldr	r3, [pc, #264]	; (8003abc <xTaskResumeAll+0x118>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	603b      	str	r3, [r7, #0]
}
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039d0:	f001 f8ac 	bl	8004b2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039d4:	4b39      	ldr	r3, [pc, #228]	; (8003abc <xTaskResumeAll+0x118>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3b01      	subs	r3, #1
 80039da:	4a38      	ldr	r2, [pc, #224]	; (8003abc <xTaskResumeAll+0x118>)
 80039dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039de:	4b37      	ldr	r3, [pc, #220]	; (8003abc <xTaskResumeAll+0x118>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d162      	bne.n	8003aac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039e6:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <xTaskResumeAll+0x11c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d05e      	beq.n	8003aac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039ee:	e02f      	b.n	8003a50 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80039f0:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <xTaskResumeAll+0x120>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3318      	adds	r3, #24
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff f861 	bl	8002ac4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f85c 	bl	8002ac4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a10:	4b2d      	ldr	r3, [pc, #180]	; (8003ac8 <xTaskResumeAll+0x124>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d903      	bls.n	8003a20 <xTaskResumeAll+0x7c>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	4a2a      	ldr	r2, [pc, #168]	; (8003ac8 <xTaskResumeAll+0x124>)
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4a27      	ldr	r2, [pc, #156]	; (8003acc <xTaskResumeAll+0x128>)
 8003a2e:	441a      	add	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f7fe ffe9 	bl	8002a0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a40:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <xTaskResumeAll+0x12c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a4a:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <xTaskResumeAll+0x130>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a50:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <xTaskResumeAll+0x120>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1cb      	bne.n	80039f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a5e:	f000 fb61 	bl	8004124 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a62:	4b1d      	ldr	r3, [pc, #116]	; (8003ad8 <xTaskResumeAll+0x134>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d010      	beq.n	8003a90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a6e:	f000 f845 	bl	8003afc <xTaskIncrementTick>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a78:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <xTaskResumeAll+0x130>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f1      	bne.n	8003a6e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003a8a:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <xTaskResumeAll+0x134>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a90:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <xTaskResumeAll+0x130>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d009      	beq.n	8003aac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <xTaskResumeAll+0x138>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003aac:	f001 f86e 	bl	8004b8c <vPortExitCritical>

	return xAlreadyYielded;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000de8 	.word	0x20000de8
 8003ac0:	20000dc0 	.word	0x20000dc0
 8003ac4:	20000d80 	.word	0x20000d80
 8003ac8:	20000dc8 	.word	0x20000dc8
 8003acc:	200008f0 	.word	0x200008f0
 8003ad0:	200008ec 	.word	0x200008ec
 8003ad4:	20000dd4 	.word	0x20000dd4
 8003ad8:	20000dd0 	.word	0x20000dd0
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ae6:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <xTaskGetTickCount+0x18>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003aec:	687b      	ldr	r3, [r7, #4]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	20000dc4 	.word	0x20000dc4

08003afc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b06:	4b51      	ldr	r3, [pc, #324]	; (8003c4c <xTaskIncrementTick+0x150>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 808e 	bne.w	8003c2c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b10:	4b4f      	ldr	r3, [pc, #316]	; (8003c50 <xTaskIncrementTick+0x154>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b18:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <xTaskIncrementTick+0x154>)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d120      	bne.n	8003b66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b24:	4b4b      	ldr	r3, [pc, #300]	; (8003c54 <xTaskIncrementTick+0x158>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	603b      	str	r3, [r7, #0]
}
 8003b40:	bf00      	nop
 8003b42:	e7fe      	b.n	8003b42 <xTaskIncrementTick+0x46>
 8003b44:	4b43      	ldr	r3, [pc, #268]	; (8003c54 <xTaskIncrementTick+0x158>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b43      	ldr	r3, [pc, #268]	; (8003c58 <xTaskIncrementTick+0x15c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a41      	ldr	r2, [pc, #260]	; (8003c54 <xTaskIncrementTick+0x158>)
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	4a41      	ldr	r2, [pc, #260]	; (8003c58 <xTaskIncrementTick+0x15c>)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b40      	ldr	r3, [pc, #256]	; (8003c5c <xTaskIncrementTick+0x160>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	4a3f      	ldr	r2, [pc, #252]	; (8003c5c <xTaskIncrementTick+0x160>)
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	f000 fadf 	bl	8004124 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b66:	4b3e      	ldr	r3, [pc, #248]	; (8003c60 <xTaskIncrementTick+0x164>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d34e      	bcc.n	8003c0e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b70:	4b38      	ldr	r3, [pc, #224]	; (8003c54 <xTaskIncrementTick+0x158>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <xTaskIncrementTick+0x82>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <xTaskIncrementTick+0x84>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b84:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <xTaskIncrementTick+0x164>)
 8003b86:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8a:	601a      	str	r2, [r3, #0]
					break;
 8003b8c:	e03f      	b.n	8003c0e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b8e:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <xTaskIncrementTick+0x158>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d203      	bcs.n	8003bae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ba6:	4a2e      	ldr	r2, [pc, #184]	; (8003c60 <xTaskIncrementTick+0x164>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6013      	str	r3, [r2, #0]
						break;
 8003bac:	e02f      	b.n	8003c0e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe ff86 	bl	8002ac4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	3318      	adds	r3, #24
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe ff7d 	bl	8002ac4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bce:	4b25      	ldr	r3, [pc, #148]	; (8003c64 <xTaskIncrementTick+0x168>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d903      	bls.n	8003bde <xTaskIncrementTick+0xe2>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <xTaskIncrementTick+0x168>)
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4a1f      	ldr	r2, [pc, #124]	; (8003c68 <xTaskIncrementTick+0x16c>)
 8003bec:	441a      	add	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f7fe ff0a 	bl	8002a0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <xTaskIncrementTick+0x170>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d3b3      	bcc.n	8003b70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c0c:	e7b0      	b.n	8003b70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c0e:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <xTaskIncrementTick+0x170>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c14:	4914      	ldr	r1, [pc, #80]	; (8003c68 <xTaskIncrementTick+0x16c>)
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d907      	bls.n	8003c36 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003c26:	2301      	movs	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	e004      	b.n	8003c36 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <xTaskIncrementTick+0x174>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a0f      	ldr	r2, [pc, #60]	; (8003c70 <xTaskIncrementTick+0x174>)
 8003c34:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c36:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <xTaskIncrementTick+0x178>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c42:	697b      	ldr	r3, [r7, #20]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000de8 	.word	0x20000de8
 8003c50:	20000dc4 	.word	0x20000dc4
 8003c54:	20000d78 	.word	0x20000d78
 8003c58:	20000d7c 	.word	0x20000d7c
 8003c5c:	20000dd8 	.word	0x20000dd8
 8003c60:	20000de0 	.word	0x20000de0
 8003c64:	20000dc8 	.word	0x20000dc8
 8003c68:	200008f0 	.word	0x200008f0
 8003c6c:	200008ec 	.word	0x200008ec
 8003c70:	20000dd0 	.word	0x20000dd0
 8003c74:	20000dd4 	.word	0x20000dd4

08003c78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c7e:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <vTaskSwitchContext+0xb0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c86:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <vTaskSwitchContext+0xb4>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c8c:	e046      	b.n	8003d1c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003c8e:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <vTaskSwitchContext+0xb4>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c94:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <vTaskSwitchContext+0xb8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e010      	b.n	8003cbe <vTaskSwitchContext+0x46>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	607b      	str	r3, [r7, #4]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <vTaskSwitchContext+0x3e>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	491d      	ldr	r1, [pc, #116]	; (8003d34 <vTaskSwitchContext+0xbc>)
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0e4      	beq.n	8003c9c <vTaskSwitchContext+0x24>
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <vTaskSwitchContext+0xbc>)
 8003cde:	4413      	add	r3, r2
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d104      	bne.n	8003d02 <vTaskSwitchContext+0x8a>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4a0b      	ldr	r2, [pc, #44]	; (8003d38 <vTaskSwitchContext+0xc0>)
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <vTaskSwitchContext+0xb8>)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <vTaskSwitchContext+0xc0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3354      	adds	r3, #84	; 0x54
 8003d18:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <vTaskSwitchContext+0xc4>)
 8003d1a:	6013      	str	r3, [r2, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000de8 	.word	0x20000de8
 8003d2c:	20000dd4 	.word	0x20000dd4
 8003d30:	20000dc8 	.word	0x20000dc8
 8003d34:	200008f0 	.word	0x200008f0
 8003d38:	200008ec 	.word	0x200008ec
 8003d3c:	20000014 	.word	0x20000014

08003d40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	60fb      	str	r3, [r7, #12]
}
 8003d62:	bf00      	nop
 8003d64:	e7fe      	b.n	8003d64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d66:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <vTaskPlaceOnEventList+0x44>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3318      	adds	r3, #24
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe fe70 	bl	8002a54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d74:	2101      	movs	r1, #1
 8003d76:	6838      	ldr	r0, [r7, #0]
 8003d78:	f000 fa84 	bl	8004284 <prvAddCurrentTaskToDelayedList>
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	200008ec 	.word	0x200008ec

08003d88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	617b      	str	r3, [r7, #20]
}
 8003dac:	bf00      	nop
 8003dae:	e7fe      	b.n	8003dae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003db0:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <vTaskPlaceOnEventListRestricted+0x54>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3318      	adds	r3, #24
 8003db6:	4619      	mov	r1, r3
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7fe fe28 	bl	8002a0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	68b8      	ldr	r0, [r7, #8]
 8003dce:	f000 fa59 	bl	8004284 <prvAddCurrentTaskToDelayedList>
	}
 8003dd2:	bf00      	nop
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	200008ec 	.word	0x200008ec

08003de0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	60fb      	str	r3, [r7, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	3318      	adds	r3, #24
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe fe57 	bl	8002ac4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e16:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <xTaskRemoveFromEventList+0xb0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d11d      	bne.n	8003e5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fe4e 	bl	8002ac4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <xTaskRemoveFromEventList+0xb4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d903      	bls.n	8003e3c <xTaskRemoveFromEventList+0x5c>
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <xTaskRemoveFromEventList+0xb4>)
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <xTaskRemoveFromEventList+0xb8>)
 8003e4a:	441a      	add	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f7fe fddb 	bl	8002a0e <vListInsertEnd>
 8003e58:	e005      	b.n	8003e66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	3318      	adds	r3, #24
 8003e5e:	4619      	mov	r1, r3
 8003e60:	480e      	ldr	r0, [pc, #56]	; (8003e9c <xTaskRemoveFromEventList+0xbc>)
 8003e62:	f7fe fdd4 	bl	8002a0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <xTaskRemoveFromEventList+0xc0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d905      	bls.n	8003e80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <xTaskRemoveFromEventList+0xc4>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e001      	b.n	8003e84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e84:	697b      	ldr	r3, [r7, #20]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000de8 	.word	0x20000de8
 8003e94:	20000dc8 	.word	0x20000dc8
 8003e98:	200008f0 	.word	0x200008f0
 8003e9c:	20000d80 	.word	0x20000d80
 8003ea0:	200008ec 	.word	0x200008ec
 8003ea4:	20000dd4 	.word	0x20000dd4

08003ea8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <vTaskInternalSetTimeOutState+0x24>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <vTaskInternalSetTimeOutState+0x28>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	605a      	str	r2, [r3, #4]
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000dd8 	.word	0x20000dd8
 8003ed0:	20000dc4 	.word	0x20000dc4

08003ed4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	613b      	str	r3, [r7, #16]
}
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	60fb      	str	r3, [r7, #12]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f16:	f000 fe09 	bl	8004b2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <xTaskCheckForTimeOut+0xbc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d102      	bne.n	8003f3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	e023      	b.n	8003f82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <xTaskCheckForTimeOut+0xc0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d007      	beq.n	8003f56 <xTaskCheckForTimeOut+0x82>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	e015      	b.n	8003f82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d20b      	bcs.n	8003f78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	1ad2      	subs	r2, r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff ff9b 	bl	8003ea8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e004      	b.n	8003f82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f82:	f000 fe03 	bl	8004b8c <vPortExitCritical>

	return xReturn;
 8003f86:	69fb      	ldr	r3, [r7, #28]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000dc4 	.word	0x20000dc4
 8003f94:	20000dd8 	.word	0x20000dd8

08003f98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f9c:	4b03      	ldr	r3, [pc, #12]	; (8003fac <vTaskMissedYield+0x14>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000dd4 	.word	0x20000dd4

08003fb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fb8:	f000 f852 	bl	8004060 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <prvIdleTask+0x28>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d9f9      	bls.n	8003fb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <prvIdleTask+0x2c>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fd4:	e7f0      	b.n	8003fb8 <prvIdleTask+0x8>
 8003fd6:	bf00      	nop
 8003fd8:	200008f0 	.word	0x200008f0
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	e00c      	b.n	8004006 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <prvInitialiseTaskLists+0x60>)
 8003ff8:	4413      	add	r3, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe fcdc 	bl	80029b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3301      	adds	r3, #1
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b37      	cmp	r3, #55	; 0x37
 800400a:	d9ef      	bls.n	8003fec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800400c:	480d      	ldr	r0, [pc, #52]	; (8004044 <prvInitialiseTaskLists+0x64>)
 800400e:	f7fe fcd3 	bl	80029b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004012:	480d      	ldr	r0, [pc, #52]	; (8004048 <prvInitialiseTaskLists+0x68>)
 8004014:	f7fe fcd0 	bl	80029b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004018:	480c      	ldr	r0, [pc, #48]	; (800404c <prvInitialiseTaskLists+0x6c>)
 800401a:	f7fe fccd 	bl	80029b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800401e:	480c      	ldr	r0, [pc, #48]	; (8004050 <prvInitialiseTaskLists+0x70>)
 8004020:	f7fe fcca 	bl	80029b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004024:	480b      	ldr	r0, [pc, #44]	; (8004054 <prvInitialiseTaskLists+0x74>)
 8004026:	f7fe fcc7 	bl	80029b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <prvInitialiseTaskLists+0x78>)
 800402c:	4a05      	ldr	r2, [pc, #20]	; (8004044 <prvInitialiseTaskLists+0x64>)
 800402e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <prvInitialiseTaskLists+0x7c>)
 8004032:	4a05      	ldr	r2, [pc, #20]	; (8004048 <prvInitialiseTaskLists+0x68>)
 8004034:	601a      	str	r2, [r3, #0]
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	200008f0 	.word	0x200008f0
 8004044:	20000d50 	.word	0x20000d50
 8004048:	20000d64 	.word	0x20000d64
 800404c:	20000d80 	.word	0x20000d80
 8004050:	20000d94 	.word	0x20000d94
 8004054:	20000dac 	.word	0x20000dac
 8004058:	20000d78 	.word	0x20000d78
 800405c:	20000d7c 	.word	0x20000d7c

08004060 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004066:	e019      	b.n	800409c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004068:	f000 fd60 	bl	8004b2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <prvCheckTasksWaitingTermination+0x50>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe fd23 	bl	8002ac4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800407e:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <prvCheckTasksWaitingTermination+0x54>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3b01      	subs	r3, #1
 8004084:	4a0b      	ldr	r2, [pc, #44]	; (80040b4 <prvCheckTasksWaitingTermination+0x54>)
 8004086:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <prvCheckTasksWaitingTermination+0x58>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3b01      	subs	r3, #1
 800408e:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <prvCheckTasksWaitingTermination+0x58>)
 8004090:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004092:	f000 fd7b 	bl	8004b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f810 	bl	80040bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <prvCheckTasksWaitingTermination+0x58>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e1      	bne.n	8004068 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000d94 	.word	0x20000d94
 80040b4:	20000dc0 	.word	0x20000dc0
 80040b8:	20000da8 	.word	0x20000da8

080040bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3354      	adds	r3, #84	; 0x54
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 fa71 	bl	80055b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d108      	bne.n	80040ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fee9 	bl	8004eb4 <vPortFree>
				vPortFree( pxTCB );
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fee6 	bl	8004eb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040e8:	e018      	b.n	800411c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d103      	bne.n	80040fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fedd 	bl	8004eb4 <vPortFree>
	}
 80040fa:	e00f      	b.n	800411c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004102:	2b02      	cmp	r3, #2
 8004104:	d00a      	beq.n	800411c <prvDeleteTCB+0x60>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60fb      	str	r3, [r7, #12]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <prvDeleteTCB+0x5e>
	}
 800411c:	bf00      	nop
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800412a:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <prvResetNextTaskUnblockTime+0x40>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <prvResetNextTaskUnblockTime+0x14>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <prvResetNextTaskUnblockTime+0x16>
 8004138:	2300      	movs	r3, #0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d004      	beq.n	8004148 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <prvResetNextTaskUnblockTime+0x44>)
 8004140:	f04f 32ff 	mov.w	r2, #4294967295
 8004144:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004146:	e008      	b.n	800415a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <prvResetNextTaskUnblockTime+0x40>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4a04      	ldr	r2, [pc, #16]	; (8004168 <prvResetNextTaskUnblockTime+0x44>)
 8004158:	6013      	str	r3, [r2, #0]
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	20000d78 	.word	0x20000d78
 8004168:	20000de0 	.word	0x20000de0

0800416c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <xTaskGetSchedulerState+0x34>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d102      	bne.n	8004180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800417a:	2301      	movs	r3, #1
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	e008      	b.n	8004192 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <xTaskGetSchedulerState+0x38>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004188:	2302      	movs	r3, #2
 800418a:	607b      	str	r3, [r7, #4]
 800418c:	e001      	b.n	8004192 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800418e:	2300      	movs	r3, #0
 8004190:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004192:	687b      	ldr	r3, [r7, #4]
	}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000dcc 	.word	0x20000dcc
 80041a4:	20000de8 	.word	0x20000de8

080041a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d056      	beq.n	800426c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041be:	4b2e      	ldr	r3, [pc, #184]	; (8004278 <xTaskPriorityDisinherit+0xd0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d00a      	beq.n	80041de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	60fb      	str	r3, [r7, #12]
}
 80041da:	bf00      	nop
 80041dc:	e7fe      	b.n	80041dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	60bb      	str	r3, [r7, #8]
}
 80041f8:	bf00      	nop
 80041fa:	e7fe      	b.n	80041fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004200:	1e5a      	subs	r2, r3, #1
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420e:	429a      	cmp	r2, r3
 8004210:	d02c      	beq.n	800426c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004216:	2b00      	cmp	r3, #0
 8004218:	d128      	bne.n	800426c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	3304      	adds	r3, #4
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fc50 	bl	8002ac4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423c:	4b0f      	ldr	r3, [pc, #60]	; (800427c <xTaskPriorityDisinherit+0xd4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d903      	bls.n	800424c <xTaskPriorityDisinherit+0xa4>
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	4a0c      	ldr	r2, [pc, #48]	; (800427c <xTaskPriorityDisinherit+0xd4>)
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4a09      	ldr	r2, [pc, #36]	; (8004280 <xTaskPriorityDisinherit+0xd8>)
 800425a:	441a      	add	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f7fe fbd3 	bl	8002a0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004268:	2301      	movs	r3, #1
 800426a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800426c:	697b      	ldr	r3, [r7, #20]
	}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200008ec 	.word	0x200008ec
 800427c:	20000dc8 	.word	0x20000dc8
 8004280:	200008f0 	.word	0x200008f0

08004284 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800428e:	4b21      	ldr	r3, [pc, #132]	; (8004314 <prvAddCurrentTaskToDelayedList+0x90>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004294:	4b20      	ldr	r3, [pc, #128]	; (8004318 <prvAddCurrentTaskToDelayedList+0x94>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3304      	adds	r3, #4
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe fc12 	bl	8002ac4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a6:	d10a      	bne.n	80042be <prvAddCurrentTaskToDelayedList+0x3a>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ae:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <prvAddCurrentTaskToDelayedList+0x94>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4819      	ldr	r0, [pc, #100]	; (800431c <prvAddCurrentTaskToDelayedList+0x98>)
 80042b8:	f7fe fba9 	bl	8002a0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042bc:	e026      	b.n	800430c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4413      	add	r3, r2
 80042c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <prvAddCurrentTaskToDelayedList+0x94>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d209      	bcs.n	80042ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <prvAddCurrentTaskToDelayedList+0x9c>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <prvAddCurrentTaskToDelayedList+0x94>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f7fe fbb6 	bl	8002a54 <vListInsert>
}
 80042e8:	e010      	b.n	800430c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <prvAddCurrentTaskToDelayedList+0xa0>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <prvAddCurrentTaskToDelayedList+0x94>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f7fe fbac 	bl	8002a54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042fc:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	429a      	cmp	r2, r3
 8004304:	d202      	bcs.n	800430c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004306:	4a08      	ldr	r2, [pc, #32]	; (8004328 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6013      	str	r3, [r2, #0]
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20000dc4 	.word	0x20000dc4
 8004318:	200008ec 	.word	0x200008ec
 800431c:	20000dac 	.word	0x20000dac
 8004320:	20000d7c 	.word	0x20000d7c
 8004324:	20000d78 	.word	0x20000d78
 8004328:	20000de0 	.word	0x20000de0

0800432c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004336:	f000 facb 	bl	80048d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800433a:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <xTimerCreateTimerTask+0x80>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d021      	beq.n	8004386 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800434a:	1d3a      	adds	r2, r7, #4
 800434c:	f107 0108 	add.w	r1, r7, #8
 8004350:	f107 030c 	add.w	r3, r7, #12
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe fb15 	bl	8002984 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	9202      	str	r2, [sp, #8]
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	2302      	movs	r3, #2
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	2300      	movs	r3, #0
 800436a:	460a      	mov	r2, r1
 800436c:	4910      	ldr	r1, [pc, #64]	; (80043b0 <xTimerCreateTimerTask+0x84>)
 800436e:	4811      	ldr	r0, [pc, #68]	; (80043b4 <xTimerCreateTimerTask+0x88>)
 8004370:	f7ff f8b6 	bl	80034e0 <xTaskCreateStatic>
 8004374:	4603      	mov	r3, r0
 8004376:	4a10      	ldr	r2, [pc, #64]	; (80043b8 <xTimerCreateTimerTask+0x8c>)
 8004378:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <xTimerCreateTimerTask+0x8c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004382:	2301      	movs	r3, #1
 8004384:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	613b      	str	r3, [r7, #16]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80043a2:	697b      	ldr	r3, [r7, #20]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000e1c 	.word	0x20000e1c
 80043b0:	08006538 	.word	0x08006538
 80043b4:	080044d9 	.word	0x080044d9
 80043b8:	20000e20 	.word	0x20000e20

080043bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	; 0x28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	623b      	str	r3, [r7, #32]
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <xTimerGenericCommand+0x98>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d02a      	beq.n	8004448 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b05      	cmp	r3, #5
 8004402:	dc18      	bgt.n	8004436 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004404:	f7ff feb2 	bl	800416c <xTaskGetSchedulerState>
 8004408:	4603      	mov	r3, r0
 800440a:	2b02      	cmp	r3, #2
 800440c:	d109      	bne.n	8004422 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <xTimerGenericCommand+0x98>)
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	f107 0110 	add.w	r1, r7, #16
 8004416:	2300      	movs	r3, #0
 8004418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441a:	f7fe fc7f 	bl	8002d1c <xQueueGenericSend>
 800441e:	6278      	str	r0, [r7, #36]	; 0x24
 8004420:	e012      	b.n	8004448 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004422:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <xTimerGenericCommand+0x98>)
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	f107 0110 	add.w	r1, r7, #16
 800442a:	2300      	movs	r3, #0
 800442c:	2200      	movs	r2, #0
 800442e:	f7fe fc75 	bl	8002d1c <xQueueGenericSend>
 8004432:	6278      	str	r0, [r7, #36]	; 0x24
 8004434:	e008      	b.n	8004448 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <xTimerGenericCommand+0x98>)
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	f107 0110 	add.w	r1, r7, #16
 800443e:	2300      	movs	r3, #0
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	f7fe fd69 	bl	8002f18 <xQueueGenericSendFromISR>
 8004446:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800444a:	4618      	mov	r0, r3
 800444c:	3728      	adds	r7, #40	; 0x28
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000e1c 	.word	0x20000e1c

08004458 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004462:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <prvProcessExpiredTimer+0x7c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	3304      	adds	r3, #4
 8004470:	4618      	mov	r0, r3
 8004472:	f7fe fb27 	bl	8002ac4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d122      	bne.n	80044c4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	18d1      	adds	r1, r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	6978      	ldr	r0, [r7, #20]
 800448c:	f000 f8c8 	bl	8004620 <prvInsertTimerInActiveList>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004496:	2300      	movs	r3, #0
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	2300      	movs	r3, #0
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	2100      	movs	r1, #0
 80044a0:	6978      	ldr	r0, [r7, #20]
 80044a2:	f7ff ff8b 	bl	80043bc <xTimerGenericCommand>
 80044a6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	60fb      	str	r3, [r7, #12]
}
 80044c0:	bf00      	nop
 80044c2:	e7fe      	b.n	80044c2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	6978      	ldr	r0, [r7, #20]
 80044ca:	4798      	blx	r3
}
 80044cc:	bf00      	nop
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000e14 	.word	0x20000e14

080044d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044e0:	f107 0308 	add.w	r3, r7, #8
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 f857 	bl	8004598 <prvGetNextExpireTime>
 80044ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4619      	mov	r1, r3
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f803 	bl	80044fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044f6:	f000 f8d5 	bl	80046a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044fa:	e7f1      	b.n	80044e0 <prvTimerTask+0x8>

080044fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004506:	f7ff fa3f 	bl	8003988 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800450a:	f107 0308 	add.w	r3, r7, #8
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f866 	bl	80045e0 <prvSampleTimeNow>
 8004514:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d130      	bne.n	800457e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <prvProcessTimerOrBlockTask+0x3c>
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	429a      	cmp	r2, r3
 8004528:	d806      	bhi.n	8004538 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800452a:	f7ff fa3b 	bl	80039a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff ff91 	bl	8004458 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004536:	e024      	b.n	8004582 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800453e:	4b13      	ldr	r3, [pc, #76]	; (800458c <prvProcessTimerOrBlockTask+0x90>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004550:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <prvProcessTimerOrBlockTask+0x94>)
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	4619      	mov	r1, r3
 800455e:	f7fe ff8b 	bl	8003478 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004562:	f7ff fa1f 	bl	80039a4 <xTaskResumeAll>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <prvProcessTimerOrBlockTask+0x98>)
 800456e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	f3bf 8f6f 	isb	sy
}
 800457c:	e001      	b.n	8004582 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800457e:	f7ff fa11 	bl	80039a4 <xTaskResumeAll>
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000e18 	.word	0x20000e18
 8004590:	20000e1c 	.word	0x20000e1c
 8004594:	e000ed04 	.word	0xe000ed04

08004598 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045a0:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <prvGetNextExpireTime+0x44>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d105      	bne.n	80045ca <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045be:	4b07      	ldr	r3, [pc, #28]	; (80045dc <prvGetNextExpireTime+0x44>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e001      	b.n	80045ce <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80045ce:	68fb      	ldr	r3, [r7, #12]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000e14 	.word	0x20000e14

080045e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045e8:	f7ff fa7a 	bl	8003ae0 <xTaskGetTickCount>
 80045ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045ee:	4b0b      	ldr	r3, [pc, #44]	; (800461c <prvSampleTimeNow+0x3c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d205      	bcs.n	8004604 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045f8:	f000 f908 	bl	800480c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	e002      	b.n	800460a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800460a:	4a04      	ldr	r2, [pc, #16]	; (800461c <prvSampleTimeNow+0x3c>)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004610:	68fb      	ldr	r3, [r7, #12]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000e24 	.word	0x20000e24

08004620 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	429a      	cmp	r2, r3
 8004644:	d812      	bhi.n	800466c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	1ad2      	subs	r2, r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	429a      	cmp	r2, r3
 8004652:	d302      	bcc.n	800465a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004654:	2301      	movs	r3, #1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e01b      	b.n	8004692 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <prvInsertTimerInActiveList+0x7c>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3304      	adds	r3, #4
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f7fe f9f5 	bl	8002a54 <vListInsert>
 800466a:	e012      	b.n	8004692 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d206      	bcs.n	8004682 <prvInsertTimerInActiveList+0x62>
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d302      	bcc.n	8004682 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800467c:	2301      	movs	r3, #1
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e007      	b.n	8004692 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <prvInsertTimerInActiveList+0x80>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f7fe f9e1 	bl	8002a54 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004692:	697b      	ldr	r3, [r7, #20]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000e18 	.word	0x20000e18
 80046a0:	20000e14 	.word	0x20000e14

080046a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08e      	sub	sp, #56	; 0x38
 80046a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046aa:	e09d      	b.n	80047e8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	da18      	bge.n	80046e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046b2:	1d3b      	adds	r3, r7, #4
 80046b4:	3304      	adds	r3, #4
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	61fb      	str	r3, [r7, #28]
}
 80046d0:	bf00      	nop
 80046d2:	e7fe      	b.n	80046d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046da:	6850      	ldr	r0, [r2, #4]
 80046dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046de:	6892      	ldr	r2, [r2, #8]
 80046e0:	4611      	mov	r1, r2
 80046e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	db7d      	blt.n	80047e6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d004      	beq.n	8004700 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	3304      	adds	r3, #4
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe f9e2 	bl	8002ac4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004700:	463b      	mov	r3, r7
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff ff6c 	bl	80045e0 <prvSampleTimeNow>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b09      	cmp	r3, #9
 800470e:	d86b      	bhi.n	80047e8 <prvProcessReceivedCommands+0x144>
 8004710:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <prvProcessReceivedCommands+0x74>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	08004741 	.word	0x08004741
 800471c:	08004741 	.word	0x08004741
 8004720:	08004741 	.word	0x08004741
 8004724:	080047e9 	.word	0x080047e9
 8004728:	0800479d 	.word	0x0800479d
 800472c:	080047d5 	.word	0x080047d5
 8004730:	08004741 	.word	0x08004741
 8004734:	08004741 	.word	0x08004741
 8004738:	080047e9 	.word	0x080047e9
 800473c:	0800479d 	.word	0x0800479d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	18d1      	adds	r1, r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800474e:	f7ff ff67 	bl	8004620 <prvInsertTimerInActiveList>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d047      	beq.n	80047e8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800475e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d13f      	bne.n	80047e8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	441a      	add	r2, r3
 8004770:	2300      	movs	r3, #0
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	2300      	movs	r3, #0
 8004776:	2100      	movs	r1, #0
 8004778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800477a:	f7ff fe1f 	bl	80043bc <xTimerGenericCommand>
 800477e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d130      	bne.n	80047e8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	61bb      	str	r3, [r7, #24]
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	617b      	str	r3, [r7, #20]
}
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	699a      	ldr	r2, [r3, #24]
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	18d1      	adds	r1, r2, r3
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ce:	f7ff ff27 	bl	8004620 <prvInsertTimerInActiveList>
					break;
 80047d2:	e009      	b.n	80047e8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d104      	bne.n	80047e8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80047de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e0:	f000 fb68 	bl	8004eb4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047e4:	e000      	b.n	80047e8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80047e6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <prvProcessReceivedCommands+0x164>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	1d39      	adds	r1, r7, #4
 80047ee:	2200      	movs	r2, #0
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fe fc29 	bl	8003048 <xQueueReceive>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f47f af57 	bne.w	80046ac <prvProcessReceivedCommands+0x8>
	}
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	3730      	adds	r7, #48	; 0x30
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000e1c 	.word	0x20000e1c

0800480c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004812:	e045      	b.n	80048a0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004814:	4b2c      	ldr	r3, [pc, #176]	; (80048c8 <prvSwitchTimerLists+0xbc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800481e:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <prvSwitchTimerLists+0xbc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3304      	adds	r3, #4
 800482c:	4618      	mov	r0, r3
 800482e:	f7fe f949 	bl	8002ac4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d12e      	bne.n	80048a0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4413      	add	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	429a      	cmp	r2, r3
 8004852:	d90e      	bls.n	8004872 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004860:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <prvSwitchTimerLists+0xbc>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3304      	adds	r3, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f7fe f8f2 	bl	8002a54 <vListInsert>
 8004870:	e016      	b.n	80048a0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004872:	2300      	movs	r3, #0
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	2300      	movs	r3, #0
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	2100      	movs	r1, #0
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f7ff fd9d 	bl	80043bc <xTimerGenericCommand>
 8004882:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	603b      	str	r3, [r7, #0]
}
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <prvSwitchTimerLists+0xbc>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1b4      	bne.n	8004814 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <prvSwitchTimerLists+0xbc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <prvSwitchTimerLists+0xc0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <prvSwitchTimerLists+0xbc>)
 80048b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048b8:	4a04      	ldr	r2, [pc, #16]	; (80048cc <prvSwitchTimerLists+0xc0>)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	6013      	str	r3, [r2, #0]
}
 80048be:	bf00      	nop
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000e14 	.word	0x20000e14
 80048cc:	20000e18 	.word	0x20000e18

080048d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048d6:	f000 f929 	bl	8004b2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048da:	4b15      	ldr	r3, [pc, #84]	; (8004930 <prvCheckForValidListAndQueue+0x60>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d120      	bne.n	8004924 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80048e2:	4814      	ldr	r0, [pc, #80]	; (8004934 <prvCheckForValidListAndQueue+0x64>)
 80048e4:	f7fe f868 	bl	80029b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048e8:	4813      	ldr	r0, [pc, #76]	; (8004938 <prvCheckForValidListAndQueue+0x68>)
 80048ea:	f7fe f865 	bl	80029b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <prvCheckForValidListAndQueue+0x6c>)
 80048f0:	4a10      	ldr	r2, [pc, #64]	; (8004934 <prvCheckForValidListAndQueue+0x64>)
 80048f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <prvCheckForValidListAndQueue+0x70>)
 80048f6:	4a10      	ldr	r2, [pc, #64]	; (8004938 <prvCheckForValidListAndQueue+0x68>)
 80048f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048fa:	2300      	movs	r3, #0
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	4b11      	ldr	r3, [pc, #68]	; (8004944 <prvCheckForValidListAndQueue+0x74>)
 8004900:	4a11      	ldr	r2, [pc, #68]	; (8004948 <prvCheckForValidListAndQueue+0x78>)
 8004902:	2110      	movs	r1, #16
 8004904:	200a      	movs	r0, #10
 8004906:	f7fe f96f 	bl	8002be8 <xQueueGenericCreateStatic>
 800490a:	4603      	mov	r3, r0
 800490c:	4a08      	ldr	r2, [pc, #32]	; (8004930 <prvCheckForValidListAndQueue+0x60>)
 800490e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004910:	4b07      	ldr	r3, [pc, #28]	; (8004930 <prvCheckForValidListAndQueue+0x60>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <prvCheckForValidListAndQueue+0x60>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	490b      	ldr	r1, [pc, #44]	; (800494c <prvCheckForValidListAndQueue+0x7c>)
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe fd82 	bl	8003428 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004924:	f000 f932 	bl	8004b8c <vPortExitCritical>
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000e1c 	.word	0x20000e1c
 8004934:	20000dec 	.word	0x20000dec
 8004938:	20000e00 	.word	0x20000e00
 800493c:	20000e14 	.word	0x20000e14
 8004940:	20000e18 	.word	0x20000e18
 8004944:	20000ec8 	.word	0x20000ec8
 8004948:	20000e28 	.word	0x20000e28
 800494c:	08006540 	.word	0x08006540

08004950 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3b04      	subs	r3, #4
 8004960:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3b04      	subs	r3, #4
 800496e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f023 0201 	bic.w	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3b04      	subs	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004980:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <pxPortInitialiseStack+0x54>)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3b14      	subs	r3, #20
 800498a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3b20      	subs	r3, #32
 8004996:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004998:	68fb      	ldr	r3, [r7, #12]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	080049a9 	.word	0x080049a9

080049a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049b2:	4b12      	ldr	r3, [pc, #72]	; (80049fc <prvTaskExitError+0x54>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	d00a      	beq.n	80049d2 <prvTaskExitError+0x2a>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60fb      	str	r3, [r7, #12]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <prvTaskExitError+0x28>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	60bb      	str	r3, [r7, #8]
}
 80049e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049e6:	bf00      	nop
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0fc      	beq.n	80049e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000010 	.word	0x20000010

08004a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <pxCurrentTCBConst2>)
 8004a02:	6819      	ldr	r1, [r3, #0]
 8004a04:	6808      	ldr	r0, [r1, #0]
 8004a06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a0a:	f380 8809 	msr	PSP, r0
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f380 8811 	msr	BASEPRI, r0
 8004a1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004a1e:	4770      	bx	lr

08004a20 <pxCurrentTCBConst2>:
 8004a20:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop

08004a28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004a28:	4806      	ldr	r0, [pc, #24]	; (8004a44 <prvPortStartFirstTask+0x1c>)
 8004a2a:	6800      	ldr	r0, [r0, #0]
 8004a2c:	6800      	ldr	r0, [r0, #0]
 8004a2e:	f380 8808 	msr	MSP, r0
 8004a32:	b662      	cpsie	i
 8004a34:	b661      	cpsie	f
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	df00      	svc	0
 8004a40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a42:	bf00      	nop
 8004a44:	e000ed08 	.word	0xe000ed08

08004a48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a4e:	4b32      	ldr	r3, [pc, #200]	; (8004b18 <xPortStartScheduler+0xd0>)
 8004a50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	22ff      	movs	r2, #255	; 0xff
 8004a5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	4b2a      	ldr	r3, [pc, #168]	; (8004b1c <xPortStartScheduler+0xd4>)
 8004a74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a76:	4b2a      	ldr	r3, [pc, #168]	; (8004b20 <xPortStartScheduler+0xd8>)
 8004a78:	2207      	movs	r2, #7
 8004a7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a7c:	e009      	b.n	8004a92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004a7e:	4b28      	ldr	r3, [pc, #160]	; (8004b20 <xPortStartScheduler+0xd8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	4a26      	ldr	r2, [pc, #152]	; (8004b20 <xPortStartScheduler+0xd8>)
 8004a86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9a:	2b80      	cmp	r3, #128	; 0x80
 8004a9c:	d0ef      	beq.n	8004a7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a9e:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <xPortStartScheduler+0xd8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f1c3 0307 	rsb	r3, r3, #7
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d00a      	beq.n	8004ac0 <xPortStartScheduler+0x78>
	__asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	60bb      	str	r3, [r7, #8]
}
 8004abc:	bf00      	nop
 8004abe:	e7fe      	b.n	8004abe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ac0:	4b17      	ldr	r3, [pc, #92]	; (8004b20 <xPortStartScheduler+0xd8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	4a16      	ldr	r2, [pc, #88]	; (8004b20 <xPortStartScheduler+0xd8>)
 8004ac8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004aca:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <xPortStartScheduler+0xd8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ad2:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <xPortStartScheduler+0xd8>)
 8004ad4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <xPortStartScheduler+0xdc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a10      	ldr	r2, [pc, #64]	; (8004b24 <xPortStartScheduler+0xdc>)
 8004ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004aea:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <xPortStartScheduler+0xdc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a0d      	ldr	r2, [pc, #52]	; (8004b24 <xPortStartScheduler+0xdc>)
 8004af0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004af4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004af6:	f000 f8b9 	bl	8004c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004afa:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <xPortStartScheduler+0xe0>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b00:	f7ff ff92 	bl	8004a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b04:	f7ff f8b8 	bl	8003c78 <vTaskSwitchContext>
	prvTaskExitError();
 8004b08:	f7ff ff4e 	bl	80049a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	e000e400 	.word	0xe000e400
 8004b1c:	20000f18 	.word	0x20000f18
 8004b20:	20000f1c 	.word	0x20000f1c
 8004b24:	e000ed20 	.word	0xe000ed20
 8004b28:	20000010 	.word	0x20000010

08004b2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	607b      	str	r3, [r7, #4]
}
 8004b44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <vPortEnterCritical+0x58>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	4a0d      	ldr	r2, [pc, #52]	; (8004b84 <vPortEnterCritical+0x58>)
 8004b4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <vPortEnterCritical+0x58>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d10f      	bne.n	8004b78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <vPortEnterCritical+0x5c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	603b      	str	r3, [r7, #0]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <vPortEnterCritical+0x4a>
	}
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000010 	.word	0x20000010
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b92:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <vPortExitCritical+0x4c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <vPortExitCritical+0x24>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	607b      	str	r3, [r7, #4]
}
 8004bac:	bf00      	nop
 8004bae:	e7fe      	b.n	8004bae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <vPortExitCritical+0x4c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <vPortExitCritical+0x4c>)
 8004bb8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bba:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <vPortExitCritical+0x4c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d105      	bne.n	8004bce <vPortExitCritical+0x42>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f383 8811 	msr	BASEPRI, r3
}
 8004bcc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr
 8004bd8:	20000010 	.word	0x20000010
 8004bdc:	00000000 	.word	0x00000000

08004be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004be0:	f3ef 8009 	mrs	r0, PSP
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <pxCurrentTCBConst>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bf0:	6010      	str	r0, [r2, #0]
 8004bf2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004bf6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bfa:	f380 8811 	msr	BASEPRI, r0
 8004bfe:	f7ff f83b 	bl	8003c78 <vTaskSwitchContext>
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f380 8811 	msr	BASEPRI, r0
 8004c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	6808      	ldr	r0, [r1, #0]
 8004c12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c16:	f380 8809 	msr	PSP, r0
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	4770      	bx	lr

08004c20 <pxCurrentTCBConst>:
 8004c20:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop

08004c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	607b      	str	r3, [r7, #4]
}
 8004c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c42:	f7fe ff5b 	bl	8003afc <xTaskIncrementTick>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c4c:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <SysTick_Handler+0x40>)
 8004c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	2300      	movs	r3, #0
 8004c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	f383 8811 	msr	BASEPRI, r3
}
 8004c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <vPortSetupTimerInterrupt+0x30>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <vPortSetupTimerInterrupt+0x34>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <vPortSetupTimerInterrupt+0x38>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <vPortSetupTimerInterrupt+0x3c>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	4a08      	ldr	r2, [pc, #32]	; (8004cac <vPortSetupTimerInterrupt+0x40>)
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c8e:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <vPortSetupTimerInterrupt+0x30>)
 8004c90:	2207      	movs	r2, #7
 8004c92:	601a      	str	r2, [r3, #0]
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	e000e010 	.word	0xe000e010
 8004ca0:	e000e018 	.word	0xe000e018
 8004ca4:	20000004 	.word	0x20000004
 8004ca8:	10624dd3 	.word	0x10624dd3
 8004cac:	e000e014 	.word	0xe000e014

08004cb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cb6:	f3ef 8305 	mrs	r3, IPSR
 8004cba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b0f      	cmp	r3, #15
 8004cc0:	d914      	bls.n	8004cec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cc2:	4a16      	ldr	r2, [pc, #88]	; (8004d1c <vPortValidateInterruptPriority+0x6c>)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ccc:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <vPortValidateInterruptPriority+0x70>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	7afa      	ldrb	r2, [r7, #11]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d20a      	bcs.n	8004cec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	607b      	str	r3, [r7, #4]
}
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cec:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <vPortValidateInterruptPriority+0x74>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <vPortValidateInterruptPriority+0x78>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d90a      	bls.n	8004d12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	603b      	str	r3, [r7, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <vPortValidateInterruptPriority+0x60>
	}
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr
 8004d1c:	e000e3f0 	.word	0xe000e3f0
 8004d20:	20000f18 	.word	0x20000f18
 8004d24:	e000ed0c 	.word	0xe000ed0c
 8004d28:	20000f1c 	.word	0x20000f1c

08004d2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	; 0x28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d38:	f7fe fe26 	bl	8003988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d3c:	4b58      	ldr	r3, [pc, #352]	; (8004ea0 <pvPortMalloc+0x174>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d44:	f000 f910 	bl	8004f68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d48:	4b56      	ldr	r3, [pc, #344]	; (8004ea4 <pvPortMalloc+0x178>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f040 808e 	bne.w	8004e72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01d      	beq.n	8004d98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d014      	beq.n	8004d98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f023 0307 	bic.w	r3, r3, #7
 8004d74:	3308      	adds	r3, #8
 8004d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <pvPortMalloc+0x6c>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	617b      	str	r3, [r7, #20]
}
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d069      	beq.n	8004e72 <pvPortMalloc+0x146>
 8004d9e:	4b42      	ldr	r3, [pc, #264]	; (8004ea8 <pvPortMalloc+0x17c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d864      	bhi.n	8004e72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004da8:	4b40      	ldr	r3, [pc, #256]	; (8004eac <pvPortMalloc+0x180>)
 8004daa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004dac:	4b3f      	ldr	r3, [pc, #252]	; (8004eac <pvPortMalloc+0x180>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004db2:	e004      	b.n	8004dbe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d903      	bls.n	8004dd0 <pvPortMalloc+0xa4>
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f1      	bne.n	8004db4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dd0:	4b33      	ldr	r3, [pc, #204]	; (8004ea0 <pvPortMalloc+0x174>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d04b      	beq.n	8004e72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2208      	movs	r2, #8
 8004de0:	4413      	add	r3, r2
 8004de2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	1ad2      	subs	r2, r2, r3
 8004df4:	2308      	movs	r3, #8
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d91f      	bls.n	8004e3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <pvPortMalloc+0xf8>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	613b      	str	r3, [r7, #16]
}
 8004e20:	bf00      	nop
 8004e22:	e7fe      	b.n	8004e22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	1ad2      	subs	r2, r2, r3
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e36:	69b8      	ldr	r0, [r7, #24]
 8004e38:	f000 f8f8 	bl	800502c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ea8 <pvPortMalloc+0x17c>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <pvPortMalloc+0x17c>)
 8004e48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e4a:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <pvPortMalloc+0x17c>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b18      	ldr	r3, [pc, #96]	; (8004eb0 <pvPortMalloc+0x184>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d203      	bcs.n	8004e5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e56:	4b14      	ldr	r3, [pc, #80]	; (8004ea8 <pvPortMalloc+0x17c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a15      	ldr	r2, [pc, #84]	; (8004eb0 <pvPortMalloc+0x184>)
 8004e5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <pvPortMalloc+0x178>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e72:	f7fe fd97 	bl	80039a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <pvPortMalloc+0x16a>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60fb      	str	r3, [r7, #12]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <pvPortMalloc+0x168>
	return pvReturn;
 8004e96:	69fb      	ldr	r3, [r7, #28]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3728      	adds	r7, #40	; 0x28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20001b28 	.word	0x20001b28
 8004ea4:	20001b34 	.word	0x20001b34
 8004ea8:	20001b2c 	.word	0x20001b2c
 8004eac:	20001b20 	.word	0x20001b20
 8004eb0:	20001b30 	.word	0x20001b30

08004eb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d048      	beq.n	8004f58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	425b      	negs	r3, r3
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4413      	add	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	4b21      	ldr	r3, [pc, #132]	; (8004f60 <vPortFree+0xac>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <vPortFree+0x44>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	60fb      	str	r3, [r7, #12]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <vPortFree+0x62>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	60bb      	str	r3, [r7, #8]
}
 8004f12:	bf00      	nop
 8004f14:	e7fe      	b.n	8004f14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <vPortFree+0xac>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d019      	beq.n	8004f58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d115      	bne.n	8004f58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <vPortFree+0xac>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	43db      	mvns	r3, r3
 8004f36:	401a      	ands	r2, r3
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f3c:	f7fe fd24 	bl	8003988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <vPortFree+0xb0>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4413      	add	r3, r2
 8004f4a:	4a06      	ldr	r2, [pc, #24]	; (8004f64 <vPortFree+0xb0>)
 8004f4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f4e:	6938      	ldr	r0, [r7, #16]
 8004f50:	f000 f86c 	bl	800502c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f54:	f7fe fd26 	bl	80039a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f58:	bf00      	nop
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20001b34 	.word	0x20001b34
 8004f64:	20001b2c 	.word	0x20001b2c

08004f68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004f72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f74:	4b27      	ldr	r3, [pc, #156]	; (8005014 <prvHeapInit+0xac>)
 8004f76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00c      	beq.n	8004f9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3307      	adds	r3, #7
 8004f86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0307 	bic.w	r3, r3, #7
 8004f8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <prvHeapInit+0xac>)
 8004f98:	4413      	add	r3, r2
 8004f9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	; (8005018 <prvHeapInit+0xb0>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fa6:	4b1c      	ldr	r3, [pc, #112]	; (8005018 <prvHeapInit+0xb0>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0307 	bic.w	r3, r3, #7
 8004fc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4a15      	ldr	r2, [pc, #84]	; (800501c <prvHeapInit+0xb4>)
 8004fc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fca:	4b14      	ldr	r3, [pc, #80]	; (800501c <prvHeapInit+0xb4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <prvHeapInit+0xb4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	1ad2      	subs	r2, r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <prvHeapInit+0xb4>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	4a0a      	ldr	r2, [pc, #40]	; (8005020 <prvHeapInit+0xb8>)
 8004ff6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4a09      	ldr	r2, [pc, #36]	; (8005024 <prvHeapInit+0xbc>)
 8004ffe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <prvHeapInit+0xc0>)
 8005002:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005006:	601a      	str	r2, [r3, #0]
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000f20 	.word	0x20000f20
 8005018:	20001b20 	.word	0x20001b20
 800501c:	20001b28 	.word	0x20001b28
 8005020:	20001b30 	.word	0x20001b30
 8005024:	20001b2c 	.word	0x20001b2c
 8005028:	20001b34 	.word	0x20001b34

0800502c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005034:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e002      	b.n	8005040 <prvInsertBlockIntoFreeList+0x14>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	429a      	cmp	r2, r3
 8005048:	d8f7      	bhi.n	800503a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	4413      	add	r3, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	d108      	bne.n	800506e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	441a      	add	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	441a      	add	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d118      	bne.n	80050b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <prvInsertBlockIntoFreeList+0xac>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d00d      	beq.n	80050aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	441a      	add	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e008      	b.n	80050bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050aa:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <prvInsertBlockIntoFreeList+0xac>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e003      	b.n	80050bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d002      	beq.n	80050ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr
 80050d4:	20001b20 	.word	0x20001b20
 80050d8:	20001b28 	.word	0x20001b28

080050dc <__errno>:
 80050dc:	4b01      	ldr	r3, [pc, #4]	; (80050e4 <__errno+0x8>)
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000014 	.word	0x20000014

080050e8 <std>:
 80050e8:	2300      	movs	r3, #0
 80050ea:	b510      	push	{r4, lr}
 80050ec:	4604      	mov	r4, r0
 80050ee:	e9c0 3300 	strd	r3, r3, [r0]
 80050f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050f6:	6083      	str	r3, [r0, #8]
 80050f8:	8181      	strh	r1, [r0, #12]
 80050fa:	6643      	str	r3, [r0, #100]	; 0x64
 80050fc:	81c2      	strh	r2, [r0, #14]
 80050fe:	6183      	str	r3, [r0, #24]
 8005100:	4619      	mov	r1, r3
 8005102:	2208      	movs	r2, #8
 8005104:	305c      	adds	r0, #92	; 0x5c
 8005106:	f000 f91a 	bl	800533e <memset>
 800510a:	4b05      	ldr	r3, [pc, #20]	; (8005120 <std+0x38>)
 800510c:	6224      	str	r4, [r4, #32]
 800510e:	6263      	str	r3, [r4, #36]	; 0x24
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <std+0x3c>)
 8005112:	62a3      	str	r3, [r4, #40]	; 0x28
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <std+0x40>)
 8005116:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <std+0x44>)
 800511a:	6323      	str	r3, [r4, #48]	; 0x30
 800511c:	bd10      	pop	{r4, pc}
 800511e:	bf00      	nop
 8005120:	08005689 	.word	0x08005689
 8005124:	080056ab 	.word	0x080056ab
 8005128:	080056e3 	.word	0x080056e3
 800512c:	08005707 	.word	0x08005707

08005130 <_cleanup_r>:
 8005130:	4901      	ldr	r1, [pc, #4]	; (8005138 <_cleanup_r+0x8>)
 8005132:	f000 b8af 	b.w	8005294 <_fwalk_reent>
 8005136:	bf00      	nop
 8005138:	080059d9 	.word	0x080059d9

0800513c <__sfmoreglue>:
 800513c:	2268      	movs	r2, #104	; 0x68
 800513e:	b570      	push	{r4, r5, r6, lr}
 8005140:	1e4d      	subs	r5, r1, #1
 8005142:	4355      	muls	r5, r2
 8005144:	460e      	mov	r6, r1
 8005146:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800514a:	f000 f921 	bl	8005390 <_malloc_r>
 800514e:	4604      	mov	r4, r0
 8005150:	b140      	cbz	r0, 8005164 <__sfmoreglue+0x28>
 8005152:	2100      	movs	r1, #0
 8005154:	e9c0 1600 	strd	r1, r6, [r0]
 8005158:	300c      	adds	r0, #12
 800515a:	60a0      	str	r0, [r4, #8]
 800515c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005160:	f000 f8ed 	bl	800533e <memset>
 8005164:	4620      	mov	r0, r4
 8005166:	bd70      	pop	{r4, r5, r6, pc}

08005168 <__sfp_lock_acquire>:
 8005168:	4801      	ldr	r0, [pc, #4]	; (8005170 <__sfp_lock_acquire+0x8>)
 800516a:	f000 b8d8 	b.w	800531e <__retarget_lock_acquire_recursive>
 800516e:	bf00      	nop
 8005170:	20001b39 	.word	0x20001b39

08005174 <__sfp_lock_release>:
 8005174:	4801      	ldr	r0, [pc, #4]	; (800517c <__sfp_lock_release+0x8>)
 8005176:	f000 b8d3 	b.w	8005320 <__retarget_lock_release_recursive>
 800517a:	bf00      	nop
 800517c:	20001b39 	.word	0x20001b39

08005180 <__sinit_lock_acquire>:
 8005180:	4801      	ldr	r0, [pc, #4]	; (8005188 <__sinit_lock_acquire+0x8>)
 8005182:	f000 b8cc 	b.w	800531e <__retarget_lock_acquire_recursive>
 8005186:	bf00      	nop
 8005188:	20001b3a 	.word	0x20001b3a

0800518c <__sinit_lock_release>:
 800518c:	4801      	ldr	r0, [pc, #4]	; (8005194 <__sinit_lock_release+0x8>)
 800518e:	f000 b8c7 	b.w	8005320 <__retarget_lock_release_recursive>
 8005192:	bf00      	nop
 8005194:	20001b3a 	.word	0x20001b3a

08005198 <__sinit>:
 8005198:	b510      	push	{r4, lr}
 800519a:	4604      	mov	r4, r0
 800519c:	f7ff fff0 	bl	8005180 <__sinit_lock_acquire>
 80051a0:	69a3      	ldr	r3, [r4, #24]
 80051a2:	b11b      	cbz	r3, 80051ac <__sinit+0x14>
 80051a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a8:	f7ff bff0 	b.w	800518c <__sinit_lock_release>
 80051ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051b0:	6523      	str	r3, [r4, #80]	; 0x50
 80051b2:	4b13      	ldr	r3, [pc, #76]	; (8005200 <__sinit+0x68>)
 80051b4:	4a13      	ldr	r2, [pc, #76]	; (8005204 <__sinit+0x6c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80051ba:	42a3      	cmp	r3, r4
 80051bc:	bf08      	it	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	4620      	mov	r0, r4
 80051c2:	bf08      	it	eq
 80051c4:	61a3      	streq	r3, [r4, #24]
 80051c6:	f000 f81f 	bl	8005208 <__sfp>
 80051ca:	6060      	str	r0, [r4, #4]
 80051cc:	4620      	mov	r0, r4
 80051ce:	f000 f81b 	bl	8005208 <__sfp>
 80051d2:	60a0      	str	r0, [r4, #8]
 80051d4:	4620      	mov	r0, r4
 80051d6:	f000 f817 	bl	8005208 <__sfp>
 80051da:	2200      	movs	r2, #0
 80051dc:	2104      	movs	r1, #4
 80051de:	60e0      	str	r0, [r4, #12]
 80051e0:	6860      	ldr	r0, [r4, #4]
 80051e2:	f7ff ff81 	bl	80050e8 <std>
 80051e6:	2201      	movs	r2, #1
 80051e8:	2109      	movs	r1, #9
 80051ea:	68a0      	ldr	r0, [r4, #8]
 80051ec:	f7ff ff7c 	bl	80050e8 <std>
 80051f0:	2202      	movs	r2, #2
 80051f2:	2112      	movs	r1, #18
 80051f4:	68e0      	ldr	r0, [r4, #12]
 80051f6:	f7ff ff77 	bl	80050e8 <std>
 80051fa:	2301      	movs	r3, #1
 80051fc:	61a3      	str	r3, [r4, #24]
 80051fe:	e7d1      	b.n	80051a4 <__sinit+0xc>
 8005200:	080065e4 	.word	0x080065e4
 8005204:	08005131 	.word	0x08005131

08005208 <__sfp>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	4607      	mov	r7, r0
 800520c:	f7ff ffac 	bl	8005168 <__sfp_lock_acquire>
 8005210:	4b1e      	ldr	r3, [pc, #120]	; (800528c <__sfp+0x84>)
 8005212:	681e      	ldr	r6, [r3, #0]
 8005214:	69b3      	ldr	r3, [r6, #24]
 8005216:	b913      	cbnz	r3, 800521e <__sfp+0x16>
 8005218:	4630      	mov	r0, r6
 800521a:	f7ff ffbd 	bl	8005198 <__sinit>
 800521e:	3648      	adds	r6, #72	; 0x48
 8005220:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005224:	3b01      	subs	r3, #1
 8005226:	d503      	bpl.n	8005230 <__sfp+0x28>
 8005228:	6833      	ldr	r3, [r6, #0]
 800522a:	b30b      	cbz	r3, 8005270 <__sfp+0x68>
 800522c:	6836      	ldr	r6, [r6, #0]
 800522e:	e7f7      	b.n	8005220 <__sfp+0x18>
 8005230:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005234:	b9d5      	cbnz	r5, 800526c <__sfp+0x64>
 8005236:	4b16      	ldr	r3, [pc, #88]	; (8005290 <__sfp+0x88>)
 8005238:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800523c:	60e3      	str	r3, [r4, #12]
 800523e:	6665      	str	r5, [r4, #100]	; 0x64
 8005240:	f000 f86c 	bl	800531c <__retarget_lock_init_recursive>
 8005244:	f7ff ff96 	bl	8005174 <__sfp_lock_release>
 8005248:	2208      	movs	r2, #8
 800524a:	4629      	mov	r1, r5
 800524c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005250:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005254:	6025      	str	r5, [r4, #0]
 8005256:	61a5      	str	r5, [r4, #24]
 8005258:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800525c:	f000 f86f 	bl	800533e <memset>
 8005260:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005264:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005268:	4620      	mov	r0, r4
 800526a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800526c:	3468      	adds	r4, #104	; 0x68
 800526e:	e7d9      	b.n	8005224 <__sfp+0x1c>
 8005270:	2104      	movs	r1, #4
 8005272:	4638      	mov	r0, r7
 8005274:	f7ff ff62 	bl	800513c <__sfmoreglue>
 8005278:	4604      	mov	r4, r0
 800527a:	6030      	str	r0, [r6, #0]
 800527c:	2800      	cmp	r0, #0
 800527e:	d1d5      	bne.n	800522c <__sfp+0x24>
 8005280:	f7ff ff78 	bl	8005174 <__sfp_lock_release>
 8005284:	230c      	movs	r3, #12
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	e7ee      	b.n	8005268 <__sfp+0x60>
 800528a:	bf00      	nop
 800528c:	080065e4 	.word	0x080065e4
 8005290:	ffff0001 	.word	0xffff0001

08005294 <_fwalk_reent>:
 8005294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005298:	4606      	mov	r6, r0
 800529a:	4688      	mov	r8, r1
 800529c:	2700      	movs	r7, #0
 800529e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052a6:	f1b9 0901 	subs.w	r9, r9, #1
 80052aa:	d505      	bpl.n	80052b8 <_fwalk_reent+0x24>
 80052ac:	6824      	ldr	r4, [r4, #0]
 80052ae:	2c00      	cmp	r4, #0
 80052b0:	d1f7      	bne.n	80052a2 <_fwalk_reent+0xe>
 80052b2:	4638      	mov	r0, r7
 80052b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052b8:	89ab      	ldrh	r3, [r5, #12]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d907      	bls.n	80052ce <_fwalk_reent+0x3a>
 80052be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052c2:	3301      	adds	r3, #1
 80052c4:	d003      	beq.n	80052ce <_fwalk_reent+0x3a>
 80052c6:	4629      	mov	r1, r5
 80052c8:	4630      	mov	r0, r6
 80052ca:	47c0      	blx	r8
 80052cc:	4307      	orrs	r7, r0
 80052ce:	3568      	adds	r5, #104	; 0x68
 80052d0:	e7e9      	b.n	80052a6 <_fwalk_reent+0x12>
	...

080052d4 <__libc_init_array>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	2600      	movs	r6, #0
 80052d8:	4d0c      	ldr	r5, [pc, #48]	; (800530c <__libc_init_array+0x38>)
 80052da:	4c0d      	ldr	r4, [pc, #52]	; (8005310 <__libc_init_array+0x3c>)
 80052dc:	1b64      	subs	r4, r4, r5
 80052de:	10a4      	asrs	r4, r4, #2
 80052e0:	42a6      	cmp	r6, r4
 80052e2:	d109      	bne.n	80052f8 <__libc_init_array+0x24>
 80052e4:	f000 ffb0 	bl	8006248 <_init>
 80052e8:	2600      	movs	r6, #0
 80052ea:	4d0a      	ldr	r5, [pc, #40]	; (8005314 <__libc_init_array+0x40>)
 80052ec:	4c0a      	ldr	r4, [pc, #40]	; (8005318 <__libc_init_array+0x44>)
 80052ee:	1b64      	subs	r4, r4, r5
 80052f0:	10a4      	asrs	r4, r4, #2
 80052f2:	42a6      	cmp	r6, r4
 80052f4:	d105      	bne.n	8005302 <__libc_init_array+0x2e>
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fc:	4798      	blx	r3
 80052fe:	3601      	adds	r6, #1
 8005300:	e7ee      	b.n	80052e0 <__libc_init_array+0xc>
 8005302:	f855 3b04 	ldr.w	r3, [r5], #4
 8005306:	4798      	blx	r3
 8005308:	3601      	adds	r6, #1
 800530a:	e7f2      	b.n	80052f2 <__libc_init_array+0x1e>
 800530c:	0800661c 	.word	0x0800661c
 8005310:	0800661c 	.word	0x0800661c
 8005314:	0800661c 	.word	0x0800661c
 8005318:	08006620 	.word	0x08006620

0800531c <__retarget_lock_init_recursive>:
 800531c:	4770      	bx	lr

0800531e <__retarget_lock_acquire_recursive>:
 800531e:	4770      	bx	lr

08005320 <__retarget_lock_release_recursive>:
 8005320:	4770      	bx	lr

08005322 <memcpy>:
 8005322:	440a      	add	r2, r1
 8005324:	4291      	cmp	r1, r2
 8005326:	f100 33ff 	add.w	r3, r0, #4294967295
 800532a:	d100      	bne.n	800532e <memcpy+0xc>
 800532c:	4770      	bx	lr
 800532e:	b510      	push	{r4, lr}
 8005330:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005334:	4291      	cmp	r1, r2
 8005336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800533a:	d1f9      	bne.n	8005330 <memcpy+0xe>
 800533c:	bd10      	pop	{r4, pc}

0800533e <memset>:
 800533e:	4603      	mov	r3, r0
 8005340:	4402      	add	r2, r0
 8005342:	4293      	cmp	r3, r2
 8005344:	d100      	bne.n	8005348 <memset+0xa>
 8005346:	4770      	bx	lr
 8005348:	f803 1b01 	strb.w	r1, [r3], #1
 800534c:	e7f9      	b.n	8005342 <memset+0x4>
	...

08005350 <sbrk_aligned>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	4e0e      	ldr	r6, [pc, #56]	; (800538c <sbrk_aligned+0x3c>)
 8005354:	460c      	mov	r4, r1
 8005356:	6831      	ldr	r1, [r6, #0]
 8005358:	4605      	mov	r5, r0
 800535a:	b911      	cbnz	r1, 8005362 <sbrk_aligned+0x12>
 800535c:	f000 f984 	bl	8005668 <_sbrk_r>
 8005360:	6030      	str	r0, [r6, #0]
 8005362:	4621      	mov	r1, r4
 8005364:	4628      	mov	r0, r5
 8005366:	f000 f97f 	bl	8005668 <_sbrk_r>
 800536a:	1c43      	adds	r3, r0, #1
 800536c:	d00a      	beq.n	8005384 <sbrk_aligned+0x34>
 800536e:	1cc4      	adds	r4, r0, #3
 8005370:	f024 0403 	bic.w	r4, r4, #3
 8005374:	42a0      	cmp	r0, r4
 8005376:	d007      	beq.n	8005388 <sbrk_aligned+0x38>
 8005378:	1a21      	subs	r1, r4, r0
 800537a:	4628      	mov	r0, r5
 800537c:	f000 f974 	bl	8005668 <_sbrk_r>
 8005380:	3001      	adds	r0, #1
 8005382:	d101      	bne.n	8005388 <sbrk_aligned+0x38>
 8005384:	f04f 34ff 	mov.w	r4, #4294967295
 8005388:	4620      	mov	r0, r4
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	20001b40 	.word	0x20001b40

08005390 <_malloc_r>:
 8005390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005394:	1ccd      	adds	r5, r1, #3
 8005396:	f025 0503 	bic.w	r5, r5, #3
 800539a:	3508      	adds	r5, #8
 800539c:	2d0c      	cmp	r5, #12
 800539e:	bf38      	it	cc
 80053a0:	250c      	movcc	r5, #12
 80053a2:	2d00      	cmp	r5, #0
 80053a4:	4607      	mov	r7, r0
 80053a6:	db01      	blt.n	80053ac <_malloc_r+0x1c>
 80053a8:	42a9      	cmp	r1, r5
 80053aa:	d905      	bls.n	80053b8 <_malloc_r+0x28>
 80053ac:	230c      	movs	r3, #12
 80053ae:	2600      	movs	r6, #0
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	4630      	mov	r0, r6
 80053b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b8:	4e2e      	ldr	r6, [pc, #184]	; (8005474 <_malloc_r+0xe4>)
 80053ba:	f000 fbc1 	bl	8005b40 <__malloc_lock>
 80053be:	6833      	ldr	r3, [r6, #0]
 80053c0:	461c      	mov	r4, r3
 80053c2:	bb34      	cbnz	r4, 8005412 <_malloc_r+0x82>
 80053c4:	4629      	mov	r1, r5
 80053c6:	4638      	mov	r0, r7
 80053c8:	f7ff ffc2 	bl	8005350 <sbrk_aligned>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	4604      	mov	r4, r0
 80053d0:	d14d      	bne.n	800546e <_malloc_r+0xde>
 80053d2:	6834      	ldr	r4, [r6, #0]
 80053d4:	4626      	mov	r6, r4
 80053d6:	2e00      	cmp	r6, #0
 80053d8:	d140      	bne.n	800545c <_malloc_r+0xcc>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	4631      	mov	r1, r6
 80053de:	4638      	mov	r0, r7
 80053e0:	eb04 0803 	add.w	r8, r4, r3
 80053e4:	f000 f940 	bl	8005668 <_sbrk_r>
 80053e8:	4580      	cmp	r8, r0
 80053ea:	d13a      	bne.n	8005462 <_malloc_r+0xd2>
 80053ec:	6821      	ldr	r1, [r4, #0]
 80053ee:	3503      	adds	r5, #3
 80053f0:	1a6d      	subs	r5, r5, r1
 80053f2:	f025 0503 	bic.w	r5, r5, #3
 80053f6:	3508      	adds	r5, #8
 80053f8:	2d0c      	cmp	r5, #12
 80053fa:	bf38      	it	cc
 80053fc:	250c      	movcc	r5, #12
 80053fe:	4638      	mov	r0, r7
 8005400:	4629      	mov	r1, r5
 8005402:	f7ff ffa5 	bl	8005350 <sbrk_aligned>
 8005406:	3001      	adds	r0, #1
 8005408:	d02b      	beq.n	8005462 <_malloc_r+0xd2>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	442b      	add	r3, r5
 800540e:	6023      	str	r3, [r4, #0]
 8005410:	e00e      	b.n	8005430 <_malloc_r+0xa0>
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	1b52      	subs	r2, r2, r5
 8005416:	d41e      	bmi.n	8005456 <_malloc_r+0xc6>
 8005418:	2a0b      	cmp	r2, #11
 800541a:	d916      	bls.n	800544a <_malloc_r+0xba>
 800541c:	1961      	adds	r1, r4, r5
 800541e:	42a3      	cmp	r3, r4
 8005420:	6025      	str	r5, [r4, #0]
 8005422:	bf18      	it	ne
 8005424:	6059      	strne	r1, [r3, #4]
 8005426:	6863      	ldr	r3, [r4, #4]
 8005428:	bf08      	it	eq
 800542a:	6031      	streq	r1, [r6, #0]
 800542c:	5162      	str	r2, [r4, r5]
 800542e:	604b      	str	r3, [r1, #4]
 8005430:	4638      	mov	r0, r7
 8005432:	f104 060b 	add.w	r6, r4, #11
 8005436:	f000 fb89 	bl	8005b4c <__malloc_unlock>
 800543a:	f026 0607 	bic.w	r6, r6, #7
 800543e:	1d23      	adds	r3, r4, #4
 8005440:	1af2      	subs	r2, r6, r3
 8005442:	d0b6      	beq.n	80053b2 <_malloc_r+0x22>
 8005444:	1b9b      	subs	r3, r3, r6
 8005446:	50a3      	str	r3, [r4, r2]
 8005448:	e7b3      	b.n	80053b2 <_malloc_r+0x22>
 800544a:	6862      	ldr	r2, [r4, #4]
 800544c:	42a3      	cmp	r3, r4
 800544e:	bf0c      	ite	eq
 8005450:	6032      	streq	r2, [r6, #0]
 8005452:	605a      	strne	r2, [r3, #4]
 8005454:	e7ec      	b.n	8005430 <_malloc_r+0xa0>
 8005456:	4623      	mov	r3, r4
 8005458:	6864      	ldr	r4, [r4, #4]
 800545a:	e7b2      	b.n	80053c2 <_malloc_r+0x32>
 800545c:	4634      	mov	r4, r6
 800545e:	6876      	ldr	r6, [r6, #4]
 8005460:	e7b9      	b.n	80053d6 <_malloc_r+0x46>
 8005462:	230c      	movs	r3, #12
 8005464:	4638      	mov	r0, r7
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	f000 fb70 	bl	8005b4c <__malloc_unlock>
 800546c:	e7a1      	b.n	80053b2 <_malloc_r+0x22>
 800546e:	6025      	str	r5, [r4, #0]
 8005470:	e7de      	b.n	8005430 <_malloc_r+0xa0>
 8005472:	bf00      	nop
 8005474:	20001b3c 	.word	0x20001b3c

08005478 <iprintf>:
 8005478:	b40f      	push	{r0, r1, r2, r3}
 800547a:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <iprintf+0x2c>)
 800547c:	b513      	push	{r0, r1, r4, lr}
 800547e:	681c      	ldr	r4, [r3, #0]
 8005480:	b124      	cbz	r4, 800548c <iprintf+0x14>
 8005482:	69a3      	ldr	r3, [r4, #24]
 8005484:	b913      	cbnz	r3, 800548c <iprintf+0x14>
 8005486:	4620      	mov	r0, r4
 8005488:	f7ff fe86 	bl	8005198 <__sinit>
 800548c:	ab05      	add	r3, sp, #20
 800548e:	4620      	mov	r0, r4
 8005490:	9a04      	ldr	r2, [sp, #16]
 8005492:	68a1      	ldr	r1, [r4, #8]
 8005494:	9301      	str	r3, [sp, #4]
 8005496:	f000 fbcf 	bl	8005c38 <_vfiprintf_r>
 800549a:	b002      	add	sp, #8
 800549c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054a0:	b004      	add	sp, #16
 80054a2:	4770      	bx	lr
 80054a4:	20000014 	.word	0x20000014

080054a8 <_puts_r>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	460e      	mov	r6, r1
 80054ac:	4605      	mov	r5, r0
 80054ae:	b118      	cbz	r0, 80054b8 <_puts_r+0x10>
 80054b0:	6983      	ldr	r3, [r0, #24]
 80054b2:	b90b      	cbnz	r3, 80054b8 <_puts_r+0x10>
 80054b4:	f7ff fe70 	bl	8005198 <__sinit>
 80054b8:	69ab      	ldr	r3, [r5, #24]
 80054ba:	68ac      	ldr	r4, [r5, #8]
 80054bc:	b913      	cbnz	r3, 80054c4 <_puts_r+0x1c>
 80054be:	4628      	mov	r0, r5
 80054c0:	f7ff fe6a 	bl	8005198 <__sinit>
 80054c4:	4b2c      	ldr	r3, [pc, #176]	; (8005578 <_puts_r+0xd0>)
 80054c6:	429c      	cmp	r4, r3
 80054c8:	d120      	bne.n	800550c <_puts_r+0x64>
 80054ca:	686c      	ldr	r4, [r5, #4]
 80054cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054ce:	07db      	lsls	r3, r3, #31
 80054d0:	d405      	bmi.n	80054de <_puts_r+0x36>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	0598      	lsls	r0, r3, #22
 80054d6:	d402      	bmi.n	80054de <_puts_r+0x36>
 80054d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054da:	f7ff ff20 	bl	800531e <__retarget_lock_acquire_recursive>
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	0719      	lsls	r1, r3, #28
 80054e2:	d51d      	bpl.n	8005520 <_puts_r+0x78>
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	b1db      	cbz	r3, 8005520 <_puts_r+0x78>
 80054e8:	3e01      	subs	r6, #1
 80054ea:	68a3      	ldr	r3, [r4, #8]
 80054ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054f0:	3b01      	subs	r3, #1
 80054f2:	60a3      	str	r3, [r4, #8]
 80054f4:	bb39      	cbnz	r1, 8005546 <_puts_r+0x9e>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	da38      	bge.n	800556c <_puts_r+0xc4>
 80054fa:	4622      	mov	r2, r4
 80054fc:	210a      	movs	r1, #10
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 f906 	bl	8005710 <__swbuf_r>
 8005504:	3001      	adds	r0, #1
 8005506:	d011      	beq.n	800552c <_puts_r+0x84>
 8005508:	250a      	movs	r5, #10
 800550a:	e011      	b.n	8005530 <_puts_r+0x88>
 800550c:	4b1b      	ldr	r3, [pc, #108]	; (800557c <_puts_r+0xd4>)
 800550e:	429c      	cmp	r4, r3
 8005510:	d101      	bne.n	8005516 <_puts_r+0x6e>
 8005512:	68ac      	ldr	r4, [r5, #8]
 8005514:	e7da      	b.n	80054cc <_puts_r+0x24>
 8005516:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <_puts_r+0xd8>)
 8005518:	429c      	cmp	r4, r3
 800551a:	bf08      	it	eq
 800551c:	68ec      	ldreq	r4, [r5, #12]
 800551e:	e7d5      	b.n	80054cc <_puts_r+0x24>
 8005520:	4621      	mov	r1, r4
 8005522:	4628      	mov	r0, r5
 8005524:	f000 f958 	bl	80057d8 <__swsetup_r>
 8005528:	2800      	cmp	r0, #0
 800552a:	d0dd      	beq.n	80054e8 <_puts_r+0x40>
 800552c:	f04f 35ff 	mov.w	r5, #4294967295
 8005530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005532:	07da      	lsls	r2, r3, #31
 8005534:	d405      	bmi.n	8005542 <_puts_r+0x9a>
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	059b      	lsls	r3, r3, #22
 800553a:	d402      	bmi.n	8005542 <_puts_r+0x9a>
 800553c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800553e:	f7ff feef 	bl	8005320 <__retarget_lock_release_recursive>
 8005542:	4628      	mov	r0, r5
 8005544:	bd70      	pop	{r4, r5, r6, pc}
 8005546:	2b00      	cmp	r3, #0
 8005548:	da04      	bge.n	8005554 <_puts_r+0xac>
 800554a:	69a2      	ldr	r2, [r4, #24]
 800554c:	429a      	cmp	r2, r3
 800554e:	dc06      	bgt.n	800555e <_puts_r+0xb6>
 8005550:	290a      	cmp	r1, #10
 8005552:	d004      	beq.n	800555e <_puts_r+0xb6>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	6022      	str	r2, [r4, #0]
 800555a:	7019      	strb	r1, [r3, #0]
 800555c:	e7c5      	b.n	80054ea <_puts_r+0x42>
 800555e:	4622      	mov	r2, r4
 8005560:	4628      	mov	r0, r5
 8005562:	f000 f8d5 	bl	8005710 <__swbuf_r>
 8005566:	3001      	adds	r0, #1
 8005568:	d1bf      	bne.n	80054ea <_puts_r+0x42>
 800556a:	e7df      	b.n	800552c <_puts_r+0x84>
 800556c:	250a      	movs	r5, #10
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	6022      	str	r2, [r4, #0]
 8005574:	701d      	strb	r5, [r3, #0]
 8005576:	e7db      	b.n	8005530 <_puts_r+0x88>
 8005578:	080065a4 	.word	0x080065a4
 800557c:	080065c4 	.word	0x080065c4
 8005580:	08006584 	.word	0x08006584

08005584 <puts>:
 8005584:	4b02      	ldr	r3, [pc, #8]	; (8005590 <puts+0xc>)
 8005586:	4601      	mov	r1, r0
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	f7ff bf8d 	b.w	80054a8 <_puts_r>
 800558e:	bf00      	nop
 8005590:	20000014 	.word	0x20000014

08005594 <cleanup_glue>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	460c      	mov	r4, r1
 8005598:	6809      	ldr	r1, [r1, #0]
 800559a:	4605      	mov	r5, r0
 800559c:	b109      	cbz	r1, 80055a2 <cleanup_glue+0xe>
 800559e:	f7ff fff9 	bl	8005594 <cleanup_glue>
 80055a2:	4621      	mov	r1, r4
 80055a4:	4628      	mov	r0, r5
 80055a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055aa:	f000 bad5 	b.w	8005b58 <_free_r>
	...

080055b0 <_reclaim_reent>:
 80055b0:	4b2c      	ldr	r3, [pc, #176]	; (8005664 <_reclaim_reent+0xb4>)
 80055b2:	b570      	push	{r4, r5, r6, lr}
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4604      	mov	r4, r0
 80055b8:	4283      	cmp	r3, r0
 80055ba:	d051      	beq.n	8005660 <_reclaim_reent+0xb0>
 80055bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055be:	b143      	cbz	r3, 80055d2 <_reclaim_reent+0x22>
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d14a      	bne.n	800565c <_reclaim_reent+0xac>
 80055c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055c8:	6819      	ldr	r1, [r3, #0]
 80055ca:	b111      	cbz	r1, 80055d2 <_reclaim_reent+0x22>
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 fac3 	bl	8005b58 <_free_r>
 80055d2:	6961      	ldr	r1, [r4, #20]
 80055d4:	b111      	cbz	r1, 80055dc <_reclaim_reent+0x2c>
 80055d6:	4620      	mov	r0, r4
 80055d8:	f000 fabe 	bl	8005b58 <_free_r>
 80055dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80055de:	b111      	cbz	r1, 80055e6 <_reclaim_reent+0x36>
 80055e0:	4620      	mov	r0, r4
 80055e2:	f000 fab9 	bl	8005b58 <_free_r>
 80055e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055e8:	b111      	cbz	r1, 80055f0 <_reclaim_reent+0x40>
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 fab4 	bl	8005b58 <_free_r>
 80055f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80055f2:	b111      	cbz	r1, 80055fa <_reclaim_reent+0x4a>
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 faaf 	bl	8005b58 <_free_r>
 80055fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80055fc:	b111      	cbz	r1, 8005604 <_reclaim_reent+0x54>
 80055fe:	4620      	mov	r0, r4
 8005600:	f000 faaa 	bl	8005b58 <_free_r>
 8005604:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005606:	b111      	cbz	r1, 800560e <_reclaim_reent+0x5e>
 8005608:	4620      	mov	r0, r4
 800560a:	f000 faa5 	bl	8005b58 <_free_r>
 800560e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005610:	b111      	cbz	r1, 8005618 <_reclaim_reent+0x68>
 8005612:	4620      	mov	r0, r4
 8005614:	f000 faa0 	bl	8005b58 <_free_r>
 8005618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800561a:	b111      	cbz	r1, 8005622 <_reclaim_reent+0x72>
 800561c:	4620      	mov	r0, r4
 800561e:	f000 fa9b 	bl	8005b58 <_free_r>
 8005622:	69a3      	ldr	r3, [r4, #24]
 8005624:	b1e3      	cbz	r3, 8005660 <_reclaim_reent+0xb0>
 8005626:	4620      	mov	r0, r4
 8005628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800562a:	4798      	blx	r3
 800562c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800562e:	b1b9      	cbz	r1, 8005660 <_reclaim_reent+0xb0>
 8005630:	4620      	mov	r0, r4
 8005632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005636:	f7ff bfad 	b.w	8005594 <cleanup_glue>
 800563a:	5949      	ldr	r1, [r1, r5]
 800563c:	b941      	cbnz	r1, 8005650 <_reclaim_reent+0xa0>
 800563e:	3504      	adds	r5, #4
 8005640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005642:	2d80      	cmp	r5, #128	; 0x80
 8005644:	68d9      	ldr	r1, [r3, #12]
 8005646:	d1f8      	bne.n	800563a <_reclaim_reent+0x8a>
 8005648:	4620      	mov	r0, r4
 800564a:	f000 fa85 	bl	8005b58 <_free_r>
 800564e:	e7ba      	b.n	80055c6 <_reclaim_reent+0x16>
 8005650:	680e      	ldr	r6, [r1, #0]
 8005652:	4620      	mov	r0, r4
 8005654:	f000 fa80 	bl	8005b58 <_free_r>
 8005658:	4631      	mov	r1, r6
 800565a:	e7ef      	b.n	800563c <_reclaim_reent+0x8c>
 800565c:	2500      	movs	r5, #0
 800565e:	e7ef      	b.n	8005640 <_reclaim_reent+0x90>
 8005660:	bd70      	pop	{r4, r5, r6, pc}
 8005662:	bf00      	nop
 8005664:	20000014 	.word	0x20000014

08005668 <_sbrk_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	2300      	movs	r3, #0
 800566c:	4d05      	ldr	r5, [pc, #20]	; (8005684 <_sbrk_r+0x1c>)
 800566e:	4604      	mov	r4, r0
 8005670:	4608      	mov	r0, r1
 8005672:	602b      	str	r3, [r5, #0]
 8005674:	f7fb f918 	bl	80008a8 <_sbrk>
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	d102      	bne.n	8005682 <_sbrk_r+0x1a>
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	b103      	cbz	r3, 8005682 <_sbrk_r+0x1a>
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	bd38      	pop	{r3, r4, r5, pc}
 8005684:	20001b44 	.word	0x20001b44

08005688 <__sread>:
 8005688:	b510      	push	{r4, lr}
 800568a:	460c      	mov	r4, r1
 800568c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005690:	f000 fd98 	bl	80061c4 <_read_r>
 8005694:	2800      	cmp	r0, #0
 8005696:	bfab      	itete	ge
 8005698:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800569a:	89a3      	ldrhlt	r3, [r4, #12]
 800569c:	181b      	addge	r3, r3, r0
 800569e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056a2:	bfac      	ite	ge
 80056a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80056a6:	81a3      	strhlt	r3, [r4, #12]
 80056a8:	bd10      	pop	{r4, pc}

080056aa <__swrite>:
 80056aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ae:	461f      	mov	r7, r3
 80056b0:	898b      	ldrh	r3, [r1, #12]
 80056b2:	4605      	mov	r5, r0
 80056b4:	05db      	lsls	r3, r3, #23
 80056b6:	460c      	mov	r4, r1
 80056b8:	4616      	mov	r6, r2
 80056ba:	d505      	bpl.n	80056c8 <__swrite+0x1e>
 80056bc:	2302      	movs	r3, #2
 80056be:	2200      	movs	r2, #0
 80056c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c4:	f000 f9c4 	bl	8005a50 <_lseek_r>
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	4632      	mov	r2, r6
 80056cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056d0:	81a3      	strh	r3, [r4, #12]
 80056d2:	4628      	mov	r0, r5
 80056d4:	463b      	mov	r3, r7
 80056d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056de:	f000 b869 	b.w	80057b4 <_write_r>

080056e2 <__sseek>:
 80056e2:	b510      	push	{r4, lr}
 80056e4:	460c      	mov	r4, r1
 80056e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ea:	f000 f9b1 	bl	8005a50 <_lseek_r>
 80056ee:	1c43      	adds	r3, r0, #1
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	bf15      	itete	ne
 80056f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80056f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056fe:	81a3      	strheq	r3, [r4, #12]
 8005700:	bf18      	it	ne
 8005702:	81a3      	strhne	r3, [r4, #12]
 8005704:	bd10      	pop	{r4, pc}

08005706 <__sclose>:
 8005706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570a:	f000 b8d3 	b.w	80058b4 <_close_r>
	...

08005710 <__swbuf_r>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	460e      	mov	r6, r1
 8005714:	4614      	mov	r4, r2
 8005716:	4605      	mov	r5, r0
 8005718:	b118      	cbz	r0, 8005722 <__swbuf_r+0x12>
 800571a:	6983      	ldr	r3, [r0, #24]
 800571c:	b90b      	cbnz	r3, 8005722 <__swbuf_r+0x12>
 800571e:	f7ff fd3b 	bl	8005198 <__sinit>
 8005722:	4b21      	ldr	r3, [pc, #132]	; (80057a8 <__swbuf_r+0x98>)
 8005724:	429c      	cmp	r4, r3
 8005726:	d12b      	bne.n	8005780 <__swbuf_r+0x70>
 8005728:	686c      	ldr	r4, [r5, #4]
 800572a:	69a3      	ldr	r3, [r4, #24]
 800572c:	60a3      	str	r3, [r4, #8]
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	071a      	lsls	r2, r3, #28
 8005732:	d52f      	bpl.n	8005794 <__swbuf_r+0x84>
 8005734:	6923      	ldr	r3, [r4, #16]
 8005736:	b36b      	cbz	r3, 8005794 <__swbuf_r+0x84>
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	6820      	ldr	r0, [r4, #0]
 800573c:	b2f6      	uxtb	r6, r6
 800573e:	1ac0      	subs	r0, r0, r3
 8005740:	6963      	ldr	r3, [r4, #20]
 8005742:	4637      	mov	r7, r6
 8005744:	4283      	cmp	r3, r0
 8005746:	dc04      	bgt.n	8005752 <__swbuf_r+0x42>
 8005748:	4621      	mov	r1, r4
 800574a:	4628      	mov	r0, r5
 800574c:	f000 f944 	bl	80059d8 <_fflush_r>
 8005750:	bb30      	cbnz	r0, 80057a0 <__swbuf_r+0x90>
 8005752:	68a3      	ldr	r3, [r4, #8]
 8005754:	3001      	adds	r0, #1
 8005756:	3b01      	subs	r3, #1
 8005758:	60a3      	str	r3, [r4, #8]
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	6022      	str	r2, [r4, #0]
 8005760:	701e      	strb	r6, [r3, #0]
 8005762:	6963      	ldr	r3, [r4, #20]
 8005764:	4283      	cmp	r3, r0
 8005766:	d004      	beq.n	8005772 <__swbuf_r+0x62>
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	07db      	lsls	r3, r3, #31
 800576c:	d506      	bpl.n	800577c <__swbuf_r+0x6c>
 800576e:	2e0a      	cmp	r6, #10
 8005770:	d104      	bne.n	800577c <__swbuf_r+0x6c>
 8005772:	4621      	mov	r1, r4
 8005774:	4628      	mov	r0, r5
 8005776:	f000 f92f 	bl	80059d8 <_fflush_r>
 800577a:	b988      	cbnz	r0, 80057a0 <__swbuf_r+0x90>
 800577c:	4638      	mov	r0, r7
 800577e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005780:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <__swbuf_r+0x9c>)
 8005782:	429c      	cmp	r4, r3
 8005784:	d101      	bne.n	800578a <__swbuf_r+0x7a>
 8005786:	68ac      	ldr	r4, [r5, #8]
 8005788:	e7cf      	b.n	800572a <__swbuf_r+0x1a>
 800578a:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <__swbuf_r+0xa0>)
 800578c:	429c      	cmp	r4, r3
 800578e:	bf08      	it	eq
 8005790:	68ec      	ldreq	r4, [r5, #12]
 8005792:	e7ca      	b.n	800572a <__swbuf_r+0x1a>
 8005794:	4621      	mov	r1, r4
 8005796:	4628      	mov	r0, r5
 8005798:	f000 f81e 	bl	80057d8 <__swsetup_r>
 800579c:	2800      	cmp	r0, #0
 800579e:	d0cb      	beq.n	8005738 <__swbuf_r+0x28>
 80057a0:	f04f 37ff 	mov.w	r7, #4294967295
 80057a4:	e7ea      	b.n	800577c <__swbuf_r+0x6c>
 80057a6:	bf00      	nop
 80057a8:	080065a4 	.word	0x080065a4
 80057ac:	080065c4 	.word	0x080065c4
 80057b0:	08006584 	.word	0x08006584

080057b4 <_write_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4604      	mov	r4, r0
 80057b8:	4608      	mov	r0, r1
 80057ba:	4611      	mov	r1, r2
 80057bc:	2200      	movs	r2, #0
 80057be:	4d05      	ldr	r5, [pc, #20]	; (80057d4 <_write_r+0x20>)
 80057c0:	602a      	str	r2, [r5, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	f7fb f823 	bl	800080e <_write>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d102      	bne.n	80057d2 <_write_r+0x1e>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	b103      	cbz	r3, 80057d2 <_write_r+0x1e>
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	20001b44 	.word	0x20001b44

080057d8 <__swsetup_r>:
 80057d8:	4b32      	ldr	r3, [pc, #200]	; (80058a4 <__swsetup_r+0xcc>)
 80057da:	b570      	push	{r4, r5, r6, lr}
 80057dc:	681d      	ldr	r5, [r3, #0]
 80057de:	4606      	mov	r6, r0
 80057e0:	460c      	mov	r4, r1
 80057e2:	b125      	cbz	r5, 80057ee <__swsetup_r+0x16>
 80057e4:	69ab      	ldr	r3, [r5, #24]
 80057e6:	b913      	cbnz	r3, 80057ee <__swsetup_r+0x16>
 80057e8:	4628      	mov	r0, r5
 80057ea:	f7ff fcd5 	bl	8005198 <__sinit>
 80057ee:	4b2e      	ldr	r3, [pc, #184]	; (80058a8 <__swsetup_r+0xd0>)
 80057f0:	429c      	cmp	r4, r3
 80057f2:	d10f      	bne.n	8005814 <__swsetup_r+0x3c>
 80057f4:	686c      	ldr	r4, [r5, #4]
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057fc:	0719      	lsls	r1, r3, #28
 80057fe:	d42c      	bmi.n	800585a <__swsetup_r+0x82>
 8005800:	06dd      	lsls	r5, r3, #27
 8005802:	d411      	bmi.n	8005828 <__swsetup_r+0x50>
 8005804:	2309      	movs	r3, #9
 8005806:	6033      	str	r3, [r6, #0]
 8005808:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	81a3      	strh	r3, [r4, #12]
 8005812:	e03e      	b.n	8005892 <__swsetup_r+0xba>
 8005814:	4b25      	ldr	r3, [pc, #148]	; (80058ac <__swsetup_r+0xd4>)
 8005816:	429c      	cmp	r4, r3
 8005818:	d101      	bne.n	800581e <__swsetup_r+0x46>
 800581a:	68ac      	ldr	r4, [r5, #8]
 800581c:	e7eb      	b.n	80057f6 <__swsetup_r+0x1e>
 800581e:	4b24      	ldr	r3, [pc, #144]	; (80058b0 <__swsetup_r+0xd8>)
 8005820:	429c      	cmp	r4, r3
 8005822:	bf08      	it	eq
 8005824:	68ec      	ldreq	r4, [r5, #12]
 8005826:	e7e6      	b.n	80057f6 <__swsetup_r+0x1e>
 8005828:	0758      	lsls	r0, r3, #29
 800582a:	d512      	bpl.n	8005852 <__swsetup_r+0x7a>
 800582c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800582e:	b141      	cbz	r1, 8005842 <__swsetup_r+0x6a>
 8005830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005834:	4299      	cmp	r1, r3
 8005836:	d002      	beq.n	800583e <__swsetup_r+0x66>
 8005838:	4630      	mov	r0, r6
 800583a:	f000 f98d 	bl	8005b58 <_free_r>
 800583e:	2300      	movs	r3, #0
 8005840:	6363      	str	r3, [r4, #52]	; 0x34
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005848:	81a3      	strh	r3, [r4, #12]
 800584a:	2300      	movs	r3, #0
 800584c:	6063      	str	r3, [r4, #4]
 800584e:	6923      	ldr	r3, [r4, #16]
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	f043 0308 	orr.w	r3, r3, #8
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	6923      	ldr	r3, [r4, #16]
 800585c:	b94b      	cbnz	r3, 8005872 <__swsetup_r+0x9a>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005868:	d003      	beq.n	8005872 <__swsetup_r+0x9a>
 800586a:	4621      	mov	r1, r4
 800586c:	4630      	mov	r0, r6
 800586e:	f000 f927 	bl	8005ac0 <__smakebuf_r>
 8005872:	89a0      	ldrh	r0, [r4, #12]
 8005874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005878:	f010 0301 	ands.w	r3, r0, #1
 800587c:	d00a      	beq.n	8005894 <__swsetup_r+0xbc>
 800587e:	2300      	movs	r3, #0
 8005880:	60a3      	str	r3, [r4, #8]
 8005882:	6963      	ldr	r3, [r4, #20]
 8005884:	425b      	negs	r3, r3
 8005886:	61a3      	str	r3, [r4, #24]
 8005888:	6923      	ldr	r3, [r4, #16]
 800588a:	b943      	cbnz	r3, 800589e <__swsetup_r+0xc6>
 800588c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005890:	d1ba      	bne.n	8005808 <__swsetup_r+0x30>
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	0781      	lsls	r1, r0, #30
 8005896:	bf58      	it	pl
 8005898:	6963      	ldrpl	r3, [r4, #20]
 800589a:	60a3      	str	r3, [r4, #8]
 800589c:	e7f4      	b.n	8005888 <__swsetup_r+0xb0>
 800589e:	2000      	movs	r0, #0
 80058a0:	e7f7      	b.n	8005892 <__swsetup_r+0xba>
 80058a2:	bf00      	nop
 80058a4:	20000014 	.word	0x20000014
 80058a8:	080065a4 	.word	0x080065a4
 80058ac:	080065c4 	.word	0x080065c4
 80058b0:	08006584 	.word	0x08006584

080058b4 <_close_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	2300      	movs	r3, #0
 80058b8:	4d05      	ldr	r5, [pc, #20]	; (80058d0 <_close_r+0x1c>)
 80058ba:	4604      	mov	r4, r0
 80058bc:	4608      	mov	r0, r1
 80058be:	602b      	str	r3, [r5, #0]
 80058c0:	f7fa ffc1 	bl	8000846 <_close>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d102      	bne.n	80058ce <_close_r+0x1a>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	b103      	cbz	r3, 80058ce <_close_r+0x1a>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	20001b44 	.word	0x20001b44

080058d4 <__sflush_r>:
 80058d4:	898a      	ldrh	r2, [r1, #12]
 80058d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d8:	4605      	mov	r5, r0
 80058da:	0710      	lsls	r0, r2, #28
 80058dc:	460c      	mov	r4, r1
 80058de:	d457      	bmi.n	8005990 <__sflush_r+0xbc>
 80058e0:	684b      	ldr	r3, [r1, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	dc04      	bgt.n	80058f0 <__sflush_r+0x1c>
 80058e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	dc01      	bgt.n	80058f0 <__sflush_r+0x1c>
 80058ec:	2000      	movs	r0, #0
 80058ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058f2:	2e00      	cmp	r6, #0
 80058f4:	d0fa      	beq.n	80058ec <__sflush_r+0x18>
 80058f6:	2300      	movs	r3, #0
 80058f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058fc:	682f      	ldr	r7, [r5, #0]
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	d032      	beq.n	8005968 <__sflush_r+0x94>
 8005902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	075a      	lsls	r2, r3, #29
 8005908:	d505      	bpl.n	8005916 <__sflush_r+0x42>
 800590a:	6863      	ldr	r3, [r4, #4]
 800590c:	1ac0      	subs	r0, r0, r3
 800590e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005910:	b10b      	cbz	r3, 8005916 <__sflush_r+0x42>
 8005912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005914:	1ac0      	subs	r0, r0, r3
 8005916:	2300      	movs	r3, #0
 8005918:	4602      	mov	r2, r0
 800591a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800591c:	4628      	mov	r0, r5
 800591e:	6a21      	ldr	r1, [r4, #32]
 8005920:	47b0      	blx	r6
 8005922:	1c43      	adds	r3, r0, #1
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	d106      	bne.n	8005936 <__sflush_r+0x62>
 8005928:	6829      	ldr	r1, [r5, #0]
 800592a:	291d      	cmp	r1, #29
 800592c:	d82c      	bhi.n	8005988 <__sflush_r+0xb4>
 800592e:	4a29      	ldr	r2, [pc, #164]	; (80059d4 <__sflush_r+0x100>)
 8005930:	40ca      	lsrs	r2, r1
 8005932:	07d6      	lsls	r6, r2, #31
 8005934:	d528      	bpl.n	8005988 <__sflush_r+0xb4>
 8005936:	2200      	movs	r2, #0
 8005938:	6062      	str	r2, [r4, #4]
 800593a:	6922      	ldr	r2, [r4, #16]
 800593c:	04d9      	lsls	r1, r3, #19
 800593e:	6022      	str	r2, [r4, #0]
 8005940:	d504      	bpl.n	800594c <__sflush_r+0x78>
 8005942:	1c42      	adds	r2, r0, #1
 8005944:	d101      	bne.n	800594a <__sflush_r+0x76>
 8005946:	682b      	ldr	r3, [r5, #0]
 8005948:	b903      	cbnz	r3, 800594c <__sflush_r+0x78>
 800594a:	6560      	str	r0, [r4, #84]	; 0x54
 800594c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800594e:	602f      	str	r7, [r5, #0]
 8005950:	2900      	cmp	r1, #0
 8005952:	d0cb      	beq.n	80058ec <__sflush_r+0x18>
 8005954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005958:	4299      	cmp	r1, r3
 800595a:	d002      	beq.n	8005962 <__sflush_r+0x8e>
 800595c:	4628      	mov	r0, r5
 800595e:	f000 f8fb 	bl	8005b58 <_free_r>
 8005962:	2000      	movs	r0, #0
 8005964:	6360      	str	r0, [r4, #52]	; 0x34
 8005966:	e7c2      	b.n	80058ee <__sflush_r+0x1a>
 8005968:	6a21      	ldr	r1, [r4, #32]
 800596a:	2301      	movs	r3, #1
 800596c:	4628      	mov	r0, r5
 800596e:	47b0      	blx	r6
 8005970:	1c41      	adds	r1, r0, #1
 8005972:	d1c7      	bne.n	8005904 <__sflush_r+0x30>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0c4      	beq.n	8005904 <__sflush_r+0x30>
 800597a:	2b1d      	cmp	r3, #29
 800597c:	d001      	beq.n	8005982 <__sflush_r+0xae>
 800597e:	2b16      	cmp	r3, #22
 8005980:	d101      	bne.n	8005986 <__sflush_r+0xb2>
 8005982:	602f      	str	r7, [r5, #0]
 8005984:	e7b2      	b.n	80058ec <__sflush_r+0x18>
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598c:	81a3      	strh	r3, [r4, #12]
 800598e:	e7ae      	b.n	80058ee <__sflush_r+0x1a>
 8005990:	690f      	ldr	r7, [r1, #16]
 8005992:	2f00      	cmp	r7, #0
 8005994:	d0aa      	beq.n	80058ec <__sflush_r+0x18>
 8005996:	0793      	lsls	r3, r2, #30
 8005998:	bf18      	it	ne
 800599a:	2300      	movne	r3, #0
 800599c:	680e      	ldr	r6, [r1, #0]
 800599e:	bf08      	it	eq
 80059a0:	694b      	ldreq	r3, [r1, #20]
 80059a2:	1bf6      	subs	r6, r6, r7
 80059a4:	600f      	str	r7, [r1, #0]
 80059a6:	608b      	str	r3, [r1, #8]
 80059a8:	2e00      	cmp	r6, #0
 80059aa:	dd9f      	ble.n	80058ec <__sflush_r+0x18>
 80059ac:	4633      	mov	r3, r6
 80059ae:	463a      	mov	r2, r7
 80059b0:	4628      	mov	r0, r5
 80059b2:	6a21      	ldr	r1, [r4, #32]
 80059b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80059b8:	47e0      	blx	ip
 80059ba:	2800      	cmp	r0, #0
 80059bc:	dc06      	bgt.n	80059cc <__sflush_r+0xf8>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c8:	81a3      	strh	r3, [r4, #12]
 80059ca:	e790      	b.n	80058ee <__sflush_r+0x1a>
 80059cc:	4407      	add	r7, r0
 80059ce:	1a36      	subs	r6, r6, r0
 80059d0:	e7ea      	b.n	80059a8 <__sflush_r+0xd4>
 80059d2:	bf00      	nop
 80059d4:	20400001 	.word	0x20400001

080059d8 <_fflush_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	690b      	ldr	r3, [r1, #16]
 80059dc:	4605      	mov	r5, r0
 80059de:	460c      	mov	r4, r1
 80059e0:	b913      	cbnz	r3, 80059e8 <_fflush_r+0x10>
 80059e2:	2500      	movs	r5, #0
 80059e4:	4628      	mov	r0, r5
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
 80059e8:	b118      	cbz	r0, 80059f2 <_fflush_r+0x1a>
 80059ea:	6983      	ldr	r3, [r0, #24]
 80059ec:	b90b      	cbnz	r3, 80059f2 <_fflush_r+0x1a>
 80059ee:	f7ff fbd3 	bl	8005198 <__sinit>
 80059f2:	4b14      	ldr	r3, [pc, #80]	; (8005a44 <_fflush_r+0x6c>)
 80059f4:	429c      	cmp	r4, r3
 80059f6:	d11b      	bne.n	8005a30 <_fflush_r+0x58>
 80059f8:	686c      	ldr	r4, [r5, #4]
 80059fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0ef      	beq.n	80059e2 <_fflush_r+0xa>
 8005a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a04:	07d0      	lsls	r0, r2, #31
 8005a06:	d404      	bmi.n	8005a12 <_fflush_r+0x3a>
 8005a08:	0599      	lsls	r1, r3, #22
 8005a0a:	d402      	bmi.n	8005a12 <_fflush_r+0x3a>
 8005a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a0e:	f7ff fc86 	bl	800531e <__retarget_lock_acquire_recursive>
 8005a12:	4628      	mov	r0, r5
 8005a14:	4621      	mov	r1, r4
 8005a16:	f7ff ff5d 	bl	80058d4 <__sflush_r>
 8005a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	07da      	lsls	r2, r3, #31
 8005a20:	d4e0      	bmi.n	80059e4 <_fflush_r+0xc>
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	059b      	lsls	r3, r3, #22
 8005a26:	d4dd      	bmi.n	80059e4 <_fflush_r+0xc>
 8005a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a2a:	f7ff fc79 	bl	8005320 <__retarget_lock_release_recursive>
 8005a2e:	e7d9      	b.n	80059e4 <_fflush_r+0xc>
 8005a30:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <_fflush_r+0x70>)
 8005a32:	429c      	cmp	r4, r3
 8005a34:	d101      	bne.n	8005a3a <_fflush_r+0x62>
 8005a36:	68ac      	ldr	r4, [r5, #8]
 8005a38:	e7df      	b.n	80059fa <_fflush_r+0x22>
 8005a3a:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <_fflush_r+0x74>)
 8005a3c:	429c      	cmp	r4, r3
 8005a3e:	bf08      	it	eq
 8005a40:	68ec      	ldreq	r4, [r5, #12]
 8005a42:	e7da      	b.n	80059fa <_fflush_r+0x22>
 8005a44:	080065a4 	.word	0x080065a4
 8005a48:	080065c4 	.word	0x080065c4
 8005a4c:	08006584 	.word	0x08006584

08005a50 <_lseek_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4604      	mov	r4, r0
 8005a54:	4608      	mov	r0, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4d05      	ldr	r5, [pc, #20]	; (8005a70 <_lseek_r+0x20>)
 8005a5c:	602a      	str	r2, [r5, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f7fa ff15 	bl	800088e <_lseek>
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	d102      	bne.n	8005a6e <_lseek_r+0x1e>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	b103      	cbz	r3, 8005a6e <_lseek_r+0x1e>
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	bd38      	pop	{r3, r4, r5, pc}
 8005a70:	20001b44 	.word	0x20001b44

08005a74 <__swhatbuf_r>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	460e      	mov	r6, r1
 8005a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	2900      	cmp	r1, #0
 8005a80:	461d      	mov	r5, r3
 8005a82:	b096      	sub	sp, #88	; 0x58
 8005a84:	da08      	bge.n	8005a98 <__swhatbuf_r+0x24>
 8005a86:	2200      	movs	r2, #0
 8005a88:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a8c:	602a      	str	r2, [r5, #0]
 8005a8e:	061a      	lsls	r2, r3, #24
 8005a90:	d410      	bmi.n	8005ab4 <__swhatbuf_r+0x40>
 8005a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a96:	e00e      	b.n	8005ab6 <__swhatbuf_r+0x42>
 8005a98:	466a      	mov	r2, sp
 8005a9a:	f000 fba5 	bl	80061e8 <_fstat_r>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	dbf1      	blt.n	8005a86 <__swhatbuf_r+0x12>
 8005aa2:	9a01      	ldr	r2, [sp, #4]
 8005aa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005aa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005aac:	425a      	negs	r2, r3
 8005aae:	415a      	adcs	r2, r3
 8005ab0:	602a      	str	r2, [r5, #0]
 8005ab2:	e7ee      	b.n	8005a92 <__swhatbuf_r+0x1e>
 8005ab4:	2340      	movs	r3, #64	; 0x40
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	b016      	add	sp, #88	; 0x58
 8005abc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ac0 <__smakebuf_r>:
 8005ac0:	898b      	ldrh	r3, [r1, #12]
 8005ac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ac4:	079d      	lsls	r5, r3, #30
 8005ac6:	4606      	mov	r6, r0
 8005ac8:	460c      	mov	r4, r1
 8005aca:	d507      	bpl.n	8005adc <__smakebuf_r+0x1c>
 8005acc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	6163      	str	r3, [r4, #20]
 8005ad8:	b002      	add	sp, #8
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	466a      	mov	r2, sp
 8005ade:	ab01      	add	r3, sp, #4
 8005ae0:	f7ff ffc8 	bl	8005a74 <__swhatbuf_r>
 8005ae4:	9900      	ldr	r1, [sp, #0]
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f7ff fc51 	bl	8005390 <_malloc_r>
 8005aee:	b948      	cbnz	r0, 8005b04 <__smakebuf_r+0x44>
 8005af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af4:	059a      	lsls	r2, r3, #22
 8005af6:	d4ef      	bmi.n	8005ad8 <__smakebuf_r+0x18>
 8005af8:	f023 0303 	bic.w	r3, r3, #3
 8005afc:	f043 0302 	orr.w	r3, r3, #2
 8005b00:	81a3      	strh	r3, [r4, #12]
 8005b02:	e7e3      	b.n	8005acc <__smakebuf_r+0xc>
 8005b04:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <__smakebuf_r+0x7c>)
 8005b06:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	6020      	str	r0, [r4, #0]
 8005b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b10:	81a3      	strh	r3, [r4, #12]
 8005b12:	9b00      	ldr	r3, [sp, #0]
 8005b14:	6120      	str	r0, [r4, #16]
 8005b16:	6163      	str	r3, [r4, #20]
 8005b18:	9b01      	ldr	r3, [sp, #4]
 8005b1a:	b15b      	cbz	r3, 8005b34 <__smakebuf_r+0x74>
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b22:	f000 fb73 	bl	800620c <_isatty_r>
 8005b26:	b128      	cbz	r0, 8005b34 <__smakebuf_r+0x74>
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	81a3      	strh	r3, [r4, #12]
 8005b34:	89a0      	ldrh	r0, [r4, #12]
 8005b36:	4305      	orrs	r5, r0
 8005b38:	81a5      	strh	r5, [r4, #12]
 8005b3a:	e7cd      	b.n	8005ad8 <__smakebuf_r+0x18>
 8005b3c:	08005131 	.word	0x08005131

08005b40 <__malloc_lock>:
 8005b40:	4801      	ldr	r0, [pc, #4]	; (8005b48 <__malloc_lock+0x8>)
 8005b42:	f7ff bbec 	b.w	800531e <__retarget_lock_acquire_recursive>
 8005b46:	bf00      	nop
 8005b48:	20001b38 	.word	0x20001b38

08005b4c <__malloc_unlock>:
 8005b4c:	4801      	ldr	r0, [pc, #4]	; (8005b54 <__malloc_unlock+0x8>)
 8005b4e:	f7ff bbe7 	b.w	8005320 <__retarget_lock_release_recursive>
 8005b52:	bf00      	nop
 8005b54:	20001b38 	.word	0x20001b38

08005b58 <_free_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	2900      	cmp	r1, #0
 8005b5e:	d040      	beq.n	8005be2 <_free_r+0x8a>
 8005b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b64:	1f0c      	subs	r4, r1, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bfb8      	it	lt
 8005b6a:	18e4      	addlt	r4, r4, r3
 8005b6c:	f7ff ffe8 	bl	8005b40 <__malloc_lock>
 8005b70:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <_free_r+0x8c>)
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	b933      	cbnz	r3, 8005b84 <_free_r+0x2c>
 8005b76:	6063      	str	r3, [r4, #4]
 8005b78:	6014      	str	r4, [r2, #0]
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b80:	f7ff bfe4 	b.w	8005b4c <__malloc_unlock>
 8005b84:	42a3      	cmp	r3, r4
 8005b86:	d908      	bls.n	8005b9a <_free_r+0x42>
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	1821      	adds	r1, r4, r0
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	bf01      	itttt	eq
 8005b90:	6819      	ldreq	r1, [r3, #0]
 8005b92:	685b      	ldreq	r3, [r3, #4]
 8005b94:	1809      	addeq	r1, r1, r0
 8005b96:	6021      	streq	r1, [r4, #0]
 8005b98:	e7ed      	b.n	8005b76 <_free_r+0x1e>
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	b10b      	cbz	r3, 8005ba4 <_free_r+0x4c>
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d9fa      	bls.n	8005b9a <_free_r+0x42>
 8005ba4:	6811      	ldr	r1, [r2, #0]
 8005ba6:	1850      	adds	r0, r2, r1
 8005ba8:	42a0      	cmp	r0, r4
 8005baa:	d10b      	bne.n	8005bc4 <_free_r+0x6c>
 8005bac:	6820      	ldr	r0, [r4, #0]
 8005bae:	4401      	add	r1, r0
 8005bb0:	1850      	adds	r0, r2, r1
 8005bb2:	4283      	cmp	r3, r0
 8005bb4:	6011      	str	r1, [r2, #0]
 8005bb6:	d1e0      	bne.n	8005b7a <_free_r+0x22>
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4401      	add	r1, r0
 8005bbe:	6011      	str	r1, [r2, #0]
 8005bc0:	6053      	str	r3, [r2, #4]
 8005bc2:	e7da      	b.n	8005b7a <_free_r+0x22>
 8005bc4:	d902      	bls.n	8005bcc <_free_r+0x74>
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	e7d6      	b.n	8005b7a <_free_r+0x22>
 8005bcc:	6820      	ldr	r0, [r4, #0]
 8005bce:	1821      	adds	r1, r4, r0
 8005bd0:	428b      	cmp	r3, r1
 8005bd2:	bf01      	itttt	eq
 8005bd4:	6819      	ldreq	r1, [r3, #0]
 8005bd6:	685b      	ldreq	r3, [r3, #4]
 8005bd8:	1809      	addeq	r1, r1, r0
 8005bda:	6021      	streq	r1, [r4, #0]
 8005bdc:	6063      	str	r3, [r4, #4]
 8005bde:	6054      	str	r4, [r2, #4]
 8005be0:	e7cb      	b.n	8005b7a <_free_r+0x22>
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	20001b3c 	.word	0x20001b3c

08005be8 <__sfputc_r>:
 8005be8:	6893      	ldr	r3, [r2, #8]
 8005bea:	b410      	push	{r4}
 8005bec:	3b01      	subs	r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	6093      	str	r3, [r2, #8]
 8005bf2:	da07      	bge.n	8005c04 <__sfputc_r+0x1c>
 8005bf4:	6994      	ldr	r4, [r2, #24]
 8005bf6:	42a3      	cmp	r3, r4
 8005bf8:	db01      	blt.n	8005bfe <__sfputc_r+0x16>
 8005bfa:	290a      	cmp	r1, #10
 8005bfc:	d102      	bne.n	8005c04 <__sfputc_r+0x1c>
 8005bfe:	bc10      	pop	{r4}
 8005c00:	f7ff bd86 	b.w	8005710 <__swbuf_r>
 8005c04:	6813      	ldr	r3, [r2, #0]
 8005c06:	1c58      	adds	r0, r3, #1
 8005c08:	6010      	str	r0, [r2, #0]
 8005c0a:	7019      	strb	r1, [r3, #0]
 8005c0c:	4608      	mov	r0, r1
 8005c0e:	bc10      	pop	{r4}
 8005c10:	4770      	bx	lr

08005c12 <__sfputs_r>:
 8005c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c14:	4606      	mov	r6, r0
 8005c16:	460f      	mov	r7, r1
 8005c18:	4614      	mov	r4, r2
 8005c1a:	18d5      	adds	r5, r2, r3
 8005c1c:	42ac      	cmp	r4, r5
 8005c1e:	d101      	bne.n	8005c24 <__sfputs_r+0x12>
 8005c20:	2000      	movs	r0, #0
 8005c22:	e007      	b.n	8005c34 <__sfputs_r+0x22>
 8005c24:	463a      	mov	r2, r7
 8005c26:	4630      	mov	r0, r6
 8005c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c2c:	f7ff ffdc 	bl	8005be8 <__sfputc_r>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d1f3      	bne.n	8005c1c <__sfputs_r+0xa>
 8005c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c38 <_vfiprintf_r>:
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	460d      	mov	r5, r1
 8005c3e:	4614      	mov	r4, r2
 8005c40:	4698      	mov	r8, r3
 8005c42:	4606      	mov	r6, r0
 8005c44:	b09d      	sub	sp, #116	; 0x74
 8005c46:	b118      	cbz	r0, 8005c50 <_vfiprintf_r+0x18>
 8005c48:	6983      	ldr	r3, [r0, #24]
 8005c4a:	b90b      	cbnz	r3, 8005c50 <_vfiprintf_r+0x18>
 8005c4c:	f7ff faa4 	bl	8005198 <__sinit>
 8005c50:	4b89      	ldr	r3, [pc, #548]	; (8005e78 <_vfiprintf_r+0x240>)
 8005c52:	429d      	cmp	r5, r3
 8005c54:	d11b      	bne.n	8005c8e <_vfiprintf_r+0x56>
 8005c56:	6875      	ldr	r5, [r6, #4]
 8005c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c5a:	07d9      	lsls	r1, r3, #31
 8005c5c:	d405      	bmi.n	8005c6a <_vfiprintf_r+0x32>
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	059a      	lsls	r2, r3, #22
 8005c62:	d402      	bmi.n	8005c6a <_vfiprintf_r+0x32>
 8005c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c66:	f7ff fb5a 	bl	800531e <__retarget_lock_acquire_recursive>
 8005c6a:	89ab      	ldrh	r3, [r5, #12]
 8005c6c:	071b      	lsls	r3, r3, #28
 8005c6e:	d501      	bpl.n	8005c74 <_vfiprintf_r+0x3c>
 8005c70:	692b      	ldr	r3, [r5, #16]
 8005c72:	b9eb      	cbnz	r3, 8005cb0 <_vfiprintf_r+0x78>
 8005c74:	4629      	mov	r1, r5
 8005c76:	4630      	mov	r0, r6
 8005c78:	f7ff fdae 	bl	80057d8 <__swsetup_r>
 8005c7c:	b1c0      	cbz	r0, 8005cb0 <_vfiprintf_r+0x78>
 8005c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c80:	07dc      	lsls	r4, r3, #31
 8005c82:	d50e      	bpl.n	8005ca2 <_vfiprintf_r+0x6a>
 8005c84:	f04f 30ff 	mov.w	r0, #4294967295
 8005c88:	b01d      	add	sp, #116	; 0x74
 8005c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8e:	4b7b      	ldr	r3, [pc, #492]	; (8005e7c <_vfiprintf_r+0x244>)
 8005c90:	429d      	cmp	r5, r3
 8005c92:	d101      	bne.n	8005c98 <_vfiprintf_r+0x60>
 8005c94:	68b5      	ldr	r5, [r6, #8]
 8005c96:	e7df      	b.n	8005c58 <_vfiprintf_r+0x20>
 8005c98:	4b79      	ldr	r3, [pc, #484]	; (8005e80 <_vfiprintf_r+0x248>)
 8005c9a:	429d      	cmp	r5, r3
 8005c9c:	bf08      	it	eq
 8005c9e:	68f5      	ldreq	r5, [r6, #12]
 8005ca0:	e7da      	b.n	8005c58 <_vfiprintf_r+0x20>
 8005ca2:	89ab      	ldrh	r3, [r5, #12]
 8005ca4:	0598      	lsls	r0, r3, #22
 8005ca6:	d4ed      	bmi.n	8005c84 <_vfiprintf_r+0x4c>
 8005ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005caa:	f7ff fb39 	bl	8005320 <__retarget_lock_release_recursive>
 8005cae:	e7e9      	b.n	8005c84 <_vfiprintf_r+0x4c>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb4:	2320      	movs	r3, #32
 8005cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cba:	2330      	movs	r3, #48	; 0x30
 8005cbc:	f04f 0901 	mov.w	r9, #1
 8005cc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cc4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005e84 <_vfiprintf_r+0x24c>
 8005cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ccc:	4623      	mov	r3, r4
 8005cce:	469a      	mov	sl, r3
 8005cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cd4:	b10a      	cbz	r2, 8005cda <_vfiprintf_r+0xa2>
 8005cd6:	2a25      	cmp	r2, #37	; 0x25
 8005cd8:	d1f9      	bne.n	8005cce <_vfiprintf_r+0x96>
 8005cda:	ebba 0b04 	subs.w	fp, sl, r4
 8005cde:	d00b      	beq.n	8005cf8 <_vfiprintf_r+0xc0>
 8005ce0:	465b      	mov	r3, fp
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f7ff ff93 	bl	8005c12 <__sfputs_r>
 8005cec:	3001      	adds	r0, #1
 8005cee:	f000 80aa 	beq.w	8005e46 <_vfiprintf_r+0x20e>
 8005cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf4:	445a      	add	r2, fp
 8005cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8005cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 80a2 	beq.w	8005e46 <_vfiprintf_r+0x20e>
 8005d02:	2300      	movs	r3, #0
 8005d04:	f04f 32ff 	mov.w	r2, #4294967295
 8005d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d0c:	f10a 0a01 	add.w	sl, sl, #1
 8005d10:	9304      	str	r3, [sp, #16]
 8005d12:	9307      	str	r3, [sp, #28]
 8005d14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d18:	931a      	str	r3, [sp, #104]	; 0x68
 8005d1a:	4654      	mov	r4, sl
 8005d1c:	2205      	movs	r2, #5
 8005d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d22:	4858      	ldr	r0, [pc, #352]	; (8005e84 <_vfiprintf_r+0x24c>)
 8005d24:	f000 fa82 	bl	800622c <memchr>
 8005d28:	9a04      	ldr	r2, [sp, #16]
 8005d2a:	b9d8      	cbnz	r0, 8005d64 <_vfiprintf_r+0x12c>
 8005d2c:	06d1      	lsls	r1, r2, #27
 8005d2e:	bf44      	itt	mi
 8005d30:	2320      	movmi	r3, #32
 8005d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d36:	0713      	lsls	r3, r2, #28
 8005d38:	bf44      	itt	mi
 8005d3a:	232b      	movmi	r3, #43	; 0x2b
 8005d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d40:	f89a 3000 	ldrb.w	r3, [sl]
 8005d44:	2b2a      	cmp	r3, #42	; 0x2a
 8005d46:	d015      	beq.n	8005d74 <_vfiprintf_r+0x13c>
 8005d48:	4654      	mov	r4, sl
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f04f 0c0a 	mov.w	ip, #10
 8005d50:	9a07      	ldr	r2, [sp, #28]
 8005d52:	4621      	mov	r1, r4
 8005d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d58:	3b30      	subs	r3, #48	; 0x30
 8005d5a:	2b09      	cmp	r3, #9
 8005d5c:	d94e      	bls.n	8005dfc <_vfiprintf_r+0x1c4>
 8005d5e:	b1b0      	cbz	r0, 8005d8e <_vfiprintf_r+0x156>
 8005d60:	9207      	str	r2, [sp, #28]
 8005d62:	e014      	b.n	8005d8e <_vfiprintf_r+0x156>
 8005d64:	eba0 0308 	sub.w	r3, r0, r8
 8005d68:	fa09 f303 	lsl.w	r3, r9, r3
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	46a2      	mov	sl, r4
 8005d70:	9304      	str	r3, [sp, #16]
 8005d72:	e7d2      	b.n	8005d1a <_vfiprintf_r+0xe2>
 8005d74:	9b03      	ldr	r3, [sp, #12]
 8005d76:	1d19      	adds	r1, r3, #4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	9103      	str	r1, [sp, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	bfbb      	ittet	lt
 8005d80:	425b      	neglt	r3, r3
 8005d82:	f042 0202 	orrlt.w	r2, r2, #2
 8005d86:	9307      	strge	r3, [sp, #28]
 8005d88:	9307      	strlt	r3, [sp, #28]
 8005d8a:	bfb8      	it	lt
 8005d8c:	9204      	strlt	r2, [sp, #16]
 8005d8e:	7823      	ldrb	r3, [r4, #0]
 8005d90:	2b2e      	cmp	r3, #46	; 0x2e
 8005d92:	d10c      	bne.n	8005dae <_vfiprintf_r+0x176>
 8005d94:	7863      	ldrb	r3, [r4, #1]
 8005d96:	2b2a      	cmp	r3, #42	; 0x2a
 8005d98:	d135      	bne.n	8005e06 <_vfiprintf_r+0x1ce>
 8005d9a:	9b03      	ldr	r3, [sp, #12]
 8005d9c:	3402      	adds	r4, #2
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	9203      	str	r2, [sp, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bfb8      	it	lt
 8005da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dac:	9305      	str	r3, [sp, #20]
 8005dae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005e88 <_vfiprintf_r+0x250>
 8005db2:	2203      	movs	r2, #3
 8005db4:	4650      	mov	r0, sl
 8005db6:	7821      	ldrb	r1, [r4, #0]
 8005db8:	f000 fa38 	bl	800622c <memchr>
 8005dbc:	b140      	cbz	r0, 8005dd0 <_vfiprintf_r+0x198>
 8005dbe:	2340      	movs	r3, #64	; 0x40
 8005dc0:	eba0 000a 	sub.w	r0, r0, sl
 8005dc4:	fa03 f000 	lsl.w	r0, r3, r0
 8005dc8:	9b04      	ldr	r3, [sp, #16]
 8005dca:	3401      	adds	r4, #1
 8005dcc:	4303      	orrs	r3, r0
 8005dce:	9304      	str	r3, [sp, #16]
 8005dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd4:	2206      	movs	r2, #6
 8005dd6:	482d      	ldr	r0, [pc, #180]	; (8005e8c <_vfiprintf_r+0x254>)
 8005dd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ddc:	f000 fa26 	bl	800622c <memchr>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	d03f      	beq.n	8005e64 <_vfiprintf_r+0x22c>
 8005de4:	4b2a      	ldr	r3, [pc, #168]	; (8005e90 <_vfiprintf_r+0x258>)
 8005de6:	bb1b      	cbnz	r3, 8005e30 <_vfiprintf_r+0x1f8>
 8005de8:	9b03      	ldr	r3, [sp, #12]
 8005dea:	3307      	adds	r3, #7
 8005dec:	f023 0307 	bic.w	r3, r3, #7
 8005df0:	3308      	adds	r3, #8
 8005df2:	9303      	str	r3, [sp, #12]
 8005df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df6:	443b      	add	r3, r7
 8005df8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dfa:	e767      	b.n	8005ccc <_vfiprintf_r+0x94>
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	2001      	movs	r0, #1
 8005e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e04:	e7a5      	b.n	8005d52 <_vfiprintf_r+0x11a>
 8005e06:	2300      	movs	r3, #0
 8005e08:	f04f 0c0a 	mov.w	ip, #10
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	3401      	adds	r4, #1
 8005e10:	9305      	str	r3, [sp, #20]
 8005e12:	4620      	mov	r0, r4
 8005e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e18:	3a30      	subs	r2, #48	; 0x30
 8005e1a:	2a09      	cmp	r2, #9
 8005e1c:	d903      	bls.n	8005e26 <_vfiprintf_r+0x1ee>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0c5      	beq.n	8005dae <_vfiprintf_r+0x176>
 8005e22:	9105      	str	r1, [sp, #20]
 8005e24:	e7c3      	b.n	8005dae <_vfiprintf_r+0x176>
 8005e26:	4604      	mov	r4, r0
 8005e28:	2301      	movs	r3, #1
 8005e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e2e:	e7f0      	b.n	8005e12 <_vfiprintf_r+0x1da>
 8005e30:	ab03      	add	r3, sp, #12
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	462a      	mov	r2, r5
 8005e36:	4630      	mov	r0, r6
 8005e38:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <_vfiprintf_r+0x25c>)
 8005e3a:	a904      	add	r1, sp, #16
 8005e3c:	f3af 8000 	nop.w
 8005e40:	4607      	mov	r7, r0
 8005e42:	1c78      	adds	r0, r7, #1
 8005e44:	d1d6      	bne.n	8005df4 <_vfiprintf_r+0x1bc>
 8005e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e48:	07d9      	lsls	r1, r3, #31
 8005e4a:	d405      	bmi.n	8005e58 <_vfiprintf_r+0x220>
 8005e4c:	89ab      	ldrh	r3, [r5, #12]
 8005e4e:	059a      	lsls	r2, r3, #22
 8005e50:	d402      	bmi.n	8005e58 <_vfiprintf_r+0x220>
 8005e52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e54:	f7ff fa64 	bl	8005320 <__retarget_lock_release_recursive>
 8005e58:	89ab      	ldrh	r3, [r5, #12]
 8005e5a:	065b      	lsls	r3, r3, #25
 8005e5c:	f53f af12 	bmi.w	8005c84 <_vfiprintf_r+0x4c>
 8005e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e62:	e711      	b.n	8005c88 <_vfiprintf_r+0x50>
 8005e64:	ab03      	add	r3, sp, #12
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	462a      	mov	r2, r5
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <_vfiprintf_r+0x25c>)
 8005e6e:	a904      	add	r1, sp, #16
 8005e70:	f000 f882 	bl	8005f78 <_printf_i>
 8005e74:	e7e4      	b.n	8005e40 <_vfiprintf_r+0x208>
 8005e76:	bf00      	nop
 8005e78:	080065a4 	.word	0x080065a4
 8005e7c:	080065c4 	.word	0x080065c4
 8005e80:	08006584 	.word	0x08006584
 8005e84:	080065e8 	.word	0x080065e8
 8005e88:	080065ee 	.word	0x080065ee
 8005e8c:	080065f2 	.word	0x080065f2
 8005e90:	00000000 	.word	0x00000000
 8005e94:	08005c13 	.word	0x08005c13

08005e98 <_printf_common>:
 8005e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9c:	4616      	mov	r6, r2
 8005e9e:	4699      	mov	r9, r3
 8005ea0:	688a      	ldr	r2, [r1, #8]
 8005ea2:	690b      	ldr	r3, [r1, #16]
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	bfb8      	it	lt
 8005eaa:	4613      	movlt	r3, r2
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005eb8:	b10a      	cbz	r2, 8005ebe <_printf_common+0x26>
 8005eba:	3301      	adds	r3, #1
 8005ebc:	6033      	str	r3, [r6, #0]
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	0699      	lsls	r1, r3, #26
 8005ec2:	bf42      	ittt	mi
 8005ec4:	6833      	ldrmi	r3, [r6, #0]
 8005ec6:	3302      	addmi	r3, #2
 8005ec8:	6033      	strmi	r3, [r6, #0]
 8005eca:	6825      	ldr	r5, [r4, #0]
 8005ecc:	f015 0506 	ands.w	r5, r5, #6
 8005ed0:	d106      	bne.n	8005ee0 <_printf_common+0x48>
 8005ed2:	f104 0a19 	add.w	sl, r4, #25
 8005ed6:	68e3      	ldr	r3, [r4, #12]
 8005ed8:	6832      	ldr	r2, [r6, #0]
 8005eda:	1a9b      	subs	r3, r3, r2
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	dc28      	bgt.n	8005f32 <_printf_common+0x9a>
 8005ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ee4:	1e13      	subs	r3, r2, #0
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	bf18      	it	ne
 8005eea:	2301      	movne	r3, #1
 8005eec:	0692      	lsls	r2, r2, #26
 8005eee:	d42d      	bmi.n	8005f4c <_printf_common+0xb4>
 8005ef0:	4649      	mov	r1, r9
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef8:	47c0      	blx	r8
 8005efa:	3001      	adds	r0, #1
 8005efc:	d020      	beq.n	8005f40 <_printf_common+0xa8>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	68e5      	ldr	r5, [r4, #12]
 8005f02:	f003 0306 	and.w	r3, r3, #6
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	bf18      	it	ne
 8005f0a:	2500      	movne	r5, #0
 8005f0c:	6832      	ldr	r2, [r6, #0]
 8005f0e:	f04f 0600 	mov.w	r6, #0
 8005f12:	68a3      	ldr	r3, [r4, #8]
 8005f14:	bf08      	it	eq
 8005f16:	1aad      	subeq	r5, r5, r2
 8005f18:	6922      	ldr	r2, [r4, #16]
 8005f1a:	bf08      	it	eq
 8005f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f20:	4293      	cmp	r3, r2
 8005f22:	bfc4      	itt	gt
 8005f24:	1a9b      	subgt	r3, r3, r2
 8005f26:	18ed      	addgt	r5, r5, r3
 8005f28:	341a      	adds	r4, #26
 8005f2a:	42b5      	cmp	r5, r6
 8005f2c:	d11a      	bne.n	8005f64 <_printf_common+0xcc>
 8005f2e:	2000      	movs	r0, #0
 8005f30:	e008      	b.n	8005f44 <_printf_common+0xac>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4652      	mov	r2, sl
 8005f36:	4649      	mov	r1, r9
 8005f38:	4638      	mov	r0, r7
 8005f3a:	47c0      	blx	r8
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d103      	bne.n	8005f48 <_printf_common+0xb0>
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f48:	3501      	adds	r5, #1
 8005f4a:	e7c4      	b.n	8005ed6 <_printf_common+0x3e>
 8005f4c:	2030      	movs	r0, #48	; 0x30
 8005f4e:	18e1      	adds	r1, r4, r3
 8005f50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f5a:	4422      	add	r2, r4
 8005f5c:	3302      	adds	r3, #2
 8005f5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f62:	e7c5      	b.n	8005ef0 <_printf_common+0x58>
 8005f64:	2301      	movs	r3, #1
 8005f66:	4622      	mov	r2, r4
 8005f68:	4649      	mov	r1, r9
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	47c0      	blx	r8
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d0e6      	beq.n	8005f40 <_printf_common+0xa8>
 8005f72:	3601      	adds	r6, #1
 8005f74:	e7d9      	b.n	8005f2a <_printf_common+0x92>
	...

08005f78 <_printf_i>:
 8005f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f7c:	7e0f      	ldrb	r7, [r1, #24]
 8005f7e:	4691      	mov	r9, r2
 8005f80:	2f78      	cmp	r7, #120	; 0x78
 8005f82:	4680      	mov	r8, r0
 8005f84:	460c      	mov	r4, r1
 8005f86:	469a      	mov	sl, r3
 8005f88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f8e:	d807      	bhi.n	8005fa0 <_printf_i+0x28>
 8005f90:	2f62      	cmp	r7, #98	; 0x62
 8005f92:	d80a      	bhi.n	8005faa <_printf_i+0x32>
 8005f94:	2f00      	cmp	r7, #0
 8005f96:	f000 80d9 	beq.w	800614c <_printf_i+0x1d4>
 8005f9a:	2f58      	cmp	r7, #88	; 0x58
 8005f9c:	f000 80a4 	beq.w	80060e8 <_printf_i+0x170>
 8005fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fa8:	e03a      	b.n	8006020 <_printf_i+0xa8>
 8005faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fae:	2b15      	cmp	r3, #21
 8005fb0:	d8f6      	bhi.n	8005fa0 <_printf_i+0x28>
 8005fb2:	a101      	add	r1, pc, #4	; (adr r1, 8005fb8 <_printf_i+0x40>)
 8005fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fb8:	08006011 	.word	0x08006011
 8005fbc:	08006025 	.word	0x08006025
 8005fc0:	08005fa1 	.word	0x08005fa1
 8005fc4:	08005fa1 	.word	0x08005fa1
 8005fc8:	08005fa1 	.word	0x08005fa1
 8005fcc:	08005fa1 	.word	0x08005fa1
 8005fd0:	08006025 	.word	0x08006025
 8005fd4:	08005fa1 	.word	0x08005fa1
 8005fd8:	08005fa1 	.word	0x08005fa1
 8005fdc:	08005fa1 	.word	0x08005fa1
 8005fe0:	08005fa1 	.word	0x08005fa1
 8005fe4:	08006133 	.word	0x08006133
 8005fe8:	08006055 	.word	0x08006055
 8005fec:	08006115 	.word	0x08006115
 8005ff0:	08005fa1 	.word	0x08005fa1
 8005ff4:	08005fa1 	.word	0x08005fa1
 8005ff8:	08006155 	.word	0x08006155
 8005ffc:	08005fa1 	.word	0x08005fa1
 8006000:	08006055 	.word	0x08006055
 8006004:	08005fa1 	.word	0x08005fa1
 8006008:	08005fa1 	.word	0x08005fa1
 800600c:	0800611d 	.word	0x0800611d
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	1d1a      	adds	r2, r3, #4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	602a      	str	r2, [r5, #0]
 8006018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800601c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006020:	2301      	movs	r3, #1
 8006022:	e0a4      	b.n	800616e <_printf_i+0x1f6>
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	6829      	ldr	r1, [r5, #0]
 8006028:	0606      	lsls	r6, r0, #24
 800602a:	f101 0304 	add.w	r3, r1, #4
 800602e:	d50a      	bpl.n	8006046 <_printf_i+0xce>
 8006030:	680e      	ldr	r6, [r1, #0]
 8006032:	602b      	str	r3, [r5, #0]
 8006034:	2e00      	cmp	r6, #0
 8006036:	da03      	bge.n	8006040 <_printf_i+0xc8>
 8006038:	232d      	movs	r3, #45	; 0x2d
 800603a:	4276      	negs	r6, r6
 800603c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006040:	230a      	movs	r3, #10
 8006042:	485e      	ldr	r0, [pc, #376]	; (80061bc <_printf_i+0x244>)
 8006044:	e019      	b.n	800607a <_printf_i+0x102>
 8006046:	680e      	ldr	r6, [r1, #0]
 8006048:	f010 0f40 	tst.w	r0, #64	; 0x40
 800604c:	602b      	str	r3, [r5, #0]
 800604e:	bf18      	it	ne
 8006050:	b236      	sxthne	r6, r6
 8006052:	e7ef      	b.n	8006034 <_printf_i+0xbc>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	6820      	ldr	r0, [r4, #0]
 8006058:	1d19      	adds	r1, r3, #4
 800605a:	6029      	str	r1, [r5, #0]
 800605c:	0601      	lsls	r1, r0, #24
 800605e:	d501      	bpl.n	8006064 <_printf_i+0xec>
 8006060:	681e      	ldr	r6, [r3, #0]
 8006062:	e002      	b.n	800606a <_printf_i+0xf2>
 8006064:	0646      	lsls	r6, r0, #25
 8006066:	d5fb      	bpl.n	8006060 <_printf_i+0xe8>
 8006068:	881e      	ldrh	r6, [r3, #0]
 800606a:	2f6f      	cmp	r7, #111	; 0x6f
 800606c:	bf0c      	ite	eq
 800606e:	2308      	moveq	r3, #8
 8006070:	230a      	movne	r3, #10
 8006072:	4852      	ldr	r0, [pc, #328]	; (80061bc <_printf_i+0x244>)
 8006074:	2100      	movs	r1, #0
 8006076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800607a:	6865      	ldr	r5, [r4, #4]
 800607c:	2d00      	cmp	r5, #0
 800607e:	bfa8      	it	ge
 8006080:	6821      	ldrge	r1, [r4, #0]
 8006082:	60a5      	str	r5, [r4, #8]
 8006084:	bfa4      	itt	ge
 8006086:	f021 0104 	bicge.w	r1, r1, #4
 800608a:	6021      	strge	r1, [r4, #0]
 800608c:	b90e      	cbnz	r6, 8006092 <_printf_i+0x11a>
 800608e:	2d00      	cmp	r5, #0
 8006090:	d04d      	beq.n	800612e <_printf_i+0x1b6>
 8006092:	4615      	mov	r5, r2
 8006094:	fbb6 f1f3 	udiv	r1, r6, r3
 8006098:	fb03 6711 	mls	r7, r3, r1, r6
 800609c:	5dc7      	ldrb	r7, [r0, r7]
 800609e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060a2:	4637      	mov	r7, r6
 80060a4:	42bb      	cmp	r3, r7
 80060a6:	460e      	mov	r6, r1
 80060a8:	d9f4      	bls.n	8006094 <_printf_i+0x11c>
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d10b      	bne.n	80060c6 <_printf_i+0x14e>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	07de      	lsls	r6, r3, #31
 80060b2:	d508      	bpl.n	80060c6 <_printf_i+0x14e>
 80060b4:	6923      	ldr	r3, [r4, #16]
 80060b6:	6861      	ldr	r1, [r4, #4]
 80060b8:	4299      	cmp	r1, r3
 80060ba:	bfde      	ittt	le
 80060bc:	2330      	movle	r3, #48	; 0x30
 80060be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060c6:	1b52      	subs	r2, r2, r5
 80060c8:	6122      	str	r2, [r4, #16]
 80060ca:	464b      	mov	r3, r9
 80060cc:	4621      	mov	r1, r4
 80060ce:	4640      	mov	r0, r8
 80060d0:	f8cd a000 	str.w	sl, [sp]
 80060d4:	aa03      	add	r2, sp, #12
 80060d6:	f7ff fedf 	bl	8005e98 <_printf_common>
 80060da:	3001      	adds	r0, #1
 80060dc:	d14c      	bne.n	8006178 <_printf_i+0x200>
 80060de:	f04f 30ff 	mov.w	r0, #4294967295
 80060e2:	b004      	add	sp, #16
 80060e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e8:	4834      	ldr	r0, [pc, #208]	; (80061bc <_printf_i+0x244>)
 80060ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060ee:	6829      	ldr	r1, [r5, #0]
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80060f6:	6029      	str	r1, [r5, #0]
 80060f8:	061d      	lsls	r5, r3, #24
 80060fa:	d514      	bpl.n	8006126 <_printf_i+0x1ae>
 80060fc:	07df      	lsls	r7, r3, #31
 80060fe:	bf44      	itt	mi
 8006100:	f043 0320 	orrmi.w	r3, r3, #32
 8006104:	6023      	strmi	r3, [r4, #0]
 8006106:	b91e      	cbnz	r6, 8006110 <_printf_i+0x198>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	f023 0320 	bic.w	r3, r3, #32
 800610e:	6023      	str	r3, [r4, #0]
 8006110:	2310      	movs	r3, #16
 8006112:	e7af      	b.n	8006074 <_printf_i+0xfc>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	f043 0320 	orr.w	r3, r3, #32
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	2378      	movs	r3, #120	; 0x78
 800611e:	4828      	ldr	r0, [pc, #160]	; (80061c0 <_printf_i+0x248>)
 8006120:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006124:	e7e3      	b.n	80060ee <_printf_i+0x176>
 8006126:	0659      	lsls	r1, r3, #25
 8006128:	bf48      	it	mi
 800612a:	b2b6      	uxthmi	r6, r6
 800612c:	e7e6      	b.n	80060fc <_printf_i+0x184>
 800612e:	4615      	mov	r5, r2
 8006130:	e7bb      	b.n	80060aa <_printf_i+0x132>
 8006132:	682b      	ldr	r3, [r5, #0]
 8006134:	6826      	ldr	r6, [r4, #0]
 8006136:	1d18      	adds	r0, r3, #4
 8006138:	6961      	ldr	r1, [r4, #20]
 800613a:	6028      	str	r0, [r5, #0]
 800613c:	0635      	lsls	r5, r6, #24
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	d501      	bpl.n	8006146 <_printf_i+0x1ce>
 8006142:	6019      	str	r1, [r3, #0]
 8006144:	e002      	b.n	800614c <_printf_i+0x1d4>
 8006146:	0670      	lsls	r0, r6, #25
 8006148:	d5fb      	bpl.n	8006142 <_printf_i+0x1ca>
 800614a:	8019      	strh	r1, [r3, #0]
 800614c:	2300      	movs	r3, #0
 800614e:	4615      	mov	r5, r2
 8006150:	6123      	str	r3, [r4, #16]
 8006152:	e7ba      	b.n	80060ca <_printf_i+0x152>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	2100      	movs	r1, #0
 8006158:	1d1a      	adds	r2, r3, #4
 800615a:	602a      	str	r2, [r5, #0]
 800615c:	681d      	ldr	r5, [r3, #0]
 800615e:	6862      	ldr	r2, [r4, #4]
 8006160:	4628      	mov	r0, r5
 8006162:	f000 f863 	bl	800622c <memchr>
 8006166:	b108      	cbz	r0, 800616c <_printf_i+0x1f4>
 8006168:	1b40      	subs	r0, r0, r5
 800616a:	6060      	str	r0, [r4, #4]
 800616c:	6863      	ldr	r3, [r4, #4]
 800616e:	6123      	str	r3, [r4, #16]
 8006170:	2300      	movs	r3, #0
 8006172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006176:	e7a8      	b.n	80060ca <_printf_i+0x152>
 8006178:	462a      	mov	r2, r5
 800617a:	4649      	mov	r1, r9
 800617c:	4640      	mov	r0, r8
 800617e:	6923      	ldr	r3, [r4, #16]
 8006180:	47d0      	blx	sl
 8006182:	3001      	adds	r0, #1
 8006184:	d0ab      	beq.n	80060de <_printf_i+0x166>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	079b      	lsls	r3, r3, #30
 800618a:	d413      	bmi.n	80061b4 <_printf_i+0x23c>
 800618c:	68e0      	ldr	r0, [r4, #12]
 800618e:	9b03      	ldr	r3, [sp, #12]
 8006190:	4298      	cmp	r0, r3
 8006192:	bfb8      	it	lt
 8006194:	4618      	movlt	r0, r3
 8006196:	e7a4      	b.n	80060e2 <_printf_i+0x16a>
 8006198:	2301      	movs	r3, #1
 800619a:	4632      	mov	r2, r6
 800619c:	4649      	mov	r1, r9
 800619e:	4640      	mov	r0, r8
 80061a0:	47d0      	blx	sl
 80061a2:	3001      	adds	r0, #1
 80061a4:	d09b      	beq.n	80060de <_printf_i+0x166>
 80061a6:	3501      	adds	r5, #1
 80061a8:	68e3      	ldr	r3, [r4, #12]
 80061aa:	9903      	ldr	r1, [sp, #12]
 80061ac:	1a5b      	subs	r3, r3, r1
 80061ae:	42ab      	cmp	r3, r5
 80061b0:	dcf2      	bgt.n	8006198 <_printf_i+0x220>
 80061b2:	e7eb      	b.n	800618c <_printf_i+0x214>
 80061b4:	2500      	movs	r5, #0
 80061b6:	f104 0619 	add.w	r6, r4, #25
 80061ba:	e7f5      	b.n	80061a8 <_printf_i+0x230>
 80061bc:	080065f9 	.word	0x080065f9
 80061c0:	0800660a 	.word	0x0800660a

080061c4 <_read_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4604      	mov	r4, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	2200      	movs	r2, #0
 80061ce:	4d05      	ldr	r5, [pc, #20]	; (80061e4 <_read_r+0x20>)
 80061d0:	602a      	str	r2, [r5, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f7fa fafe 	bl	80007d4 <_read>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_read_r+0x1e>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_read_r+0x1e>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	20001b44 	.word	0x20001b44

080061e8 <_fstat_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	2300      	movs	r3, #0
 80061ec:	4d06      	ldr	r5, [pc, #24]	; (8006208 <_fstat_r+0x20>)
 80061ee:	4604      	mov	r4, r0
 80061f0:	4608      	mov	r0, r1
 80061f2:	4611      	mov	r1, r2
 80061f4:	602b      	str	r3, [r5, #0]
 80061f6:	f7fa fb31 	bl	800085c <_fstat>
 80061fa:	1c43      	adds	r3, r0, #1
 80061fc:	d102      	bne.n	8006204 <_fstat_r+0x1c>
 80061fe:	682b      	ldr	r3, [r5, #0]
 8006200:	b103      	cbz	r3, 8006204 <_fstat_r+0x1c>
 8006202:	6023      	str	r3, [r4, #0]
 8006204:	bd38      	pop	{r3, r4, r5, pc}
 8006206:	bf00      	nop
 8006208:	20001b44 	.word	0x20001b44

0800620c <_isatty_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	2300      	movs	r3, #0
 8006210:	4d05      	ldr	r5, [pc, #20]	; (8006228 <_isatty_r+0x1c>)
 8006212:	4604      	mov	r4, r0
 8006214:	4608      	mov	r0, r1
 8006216:	602b      	str	r3, [r5, #0]
 8006218:	f7fa fb2f 	bl	800087a <_isatty>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_isatty_r+0x1a>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_isatty_r+0x1a>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	20001b44 	.word	0x20001b44

0800622c <memchr>:
 800622c:	4603      	mov	r3, r0
 800622e:	b510      	push	{r4, lr}
 8006230:	b2c9      	uxtb	r1, r1
 8006232:	4402      	add	r2, r0
 8006234:	4293      	cmp	r3, r2
 8006236:	4618      	mov	r0, r3
 8006238:	d101      	bne.n	800623e <memchr+0x12>
 800623a:	2000      	movs	r0, #0
 800623c:	e003      	b.n	8006246 <memchr+0x1a>
 800623e:	7804      	ldrb	r4, [r0, #0]
 8006240:	3301      	adds	r3, #1
 8006242:	428c      	cmp	r4, r1
 8006244:	d1f6      	bne.n	8006234 <memchr+0x8>
 8006246:	bd10      	pop	{r4, pc}

08006248 <_init>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	bf00      	nop
 800624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624e:	bc08      	pop	{r3}
 8006250:	469e      	mov	lr, r3
 8006252:	4770      	bx	lr

08006254 <_fini>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	bf00      	nop
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr
