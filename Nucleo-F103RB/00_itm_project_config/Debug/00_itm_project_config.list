
00_itm_project_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058cc  080058cc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080058cc  080058cc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058cc  080058cc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058d0  080058d0  000158d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080058d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000213c  20000078  0800594c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021b4  0800594c  000221b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026420  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044b0  00000000  00000000  000464c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001aeee  00000000  00000000  0004a971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b8  00000000  00000000  00065860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019c0  00000000  00000000  00067018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c1fa  00000000  00000000  000689d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024caf  00000000  00000000  00084bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b55a  00000000  00000000  000a9881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144ddb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ee0  00000000  00000000  00144e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080054cc 	.word	0x080054cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080054cc 	.word	0x080054cc

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20001b34 	.word	0x20001b34

080001dc <log_message_get_level>:
}

log_level_t log_message_get_level(void)
{
    return current_log_level;
}
 80001dc:	4b01      	ldr	r3, [pc, #4]	; (80001e4 <log_message_get_level+0x8>)
 80001de:	7818      	ldrb	r0, [r3, #0]
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000000 	.word	0x20000000

080001e8 <log_test>:
    va_end(args);
}
#endif 

void log_test(void)
{
 80001e8:	b508      	push	{r3, lr}
    log_message(LOG_LEVEL_INFO, "Starting program...");
 80001ea:	f7ff fff7 	bl	80001dc <log_message_get_level>
 80001ee:	2801      	cmp	r0, #1
 80001f0:	d80c      	bhi.n	800020c <log_test+0x24>
    log_message(LOG_LEVEL_DEBUG, "Debugging information...");
 80001f2:	f7ff fff3 	bl	80001dc <log_message_get_level>
 80001f6:	2802      	cmp	r0, #2
 80001f8:	d80e      	bhi.n	8000218 <log_test+0x30>
    log_message(LOG_LEVEL_WARNING, "Warning: Something might be wrong...");
 80001fa:	f7ff ffef 	bl	80001dc <log_message_get_level>
 80001fe:	b988      	cbnz	r0, 8000224 <log_test+0x3c>
    log_message(LOG_LEVEL_ERROR, "Error: Something went wrong!");
 8000200:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <log_test+0x48>)
 8000202:	490c      	ldr	r1, [pc, #48]	; (8000234 <log_test+0x4c>)
 8000204:	480c      	ldr	r0, [pc, #48]	; (8000238 <log_test+0x50>)
 8000206:	f004 fa8b 	bl	8004720 <iprintf>
 800020a:	bd08      	pop	{r3, pc}
    log_message(LOG_LEVEL_INFO, "Starting program...");
 800020c:	4a08      	ldr	r2, [pc, #32]	; (8000230 <log_test+0x48>)
 800020e:	490b      	ldr	r1, [pc, #44]	; (800023c <log_test+0x54>)
 8000210:	480b      	ldr	r0, [pc, #44]	; (8000240 <log_test+0x58>)
 8000212:	f004 fa85 	bl	8004720 <iprintf>
 8000216:	e7ec      	b.n	80001f2 <log_test+0xa>
    log_message(LOG_LEVEL_DEBUG, "Debugging information...");
 8000218:	4a05      	ldr	r2, [pc, #20]	; (8000230 <log_test+0x48>)
 800021a:	490a      	ldr	r1, [pc, #40]	; (8000244 <log_test+0x5c>)
 800021c:	480a      	ldr	r0, [pc, #40]	; (8000248 <log_test+0x60>)
 800021e:	f004 fa7f 	bl	8004720 <iprintf>
 8000222:	e7ea      	b.n	80001fa <log_test+0x12>
    log_message(LOG_LEVEL_WARNING, "Warning: Something might be wrong...");
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <log_test+0x48>)
 8000226:	4909      	ldr	r1, [pc, #36]	; (800024c <log_test+0x64>)
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <log_test+0x68>)
 800022a:	f004 fa79 	bl	8004720 <iprintf>
 800022e:	e7e7      	b.n	8000200 <log_test+0x18>
 8000230:	080054e4 	.word	0x080054e4
 8000234:	08005568 	.word	0x08005568
 8000238:	08005570 	.word	0x08005570
 800023c:	080054ec 	.word	0x080054ec
 8000240:	080054f4 	.word	0x080054f4
 8000244:	0800550c 	.word	0x0800550c
 8000248:	08005514 	.word	0x08005514
 800024c:	08005534 	.word	0x08005534
 8000250:	0800553c 	.word	0x0800553c

08000254 <blink_led_non_blocking>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void blink_led_non_blocking(void)
{
 8000254:	b508      	push	{r3, lr}
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000256:	2120      	movs	r1, #32
 8000258:	4808      	ldr	r0, [pc, #32]	; (800027c <blink_led_non_blocking+0x28>)
 800025a:	f000 fc9f 	bl	8000b9c <HAL_GPIO_TogglePin>
    log_message(LOG_LEVEL_INFO, "Led2 toggle!\n");
 800025e:	f7ff ffbd 	bl	80001dc <log_message_get_level>
 8000262:	2801      	cmp	r0, #1
 8000264:	d804      	bhi.n	8000270 <blink_led_non_blocking+0x1c>
    // SEGGER_SYSVIEW_PrintfHost("Sysview : Led2 toggle!");

    osDelay(500);
 8000266:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800026a:	f001 fc85 	bl	8001b78 <osDelay>
}
 800026e:	bd08      	pop	{r3, pc}
    log_message(LOG_LEVEL_INFO, "Led2 toggle!\n");
 8000270:	4a03      	ldr	r2, [pc, #12]	; (8000280 <blink_led_non_blocking+0x2c>)
 8000272:	4904      	ldr	r1, [pc, #16]	; (8000284 <blink_led_non_blocking+0x30>)
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <blink_led_non_blocking+0x34>)
 8000276:	f004 fa53 	bl	8004720 <iprintf>
 800027a:	e7f4      	b.n	8000266 <blink_led_non_blocking+0x12>
 800027c:	40010800 	.word	0x40010800
 8000280:	080054e4 	.word	0x080054e4
 8000284:	080054ec 	.word	0x080054ec
 8000288:	08005594 	.word	0x08005594

0800028c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800028c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	blink_led_non_blocking();
 800028e:	f7ff ffe1 	bl	8000254 <blink_led_non_blocking>
  for(;;)
 8000292:	e7fc      	b.n	800028e <StartDefaultTask+0x2>

08000294 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000294:	b508      	push	{r3, lr}
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000296:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <MX_FREERTOS_Init+0x14>)
 8000298:	2100      	movs	r1, #0
 800029a:	4804      	ldr	r0, [pc, #16]	; (80002ac <MX_FREERTOS_Init+0x18>)
 800029c:	f001 fbf6 	bl	8001a8c <osThreadNew>
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <MX_FREERTOS_Init+0x1c>)
 80002a2:	6018      	str	r0, [r3, #0]
}
 80002a4:	bd08      	pop	{r3, pc}
 80002a6:	bf00      	nop
 80002a8:	080055b4 	.word	0x080055b4
 80002ac:	0800028d 	.word	0x0800028d
 80002b0:	20000094 	.word	0x20000094

080002b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b8:	2400      	movs	r4, #0
 80002ba:	9404      	str	r4, [sp, #16]
 80002bc:	9405      	str	r4, [sp, #20]
 80002be:	9406      	str	r4, [sp, #24]
 80002c0:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c2:	4b25      	ldr	r3, [pc, #148]	; (8000358 <MX_GPIO_Init+0xa4>)
 80002c4:	699a      	ldr	r2, [r3, #24]
 80002c6:	f042 0210 	orr.w	r2, r2, #16
 80002ca:	619a      	str	r2, [r3, #24]
 80002cc:	699a      	ldr	r2, [r3, #24]
 80002ce:	f002 0210 	and.w	r2, r2, #16
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d6:	699a      	ldr	r2, [r3, #24]
 80002d8:	f042 0220 	orr.w	r2, r2, #32
 80002dc:	619a      	str	r2, [r3, #24]
 80002de:	699a      	ldr	r2, [r3, #24]
 80002e0:	f002 0220 	and.w	r2, r2, #32
 80002e4:	9201      	str	r2, [sp, #4]
 80002e6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e8:	699a      	ldr	r2, [r3, #24]
 80002ea:	f042 0204 	orr.w	r2, r2, #4
 80002ee:	619a      	str	r2, [r3, #24]
 80002f0:	699a      	ldr	r2, [r3, #24]
 80002f2:	f002 0204 	and.w	r2, r2, #4
 80002f6:	9202      	str	r2, [sp, #8]
 80002f8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fa:	699a      	ldr	r2, [r3, #24]
 80002fc:	f042 0208 	orr.w	r2, r2, #8
 8000300:	619a      	str	r2, [r3, #24]
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0308 	and.w	r3, r3, #8
 8000308:	9303      	str	r3, [sp, #12]
 800030a:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 800030c:	4d13      	ldr	r5, [pc, #76]	; (800035c <MX_GPIO_Init+0xa8>)
 800030e:	4622      	mov	r2, r4
 8000310:	2160      	movs	r1, #96	; 0x60
 8000312:	4628      	mov	r0, r5
 8000314:	f000 fc26 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <MX_GPIO_Init+0xac>)
 8000320:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000324:	a904      	add	r1, sp, #16
 8000326:	480f      	ldr	r0, [pc, #60]	; (8000364 <MX_GPIO_Init+0xb0>)
 8000328:	f000 fa68 	bl	80007fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 800032c:	2360      	movs	r3, #96	; 0x60
 800032e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000330:	2301      	movs	r3, #1
 8000332:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	2302      	movs	r3, #2
 8000338:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033a:	a904      	add	r1, sp, #16
 800033c:	4628      	mov	r0, r5
 800033e:	f000 fa5d 	bl	80007fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000342:	4622      	mov	r2, r4
 8000344:	2105      	movs	r1, #5
 8000346:	2028      	movs	r0, #40	; 0x28
 8000348:	f000 f9fa 	bl	8000740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800034c:	2028      	movs	r0, #40	; 0x28
 800034e:	f000 fa3d 	bl	80007cc <HAL_NVIC_EnableIRQ>

}
 8000352:	b009      	add	sp, #36	; 0x24
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40010800 	.word	0x40010800
 8000360:	10110000 	.word	0x10110000
 8000364:	40011000 	.word	0x40011000

08000368 <print_startup_msg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_startup_msg(void)
{
 8000368:	b510      	push	{r4, lr}
	printf("************************************\r\n");
 800036a:	4c08      	ldr	r4, [pc, #32]	; (800038c <print_startup_msg+0x24>)
 800036c:	4620      	mov	r0, r4
 800036e:	f004 fa5d 	bl	800482c <puts>
	printf("***** %s - %s ****/\r\n", __DATE__, __TIME__);
 8000372:	4a07      	ldr	r2, [pc, #28]	; (8000390 <print_startup_msg+0x28>)
 8000374:	4907      	ldr	r1, [pc, #28]	; (8000394 <print_startup_msg+0x2c>)
 8000376:	4808      	ldr	r0, [pc, #32]	; (8000398 <print_startup_msg+0x30>)
 8000378:	f004 f9d2 	bl	8004720 <iprintf>
	printf("***** Author : Bayron Cabrera ******\r\n");
 800037c:	4807      	ldr	r0, [pc, #28]	; (800039c <print_startup_msg+0x34>)
 800037e:	f004 fa55 	bl	800482c <puts>
	printf("************************************\r\n");
 8000382:	4620      	mov	r0, r4
 8000384:	f004 fa52 	bl	800482c <puts>
}
 8000388:	bd10      	pop	{r4, pc}
 800038a:	bf00      	nop
 800038c:	080055d8 	.word	0x080055d8
 8000390:	08005600 	.word	0x08005600
 8000394:	0800560c 	.word	0x0800560c
 8000398:	08005618 	.word	0x08005618
 800039c:	08005630 	.word	0x08005630

080003a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003a2:	6802      	ldr	r2, [r0, #0]
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d000      	beq.n	80003ac <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003aa:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80003ac:	f000 f998 	bl	80006e0 <HAL_IncTick>
}
 80003b0:	e7fb      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0xa>
 80003b2:	bf00      	nop
 80003b4:	40012c00 	.word	0x40012c00

080003b8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ba:	e7fe      	b.n	80003ba <Error_Handler+0x2>

080003bc <SystemClock_Config>:
{
 80003bc:	b500      	push	{lr}
 80003be:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c0:	2228      	movs	r2, #40	; 0x28
 80003c2:	2100      	movs	r1, #0
 80003c4:	a806      	add	r0, sp, #24
 80003c6:	f004 f90e 	bl	80045e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ca:	2300      	movs	r3, #0
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	9302      	str	r3, [sp, #8]
 80003d0:	9303      	str	r3, [sp, #12]
 80003d2:	9304      	str	r3, [sp, #16]
 80003d4:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d6:	2302      	movs	r3, #2
 80003d8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003da:	2201      	movs	r2, #1
 80003dc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003de:	2210      	movs	r2, #16
 80003e0:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003e4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003e8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ea:	a806      	add	r0, sp, #24
 80003ec:	f000 fc12 	bl	8000c14 <HAL_RCC_OscConfig>
 80003f0:	b980      	cbnz	r0, 8000414 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	230f      	movs	r3, #15
 80003f4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f6:	2102      	movs	r1, #2
 80003f8:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000402:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000404:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000406:	a801      	add	r0, sp, #4
 8000408:	f000 fee0 	bl	80011cc <HAL_RCC_ClockConfig>
 800040c:	b920      	cbnz	r0, 8000418 <SystemClock_Config+0x5c>
}
 800040e:	b011      	add	sp, #68	; 0x44
 8000410:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000414:	f7ff ffd0 	bl	80003b8 <Error_Handler>
    Error_Handler();
 8000418:	f7ff ffce 	bl	80003b8 <Error_Handler>

0800041c <main>:
{
 800041c:	b508      	push	{r3, lr}
  HAL_Init();
 800041e:	f000 f94d 	bl	80006bc <HAL_Init>
  SystemClock_Config();
 8000422:	f7ff ffcb 	bl	80003bc <SystemClock_Config>
  MX_GPIO_Init();
 8000426:	f7ff ff45 	bl	80002b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800042a:	f000 f8d7 	bl	80005dc <MX_USART2_UART_Init>
  print_startup_msg();
 800042e:	f7ff ff9b 	bl	8000368 <print_startup_msg>
  log_test();
 8000432:	f7ff fed9 	bl	80001e8 <log_test>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000436:	f001 fae1 	bl	80019fc <osKernelInitialize>
  MX_FREERTOS_Init();
 800043a:	f7ff ff2b 	bl	8000294 <MX_FREERTOS_Init>
  osKernelStart();
 800043e:	f001 faff 	bl	8001a40 <osKernelStart>
  while (1)
 8000442:	e7fe      	b.n	8000442 <main+0x26>

08000444 <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000444:	4770      	bx	lr
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b500      	push	{lr}
 800044a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <HAL_MspInit+0x4c>)
 800044e:	699a      	ldr	r2, [r3, #24]
 8000450:	f042 0201 	orr.w	r2, r2, #1
 8000454:	619a      	str	r2, [r3, #24]
 8000456:	699a      	ldr	r2, [r3, #24]
 8000458:	f002 0201 	and.w	r2, r2, #1
 800045c:	9200      	str	r2, [sp, #0]
 800045e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000460:	69da      	ldr	r2, [r3, #28]
 8000462:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000466:	61da      	str	r2, [r3, #28]
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046e:	9301      	str	r3, [sp, #4]
 8000470:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000472:	2200      	movs	r2, #0
 8000474:	210f      	movs	r1, #15
 8000476:	f06f 0001 	mvn.w	r0, #1
 800047a:	f000 f961 	bl	8000740 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800047e:	4a06      	ldr	r2, [pc, #24]	; (8000498 <HAL_MspInit+0x50>)
 8000480:	6853      	ldr	r3, [r2, #4]
 8000482:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800048a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048c:	b003      	add	sp, #12
 800048e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	b089      	sub	sp, #36	; 0x24
 80004a0:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004a2:	4b1e      	ldr	r3, [pc, #120]	; (800051c <HAL_InitTick+0x80>)
 80004a4:	699a      	ldr	r2, [r3, #24]
 80004a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80004aa:	619a      	str	r2, [r3, #24]
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004b6:	a902      	add	r1, sp, #8
 80004b8:	a803      	add	r0, sp, #12
 80004ba:	f000 ffc1 	bl	8001440 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004be:	f000 ffaf 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 80004c2:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004c4:	4816      	ldr	r0, [pc, #88]	; (8000520 <HAL_InitTick+0x84>)
 80004c6:	fba0 2303 	umull	r2, r3, r0, r3
 80004ca:	0c9b      	lsrs	r3, r3, #18
 80004cc:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004ce:	4815      	ldr	r0, [pc, #84]	; (8000524 <HAL_InitTick+0x88>)
 80004d0:	4a15      	ldr	r2, [pc, #84]	; (8000528 <HAL_InitTick+0x8c>)
 80004d2:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80004d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004d8:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80004da:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e0:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e2:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80004e4:	f001 f928 	bl	8001738 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80004e8:	4605      	mov	r5, r0
 80004ea:	b110      	cbz	r0, 80004f2 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80004ec:	4628      	mov	r0, r5
 80004ee:	b009      	add	sp, #36	; 0x24
 80004f0:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 80004f2:	480c      	ldr	r0, [pc, #48]	; (8000524 <HAL_InitTick+0x88>)
 80004f4:	f000 ffd8 	bl	80014a8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80004f8:	4605      	mov	r5, r0
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d1f6      	bne.n	80004ec <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80004fe:	2019      	movs	r0, #25
 8000500:	f000 f964 	bl	80007cc <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000504:	2c0f      	cmp	r4, #15
 8000506:	d901      	bls.n	800050c <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8000508:	2501      	movs	r5, #1
 800050a:	e7ef      	b.n	80004ec <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800050c:	2200      	movs	r2, #0
 800050e:	4621      	mov	r1, r4
 8000510:	2019      	movs	r0, #25
 8000512:	f000 f915 	bl	8000740 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000516:	4b05      	ldr	r3, [pc, #20]	; (800052c <HAL_InitTick+0x90>)
 8000518:	601c      	str	r4, [r3, #0]
 800051a:	e7e7      	b.n	80004ec <HAL_InitTick+0x50>
 800051c:	40021000 	.word	0x40021000
 8000520:	431bde83 	.word	0x431bde83
 8000524:	20000098 	.word	0x20000098
 8000528:	40012c00 	.word	0x40012c00
 800052c:	2000000c 	.word	0x2000000c

08000530 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <NMI_Handler>

08000532 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <HardFault_Handler>

08000534 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <MemManage_Handler>

08000536 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <BusFault_Handler>

08000538 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <UsageFault_Handler>

0800053a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053a:	4770      	bx	lr

0800053c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800053c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800053e:	4802      	ldr	r0, [pc, #8]	; (8000548 <TIM1_UP_IRQHandler+0xc>)
 8000540:	f001 f802 	bl	8001548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000544:	bd08      	pop	{r3, pc}
 8000546:	bf00      	nop
 8000548:	20000098 	.word	0x20000098

0800054c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800054c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800054e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000552:	f000 fb3b 	bl	8000bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000556:	bd08      	pop	{r3, pc}

08000558 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	460c      	mov	r4, r1
 800055c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055e:	2500      	movs	r5, #0
 8000560:	e006      	b.n	8000570 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000562:	f3af 8000 	nop.w
 8000566:	4621      	mov	r1, r4
 8000568:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800056e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000570:	42b5      	cmp	r5, r6
 8000572:	dbf6      	blt.n	8000562 <_read+0xa>
  }

  return len;
}
 8000574:	4630      	mov	r0, r6
 8000576:	bd70      	pop	{r4, r5, r6, pc}

08000578 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	4770      	bx	lr

0800057e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800057e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000582:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000584:	2000      	movs	r0, #0
 8000586:	4770      	bx	lr

08000588 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000588:	2001      	movs	r0, #1
 800058a:	4770      	bx	lr

0800058c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800058c:	2000      	movs	r0, #0
 800058e:	4770      	bx	lr

08000590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000590:	b510      	push	{r4, lr}
 8000592:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000594:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <_sbrk+0x38>)
 8000596:	490d      	ldr	r1, [pc, #52]	; (80005cc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <_sbrk+0x40>)
 800059a:	6800      	ldr	r0, [r0, #0]
 800059c:	b140      	cbz	r0, 80005b0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800059e:	480c      	ldr	r0, [pc, #48]	; (80005d0 <_sbrk+0x40>)
 80005a0:	6800      	ldr	r0, [r0, #0]
 80005a2:	4403      	add	r3, r0
 80005a4:	1a52      	subs	r2, r2, r1
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d806      	bhi.n	80005b8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80005aa:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <_sbrk+0x40>)
 80005ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80005ae:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <_sbrk+0x40>)
 80005b2:	4c08      	ldr	r4, [pc, #32]	; (80005d4 <_sbrk+0x44>)
 80005b4:	6004      	str	r4, [r0, #0]
 80005b6:	e7f2      	b.n	800059e <_sbrk+0xe>
    errno = ENOMEM;
 80005b8:	f003 fed4 	bl	8004364 <__errno>
 80005bc:	230c      	movs	r3, #12
 80005be:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80005c0:	f04f 30ff 	mov.w	r0, #4294967295
 80005c4:	e7f3      	b.n	80005ae <_sbrk+0x1e>
 80005c6:	bf00      	nop
 80005c8:	20005000 	.word	0x20005000
 80005cc:	00000400 	.word	0x00000400
 80005d0:	200000e0 	.word	0x200000e0
 80005d4:	200021b8 	.word	0x200021b8

080005d8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	4770      	bx	lr
	...

080005dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005dc:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005de:	480a      	ldr	r0, [pc, #40]	; (8000608 <MX_USART2_UART_Init+0x2c>)
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_USART2_UART_Init+0x30>)
 80005e2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80005e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005e8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	2300      	movs	r3, #0
 80005ec:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ee:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f2:	220c      	movs	r2, #12
 80005f4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005fa:	f001 f989 	bl	8001910 <HAL_UART_Init>
 80005fe:	b900      	cbnz	r0, 8000602 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000600:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000602:	f7ff fed9 	bl	80003b8 <Error_Handler>
}
 8000606:	e7fb      	b.n	8000600 <MX_USART2_UART_Init+0x24>
 8000608:	200000e4 	.word	0x200000e4
 800060c:	40004400 	.word	0x40004400

08000610 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000610:	b500      	push	{lr}
 8000612:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	2300      	movs	r3, #0
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	9303      	str	r3, [sp, #12]
 800061a:	9304      	str	r3, [sp, #16]
 800061c:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART2)
 800061e:	6802      	ldr	r2, [r0, #0]
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <HAL_UART_MspInit+0x58>)
 8000622:	429a      	cmp	r2, r3
 8000624:	d002      	beq.n	800062c <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000626:	b007      	add	sp, #28
 8000628:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800062c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8000630:	69da      	ldr	r2, [r3, #28]
 8000632:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000636:	61da      	str	r2, [r3, #28]
 8000638:	69da      	ldr	r2, [r3, #28]
 800063a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800063e:	9200      	str	r2, [sp, #0]
 8000640:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	699a      	ldr	r2, [r3, #24]
 8000644:	f042 0204 	orr.w	r2, r2, #4
 8000648:	619a      	str	r2, [r3, #24]
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000654:	230c      	movs	r3, #12
 8000656:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	a902      	add	r1, sp, #8
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <HAL_UART_MspInit+0x5c>)
 8000662:	f000 f8cb 	bl	80007fc <HAL_GPIO_Init>
}
 8000666:	e7de      	b.n	8000626 <HAL_UART_MspInit+0x16>
 8000668:	40004400 	.word	0x40004400
 800066c:	40010800 	.word	0x40010800

08000670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	; (80006a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	; (80006b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000696:	f7ff ff9f 	bl	80005d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800069a:	f003 ff5f 	bl	800455c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff febd 	bl	800041c <main>
  bx lr
 80006a2:	4770      	bx	lr
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80006ac:	080058d4 	.word	0x080058d4
  ldr r2, =_sbss
 80006b0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80006b4:	200021b4 	.word	0x200021b4

080006b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_2_IRQHandler>
	...

080006bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006bc:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_Init+0x20>)
 80006c0:	6813      	ldr	r3, [r2, #0]
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f000 f81b 	bl	8000704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ce:	200f      	movs	r0, #15
 80006d0:	f7ff fee4 	bl	800049c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d4:	f7ff feb8 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80006d8:	2000      	movs	r0, #0
 80006da:	bd08      	pop	{r3, pc}
 80006dc:	40022000 	.word	0x40022000

080006e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006e0:	4a03      	ldr	r2, [pc, #12]	; (80006f0 <HAL_IncTick+0x10>)
 80006e2:	6811      	ldr	r1, [r2, #0]
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_IncTick+0x14>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	440b      	add	r3, r1
 80006ea:	6013      	str	r3, [r2, #0]
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000128 	.word	0x20000128
 80006f4:	20000008 	.word	0x20000008

080006f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006f8:	4b01      	ldr	r3, [pc, #4]	; (8000700 <HAL_GetTick+0x8>)
 80006fa:	6818      	ldr	r0, [r3, #0]
}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000128 	.word	0x20000128

08000704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000704:	b510      	push	{r4, lr}
 8000706:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000708:	1ec3      	subs	r3, r0, #3
 800070a:	2b04      	cmp	r3, #4
 800070c:	d80f      	bhi.n	800072e <HAL_NVIC_SetPriorityGrouping+0x2a>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000710:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000716:	041b      	lsls	r3, r3, #16
 8000718:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800071a:	0224      	lsls	r4, r4, #8
 800071c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000720:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8000722:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800072a:	60d3      	str	r3, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800072c:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800072e:	2192      	movs	r1, #146	; 0x92
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <HAL_NVIC_SetPriorityGrouping+0x38>)
 8000732:	f7ff fe87 	bl	8000444 <assert_failed>
 8000736:	e7ea      	b.n	800070e <HAL_NVIC_SetPriorityGrouping+0xa>
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	08005670 	.word	0x08005670

08000740 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	4605      	mov	r5, r0
 8000744:	460c      	mov	r4, r1
 8000746:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000748:	2a0f      	cmp	r2, #15
 800074a:	d825      	bhi.n	8000798 <HAL_NVIC_SetPriority+0x58>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800074c:	2c0f      	cmp	r4, #15
 800074e:	d828      	bhi.n	80007a2 <HAL_NVIC_SetPriority+0x62>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <HAL_NVIC_SetPriority+0x80>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000758:	f1c3 0107 	rsb	r1, r3, #7
 800075c:	2904      	cmp	r1, #4
 800075e:	bf28      	it	cs
 8000760:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000762:	1d1a      	adds	r2, r3, #4
 8000764:	2a06      	cmp	r2, #6
 8000766:	d921      	bls.n	80007ac <HAL_NVIC_SetPriority+0x6c>
 8000768:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800076a:	f04f 32ff 	mov.w	r2, #4294967295
 800076e:	fa02 f101 	lsl.w	r1, r2, r1
 8000772:	ea24 0401 	bic.w	r4, r4, r1
 8000776:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) >= 0)
 8000782:	2d00      	cmp	r5, #0
 8000784:	db14      	blt.n	80007b0 <HAL_NVIC_SetPriority+0x70>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000786:	0124      	lsls	r4, r4, #4
 8000788:	b2e4      	uxtb	r4, r4
 800078a:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 800078e:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8000792:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000796:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000798:	21aa      	movs	r1, #170	; 0xaa
 800079a:	480a      	ldr	r0, [pc, #40]	; (80007c4 <HAL_NVIC_SetPriority+0x84>)
 800079c:	f7ff fe52 	bl	8000444 <assert_failed>
 80007a0:	e7d4      	b.n	800074c <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80007a2:	21ab      	movs	r1, #171	; 0xab
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <HAL_NVIC_SetPriority+0x84>)
 80007a6:	f7ff fe4d 	bl	8000444 <assert_failed>
 80007aa:	e7d1      	b.n	8000750 <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ac:	2300      	movs	r3, #0
 80007ae:	e7dc      	b.n	800076a <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	f005 050f 	and.w	r5, r5, #15
 80007b4:	0124      	lsls	r4, r4, #4
 80007b6:	b2e4      	uxtb	r4, r4
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_NVIC_SetPriority+0x88>)
 80007ba:	555c      	strb	r4, [r3, r5]
}
 80007bc:	e7eb      	b.n	8000796 <HAL_NVIC_SetPriority+0x56>
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00
 80007c4:	08005670 	.word	0x08005670
 80007c8:	e000ed14 	.word	0xe000ed14

080007cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007cc:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80007ce:	1e04      	subs	r4, r0, #0
 80007d0:	db0a      	blt.n	80007e8 <HAL_NVIC_EnableIRQ+0x1c>
  if ((int32_t)(IRQn) >= 0)
 80007d2:	2c00      	cmp	r4, #0
 80007d4:	db07      	blt.n	80007e6 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d6:	f004 021f 	and.w	r2, r4, #31
 80007da:	0964      	lsrs	r4, r4, #5
 80007dc:	2301      	movs	r3, #1
 80007de:	4093      	lsls	r3, r2
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_NVIC_EnableIRQ+0x28>)
 80007e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007e6:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80007e8:	21be      	movs	r1, #190	; 0xbe
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <HAL_NVIC_EnableIRQ+0x2c>)
 80007ec:	f7ff fe2a 	bl	8000444 <assert_failed>
 80007f0:	e7ef      	b.n	80007d2 <HAL_NVIC_EnableIRQ+0x6>
 80007f2:	bf00      	nop
 80007f4:	e000e100 	.word	0xe000e100
 80007f8:	08005670 	.word	0x08005670

080007fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000800:	b083      	sub	sp, #12
 8000802:	4607      	mov	r7, r0
 8000804:	460e      	mov	r6, r1
  uint32_t config = 0x00u;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000806:	4b7d      	ldr	r3, [pc, #500]	; (80009fc <HAL_GPIO_Init+0x200>)
 8000808:	4298      	cmp	r0, r3
 800080a:	d013      	beq.n	8000834 <HAL_GPIO_Init+0x38>
 800080c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000810:	4298      	cmp	r0, r3
 8000812:	d00f      	beq.n	8000834 <HAL_GPIO_Init+0x38>
 8000814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000818:	4298      	cmp	r0, r3
 800081a:	d00b      	beq.n	8000834 <HAL_GPIO_Init+0x38>
 800081c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000820:	4298      	cmp	r0, r3
 8000822:	d007      	beq.n	8000834 <HAL_GPIO_Init+0x38>
 8000824:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000828:	4298      	cmp	r0, r3
 800082a:	d003      	beq.n	8000834 <HAL_GPIO_Init+0x38>
 800082c:	21bd      	movs	r1, #189	; 0xbd
 800082e:	4874      	ldr	r0, [pc, #464]	; (8000a00 <HAL_GPIO_Init+0x204>)
 8000830:	f7ff fe08 	bl	8000444 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000834:	6833      	ldr	r3, [r6, #0]
 8000836:	b29a      	uxth	r2, r3
 8000838:	b112      	cbz	r2, 8000840 <HAL_GPIO_Init+0x44>
 800083a:	0c1b      	lsrs	r3, r3, #16
 800083c:	041b      	lsls	r3, r3, #16
 800083e:	b11b      	cbz	r3, 8000848 <HAL_GPIO_Init+0x4c>
 8000840:	21be      	movs	r1, #190	; 0xbe
 8000842:	486f      	ldr	r0, [pc, #444]	; (8000a00 <HAL_GPIO_Init+0x204>)
 8000844:	f7ff fdfe 	bl	8000444 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000848:	6873      	ldr	r3, [r6, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d91e      	bls.n	800088c <HAL_GPIO_Init+0x90>
 800084e:	2b11      	cmp	r3, #17
 8000850:	d01c      	beq.n	800088c <HAL_GPIO_Init+0x90>
 8000852:	2b02      	cmp	r3, #2
 8000854:	d01a      	beq.n	800088c <HAL_GPIO_Init+0x90>
 8000856:	2b12      	cmp	r3, #18
 8000858:	d018      	beq.n	800088c <HAL_GPIO_Init+0x90>
 800085a:	4a6a      	ldr	r2, [pc, #424]	; (8000a04 <HAL_GPIO_Init+0x208>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d015      	beq.n	800088c <HAL_GPIO_Init+0x90>
 8000860:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8000864:	4293      	cmp	r3, r2
 8000866:	d011      	beq.n	800088c <HAL_GPIO_Init+0x90>
 8000868:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 800086c:	4293      	cmp	r3, r2
 800086e:	d00d      	beq.n	800088c <HAL_GPIO_Init+0x90>
 8000870:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 8000874:	4293      	cmp	r3, r2
 8000876:	d009      	beq.n	800088c <HAL_GPIO_Init+0x90>
 8000878:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 800087c:	4293      	cmp	r3, r2
 800087e:	d005      	beq.n	800088c <HAL_GPIO_Init+0x90>
 8000880:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8000884:	4293      	cmp	r3, r2
 8000886:	d001      	beq.n	800088c <HAL_GPIO_Init+0x90>
 8000888:	2b03      	cmp	r3, #3
 800088a:	d103      	bne.n	8000894 <HAL_GPIO_Init+0x98>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800088c:	f04f 0900 	mov.w	r9, #0
 8000890:	464d      	mov	r5, r9
 8000892:	e0ed      	b.n	8000a70 <HAL_GPIO_Init+0x274>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000894:	21bf      	movs	r1, #191	; 0xbf
 8000896:	485a      	ldr	r0, [pc, #360]	; (8000a00 <HAL_GPIO_Init+0x204>)
 8000898:	f7ff fdd4 	bl	8000444 <assert_failed>
 800089c:	e7f6      	b.n	800088c <HAL_GPIO_Init+0x90>
      switch (GPIO_Init->Mode)
 800089e:	4a5a      	ldr	r2, [pc, #360]	; (8000a08 <HAL_GPIO_Init+0x20c>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d010      	beq.n	80008c6 <HAL_GPIO_Init+0xca>
 80008a4:	d907      	bls.n	80008b6 <HAL_GPIO_Init+0xba>
 80008a6:	4a59      	ldr	r2, [pc, #356]	; (8000a0c <HAL_GPIO_Init+0x210>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d00c      	beq.n	80008c6 <HAL_GPIO_Init+0xca>
 80008ac:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d008      	beq.n	80008c6 <HAL_GPIO_Init+0xca>
 80008b4:	e018      	b.n	80008e8 <HAL_GPIO_Init+0xec>
 80008b6:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d003      	beq.n	80008c6 <HAL_GPIO_Init+0xca>
 80008be:	f502 2270 	add.w	r2, r2, #983040	; 0xf0000
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d10c      	bne.n	80008e0 <HAL_GPIO_Init+0xe4>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80008c6:	68b3      	ldr	r3, [r6, #8]
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d87f      	bhi.n	80009cc <HAL_GPIO_Init+0x1d0>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008cc:	68b3      	ldr	r3, [r6, #8]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f000 8088 	beq.w	80009e4 <HAL_GPIO_Init+0x1e8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d07e      	beq.n	80009d6 <HAL_GPIO_Init+0x1da>
            GPIOx->BRR = ioposition;
 80008d8:	617c      	str	r4, [r7, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008da:	f04f 0908 	mov.w	r9, #8
 80008de:	e003      	b.n	80008e8 <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 80008e0:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d0ee      	beq.n	80008c6 <HAL_GPIO_Init+0xca>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008e8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80008ec:	d87d      	bhi.n	80009ea <HAL_GPIO_Init+0x1ee>
 80008ee:	4638      	mov	r0, r7
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80008f4:	d87b      	bhi.n	80009ee <HAL_GPIO_Init+0x1f2>
 80008f6:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008f8:	6803      	ldr	r3, [r0, #0]
 80008fa:	210f      	movs	r1, #15
 80008fc:	4091      	lsls	r1, r2
 80008fe:	ea23 0301 	bic.w	r3, r3, r1
 8000902:	fa09 f202 	lsl.w	r2, r9, r2
 8000906:	4313      	orrs	r3, r2
 8000908:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800090a:	6873      	ldr	r3, [r6, #4]
 800090c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000910:	f000 80ad 	beq.w	8000a6e <HAL_GPIO_Init+0x272>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000914:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <HAL_GPIO_Init+0x214>)
 8000916:	699a      	ldr	r2, [r3, #24]
 8000918:	f042 0201 	orr.w	r2, r2, #1
 800091c:	619a      	str	r2, [r3, #24]
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000928:	08aa      	lsrs	r2, r5, #2
 800092a:	1c91      	adds	r1, r2, #2
 800092c:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <HAL_GPIO_Init+0x218>)
 800092e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000932:	f005 0303 	and.w	r3, r5, #3
 8000936:	0099      	lsls	r1, r3, #2
 8000938:	230f      	movs	r3, #15
 800093a:	408b      	lsls	r3, r1
 800093c:	ea20 0003 	bic.w	r0, r0, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000940:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <HAL_GPIO_Init+0x200>)
 8000942:	429f      	cmp	r7, r3
 8000944:	d068      	beq.n	8000a18 <HAL_GPIO_Init+0x21c>
 8000946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800094a:	429f      	cmp	r7, r3
 800094c:	f000 80e2 	beq.w	8000b14 <HAL_GPIO_Init+0x318>
 8000950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000954:	429f      	cmp	r7, r3
 8000956:	f000 80df 	beq.w	8000b18 <HAL_GPIO_Init+0x31c>
 800095a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800095e:	429f      	cmp	r7, r3
 8000960:	d049      	beq.n	80009f6 <HAL_GPIO_Init+0x1fa>
 8000962:	2304      	movs	r3, #4
 8000964:	e059      	b.n	8000a1a <HAL_GPIO_Init+0x21e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000966:	68f3      	ldr	r3, [r6, #12]
 8000968:	3b01      	subs	r3, #1
 800096a:	2b02      	cmp	r3, #2
 800096c:	d802      	bhi.n	8000974 <HAL_GPIO_Init+0x178>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800096e:	f8d6 900c 	ldr.w	r9, [r6, #12]
          break;
 8000972:	e7b9      	b.n	80008e8 <HAL_GPIO_Init+0xec>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000974:	21d5      	movs	r1, #213	; 0xd5
 8000976:	4822      	ldr	r0, [pc, #136]	; (8000a00 <HAL_GPIO_Init+0x204>)
 8000978:	f7ff fd64 	bl	8000444 <assert_failed>
 800097c:	e7f7      	b.n	800096e <HAL_GPIO_Init+0x172>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800097e:	68f3      	ldr	r3, [r6, #12]
 8000980:	3b01      	subs	r3, #1
 8000982:	2b02      	cmp	r3, #2
 8000984:	d803      	bhi.n	800098e <HAL_GPIO_Init+0x192>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000986:	68f3      	ldr	r3, [r6, #12]
 8000988:	f103 0904 	add.w	r9, r3, #4
          break;
 800098c:	e7ac      	b.n	80008e8 <HAL_GPIO_Init+0xec>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800098e:	21dc      	movs	r1, #220	; 0xdc
 8000990:	481b      	ldr	r0, [pc, #108]	; (8000a00 <HAL_GPIO_Init+0x204>)
 8000992:	f7ff fd57 	bl	8000444 <assert_failed>
 8000996:	e7f6      	b.n	8000986 <HAL_GPIO_Init+0x18a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000998:	68f3      	ldr	r3, [r6, #12]
 800099a:	3b01      	subs	r3, #1
 800099c:	2b02      	cmp	r3, #2
 800099e:	d803      	bhi.n	80009a8 <HAL_GPIO_Init+0x1ac>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009a0:	68f3      	ldr	r3, [r6, #12]
 80009a2:	f103 0908 	add.w	r9, r3, #8
          break;
 80009a6:	e79f      	b.n	80008e8 <HAL_GPIO_Init+0xec>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80009a8:	21e3      	movs	r1, #227	; 0xe3
 80009aa:	4815      	ldr	r0, [pc, #84]	; (8000a00 <HAL_GPIO_Init+0x204>)
 80009ac:	f7ff fd4a 	bl	8000444 <assert_failed>
 80009b0:	e7f6      	b.n	80009a0 <HAL_GPIO_Init+0x1a4>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80009b2:	68f3      	ldr	r3, [r6, #12]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d803      	bhi.n	80009c2 <HAL_GPIO_Init+0x1c6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009ba:	68f3      	ldr	r3, [r6, #12]
 80009bc:	f103 090c 	add.w	r9, r3, #12
          break;
 80009c0:	e792      	b.n	80008e8 <HAL_GPIO_Init+0xec>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80009c2:	21ea      	movs	r1, #234	; 0xea
 80009c4:	480e      	ldr	r0, [pc, #56]	; (8000a00 <HAL_GPIO_Init+0x204>)
 80009c6:	f7ff fd3d 	bl	8000444 <assert_failed>
 80009ca:	e7f6      	b.n	80009ba <HAL_GPIO_Init+0x1be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80009cc:	21f7      	movs	r1, #247	; 0xf7
 80009ce:	480c      	ldr	r0, [pc, #48]	; (8000a00 <HAL_GPIO_Init+0x204>)
 80009d0:	f7ff fd38 	bl	8000444 <assert_failed>
 80009d4:	e77a      	b.n	80008cc <HAL_GPIO_Init+0xd0>
            GPIOx->BSRR = ioposition;
 80009d6:	613c      	str	r4, [r7, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009d8:	f04f 0908 	mov.w	r9, #8
 80009dc:	e784      	b.n	80008e8 <HAL_GPIO_Init+0xec>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009de:	f04f 0900 	mov.w	r9, #0
 80009e2:	e781      	b.n	80008e8 <HAL_GPIO_Init+0xec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009e4:	f04f 0904 	mov.w	r9, #4
 80009e8:	e77e      	b.n	80008e8 <HAL_GPIO_Init+0xec>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009ea:	1d38      	adds	r0, r7, #4
 80009ec:	e780      	b.n	80008f0 <HAL_GPIO_Init+0xf4>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009ee:	f1a5 0208 	sub.w	r2, r5, #8
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	e780      	b.n	80008f8 <HAL_GPIO_Init+0xfc>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009f6:	2303      	movs	r3, #3
 80009f8:	e00f      	b.n	8000a1a <HAL_GPIO_Init+0x21e>
 80009fa:	bf00      	nop
 80009fc:	40010800 	.word	0x40010800
 8000a00:	080056ac 	.word	0x080056ac
 8000a04:	10110000 	.word	0x10110000
 8000a08:	10220000 	.word	0x10220000
 8000a0c:	10310000 	.word	0x10310000
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40010000 	.word	0x40010000
 8000a18:	2300      	movs	r3, #0
 8000a1a:	408b      	lsls	r3, r1
 8000a1c:	4303      	orrs	r3, r0
        AFIO->EXTICR[position >> 2u] = temp;
 8000a1e:	3202      	adds	r2, #2
 8000a20:	494c      	ldr	r1, [pc, #304]	; (8000b54 <HAL_GPIO_Init+0x358>)
 8000a22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a26:	6873      	ldr	r3, [r6, #4]
 8000a28:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000a2c:	d076      	beq.n	8000b1c <HAL_GPIO_Init+0x320>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a2e:	4a4a      	ldr	r2, [pc, #296]	; (8000b58 <HAL_GPIO_Init+0x35c>)
 8000a30:	6813      	ldr	r3, [r2, #0]
 8000a32:	ea43 0308 	orr.w	r3, r3, r8
 8000a36:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a38:	6873      	ldr	r3, [r6, #4]
 8000a3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a3e:	d073      	beq.n	8000b28 <HAL_GPIO_Init+0x32c>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a40:	4a45      	ldr	r2, [pc, #276]	; (8000b58 <HAL_GPIO_Init+0x35c>)
 8000a42:	6853      	ldr	r3, [r2, #4]
 8000a44:	ea43 0308 	orr.w	r3, r3, r8
 8000a48:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4a:	6873      	ldr	r3, [r6, #4]
 8000a4c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a50:	d070      	beq.n	8000b34 <HAL_GPIO_Init+0x338>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a52:	4a41      	ldr	r2, [pc, #260]	; (8000b58 <HAL_GPIO_Init+0x35c>)
 8000a54:	6893      	ldr	r3, [r2, #8]
 8000a56:	ea43 0308 	orr.w	r3, r3, r8
 8000a5a:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a5c:	6873      	ldr	r3, [r6, #4]
 8000a5e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000a62:	d06d      	beq.n	8000b40 <HAL_GPIO_Init+0x344>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a64:	4a3c      	ldr	r2, [pc, #240]	; (8000b58 <HAL_GPIO_Init+0x35c>)
 8000a66:	68d3      	ldr	r3, [r2, #12]
 8000a68:	ea43 0308 	orr.w	r3, r3, r8
 8000a6c:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000a6e:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a70:	6833      	ldr	r3, [r6, #0]
 8000a72:	fa33 f205 	lsrs.w	r2, r3, r5
 8000a76:	d069      	beq.n	8000b4c <HAL_GPIO_Init+0x350>
    ioposition = (0x01uL << position);
 8000a78:	2401      	movs	r4, #1
 8000a7a:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7c:	ea03 0804 	and.w	r8, r3, r4
    if (iocurrent == ioposition)
 8000a80:	ea34 0303 	bics.w	r3, r4, r3
 8000a84:	d1f3      	bne.n	8000a6e <HAL_GPIO_Init+0x272>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000a86:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <HAL_GPIO_Init+0x360>)
 8000a88:	429f      	cmp	r7, r3
 8000a8a:	d013      	beq.n	8000ab4 <HAL_GPIO_Init+0x2b8>
 8000a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000a90:	429f      	cmp	r7, r3
 8000a92:	d00f      	beq.n	8000ab4 <HAL_GPIO_Init+0x2b8>
 8000a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000a98:	429f      	cmp	r7, r3
 8000a9a:	d00b      	beq.n	8000ab4 <HAL_GPIO_Init+0x2b8>
 8000a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000aa0:	429f      	cmp	r7, r3
 8000aa2:	d007      	beq.n	8000ab4 <HAL_GPIO_Init+0x2b8>
 8000aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000aa8:	429f      	cmp	r7, r3
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_Init+0x2b8>
 8000aac:	21cd      	movs	r1, #205	; 0xcd
 8000aae:	482c      	ldr	r0, [pc, #176]	; (8000b60 <HAL_GPIO_Init+0x364>)
 8000ab0:	f7ff fcc8 	bl	8000444 <assert_failed>
      switch (GPIO_Init->Mode)
 8000ab4:	6873      	ldr	r3, [r6, #4]
 8000ab6:	2b12      	cmp	r3, #18
 8000ab8:	f63f aef1 	bhi.w	800089e <HAL_GPIO_Init+0xa2>
 8000abc:	2b12      	cmp	r3, #18
 8000abe:	f63f af13 	bhi.w	80008e8 <HAL_GPIO_Init+0xec>
 8000ac2:	a201      	add	r2, pc, #4	; (adr r2, 8000ac8 <HAL_GPIO_Init+0x2cc>)
 8000ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac8:	080008c7 	.word	0x080008c7
 8000acc:	08000967 	.word	0x08000967
 8000ad0:	08000999 	.word	0x08000999
 8000ad4:	080009df 	.word	0x080009df
 8000ad8:	080008e9 	.word	0x080008e9
 8000adc:	080008e9 	.word	0x080008e9
 8000ae0:	080008e9 	.word	0x080008e9
 8000ae4:	080008e9 	.word	0x080008e9
 8000ae8:	080008e9 	.word	0x080008e9
 8000aec:	080008e9 	.word	0x080008e9
 8000af0:	080008e9 	.word	0x080008e9
 8000af4:	080008e9 	.word	0x080008e9
 8000af8:	080008e9 	.word	0x080008e9
 8000afc:	080008e9 	.word	0x080008e9
 8000b00:	080008e9 	.word	0x080008e9
 8000b04:	080008e9 	.word	0x080008e9
 8000b08:	080008e9 	.word	0x080008e9
 8000b0c:	0800097f 	.word	0x0800097f
 8000b10:	080009b3 	.word	0x080009b3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b14:	2301      	movs	r3, #1
 8000b16:	e780      	b.n	8000a1a <HAL_GPIO_Init+0x21e>
 8000b18:	2302      	movs	r3, #2
 8000b1a:	e77e      	b.n	8000a1a <HAL_GPIO_Init+0x21e>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_GPIO_Init+0x35c>)
 8000b1e:	6813      	ldr	r3, [r2, #0]
 8000b20:	ea23 0308 	bic.w	r3, r3, r8
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e787      	b.n	8000a38 <HAL_GPIO_Init+0x23c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <HAL_GPIO_Init+0x35c>)
 8000b2a:	6853      	ldr	r3, [r2, #4]
 8000b2c:	ea23 0308 	bic.w	r3, r3, r8
 8000b30:	6053      	str	r3, [r2, #4]
 8000b32:	e78a      	b.n	8000a4a <HAL_GPIO_Init+0x24e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_GPIO_Init+0x35c>)
 8000b36:	6893      	ldr	r3, [r2, #8]
 8000b38:	ea23 0308 	bic.w	r3, r3, r8
 8000b3c:	6093      	str	r3, [r2, #8]
 8000b3e:	e78d      	b.n	8000a5c <HAL_GPIO_Init+0x260>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <HAL_GPIO_Init+0x35c>)
 8000b42:	68d3      	ldr	r3, [r2, #12]
 8000b44:	ea23 0308 	bic.w	r3, r3, r8
 8000b48:	60d3      	str	r3, [r2, #12]
 8000b4a:	e790      	b.n	8000a6e <HAL_GPIO_Init+0x272>
  }
}
 8000b4c:	b003      	add	sp, #12
 8000b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b52:	bf00      	nop
 8000b54:	40010000 	.word	0x40010000
 8000b58:	40010400 	.word	0x40010400
 8000b5c:	40010800 	.word	0x40010800
 8000b60:	080056ac 	.word	0x080056ac

08000b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	4605      	mov	r5, r0
 8000b68:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000b6a:	460e      	mov	r6, r1
 8000b6c:	b121      	cbz	r1, 8000b78 <HAL_GPIO_WritePin+0x14>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000b6e:	2c01      	cmp	r4, #1
 8000b70:	d808      	bhi.n	8000b84 <HAL_GPIO_WritePin+0x20>

  if (PinState != GPIO_PIN_RESET)
 8000b72:	b16c      	cbz	r4, 8000b90 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b74:	612e      	str	r6, [r5, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000b78:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <HAL_GPIO_WritePin+0x34>)
 8000b7e:	f7ff fc61 	bl	8000444 <assert_failed>
 8000b82:	e7f4      	b.n	8000b6e <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000b84:	f240 11d5 	movw	r1, #469	; 0x1d5
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <HAL_GPIO_WritePin+0x34>)
 8000b8a:	f7ff fc5b 	bl	8000444 <assert_failed>
 8000b8e:	e7f0      	b.n	8000b72 <HAL_GPIO_WritePin+0xe>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b90:	0436      	lsls	r6, r6, #16
 8000b92:	612e      	str	r6, [r5, #16]
}
 8000b94:	e7ef      	b.n	8000b76 <HAL_GPIO_WritePin+0x12>
 8000b96:	bf00      	nop
 8000b98:	080056ac 	.word	0x080056ac

08000b9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000ba0:	460c      	mov	r4, r1
 8000ba2:	b141      	cbz	r1, 8000bb6 <HAL_GPIO_TogglePin+0x1a>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ba4:	68eb      	ldr	r3, [r5, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ba6:	ea04 0203 	and.w	r2, r4, r3
 8000baa:	ea24 0403 	bic.w	r4, r4, r3
 8000bae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb2:	612c      	str	r4, [r5, #16]
}
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000bb6:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8000bba:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <HAL_GPIO_TogglePin+0x28>)
 8000bbc:	f7ff fc42 	bl	8000444 <assert_failed>
 8000bc0:	e7f0      	b.n	8000ba4 <HAL_GPIO_TogglePin+0x8>
 8000bc2:	bf00      	nop
 8000bc4:	080056ac 	.word	0x080056ac

08000bc8 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bc8:	4770      	bx	lr
	...

08000bcc <HAL_GPIO_EXTI_IRQHandler>:
{
 8000bcc:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	4203      	tst	r3, r0
 8000bd4:	d100      	bne.n	8000bd8 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8000bd6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000bda:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bdc:	f7ff fff4 	bl	8000bc8 <HAL_GPIO_EXTI_Callback>
}
 8000be0:	e7f9      	b.n	8000bd6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000be2:	bf00      	nop
 8000be4:	40010400 	.word	0x40010400

08000be8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000be8:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <RCC_Delay+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <RCC_Delay+0x28>)
 8000bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf4:	0a5b      	lsrs	r3, r3, #9
 8000bf6:	fb00 f303 	mul.w	r3, r0, r3
 8000bfa:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000bfc:	bf00      	nop
  }
  while (Delay --);
 8000bfe:	9b01      	ldr	r3, [sp, #4]
 8000c00:	1e5a      	subs	r2, r3, #1
 8000c02:	9201      	str	r2, [sp, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f9      	bne.n	8000bfc <RCC_Delay+0x14>
}
 8000c08:	b002      	add	sp, #8
 8000c0a:	4770      	bx	lr
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	10624dd3 	.word	0x10624dd3

08000c14 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000c14:	2800      	cmp	r0, #0
 8000c16:	f000 8289 	beq.w	800112c <HAL_RCC_OscConfig+0x518>
{
 8000c1a:	b570      	push	{r4, r5, r6, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000c20:	6803      	ldr	r3, [r0, #0]
 8000c22:	b113      	cbz	r3, 8000c2a <HAL_RCC_OscConfig+0x16>
 8000c24:	f013 0f0f 	tst.w	r3, #15
 8000c28:	d02a      	beq.n	8000c80 <HAL_RCC_OscConfig+0x6c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	f013 0f01 	tst.w	r3, #1
 8000c30:	d040      	beq.n	8000cb4 <HAL_RCC_OscConfig+0xa0>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000c32:	6863      	ldr	r3, [r4, #4]
 8000c34:	b12b      	cbz	r3, 8000c42 <HAL_RCC_OscConfig+0x2e>
 8000c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3a:	d002      	beq.n	8000c42 <HAL_RCC_OscConfig+0x2e>
 8000c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c40:	d124      	bne.n	8000c8c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c42:	4b9c      	ldr	r3, [pc, #624]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d029      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x8e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c4e:	4b99      	ldr	r3, [pc, #612]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	d01e      	beq.n	8000c98 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c5a:	6863      	ldr	r3, [r4, #4]
 8000c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c60:	d055      	beq.n	8000d0e <HAL_RCC_OscConfig+0xfa>
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d169      	bne.n	8000d3a <HAL_RCC_OscConfig+0x126>
 8000c66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c6a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e04b      	b.n	8000d18 <HAL_RCC_OscConfig+0x104>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000c80:	f240 1167 	movw	r1, #359	; 0x167
 8000c84:	488c      	ldr	r0, [pc, #560]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000c86:	f7ff fbdd 	bl	8000444 <assert_failed>
 8000c8a:	e7ce      	b.n	8000c2a <HAL_RCC_OscConfig+0x16>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000c8c:	f240 116d 	movw	r1, #365	; 0x16d
 8000c90:	4889      	ldr	r0, [pc, #548]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000c92:	f7ff fbd7 	bl	8000444 <assert_failed>
 8000c96:	e7d4      	b.n	8000c42 <HAL_RCC_OscConfig+0x2e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c98:	4b86      	ldr	r3, [pc, #536]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ca0:	d0db      	beq.n	8000c5a <HAL_RCC_OscConfig+0x46>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca2:	4b84      	ldr	r3, [pc, #528]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000caa:	d003      	beq.n	8000cb4 <HAL_RCC_OscConfig+0xa0>
 8000cac:	6863      	ldr	r3, [r4, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 823e 	beq.w	8001130 <HAL_RCC_OscConfig+0x51c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cb4:	6823      	ldr	r3, [r4, #0]
 8000cb6:	f013 0f02 	tst.w	r3, #2
 8000cba:	f000 8089 	beq.w	8000dd0 <HAL_RCC_OscConfig+0x1bc>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000cbe:	6923      	ldr	r3, [r4, #16]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d863      	bhi.n	8000d8c <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000cc4:	6963      	ldr	r3, [r4, #20]
 8000cc6:	2b1f      	cmp	r3, #31
 8000cc8:	d866      	bhi.n	8000d98 <HAL_RCC_OscConfig+0x184>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cca:	4b7a      	ldr	r3, [pc, #488]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f013 0f0c 	tst.w	r3, #12
 8000cd2:	d06c      	beq.n	8000dae <HAL_RCC_OscConfig+0x19a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cd4:	4b77      	ldr	r3, [pc, #476]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 030c 	and.w	r3, r3, #12
 8000cdc:	2b08      	cmp	r3, #8
 8000cde:	d061      	beq.n	8000da4 <HAL_RCC_OscConfig+0x190>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce0:	6923      	ldr	r3, [r4, #16]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 809a 	beq.w	8000e1c <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_ENABLE();
 8000ce8:	4b74      	ldr	r3, [pc, #464]	; (8000ebc <HAL_RCC_OscConfig+0x2a8>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cee:	f7ff fd03 	bl	80006f8 <HAL_GetTick>
 8000cf2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf4:	4b6f      	ldr	r3, [pc, #444]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f013 0f02 	tst.w	r3, #2
 8000cfc:	f040 8085 	bne.w	8000e0a <HAL_RCC_OscConfig+0x1f6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d00:	f7ff fcfa 	bl	80006f8 <HAL_GetTick>
 8000d04:	1b40      	subs	r0, r0, r5
 8000d06:	2802      	cmp	r0, #2
 8000d08:	d9f4      	bls.n	8000cf4 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	e215      	b.n	800113a <HAL_RCC_OscConfig+0x526>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0e:	4a69      	ldr	r2, [pc, #420]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000d10:	6813      	ldr	r3, [r2, #0]
 8000d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d16:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d18:	6863      	ldr	r3, [r4, #4]
 8000d1a:	b343      	cbz	r3, 8000d6e <HAL_RCC_OscConfig+0x15a>
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fcec 	bl	80006f8 <HAL_GetTick>
 8000d20:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d22:	4b64      	ldr	r3, [pc, #400]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d2a:	d1c3      	bne.n	8000cb4 <HAL_RCC_OscConfig+0xa0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d2c:	f7ff fce4 	bl	80006f8 <HAL_GetTick>
 8000d30:	1b40      	subs	r0, r0, r5
 8000d32:	2864      	cmp	r0, #100	; 0x64
 8000d34:	d9f5      	bls.n	8000d22 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8000d36:	2003      	movs	r0, #3
 8000d38:	e1ff      	b.n	800113a <HAL_RCC_OscConfig+0x526>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d3e:	d009      	beq.n	8000d54 <HAL_RCC_OscConfig+0x140>
 8000d40:	4b5c      	ldr	r3, [pc, #368]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	e7e1      	b.n	8000d18 <HAL_RCC_OscConfig+0x104>
 8000d54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d58:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e7d4      	b.n	8000d18 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fcc3 	bl	80006f8 <HAL_GetTick>
 8000d72:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d74:	4b4f      	ldr	r3, [pc, #316]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d7c:	d09a      	beq.n	8000cb4 <HAL_RCC_OscConfig+0xa0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d7e:	f7ff fcbb 	bl	80006f8 <HAL_GetTick>
 8000d82:	1b40      	subs	r0, r0, r5
 8000d84:	2864      	cmp	r0, #100	; 0x64
 8000d86:	d9f5      	bls.n	8000d74 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8000d88:	2003      	movs	r0, #3
 8000d8a:	e1d6      	b.n	800113a <HAL_RCC_OscConfig+0x526>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000d8c:	f240 11a1 	movw	r1, #417	; 0x1a1
 8000d90:	4849      	ldr	r0, [pc, #292]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000d92:	f7ff fb57 	bl	8000444 <assert_failed>
 8000d96:	e795      	b.n	8000cc4 <HAL_RCC_OscConfig+0xb0>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000d98:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8000d9c:	4846      	ldr	r0, [pc, #280]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000d9e:	f7ff fb51 	bl	8000444 <assert_failed>
 8000da2:	e792      	b.n	8000cca <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000da4:	4b43      	ldr	r3, [pc, #268]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000dac:	d198      	bne.n	8000ce0 <HAL_RCC_OscConfig+0xcc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dae:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f013 0f02 	tst.w	r3, #2
 8000db6:	d003      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x1ac>
 8000db8:	6923      	ldr	r3, [r4, #16]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	f040 81ba 	bne.w	8001134 <HAL_RCC_OscConfig+0x520>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc0:	4a3c      	ldr	r2, [pc, #240]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000dc2:	6813      	ldr	r3, [r2, #0]
 8000dc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dc8:	6961      	ldr	r1, [r4, #20]
 8000dca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dce:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	f013 0f08 	tst.w	r3, #8
 8000dd6:	d03c      	beq.n	8000e52 <HAL_RCC_OscConfig+0x23e>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000dd8:	69a3      	ldr	r3, [r4, #24]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d830      	bhi.n	8000e40 <HAL_RCC_OscConfig+0x22c>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dde:	69a3      	ldr	r3, [r4, #24]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d06f      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSI_ENABLE();
 8000de4:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <HAL_RCC_OscConfig+0x2a8>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000dec:	f7ff fc84 	bl	80006f8 <HAL_GetTick>
 8000df0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df2:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f013 0f02 	tst.w	r3, #2
 8000dfa:	d127      	bne.n	8000e4c <HAL_RCC_OscConfig+0x238>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fc7c 	bl	80006f8 <HAL_GetTick>
 8000e00:	1b40      	subs	r0, r0, r5
 8000e02:	2802      	cmp	r0, #2
 8000e04:	d9f5      	bls.n	8000df2 <HAL_RCC_OscConfig+0x1de>
          return HAL_TIMEOUT;
 8000e06:	2003      	movs	r0, #3
 8000e08:	e197      	b.n	800113a <HAL_RCC_OscConfig+0x526>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0a:	4a2a      	ldr	r2, [pc, #168]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000e0c:	6813      	ldr	r3, [r2, #0]
 8000e0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e12:	6961      	ldr	r1, [r4, #20]
 8000e14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e7d9      	b.n	8000dd0 <HAL_RCC_OscConfig+0x1bc>
        __HAL_RCC_HSI_DISABLE();
 8000e1c:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <HAL_RCC_OscConfig+0x2a8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e22:	f7ff fc69 	bl	80006f8 <HAL_GetTick>
 8000e26:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f013 0f02 	tst.w	r3, #2
 8000e30:	d0ce      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x1bc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e32:	f7ff fc61 	bl	80006f8 <HAL_GetTick>
 8000e36:	1b40      	subs	r0, r0, r5
 8000e38:	2802      	cmp	r0, #2
 8000e3a:	d9f5      	bls.n	8000e28 <HAL_RCC_OscConfig+0x214>
            return HAL_TIMEOUT;
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	e17c      	b.n	800113a <HAL_RCC_OscConfig+0x526>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000e40:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8000e44:	481c      	ldr	r0, [pc, #112]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e46:	f7ff fafd 	bl	8000444 <assert_failed>
 8000e4a:	e7c8      	b.n	8000dde <HAL_RCC_OscConfig+0x1ca>
      RCC_Delay(1);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fecb 	bl	8000be8 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	f013 0f04 	tst.w	r3, #4
 8000e58:	f000 80a4 	beq.w	8000fa4 <HAL_RCC_OscConfig+0x390>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000e5c:	68e3      	ldr	r3, [r4, #12]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x252>
 8000e62:	2b05      	cmp	r3, #5
 8000e64:	d141      	bne.n	8000eea <HAL_RCC_OscConfig+0x2d6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000e6e:	d142      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_RCC_OscConfig+0x2a0>)
 8000e72:	69da      	ldr	r2, [r3, #28]
 8000e74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e78:	61da      	str	r2, [r3, #28]
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e84:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e8e:	d034      	beq.n	8000efa <HAL_RCC_OscConfig+0x2e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e90:	68e3      	ldr	r3, [r4, #12]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d045      	beq.n	8000f22 <HAL_RCC_OscConfig+0x30e>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d15b      	bne.n	8000f52 <HAL_RCC_OscConfig+0x33e>
 8000e9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e9e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000ea2:	6a1a      	ldr	r2, [r3, #32]
 8000ea4:	f022 0201 	bic.w	r2, r2, #1
 8000ea8:	621a      	str	r2, [r3, #32]
 8000eaa:	6a1a      	ldr	r2, [r3, #32]
 8000eac:	f022 0204 	bic.w	r2, r2, #4
 8000eb0:	621a      	str	r2, [r3, #32]
 8000eb2:	e03b      	b.n	8000f2c <HAL_RCC_OscConfig+0x318>
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	080056e8 	.word	0x080056e8
 8000ebc:	42420000 	.word	0x42420000
 8000ec0:	40007000 	.word	0x40007000
      __HAL_RCC_LSI_DISABLE();
 8000ec4:	4ba1      	ldr	r3, [pc, #644]	; (800114c <HAL_RCC_OscConfig+0x538>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fc14 	bl	80006f8 <HAL_GetTick>
 8000ed0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed2:	4b9f      	ldr	r3, [pc, #636]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed6:	f013 0f02 	tst.w	r3, #2
 8000eda:	d0ba      	beq.n	8000e52 <HAL_RCC_OscConfig+0x23e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000edc:	f7ff fc0c 	bl	80006f8 <HAL_GetTick>
 8000ee0:	1b40      	subs	r0, r0, r5
 8000ee2:	2802      	cmp	r0, #2
 8000ee4:	d9f5      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	e127      	b.n	800113a <HAL_RCC_OscConfig+0x526>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000eea:	f240 2111 	movw	r1, #529	; 0x211
 8000eee:	4899      	ldr	r0, [pc, #612]	; (8001154 <HAL_RCC_OscConfig+0x540>)
 8000ef0:	f7ff faa8 	bl	8000444 <assert_failed>
 8000ef4:	e7b7      	b.n	8000e66 <HAL_RCC_OscConfig+0x252>
    FlagStatus       pwrclkchanged = RESET;
 8000ef6:	2500      	movs	r5, #0
 8000ef8:	e7c5      	b.n	8000e86 <HAL_RCC_OscConfig+0x272>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000efa:	4a97      	ldr	r2, [pc, #604]	; (8001158 <HAL_RCC_OscConfig+0x544>)
 8000efc:	6813      	ldr	r3, [r2, #0]
 8000efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f02:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f04:	f7ff fbf8 	bl	80006f8 <HAL_GetTick>
 8000f08:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0a:	4b93      	ldr	r3, [pc, #588]	; (8001158 <HAL_RCC_OscConfig+0x544>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f12:	d1bd      	bne.n	8000e90 <HAL_RCC_OscConfig+0x27c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f14:	f7ff fbf0 	bl	80006f8 <HAL_GetTick>
 8000f18:	1b80      	subs	r0, r0, r6
 8000f1a:	2864      	cmp	r0, #100	; 0x64
 8000f1c:	d9f5      	bls.n	8000f0a <HAL_RCC_OscConfig+0x2f6>
          return HAL_TIMEOUT;
 8000f1e:	2003      	movs	r0, #3
 8000f20:	e10b      	b.n	800113a <HAL_RCC_OscConfig+0x526>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f22:	4a8b      	ldr	r2, [pc, #556]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 8000f24:	6a13      	ldr	r3, [r2, #32]
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f2c:	68e3      	ldr	r3, [r4, #12]
 8000f2e:	b333      	cbz	r3, 8000f7e <HAL_RCC_OscConfig+0x36a>
      tickstart = HAL_GetTick();
 8000f30:	f7ff fbe2 	bl	80006f8 <HAL_GetTick>
 8000f34:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f36:	4b86      	ldr	r3, [pc, #536]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	f013 0f02 	tst.w	r3, #2
 8000f3e:	d12f      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x38c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f40:	f7ff fbda 	bl	80006f8 <HAL_GetTick>
 8000f44:	1b80      	subs	r0, r0, r6
 8000f46:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	d9f3      	bls.n	8000f36 <HAL_RCC_OscConfig+0x322>
          return HAL_TIMEOUT;
 8000f4e:	2003      	movs	r0, #3
 8000f50:	e0f3      	b.n	800113a <HAL_RCC_OscConfig+0x526>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d009      	beq.n	8000f6a <HAL_RCC_OscConfig+0x356>
 8000f56:	4b7e      	ldr	r3, [pc, #504]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 8000f58:	6a1a      	ldr	r2, [r3, #32]
 8000f5a:	f022 0201 	bic.w	r2, r2, #1
 8000f5e:	621a      	str	r2, [r3, #32]
 8000f60:	6a1a      	ldr	r2, [r3, #32]
 8000f62:	f022 0204 	bic.w	r2, r2, #4
 8000f66:	621a      	str	r2, [r3, #32]
 8000f68:	e7e0      	b.n	8000f2c <HAL_RCC_OscConfig+0x318>
 8000f6a:	4b79      	ldr	r3, [pc, #484]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 8000f6c:	6a1a      	ldr	r2, [r3, #32]
 8000f6e:	f042 0204 	orr.w	r2, r2, #4
 8000f72:	621a      	str	r2, [r3, #32]
 8000f74:	6a1a      	ldr	r2, [r3, #32]
 8000f76:	f042 0201 	orr.w	r2, r2, #1
 8000f7a:	621a      	str	r2, [r3, #32]
 8000f7c:	e7d6      	b.n	8000f2c <HAL_RCC_OscConfig+0x318>
      tickstart = HAL_GetTick();
 8000f7e:	f7ff fbbb 	bl	80006f8 <HAL_GetTick>
 8000f82:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f84:	4b72      	ldr	r3, [pc, #456]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f013 0f02 	tst.w	r3, #2
 8000f8c:	d008      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x38c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f8e:	f7ff fbb3 	bl	80006f8 <HAL_GetTick>
 8000f92:	1b80      	subs	r0, r0, r6
 8000f94:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d9f3      	bls.n	8000f84 <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	e0cc      	b.n	800113a <HAL_RCC_OscConfig+0x526>
    if (pwrclkchanged == SET)
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d153      	bne.n	800104c <HAL_RCC_OscConfig+0x438>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000fa4:	69e3      	ldr	r3, [r4, #28]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d856      	bhi.n	8001058 <HAL_RCC_OscConfig+0x444>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000faa:	69e3      	ldr	r3, [r4, #28]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80c3 	beq.w	8001138 <HAL_RCC_OscConfig+0x524>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fb2:	4a67      	ldr	r2, [pc, #412]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 8000fb4:	6852      	ldr	r2, [r2, #4]
 8000fb6:	f002 020c 	and.w	r2, r2, #12
 8000fba:	2a08      	cmp	r2, #8
 8000fbc:	f000 80a6 	beq.w	800110c <HAL_RCC_OscConfig+0x4f8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	f040 808f 	bne.w	80010e4 <HAL_RCC_OscConfig+0x4d0>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8000fc6:	6a23      	ldr	r3, [r4, #32]
 8000fc8:	b113      	cbz	r3, 8000fd0 <HAL_RCC_OscConfig+0x3bc>
 8000fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fce:	d149      	bne.n	8001064 <HAL_RCC_OscConfig+0x450>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8000fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fd2:	b34b      	cbz	r3, 8001028 <HAL_RCC_OscConfig+0x414>
 8000fd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fd8:	d026      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 8000fda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000fde:	d023      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 8000fe0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000fe4:	d020      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 8000fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000fea:	d01d      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 8000fec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8000ff0:	d01a      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 8000ff2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000ff6:	d017      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 8000ff8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8000ffc:	d014      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 8000ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001002:	d011      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 8001004:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001008:	d00e      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 800100a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800100e:	d00b      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 8001010:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001014:	d008      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 8001016:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800101a:	d005      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 800101c:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001020:	d002      	beq.n	8001028 <HAL_RCC_OscConfig+0x414>
 8001022:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001026:	d123      	bne.n	8001070 <HAL_RCC_OscConfig+0x45c>
        __HAL_RCC_PLL_DISABLE();
 8001028:	4b48      	ldr	r3, [pc, #288]	; (800114c <HAL_RCC_OscConfig+0x538>)
 800102a:	2200      	movs	r2, #0
 800102c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800102e:	f7ff fb63 	bl	80006f8 <HAL_GetTick>
 8001032:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001034:	4b46      	ldr	r3, [pc, #280]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800103c:	d01e      	beq.n	800107c <HAL_RCC_OscConfig+0x468>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103e:	f7ff fb5b 	bl	80006f8 <HAL_GetTick>
 8001042:	1b40      	subs	r0, r0, r5
 8001044:	2802      	cmp	r0, #2
 8001046:	d9f5      	bls.n	8001034 <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8001048:	2003      	movs	r0, #3
 800104a:	e076      	b.n	800113a <HAL_RCC_OscConfig+0x526>
      __HAL_RCC_PWR_CLK_DISABLE();
 800104c:	4a40      	ldr	r2, [pc, #256]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 800104e:	69d3      	ldr	r3, [r2, #28]
 8001050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	e7a5      	b.n	8000fa4 <HAL_RCC_OscConfig+0x390>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001058:	f240 21af 	movw	r1, #687	; 0x2af
 800105c:	483d      	ldr	r0, [pc, #244]	; (8001154 <HAL_RCC_OscConfig+0x540>)
 800105e:	f7ff f9f1 	bl	8000444 <assert_failed>
 8001062:	e7a2      	b.n	8000faa <HAL_RCC_OscConfig+0x396>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001064:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001068:	483a      	ldr	r0, [pc, #232]	; (8001154 <HAL_RCC_OscConfig+0x540>)
 800106a:	f7ff f9eb 	bl	8000444 <assert_failed>
 800106e:	e7af      	b.n	8000fd0 <HAL_RCC_OscConfig+0x3bc>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001070:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001074:	4837      	ldr	r0, [pc, #220]	; (8001154 <HAL_RCC_OscConfig+0x540>)
 8001076:	f7ff f9e5 	bl	8000444 <assert_failed>
 800107a:	e7d5      	b.n	8001028 <HAL_RCC_OscConfig+0x414>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800107c:	6a23      	ldr	r3, [r4, #32]
 800107e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001082:	d01a      	beq.n	80010ba <HAL_RCC_OscConfig+0x4a6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001084:	4932      	ldr	r1, [pc, #200]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 8001086:	684b      	ldr	r3, [r1, #4]
 8001088:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800108c:	6a22      	ldr	r2, [r4, #32]
 800108e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001090:	4302      	orrs	r2, r0
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_RCC_OscConfig+0x538>)
 8001098:	2201      	movs	r2, #1
 800109a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800109c:	f7ff fb2c 	bl	80006f8 <HAL_GetTick>
 80010a0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a2:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010aa:	d119      	bne.n	80010e0 <HAL_RCC_OscConfig+0x4cc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff fb24 	bl	80006f8 <HAL_GetTick>
 80010b0:	1b00      	subs	r0, r0, r4
 80010b2:	2802      	cmp	r0, #2
 80010b4:	d9f5      	bls.n	80010a2 <HAL_RCC_OscConfig+0x48e>
            return HAL_TIMEOUT;
 80010b6:	2003      	movs	r0, #3
 80010b8:	e03f      	b.n	800113a <HAL_RCC_OscConfig+0x526>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80010ba:	68a3      	ldr	r3, [r4, #8]
 80010bc:	b113      	cbz	r3, 80010c4 <HAL_RCC_OscConfig+0x4b0>
 80010be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010c2:	d107      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010c4:	4a22      	ldr	r2, [pc, #136]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 80010c6:	6853      	ldr	r3, [r2, #4]
 80010c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010cc:	68a1      	ldr	r1, [r4, #8]
 80010ce:	430b      	orrs	r3, r1
 80010d0:	6053      	str	r3, [r2, #4]
 80010d2:	e7d7      	b.n	8001084 <HAL_RCC_OscConfig+0x470>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80010d4:	f240 21cf 	movw	r1, #719	; 0x2cf
 80010d8:	481e      	ldr	r0, [pc, #120]	; (8001154 <HAL_RCC_OscConfig+0x540>)
 80010da:	f7ff f9b3 	bl	8000444 <assert_failed>
 80010de:	e7f1      	b.n	80010c4 <HAL_RCC_OscConfig+0x4b0>
  return HAL_OK;
 80010e0:	2000      	movs	r0, #0
 80010e2:	e02a      	b.n	800113a <HAL_RCC_OscConfig+0x526>
        __HAL_RCC_PLL_DISABLE();
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_RCC_OscConfig+0x538>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80010ea:	f7ff fb05 	bl	80006f8 <HAL_GetTick>
 80010ee:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010f8:	d006      	beq.n	8001108 <HAL_RCC_OscConfig+0x4f4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fa:	f7ff fafd 	bl	80006f8 <HAL_GetTick>
 80010fe:	1b00      	subs	r0, r0, r4
 8001100:	2802      	cmp	r0, #2
 8001102:	d9f5      	bls.n	80010f0 <HAL_RCC_OscConfig+0x4dc>
            return HAL_TIMEOUT;
 8001104:	2003      	movs	r0, #3
 8001106:	e018      	b.n	800113a <HAL_RCC_OscConfig+0x526>
  return HAL_OK;
 8001108:	2000      	movs	r0, #0
 800110a:	e016      	b.n	800113a <HAL_RCC_OscConfig+0x526>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800110c:	2b01      	cmp	r3, #1
 800110e:	d016      	beq.n	800113e <HAL_RCC_OscConfig+0x52a>
        pll_config = RCC->CFGR;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_RCC_OscConfig+0x53c>)
 8001112:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001114:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001118:	6a22      	ldr	r2, [r4, #32]
 800111a:	4291      	cmp	r1, r2
 800111c:	d111      	bne.n	8001142 <HAL_RCC_OscConfig+0x52e>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800111e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001122:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001124:	4293      	cmp	r3, r2
 8001126:	d10e      	bne.n	8001146 <HAL_RCC_OscConfig+0x532>
  return HAL_OK;
 8001128:	2000      	movs	r0, #0
 800112a:	e006      	b.n	800113a <HAL_RCC_OscConfig+0x526>
    return HAL_ERROR;
 800112c:	2001      	movs	r0, #1
}
 800112e:	4770      	bx	lr
        return HAL_ERROR;
 8001130:	2001      	movs	r0, #1
 8001132:	e002      	b.n	800113a <HAL_RCC_OscConfig+0x526>
        return HAL_ERROR;
 8001134:	2001      	movs	r0, #1
 8001136:	e000      	b.n	800113a <HAL_RCC_OscConfig+0x526>
  return HAL_OK;
 8001138:	2000      	movs	r0, #0
}
 800113a:	b002      	add	sp, #8
 800113c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800113e:	2001      	movs	r0, #1
 8001140:	e7fb      	b.n	800113a <HAL_RCC_OscConfig+0x526>
          return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
 8001144:	e7f9      	b.n	800113a <HAL_RCC_OscConfig+0x526>
 8001146:	2001      	movs	r0, #1
 8001148:	e7f7      	b.n	800113a <HAL_RCC_OscConfig+0x526>
 800114a:	bf00      	nop
 800114c:	42420000 	.word	0x42420000
 8001150:	40021000 	.word	0x40021000
 8001154:	080056e8 	.word	0x080056e8
 8001158:	40007000 	.word	0x40007000

0800115c <HAL_RCC_GetSysClockFreq>:
{
 800115c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_RCC_GetSysClockFreq+0x60>)
 8001160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001162:	f10d 0c18 	add.w	ip, sp, #24
 8001166:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800116a:	f240 2301 	movw	r3, #513	; 0x201
 800116e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001174:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001176:	f003 020c 	and.w	r2, r3, #12
 800117a:	2a08      	cmp	r2, #8
 800117c:	d002      	beq.n	8001184 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 800117e:	4811      	ldr	r0, [pc, #68]	; (80011c4 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001180:	b006      	add	sp, #24
 8001182:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001184:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001188:	3218      	adds	r2, #24
 800118a:	446a      	add	r2, sp
 800118c:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001190:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001194:	d00d      	beq.n	80011b2 <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800119e:	3318      	adds	r3, #24
 80011a0:	446b      	add	r3, sp
 80011a2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011a6:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_RCC_GetSysClockFreq+0x68>)
 80011a8:	fb02 f000 	mul.w	r0, r2, r0
 80011ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80011b0:	e7e6      	b.n	8001180 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x6c>)
 80011b4:	fb03 f000 	mul.w	r0, r3, r0
 80011b8:	e7e2      	b.n	8001180 <HAL_RCC_GetSysClockFreq+0x24>
 80011ba:	bf00      	nop
 80011bc:	08005720 	.word	0x08005720
 80011c0:	40021000 	.word	0x40021000
 80011c4:	007a1200 	.word	0x007a1200
 80011c8:	003d0900 	.word	0x003d0900

080011cc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80011cc:	2800      	cmp	r0, #0
 80011ce:	f000 80fc 	beq.w	80013ca <HAL_RCC_ClockConfig+0x1fe>
{
 80011d2:	b570      	push	{r4, r5, r6, lr}
 80011d4:	460d      	mov	r5, r1
 80011d6:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80011d8:	6803      	ldr	r3, [r0, #0]
 80011da:	f013 0f0f 	tst.w	r3, #15
 80011de:	d06d      	beq.n	80012bc <HAL_RCC_ClockConfig+0xf0>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80011e0:	2d02      	cmp	r5, #2
 80011e2:	d871      	bhi.n	80012c8 <HAL_RCC_ClockConfig+0xfc>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e4:	4b7d      	ldr	r3, [pc, #500]	; (80013dc <HAL_RCC_ClockConfig+0x210>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	42ab      	cmp	r3, r5
 80011ee:	d20b      	bcs.n	8001208 <HAL_RCC_ClockConfig+0x3c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f0:	4a7a      	ldr	r2, [pc, #488]	; (80013dc <HAL_RCC_ClockConfig+0x210>)
 80011f2:	6813      	ldr	r3, [r2, #0]
 80011f4:	f023 0307 	bic.w	r3, r3, #7
 80011f8:	432b      	orrs	r3, r5
 80011fa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fc:	6813      	ldr	r3, [r2, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	42ab      	cmp	r3, r5
 8001204:	f040 80e3 	bne.w	80013ce <HAL_RCC_ClockConfig+0x202>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	f013 0f02 	tst.w	r3, #2
 800120e:	d029      	beq.n	8001264 <HAL_RCC_ClockConfig+0x98>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	f013 0f04 	tst.w	r3, #4
 8001214:	d004      	beq.n	8001220 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001216:	4a72      	ldr	r2, [pc, #456]	; (80013e0 <HAL_RCC_ClockConfig+0x214>)
 8001218:	6853      	ldr	r3, [r2, #4]
 800121a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800121e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	f013 0f08 	tst.w	r3, #8
 8001226:	d004      	beq.n	8001232 <HAL_RCC_ClockConfig+0x66>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001228:	4a6d      	ldr	r2, [pc, #436]	; (80013e0 <HAL_RCC_ClockConfig+0x214>)
 800122a:	6853      	ldr	r3, [r2, #4]
 800122c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001230:	6053      	str	r3, [r2, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001232:	68a3      	ldr	r3, [r4, #8]
 8001234:	b17b      	cbz	r3, 8001256 <HAL_RCC_ClockConfig+0x8a>
 8001236:	2b80      	cmp	r3, #128	; 0x80
 8001238:	d00d      	beq.n	8001256 <HAL_RCC_ClockConfig+0x8a>
 800123a:	2b90      	cmp	r3, #144	; 0x90
 800123c:	d00b      	beq.n	8001256 <HAL_RCC_ClockConfig+0x8a>
 800123e:	2ba0      	cmp	r3, #160	; 0xa0
 8001240:	d009      	beq.n	8001256 <HAL_RCC_ClockConfig+0x8a>
 8001242:	2bb0      	cmp	r3, #176	; 0xb0
 8001244:	d007      	beq.n	8001256 <HAL_RCC_ClockConfig+0x8a>
 8001246:	2bc0      	cmp	r3, #192	; 0xc0
 8001248:	d005      	beq.n	8001256 <HAL_RCC_ClockConfig+0x8a>
 800124a:	2bd0      	cmp	r3, #208	; 0xd0
 800124c:	d003      	beq.n	8001256 <HAL_RCC_ClockConfig+0x8a>
 800124e:	2be0      	cmp	r3, #224	; 0xe0
 8001250:	d001      	beq.n	8001256 <HAL_RCC_ClockConfig+0x8a>
 8001252:	2bf0      	cmp	r3, #240	; 0xf0
 8001254:	d13e      	bne.n	80012d4 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001256:	4a62      	ldr	r2, [pc, #392]	; (80013e0 <HAL_RCC_ClockConfig+0x214>)
 8001258:	6853      	ldr	r3, [r2, #4]
 800125a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800125e:	68a1      	ldr	r1, [r4, #8]
 8001260:	430b      	orrs	r3, r1
 8001262:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	f013 0f01 	tst.w	r3, #1
 800126a:	d04d      	beq.n	8001308 <HAL_RCC_ClockConfig+0x13c>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800126c:	6863      	ldr	r3, [r4, #4]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d836      	bhi.n	80012e0 <HAL_RCC_ClockConfig+0x114>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001272:	6863      	ldr	r3, [r4, #4]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d039      	beq.n	80012ec <HAL_RCC_ClockConfig+0x120>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001278:	2b02      	cmp	r3, #2
 800127a:	d03e      	beq.n	80012fa <HAL_RCC_ClockConfig+0x12e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	4a58      	ldr	r2, [pc, #352]	; (80013e0 <HAL_RCC_ClockConfig+0x214>)
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	f012 0f02 	tst.w	r2, #2
 8001284:	f000 80a5 	beq.w	80013d2 <HAL_RCC_ClockConfig+0x206>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001288:	4955      	ldr	r1, [pc, #340]	; (80013e0 <HAL_RCC_ClockConfig+0x214>)
 800128a:	684a      	ldr	r2, [r1, #4]
 800128c:	f022 0203 	bic.w	r2, r2, #3
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001294:	f7ff fa30 	bl	80006f8 <HAL_GetTick>
 8001298:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129a:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <HAL_RCC_ClockConfig+0x214>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	6862      	ldr	r2, [r4, #4]
 80012a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012a8:	d02e      	beq.n	8001308 <HAL_RCC_ClockConfig+0x13c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012aa:	f7ff fa25 	bl	80006f8 <HAL_GetTick>
 80012ae:	1b80      	subs	r0, r0, r6
 80012b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80012b4:	4298      	cmp	r0, r3
 80012b6:	d9f0      	bls.n	800129a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80012b8:	2003      	movs	r0, #3
 80012ba:	e079      	b.n	80013b0 <HAL_RCC_ClockConfig+0x1e4>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80012bc:	f44f 714e 	mov.w	r1, #824	; 0x338
 80012c0:	4848      	ldr	r0, [pc, #288]	; (80013e4 <HAL_RCC_ClockConfig+0x218>)
 80012c2:	f7ff f8bf 	bl	8000444 <assert_failed>
 80012c6:	e78b      	b.n	80011e0 <HAL_RCC_ClockConfig+0x14>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80012c8:	f240 3139 	movw	r1, #825	; 0x339
 80012cc:	4845      	ldr	r0, [pc, #276]	; (80013e4 <HAL_RCC_ClockConfig+0x218>)
 80012ce:	f7ff f8b9 	bl	8000444 <assert_failed>
 80012d2:	e787      	b.n	80011e4 <HAL_RCC_ClockConfig+0x18>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80012d4:	f240 315f 	movw	r1, #863	; 0x35f
 80012d8:	4842      	ldr	r0, [pc, #264]	; (80013e4 <HAL_RCC_ClockConfig+0x218>)
 80012da:	f7ff f8b3 	bl	8000444 <assert_failed>
 80012de:	e7ba      	b.n	8001256 <HAL_RCC_ClockConfig+0x8a>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80012e0:	f240 3166 	movw	r1, #870	; 0x366
 80012e4:	483f      	ldr	r0, [pc, #252]	; (80013e4 <HAL_RCC_ClockConfig+0x218>)
 80012e6:	f7ff f8ad 	bl	8000444 <assert_failed>
 80012ea:	e7c2      	b.n	8001272 <HAL_RCC_ClockConfig+0xa6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ec:	4a3c      	ldr	r2, [pc, #240]	; (80013e0 <HAL_RCC_ClockConfig+0x214>)
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80012f4:	d1c8      	bne.n	8001288 <HAL_RCC_ClockConfig+0xbc>
        return HAL_ERROR;
 80012f6:	2001      	movs	r0, #1
 80012f8:	e05a      	b.n	80013b0 <HAL_RCC_ClockConfig+0x1e4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fa:	4a39      	ldr	r2, [pc, #228]	; (80013e0 <HAL_RCC_ClockConfig+0x214>)
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001302:	d1c1      	bne.n	8001288 <HAL_RCC_ClockConfig+0xbc>
        return HAL_ERROR;
 8001304:	2001      	movs	r0, #1
 8001306:	e053      	b.n	80013b0 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001308:	4b34      	ldr	r3, [pc, #208]	; (80013dc <HAL_RCC_ClockConfig+0x210>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	42ab      	cmp	r3, r5
 8001312:	d90a      	bls.n	800132a <HAL_RCC_ClockConfig+0x15e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001314:	4a31      	ldr	r2, [pc, #196]	; (80013dc <HAL_RCC_ClockConfig+0x210>)
 8001316:	6813      	ldr	r3, [r2, #0]
 8001318:	f023 0307 	bic.w	r3, r3, #7
 800131c:	432b      	orrs	r3, r5
 800131e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001320:	6813      	ldr	r3, [r2, #0]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	42ab      	cmp	r3, r5
 8001328:	d155      	bne.n	80013d6 <HAL_RCC_ClockConfig+0x20a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	f013 0f04 	tst.w	r3, #4
 8001330:	d014      	beq.n	800135c <HAL_RCC_ClockConfig+0x190>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001332:	68e3      	ldr	r3, [r4, #12]
 8001334:	b15b      	cbz	r3, 800134e <HAL_RCC_ClockConfig+0x182>
 8001336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133a:	d008      	beq.n	800134e <HAL_RCC_ClockConfig+0x182>
 800133c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001340:	d005      	beq.n	800134e <HAL_RCC_ClockConfig+0x182>
 8001342:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001346:	d002      	beq.n	800134e <HAL_RCC_ClockConfig+0x182>
 8001348:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800134c:	d131      	bne.n	80013b2 <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800134e:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <HAL_RCC_ClockConfig+0x214>)
 8001350:	6853      	ldr	r3, [r2, #4]
 8001352:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001356:	68e1      	ldr	r1, [r4, #12]
 8001358:	430b      	orrs	r3, r1
 800135a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	f013 0f08 	tst.w	r3, #8
 8001362:	d015      	beq.n	8001390 <HAL_RCC_ClockConfig+0x1c4>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001364:	6923      	ldr	r3, [r4, #16]
 8001366:	b15b      	cbz	r3, 8001380 <HAL_RCC_ClockConfig+0x1b4>
 8001368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136c:	d008      	beq.n	8001380 <HAL_RCC_ClockConfig+0x1b4>
 800136e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001372:	d005      	beq.n	8001380 <HAL_RCC_ClockConfig+0x1b4>
 8001374:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001378:	d002      	beq.n	8001380 <HAL_RCC_ClockConfig+0x1b4>
 800137a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800137e:	d11e      	bne.n	80013be <HAL_RCC_ClockConfig+0x1f2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001380:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_RCC_ClockConfig+0x214>)
 8001382:	6853      	ldr	r3, [r2, #4]
 8001384:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001388:	6921      	ldr	r1, [r4, #16]
 800138a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800138e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001390:	f7ff fee4 	bl	800115c <HAL_RCC_GetSysClockFreq>
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_RCC_ClockConfig+0x214>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <HAL_RCC_ClockConfig+0x21c>)
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	40d8      	lsrs	r0, r3
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_RCC_ClockConfig+0x220>)
 80013a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_RCC_ClockConfig+0x224>)
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	f7ff f877 	bl	800049c <HAL_InitTick>
  return HAL_OK;
 80013ae:	2000      	movs	r0, #0
}
 80013b0:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80013b2:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80013b6:	480b      	ldr	r0, [pc, #44]	; (80013e4 <HAL_RCC_ClockConfig+0x218>)
 80013b8:	f7ff f844 	bl	8000444 <assert_failed>
 80013bc:	e7c7      	b.n	800134e <HAL_RCC_ClockConfig+0x182>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80013be:	f240 31ab 	movw	r1, #939	; 0x3ab
 80013c2:	4808      	ldr	r0, [pc, #32]	; (80013e4 <HAL_RCC_ClockConfig+0x218>)
 80013c4:	f7ff f83e 	bl	8000444 <assert_failed>
 80013c8:	e7da      	b.n	8001380 <HAL_RCC_ClockConfig+0x1b4>
    return HAL_ERROR;
 80013ca:	2001      	movs	r0, #1
}
 80013cc:	4770      	bx	lr
    return HAL_ERROR;
 80013ce:	2001      	movs	r0, #1
 80013d0:	e7ee      	b.n	80013b0 <HAL_RCC_ClockConfig+0x1e4>
        return HAL_ERROR;
 80013d2:	2001      	movs	r0, #1
 80013d4:	e7ec      	b.n	80013b0 <HAL_RCC_ClockConfig+0x1e4>
    return HAL_ERROR;
 80013d6:	2001      	movs	r0, #1
 80013d8:	e7ea      	b.n	80013b0 <HAL_RCC_ClockConfig+0x1e4>
 80013da:	bf00      	nop
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	080056e8 	.word	0x080056e8
 80013e8:	08005658 	.word	0x08005658
 80013ec:	20000004 	.word	0x20000004
 80013f0:	2000000c 	.word	0x2000000c

080013f4 <HAL_RCC_GetHCLKFreq>:
}
 80013f4:	4b01      	ldr	r3, [pc, #4]	; (80013fc <HAL_RCC_GetHCLKFreq+0x8>)
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000004 	.word	0x20000004

08001400 <HAL_RCC_GetPCLK1Freq>:
{
 8001400:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001402:	f7ff fff7 	bl	80013f4 <HAL_RCC_GetHCLKFreq>
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800140e:	4a03      	ldr	r2, [pc, #12]	; (800141c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
}
 8001412:	40d8      	lsrs	r0, r3
 8001414:	bd08      	pop	{r3, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	08005668 	.word	0x08005668

08001420 <HAL_RCC_GetPCLK2Freq>:
{
 8001420:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001422:	f7ff ffe7 	bl	80013f4 <HAL_RCC_GetHCLKFreq>
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800142e:	4a03      	ldr	r2, [pc, #12]	; (800143c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001430:	5cd3      	ldrb	r3, [r2, r3]
}
 8001432:	40d8      	lsrs	r0, r3
 8001434:	bd08      	pop	{r3, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	08005668 	.word	0x08005668

08001440 <HAL_RCC_GetClockConfig>:
{
 8001440:	b538      	push	{r3, r4, r5, lr}
 8001442:	460d      	mov	r5, r1
  assert_param(RCC_ClkInitStruct != NULL);
 8001444:	4604      	mov	r4, r0
 8001446:	b1d0      	cbz	r0, 800147e <HAL_RCC_GetClockConfig+0x3e>
  assert_param(pFLatency != NULL);
 8001448:	b1fd      	cbz	r5, 800148a <HAL_RCC_GetClockConfig+0x4a>
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800144a:	230f      	movs	r3, #15
 800144c:	6023      	str	r3, [r4, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_RCC_GetClockConfig+0x58>)
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	6062      	str	r2, [r4, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800145e:	60a2      	str	r2, [r4, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001466:	60e2      	str	r2, [r4, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001470:	6123      	str	r3, [r4, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_RCC_GetClockConfig+0x5c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	602b      	str	r3, [r5, #0]
}
 800147c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(RCC_ClkInitStruct != NULL);
 800147e:	f240 5123 	movw	r1, #1315	; 0x523
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <HAL_RCC_GetClockConfig+0x60>)
 8001484:	f7fe ffde 	bl	8000444 <assert_failed>
 8001488:	e7de      	b.n	8001448 <HAL_RCC_GetClockConfig+0x8>
  assert_param(pFLatency != NULL);
 800148a:	f240 5124 	movw	r1, #1316	; 0x524
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <HAL_RCC_GetClockConfig+0x60>)
 8001490:	f7fe ffd8 	bl	8000444 <assert_failed>
 8001494:	e7d9      	b.n	800144a <HAL_RCC_GetClockConfig+0xa>
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	40022000 	.word	0x40022000
 80014a0:	080056e8 	.word	0x080056e8

080014a4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014a8:	b510      	push	{r4, lr}
 80014aa:	4604      	mov	r4, r0
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80014ac:	6803      	ldr	r3, [r0, #0]
 80014ae:	4a22      	ldr	r2, [pc, #136]	; (8001538 <HAL_TIM_Base_Start_IT+0x90>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d00f      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x2c>
 80014b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b8:	d00c      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x2c>
 80014ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80014be:	4293      	cmp	r3, r2
 80014c0:	d008      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x2c>
 80014c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d004      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x2c>
 80014ca:	f240 11cf 	movw	r1, #463	; 0x1cf
 80014ce:	481b      	ldr	r0, [pc, #108]	; (800153c <HAL_TIM_Base_Start_IT+0x94>)
 80014d0:	f7fe ffb8 	bl	8000444 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014d4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d127      	bne.n	800152e <HAL_TIM_Base_Start_IT+0x86>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014de:	2302      	movs	r3, #2
 80014e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014e4:	6822      	ldr	r2, [r4, #0]
 80014e6:	68d3      	ldr	r3, [r2, #12]
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_TIM_Base_Start_IT+0x90>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d010      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x70>
 80014f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014fa:	d00d      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x70>
 80014fc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001500:	4293      	cmp	r3, r2
 8001502:	d009      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x70>
 8001504:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001508:	4293      	cmp	r3, r2
 800150a:	d005      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x70>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001514:	2000      	movs	r0, #0
 8001516:	e00b      	b.n	8001530 <HAL_TIM_Base_Start_IT+0x88>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800151e:	2a06      	cmp	r2, #6
 8001520:	d007      	beq.n	8001532 <HAL_TIM_Base_Start_IT+0x8a>
      __HAL_TIM_ENABLE(htim);
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	f042 0201 	orr.w	r2, r2, #1
 8001528:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800152a:	2000      	movs	r0, #0
 800152c:	e000      	b.n	8001530 <HAL_TIM_Base_Start_IT+0x88>
    return HAL_ERROR;
 800152e:	2001      	movs	r0, #1
}
 8001530:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001532:	2000      	movs	r0, #0
 8001534:	e7fc      	b.n	8001530 <HAL_TIM_Base_Start_IT+0x88>
 8001536:	bf00      	nop
 8001538:	40012c00 	.word	0x40012c00
 800153c:	08005734 	.word	0x08005734

08001540 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001540:	4770      	bx	lr

08001542 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001542:	4770      	bx	lr

08001544 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001544:	4770      	bx	lr

08001546 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001546:	4770      	bx	lr

08001548 <HAL_TIM_IRQHandler>:
{
 8001548:	b510      	push	{r4, lr}
 800154a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800154c:	6803      	ldr	r3, [r0, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	f012 0f02 	tst.w	r2, #2
 8001554:	d011      	beq.n	800157a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	f012 0f02 	tst.w	r2, #2
 800155c:	d00d      	beq.n	800157a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800155e:	f06f 0202 	mvn.w	r2, #2
 8001562:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001564:	2301      	movs	r3, #1
 8001566:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001568:	6803      	ldr	r3, [r0, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f013 0f03 	tst.w	r3, #3
 8001570:	d070      	beq.n	8001654 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001572:	f7ff ffe6 	bl	8001542 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001576:	2300      	movs	r3, #0
 8001578:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	f012 0f04 	tst.w	r2, #4
 8001582:	d012      	beq.n	80015aa <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	f012 0f04 	tst.w	r2, #4
 800158a:	d00e      	beq.n	80015aa <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800158c:	f06f 0204 	mvn.w	r2, #4
 8001590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001592:	2302      	movs	r3, #2
 8001594:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800159e:	d05f      	beq.n	8001660 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80015a0:	4620      	mov	r0, r4
 80015a2:	f7ff ffce 	bl	8001542 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a6:	2300      	movs	r3, #0
 80015a8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	f012 0f08 	tst.w	r2, #8
 80015b2:	d012      	beq.n	80015da <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	f012 0f08 	tst.w	r2, #8
 80015ba:	d00e      	beq.n	80015da <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015bc:	f06f 0208 	mvn.w	r2, #8
 80015c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015c2:	2304      	movs	r3, #4
 80015c4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f013 0f03 	tst.w	r3, #3
 80015ce:	d04e      	beq.n	800166e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff ffb6 	bl	8001542 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d6:	2300      	movs	r3, #0
 80015d8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	f012 0f10 	tst.w	r2, #16
 80015e2:	d012      	beq.n	800160a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	f012 0f10 	tst.w	r2, #16
 80015ea:	d00e      	beq.n	800160a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015ec:	f06f 0210 	mvn.w	r2, #16
 80015f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015f2:	2308      	movs	r3, #8
 80015f4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f413 7f40 	tst.w	r3, #768	; 0x300
 80015fe:	d03d      	beq.n	800167c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff ff9e 	bl	8001542 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001606:	2300      	movs	r3, #0
 8001608:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	f012 0f01 	tst.w	r2, #1
 8001612:	d003      	beq.n	800161c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	f012 0f01 	tst.w	r2, #1
 800161a:	d136      	bne.n	800168a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001624:	d003      	beq.n	800162e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	f012 0f80 	tst.w	r2, #128	; 0x80
 800162c:	d134      	bne.n	8001698 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001636:	d003      	beq.n	8001640 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800163e:	d132      	bne.n	80016a6 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	f012 0f20 	tst.w	r2, #32
 8001648:	d003      	beq.n	8001652 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	f012 0f20 	tst.w	r2, #32
 8001650:	d130      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x16c>
}
 8001652:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001654:	f7ff ff74 	bl	8001540 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001658:	4620      	mov	r0, r4
 800165a:	f7ff ff73 	bl	8001544 <HAL_TIM_PWM_PulseFinishedCallback>
 800165e:	e78a      	b.n	8001576 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001660:	4620      	mov	r0, r4
 8001662:	f7ff ff6d 	bl	8001540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff ff6c 	bl	8001544 <HAL_TIM_PWM_PulseFinishedCallback>
 800166c:	e79b      	b.n	80015a6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff ff66 	bl	8001540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff ff65 	bl	8001544 <HAL_TIM_PWM_PulseFinishedCallback>
 800167a:	e7ac      	b.n	80015d6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff ff5f 	bl	8001540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001682:	4620      	mov	r0, r4
 8001684:	f7ff ff5e 	bl	8001544 <HAL_TIM_PWM_PulseFinishedCallback>
 8001688:	e7bd      	b.n	8001606 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800168a:	f06f 0201 	mvn.w	r2, #1
 800168e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001690:	4620      	mov	r0, r4
 8001692:	f7fe fe85 	bl	80003a0 <HAL_TIM_PeriodElapsedCallback>
 8001696:	e7c1      	b.n	800161c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800169c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800169e:	4620      	mov	r0, r4
 80016a0:	f000 f8b9 	bl	8001816 <HAL_TIMEx_BreakCallback>
 80016a4:	e7c3      	b.n	800162e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7ff ff4a 	bl	8001546 <HAL_TIM_TriggerCallback>
 80016b2:	e7c5      	b.n	8001640 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016b4:	f06f 0220 	mvn.w	r2, #32
 80016b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80016ba:	4620      	mov	r0, r4
 80016bc:	f000 f8aa 	bl	8001814 <HAL_TIMEx_CommutCallback>
}
 80016c0:	e7c7      	b.n	8001652 <HAL_TIM_IRQHandler+0x10a>
	...

080016c4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016c4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016c6:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <TIM_Base_SetConfig+0x70>)
 80016c8:	4290      	cmp	r0, r2
 80016ca:	d00a      	beq.n	80016e2 <TIM_Base_SetConfig+0x1e>
 80016cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016d0:	d007      	beq.n	80016e2 <TIM_Base_SetConfig+0x1e>
 80016d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80016d6:	4290      	cmp	r0, r2
 80016d8:	d003      	beq.n	80016e2 <TIM_Base_SetConfig+0x1e>
 80016da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016de:	4290      	cmp	r0, r2
 80016e0:	d103      	bne.n	80016ea <TIM_Base_SetConfig+0x26>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016e6:	684a      	ldr	r2, [r1, #4]
 80016e8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <TIM_Base_SetConfig+0x70>)
 80016ec:	4290      	cmp	r0, r2
 80016ee:	d00a      	beq.n	8001706 <TIM_Base_SetConfig+0x42>
 80016f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016f4:	d007      	beq.n	8001706 <TIM_Base_SetConfig+0x42>
 80016f6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80016fa:	4290      	cmp	r0, r2
 80016fc:	d003      	beq.n	8001706 <TIM_Base_SetConfig+0x42>
 80016fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001702:	4290      	cmp	r0, r2
 8001704:	d103      	bne.n	800170e <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800170a:	68ca      	ldr	r2, [r1, #12]
 800170c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800170e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001712:	694a      	ldr	r2, [r1, #20]
 8001714:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001716:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001718:	688b      	ldr	r3, [r1, #8]
 800171a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800171c:	680b      	ldr	r3, [r1, #0]
 800171e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <TIM_Base_SetConfig+0x70>)
 8001722:	4298      	cmp	r0, r3
 8001724:	d002      	beq.n	800172c <TIM_Base_SetConfig+0x68>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001726:	2301      	movs	r3, #1
 8001728:	6143      	str	r3, [r0, #20]
}
 800172a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800172c:	690b      	ldr	r3, [r1, #16]
 800172e:	6303      	str	r3, [r0, #48]	; 0x30
 8001730:	e7f9      	b.n	8001726 <TIM_Base_SetConfig+0x62>
 8001732:	bf00      	nop
 8001734:	40012c00 	.word	0x40012c00

08001738 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001738:	2800      	cmp	r0, #0
 800173a:	d065      	beq.n	8001808 <HAL_TIM_Base_Init+0xd0>
{
 800173c:	b510      	push	{r4, lr}
 800173e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001740:	6803      	ldr	r3, [r0, #0]
 8001742:	4a32      	ldr	r2, [pc, #200]	; (800180c <HAL_TIM_Base_Init+0xd4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00f      	beq.n	8001768 <HAL_TIM_Base_Init+0x30>
 8001748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174c:	d00c      	beq.n	8001768 <HAL_TIM_Base_Init+0x30>
 800174e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001752:	4293      	cmp	r3, r2
 8001754:	d008      	beq.n	8001768 <HAL_TIM_Base_Init+0x30>
 8001756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800175a:	4293      	cmp	r3, r2
 800175c:	d004      	beq.n	8001768 <HAL_TIM_Base_Init+0x30>
 800175e:	f240 1113 	movw	r1, #275	; 0x113
 8001762:	482b      	ldr	r0, [pc, #172]	; (8001810 <HAL_TIM_Base_Init+0xd8>)
 8001764:	f7fe fe6e 	bl	8000444 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001768:	68a3      	ldr	r3, [r4, #8]
 800176a:	b13b      	cbz	r3, 800177c <HAL_TIM_Base_Init+0x44>
 800176c:	2b10      	cmp	r3, #16
 800176e:	d005      	beq.n	800177c <HAL_TIM_Base_Init+0x44>
 8001770:	2b20      	cmp	r3, #32
 8001772:	d003      	beq.n	800177c <HAL_TIM_Base_Init+0x44>
 8001774:	2b40      	cmp	r3, #64	; 0x40
 8001776:	d001      	beq.n	800177c <HAL_TIM_Base_Init+0x44>
 8001778:	2b60      	cmp	r3, #96	; 0x60
 800177a:	d12d      	bne.n	80017d8 <HAL_TIM_Base_Init+0xa0>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800177c:	6923      	ldr	r3, [r4, #16]
 800177e:	b12b      	cbz	r3, 800178c <HAL_TIM_Base_Init+0x54>
 8001780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001784:	d002      	beq.n	800178c <HAL_TIM_Base_Init+0x54>
 8001786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800178a:	d12b      	bne.n	80017e4 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800178c:	69a3      	ldr	r3, [r4, #24]
 800178e:	b10b      	cbz	r3, 8001794 <HAL_TIM_Base_Init+0x5c>
 8001790:	2b80      	cmp	r3, #128	; 0x80
 8001792:	d12d      	bne.n	80017f0 <HAL_TIM_Base_Init+0xb8>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001794:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001798:	b383      	cbz	r3, 80017fc <HAL_TIM_Base_Init+0xc4>
  htim->State = HAL_TIM_STATE_BUSY;
 800179a:	2302      	movs	r3, #2
 800179c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017a0:	4621      	mov	r1, r4
 80017a2:	f851 0b04 	ldr.w	r0, [r1], #4
 80017a6:	f7ff ff8d 	bl	80016c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80017b4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80017b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80017bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80017c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80017cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80017d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80017d4:	2000      	movs	r0, #0
}
 80017d6:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80017d8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <HAL_TIM_Base_Init+0xd8>)
 80017de:	f7fe fe31 	bl	8000444 <assert_failed>
 80017e2:	e7cb      	b.n	800177c <HAL_TIM_Base_Init+0x44>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80017e4:	f240 1115 	movw	r1, #277	; 0x115
 80017e8:	4809      	ldr	r0, [pc, #36]	; (8001810 <HAL_TIM_Base_Init+0xd8>)
 80017ea:	f7fe fe2b 	bl	8000444 <assert_failed>
 80017ee:	e7cd      	b.n	800178c <HAL_TIM_Base_Init+0x54>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80017f0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80017f4:	4806      	ldr	r0, [pc, #24]	; (8001810 <HAL_TIM_Base_Init+0xd8>)
 80017f6:	f7fe fe25 	bl	8000444 <assert_failed>
 80017fa:	e7cb      	b.n	8001794 <HAL_TIM_Base_Init+0x5c>
    htim->Lock = HAL_UNLOCKED;
 80017fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001800:	4620      	mov	r0, r4
 8001802:	f7ff fe4f 	bl	80014a4 <HAL_TIM_Base_MspInit>
 8001806:	e7c8      	b.n	800179a <HAL_TIM_Base_Init+0x62>
    return HAL_ERROR;
 8001808:	2001      	movs	r0, #1
}
 800180a:	4770      	bx	lr
 800180c:	40012c00 	.word	0x40012c00
 8001810:	08005734 	.word	0x08005734

08001814 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001814:	4770      	bx	lr

08001816 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001816:	4770      	bx	lr

08001818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001818:	b510      	push	{r4, lr}
 800181a:	4604      	mov	r4, r0
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800181c:	6842      	ldr	r2, [r0, #4]
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <UART_SetConfig+0xe8>)
 8001820:	429a      	cmp	r2, r3
 8001822:	d857      	bhi.n	80018d4 <UART_SetConfig+0xbc>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8001824:	68e3      	ldr	r3, [r4, #12]
 8001826:	b113      	cbz	r3, 800182e <UART_SetConfig+0x16>
 8001828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800182c:	d158      	bne.n	80018e0 <UART_SetConfig+0xc8>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800182e:	6923      	ldr	r3, [r4, #16]
 8001830:	b12b      	cbz	r3, 800183e <UART_SetConfig+0x26>
 8001832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001836:	d002      	beq.n	800183e <UART_SetConfig+0x26>
 8001838:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800183c:	d156      	bne.n	80018ec <UART_SetConfig+0xd4>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800183e:	6963      	ldr	r3, [r4, #20]
 8001840:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8001844:	4213      	tst	r3, r2
 8001846:	d100      	bne.n	800184a <UART_SetConfig+0x32>
 8001848:	b923      	cbnz	r3, 8001854 <UART_SetConfig+0x3c>
 800184a:	f640 6156 	movw	r1, #3670	; 0xe56
 800184e:	482d      	ldr	r0, [pc, #180]	; (8001904 <UART_SetConfig+0xec>)
 8001850:	f7fe fdf8 	bl	8000444 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001854:	6822      	ldr	r2, [r4, #0]
 8001856:	6913      	ldr	r3, [r2, #16]
 8001858:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800185c:	68e1      	ldr	r1, [r4, #12]
 800185e:	430b      	orrs	r3, r1
 8001860:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001862:	68a3      	ldr	r3, [r4, #8]
 8001864:	6922      	ldr	r2, [r4, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	6962      	ldr	r2, [r4, #20]
 800186a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800186c:	6821      	ldr	r1, [r4, #0]
 800186e:	68cb      	ldr	r3, [r1, #12]
 8001870:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001874:	f023 030c 	bic.w	r3, r3, #12
 8001878:	4313      	orrs	r3, r2
 800187a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800187c:	6822      	ldr	r2, [r4, #0]
 800187e:	6953      	ldr	r3, [r2, #20]
 8001880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001884:	69a1      	ldr	r1, [r4, #24]
 8001886:	430b      	orrs	r3, r1
 8001888:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800188a:	6822      	ldr	r2, [r4, #0]
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <UART_SetConfig+0xf0>)
 800188e:	429a      	cmp	r2, r3
 8001890:	d032      	beq.n	80018f8 <UART_SetConfig+0xe0>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001892:	f7ff fdb5 	bl	8001400 <HAL_RCC_GetPCLK1Freq>
 8001896:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001898:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800189c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80018a0:	6863      	ldr	r3, [r4, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018a8:	4818      	ldr	r0, [pc, #96]	; (800190c <UART_SetConfig+0xf4>)
 80018aa:	fba0 3102 	umull	r3, r1, r0, r2
 80018ae:	0949      	lsrs	r1, r1, #5
 80018b0:	2364      	movs	r3, #100	; 0x64
 80018b2:	fb03 2311 	mls	r3, r3, r1, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	3332      	adds	r3, #50	; 0x32
 80018ba:	fba0 2303 	umull	r2, r3, r0, r3
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018c4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	6821      	ldr	r1, [r4, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 80018d2:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80018d4:	f640 6153 	movw	r1, #3667	; 0xe53
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <UART_SetConfig+0xec>)
 80018da:	f7fe fdb3 	bl	8000444 <assert_failed>
 80018de:	e7a1      	b.n	8001824 <UART_SetConfig+0xc>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80018e0:	f640 6154 	movw	r1, #3668	; 0xe54
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <UART_SetConfig+0xec>)
 80018e6:	f7fe fdad 	bl	8000444 <assert_failed>
 80018ea:	e7a0      	b.n	800182e <UART_SetConfig+0x16>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80018ec:	f640 6155 	movw	r1, #3669	; 0xe55
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <UART_SetConfig+0xec>)
 80018f2:	f7fe fda7 	bl	8000444 <assert_failed>
 80018f6:	e7a2      	b.n	800183e <UART_SetConfig+0x26>
    pclk = HAL_RCC_GetPCLK2Freq();
 80018f8:	f7ff fd92 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	e7cb      	b.n	8001898 <UART_SetConfig+0x80>
 8001900:	0044aa20 	.word	0x0044aa20
 8001904:	0800576c 	.word	0x0800576c
 8001908:	40013800 	.word	0x40013800
 800190c:	51eb851f 	.word	0x51eb851f

08001910 <HAL_UART_Init>:
  if (huart == NULL)
 8001910:	2800      	cmp	r0, #0
 8001912:	d06c      	beq.n	80019ee <HAL_UART_Init+0xde>
{
 8001914:	b510      	push	{r4, lr}
 8001916:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8001918:	6983      	ldr	r3, [r0, #24]
 800191a:	b30b      	cbz	r3, 8001960 <HAL_UART_Init+0x50>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800191c:	6803      	ldr	r3, [r0, #0]
 800191e:	4a35      	ldr	r2, [pc, #212]	; (80019f4 <HAL_UART_Init+0xe4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d00c      	beq.n	800193e <HAL_UART_Init+0x2e>
 8001924:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8001928:	4293      	cmp	r3, r2
 800192a:	d008      	beq.n	800193e <HAL_UART_Init+0x2e>
 800192c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001930:	4293      	cmp	r3, r2
 8001932:	d004      	beq.n	800193e <HAL_UART_Init+0x2e>
 8001934:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8001938:	482f      	ldr	r0, [pc, #188]	; (80019f8 <HAL_UART_Init+0xe8>)
 800193a:	f7fe fd83 	bl	8000444 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800193e:	69a3      	ldr	r3, [r4, #24]
 8001940:	b1fb      	cbz	r3, 8001982 <HAL_UART_Init+0x72>
 8001942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001946:	d01c      	beq.n	8001982 <HAL_UART_Init+0x72>
 8001948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800194c:	d019      	beq.n	8001982 <HAL_UART_Init+0x72>
 800194e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001952:	d016      	beq.n	8001982 <HAL_UART_Init+0x72>
 8001954:	f240 116d 	movw	r1, #365	; 0x16d
 8001958:	4827      	ldr	r0, [pc, #156]	; (80019f8 <HAL_UART_Init+0xe8>)
 800195a:	f7fe fd73 	bl	8000444 <assert_failed>
 800195e:	e010      	b.n	8001982 <HAL_UART_Init+0x72>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001960:	6803      	ldr	r3, [r0, #0]
 8001962:	4a24      	ldr	r2, [pc, #144]	; (80019f4 <HAL_UART_Init+0xe4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00c      	beq.n	8001982 <HAL_UART_Init+0x72>
 8001968:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800196c:	4293      	cmp	r3, r2
 800196e:	d008      	beq.n	8001982 <HAL_UART_Init+0x72>
 8001970:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001974:	4293      	cmp	r3, r2
 8001976:	d004      	beq.n	8001982 <HAL_UART_Init+0x72>
 8001978:	f240 1171 	movw	r1, #369	; 0x171
 800197c:	481e      	ldr	r0, [pc, #120]	; (80019f8 <HAL_UART_Init+0xe8>)
 800197e:	f7fe fd61 	bl	8000444 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8001982:	68a3      	ldr	r3, [r4, #8]
 8001984:	b113      	cbz	r3, 800198c <HAL_UART_Init+0x7c>
 8001986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800198a:	d124      	bne.n	80019d6 <HAL_UART_Init+0xc6>
  if (huart->gState == HAL_UART_STATE_RESET)
 800198c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001990:	b33b      	cbz	r3, 80019e2 <HAL_UART_Init+0xd2>
  huart->gState = HAL_UART_STATE_BUSY;
 8001992:	2324      	movs	r3, #36	; 0x24
 8001994:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001998:	6822      	ldr	r2, [r4, #0]
 800199a:	68d3      	ldr	r3, [r2, #12]
 800199c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019a0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff ff38 	bl	8001818 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	6913      	ldr	r3, [r2, #16]
 80019ac:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80019b0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019b2:	6822      	ldr	r2, [r4, #0]
 80019b4:	6953      	ldr	r3, [r2, #20]
 80019b6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80019ba:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80019bc:	6822      	ldr	r2, [r4, #0]
 80019be:	68d3      	ldr	r3, [r2, #12]
 80019c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019c4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c6:	2000      	movs	r0, #0
 80019c8:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019ca:	2320      	movs	r3, #32
 80019cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80019d4:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80019d6:	f240 1173 	movw	r1, #371	; 0x173
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <HAL_UART_Init+0xe8>)
 80019dc:	f7fe fd32 	bl	8000444 <assert_failed>
 80019e0:	e7d4      	b.n	800198c <HAL_UART_Init+0x7c>
    huart->Lock = HAL_UNLOCKED;
 80019e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80019e6:	4620      	mov	r0, r4
 80019e8:	f7fe fe12 	bl	8000610 <HAL_UART_MspInit>
 80019ec:	e7d1      	b.n	8001992 <HAL_UART_Init+0x82>
    return HAL_ERROR;
 80019ee:	2001      	movs	r0, #1
}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40013800 	.word	0x40013800
 80019f8:	0800576c 	.word	0x0800576c

080019fc <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019fc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a00:	b993      	cbnz	r3, 8001a28 <osKernelInitialize+0x2c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a02:	f3ef 8310 	mrs	r3, PRIMASK
 8001a06:	b993      	cbnz	r3, 8001a2e <osKernelInitialize+0x32>
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <osKernelInitialize+0x40>)
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	2802      	cmp	r0, #2
 8001a0e:	d004      	beq.n	8001a1a <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8001a10:	b980      	cbnz	r0, 8001a34 <osKernelInitialize+0x38>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <osKernelInitialize+0x40>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001a18:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a1a:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f6      	beq.n	8001a10 <osKernelInitialize+0x14>
    stat = osErrorISR;
 8001a22:	f06f 0005 	mvn.w	r0, #5
 8001a26:	4770      	bx	lr
 8001a28:	f06f 0005 	mvn.w	r0, #5
 8001a2c:	4770      	bx	lr
 8001a2e:	f06f 0005 	mvn.w	r0, #5
 8001a32:	4770      	bx	lr
    } else {
      stat = osError;
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200003e8 	.word	0x200003e8

08001a40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a40:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a42:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a46:	b9b3      	cbnz	r3, 8001a76 <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a48:	f3ef 8310 	mrs	r3, PRIMASK
 8001a4c:	b9b3      	cbnz	r3, 8001a7c <osKernelStart+0x3c>
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <osKernelStart+0x48>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d008      	beq.n	8001a68 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d113      	bne.n	8001a82 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <osKernelStart+0x48>)
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001a60:	f000 fee0 	bl	8002824 <vTaskStartScheduler>
      stat = osOK;
 8001a64:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8001a66:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a68:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8001a6c:	2a00      	cmp	r2, #0
 8001a6e:	d0f2      	beq.n	8001a56 <osKernelStart+0x16>
    stat = osErrorISR;
 8001a70:	f06f 0005 	mvn.w	r0, #5
 8001a74:	e7f7      	b.n	8001a66 <osKernelStart+0x26>
 8001a76:	f06f 0005 	mvn.w	r0, #5
 8001a7a:	e7f4      	b.n	8001a66 <osKernelStart+0x26>
 8001a7c:	f06f 0005 	mvn.w	r0, #5
 8001a80:	e7f1      	b.n	8001a66 <osKernelStart+0x26>
      stat = osError;
 8001a82:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8001a86:	e7ee      	b.n	8001a66 <osKernelStart+0x26>
 8001a88:	200003e8 	.word	0x200003e8

08001a8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a90:	2400      	movs	r4, #0
 8001a92:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a94:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8001a98:	2c00      	cmp	r4, #0
 8001a9a:	d143      	bne.n	8001b24 <osThreadNew+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d13f      	bne.n	8001b24 <osThreadNew+0x98>
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <osThreadNew+0xe8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d016      	beq.n	8001ada <osThreadNew+0x4e>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d039      	beq.n	8001b24 <osThreadNew+0x98>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8001ab6:	b362      	cbz	r2, 8001b12 <osThreadNew+0x86>
      if (attr->name != NULL) {
 8001ab8:	6815      	ldr	r5, [r2, #0]
 8001aba:	b195      	cbz	r5, 8001ae2 <osThreadNew+0x56>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8001abc:	6993      	ldr	r3, [r2, #24]
 8001abe:	b903      	cbnz	r3, 8001ac2 <osThreadNew+0x36>
    prio  = (UBaseType_t)osPriorityNormal;
 8001ac0:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ac2:	1e5c      	subs	r4, r3, #1
 8001ac4:	2c37      	cmp	r4, #55	; 0x37
 8001ac6:	d851      	bhi.n	8001b6c <osThreadNew+0xe0>
 8001ac8:	6854      	ldr	r4, [r2, #4]
 8001aca:	f014 0f01 	tst.w	r4, #1
 8001ace:	d14f      	bne.n	8001b70 <osThreadNew+0xe4>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8001ad0:	6956      	ldr	r6, [r2, #20]
 8001ad2:	b14e      	cbz	r6, 8001ae8 <osThreadNew+0x5c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001ad4:	ea4f 0c96 	mov.w	ip, r6, lsr #2
 8001ad8:	e008      	b.n	8001aec <osThreadNew+0x60>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ada:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8001ade:	bb0b      	cbnz	r3, 8001b24 <osThreadNew+0x98>
 8001ae0:	e7e4      	b.n	8001aac <osThreadNew+0x20>
    name  = &empty;
 8001ae2:	f10d 0517 	add.w	r5, sp, #23
 8001ae6:	e7e9      	b.n	8001abc <osThreadNew+0x30>
    stack = configMINIMAL_STACK_SIZE;
 8001ae8:	f04f 0c80 	mov.w	ip, #128	; 0x80
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001aec:	6894      	ldr	r4, [r2, #8]
 8001aee:	b12c      	cbz	r4, 8001afc <osThreadNew+0x70>
 8001af0:	68d7      	ldr	r7, [r2, #12]
 8001af2:	2fbb      	cmp	r7, #187	; 0xbb
 8001af4:	d902      	bls.n	8001afc <osThreadNew+0x70>
 8001af6:	6917      	ldr	r7, [r2, #16]
 8001af8:	b107      	cbz	r7, 8001afc <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001afa:	b9b6      	cbnz	r6, 8001b2a <osThreadNew+0x9e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001afc:	b114      	cbz	r4, 8001b04 <osThreadNew+0x78>
    mem   = -1;
 8001afe:	f04f 34ff 	mov.w	r4, #4294967295
 8001b02:	e00c      	b.n	8001b1e <osThreadNew+0x92>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b04:	68d4      	ldr	r4, [r2, #12]
 8001b06:	b994      	cbnz	r4, 8001b2e <osThreadNew+0xa2>
 8001b08:	6914      	ldr	r4, [r2, #16]
 8001b0a:	b19c      	cbz	r4, 8001b34 <osThreadNew+0xa8>
    mem   = -1;
 8001b0c:	f04f 34ff 	mov.w	r4, #4294967295
 8001b10:	e005      	b.n	8001b1e <osThreadNew+0x92>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8001b12:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8001b14:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8001b16:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8001b1a:	f10d 0517 	add.w	r5, sp, #23
    }

    if (mem == 1) {
 8001b1e:	2c01      	cmp	r4, #1
 8001b20:	d00a      	beq.n	8001b38 <osThreadNew+0xac>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8001b22:	b1ac      	cbz	r4, 8001b50 <osThreadNew+0xc4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001b24:	9804      	ldr	r0, [sp, #16]
}
 8001b26:	b007      	add	sp, #28
 8001b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8001b2a:	2401      	movs	r4, #1
 8001b2c:	e7f7      	b.n	8001b1e <osThreadNew+0x92>
    mem   = -1;
 8001b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8001b32:	e7f4      	b.n	8001b1e <osThreadNew+0x92>
          mem = 0;
 8001b34:	2400      	movs	r4, #0
 8001b36:	e7f2      	b.n	8001b1e <osThreadNew+0x92>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b38:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001b3a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b3c:	9202      	str	r2, [sp, #8]
 8001b3e:	9401      	str	r4, [sp, #4]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	460b      	mov	r3, r1
 8001b44:	4662      	mov	r2, ip
 8001b46:	4629      	mov	r1, r5
 8001b48:	f000 fdfe 	bl	8002748 <xTaskCreateStatic>
 8001b4c:	9004      	str	r0, [sp, #16]
 8001b4e:	e7e9      	b.n	8001b24 <osThreadNew+0x98>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001b50:	aa04      	add	r2, sp, #16
 8001b52:	9201      	str	r2, [sp, #4]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	460b      	mov	r3, r1
 8001b58:	fa1f f28c 	uxth.w	r2, ip
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	f000 fe2d 	bl	80027bc <xTaskCreate>
 8001b62:	2801      	cmp	r0, #1
 8001b64:	d0de      	beq.n	8001b24 <osThreadNew+0x98>
          hTask = NULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	9304      	str	r3, [sp, #16]
 8001b6a:	e7db      	b.n	8001b24 <osThreadNew+0x98>
        return (NULL);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	e7da      	b.n	8001b26 <osThreadNew+0x9a>
 8001b70:	2000      	movs	r0, #0
 8001b72:	e7d8      	b.n	8001b26 <osThreadNew+0x9a>
 8001b74:	200003e8 	.word	0x200003e8

08001b78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001b78:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b7a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b7e:	b9a3      	cbnz	r3, 8001baa <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b80:	f3ef 8310 	mrs	r3, PRIMASK
 8001b84:	b9a3      	cbnz	r3, 8001bb0 <osDelay+0x38>
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <osDelay+0x40>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d002      	beq.n	8001b94 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8001b8e:	b940      	cbnz	r0, 8001ba2 <osDelay+0x2a>
    stat = osOK;
 8001b90:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8001b92:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b94:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f8      	beq.n	8001b8e <osDelay+0x16>
    stat = osErrorISR;
 8001b9c:	f06f 0005 	mvn.w	r0, #5
 8001ba0:	e7f7      	b.n	8001b92 <osDelay+0x1a>
      vTaskDelay(ticks);
 8001ba2:	f000 ffaf 	bl	8002b04 <vTaskDelay>
    stat = osOK;
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	e7f3      	b.n	8001b92 <osDelay+0x1a>
    stat = osErrorISR;
 8001baa:	f06f 0005 	mvn.w	r0, #5
 8001bae:	e7f0      	b.n	8001b92 <osDelay+0x1a>
 8001bb0:	f06f 0005 	mvn.w	r0, #5
 8001bb4:	e7ed      	b.n	8001b92 <osDelay+0x1a>
 8001bb6:	bf00      	nop
 8001bb8:	200003e8 	.word	0x200003e8

08001bbc <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <vApplicationGetIdleTaskMemory+0x10>)
 8001bbe:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <vApplicationGetIdleTaskMemory+0x14>)
 8001bc2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	2000032c 	.word	0x2000032c
 8001bd0:	2000012c 	.word	0x2000012c

08001bd4 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <vApplicationGetTimerTaskMemory+0x10>)
 8001bd6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <vApplicationGetTimerTaskMemory+0x14>)
 8001bda:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	4770      	bx	lr
 8001be4:	200007ec 	.word	0x200007ec
 8001be8:	200003ec 	.word	0x200003ec

08001bec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bec:	f100 0308 	add.w	r3, r0, #8
 8001bf0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bf8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bfa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c00:	4770      	bx	lr

08001c02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c06:	4770      	bx	lr

08001c08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c08:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c0a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c10:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c12:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c14:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001c16:	6803      	ldr	r3, [r0, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	6003      	str	r3, [r0, #0]
}
 8001c1c:	4770      	bx	lr

08001c1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c1e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c20:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c22:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001c26:	d011      	beq.n	8001c4c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c28:	f100 0308 	add.w	r3, r0, #8
 8001c2c:	461c      	mov	r4, r3
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	42aa      	cmp	r2, r5
 8001c34:	d9fa      	bls.n	8001c2c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c36:	6863      	ldr	r3, [r4, #4]
 8001c38:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c3a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c3c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c3e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c40:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001c42:	6803      	ldr	r3, [r0, #0]
 8001c44:	3301      	adds	r3, #1
 8001c46:	6003      	str	r3, [r0, #0]
}
 8001c48:	bc30      	pop	{r4, r5}
 8001c4a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c4c:	6904      	ldr	r4, [r0, #16]
 8001c4e:	e7f2      	b.n	8001c36 <vListInsert+0x18>

08001c50 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001c50:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c52:	6841      	ldr	r1, [r0, #4]
 8001c54:	6882      	ldr	r2, [r0, #8]
 8001c56:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c58:	6841      	ldr	r1, [r0, #4]
 8001c5a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4282      	cmp	r2, r0
 8001c60:	d006      	beq.n	8001c70 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001c62:	2200      	movs	r2, #0
 8001c64:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	3a01      	subs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c6c:	6818      	ldr	r0, [r3, #0]
}
 8001c6e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c70:	6882      	ldr	r2, [r0, #8]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	e7f5      	b.n	8001c62 <uxListRemove+0x12>

08001c76 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001c76:	b510      	push	{r4, lr}
 8001c78:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001c7a:	f001 fb73 	bl	8003364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001c7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d004      	beq.n	8001c90 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8001c86:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8001c88:	f001 fb8e 	bl	80033a8 <vPortExitCritical>

	return xReturn;
}
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001c90:	2401      	movs	r4, #1
 8001c92:	e7f9      	b.n	8001c88 <prvIsQueueFull+0x12>

08001c94 <prvIsQueueEmpty>:
{
 8001c94:	b510      	push	{r4, lr}
 8001c96:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001c98:	f001 fb64 	bl	8003364 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001c9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c9e:	b923      	cbnz	r3, 8001caa <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8001ca0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8001ca2:	f001 fb81 	bl	80033a8 <vPortExitCritical>
}
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8001caa:	2400      	movs	r4, #0
 8001cac:	e7f9      	b.n	8001ca2 <prvIsQueueEmpty+0xe>

08001cae <prvCopyDataToQueue>:
{
 8001cae:	b570      	push	{r4, r5, r6, lr}
 8001cb0:	4604      	mov	r4, r0
 8001cb2:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cb4:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001cb6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001cb8:	b95a      	cbnz	r2, 8001cd2 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001cba:	6803      	ldr	r3, [r0, #0]
 8001cbc:	b11b      	cbz	r3, 8001cc6 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8001cbe:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001cc0:	3601      	adds	r6, #1
 8001cc2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001cc4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001cc6:	6840      	ldr	r0, [r0, #4]
 8001cc8:	f001 f88c 	bl	8002de4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	6063      	str	r3, [r4, #4]
 8001cd0:	e7f6      	b.n	8001cc0 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8001cd2:	b96d      	cbnz	r5, 8001cf0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001cd4:	6880      	ldr	r0, [r0, #8]
 8001cd6:	f002 fc78 	bl	80045ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001cda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001cdc:	68a3      	ldr	r3, [r4, #8]
 8001cde:	4413      	add	r3, r2
 8001ce0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ce2:	6862      	ldr	r2, [r4, #4]
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d319      	bcc.n	8001d1c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8001cec:	4628      	mov	r0, r5
 8001cee:	e7e7      	b.n	8001cc0 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cf0:	68c0      	ldr	r0, [r0, #12]
 8001cf2:	f002 fc6a 	bl	80045ca <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001cf6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001cf8:	4251      	negs	r1, r2
 8001cfa:	68e3      	ldr	r3, [r4, #12]
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d00:	6822      	ldr	r2, [r4, #0]
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d202      	bcs.n	8001d0c <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001d06:	6863      	ldr	r3, [r4, #4]
 8001d08:	440b      	add	r3, r1
 8001d0a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001d0c:	2d02      	cmp	r5, #2
 8001d0e:	d001      	beq.n	8001d14 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8001d10:	2000      	movs	r0, #0
 8001d12:	e7d5      	b.n	8001cc0 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d14:	b126      	cbz	r6, 8001d20 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8001d16:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8001d18:	2000      	movs	r0, #0
 8001d1a:	e7d1      	b.n	8001cc0 <prvCopyDataToQueue+0x12>
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	e7cf      	b.n	8001cc0 <prvCopyDataToQueue+0x12>
 8001d20:	2000      	movs	r0, #0
 8001d22:	e7cd      	b.n	8001cc0 <prvCopyDataToQueue+0x12>

08001d24 <prvCopyDataFromQueue>:
{
 8001d24:	b508      	push	{r3, lr}
 8001d26:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001d28:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001d2a:	b162      	cbz	r2, 8001d46 <prvCopyDataFromQueue+0x22>
 8001d2c:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	4411      	add	r1, r2
 8001d32:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001d34:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8001d38:	4561      	cmp	r1, ip
 8001d3a:	d301      	bcc.n	8001d40 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001d3c:	6819      	ldr	r1, [r3, #0]
 8001d3e:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001d40:	68d9      	ldr	r1, [r3, #12]
 8001d42:	f002 fc42 	bl	80045ca <memcpy>
}
 8001d46:	bd08      	pop	{r3, pc}

08001d48 <prvUnlockQueue>:
{
 8001d48:	b538      	push	{r3, r4, r5, lr}
 8001d4a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001d4c:	f001 fb0a 	bl	8003364 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001d50:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8001d54:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d56:	e001      	b.n	8001d5c <prvUnlockQueue+0x14>
			--cTxLock;
 8001d58:	3c01      	subs	r4, #1
 8001d5a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d5c:	2c00      	cmp	r4, #0
 8001d5e:	dd0a      	ble.n	8001d76 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001d62:	b143      	cbz	r3, 8001d76 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d64:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001d68:	f000 ff90 	bl	8002c8c <xTaskRemoveFromEventList>
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	d0f3      	beq.n	8001d58 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8001d70:	f001 f822 	bl	8002db8 <vTaskMissedYield>
 8001d74:	e7f0      	b.n	8001d58 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8001d76:	23ff      	movs	r3, #255	; 0xff
 8001d78:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001d7c:	f001 fb14 	bl	80033a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001d80:	f001 faf0 	bl	8003364 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001d84:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8001d88:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d8a:	e001      	b.n	8001d90 <prvUnlockQueue+0x48>
				--cRxLock;
 8001d8c:	3c01      	subs	r4, #1
 8001d8e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d90:	2c00      	cmp	r4, #0
 8001d92:	dd0a      	ble.n	8001daa <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d94:	692b      	ldr	r3, [r5, #16]
 8001d96:	b143      	cbz	r3, 8001daa <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d98:	f105 0010 	add.w	r0, r5, #16
 8001d9c:	f000 ff76 	bl	8002c8c <xTaskRemoveFromEventList>
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d0f3      	beq.n	8001d8c <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8001da4:	f001 f808 	bl	8002db8 <vTaskMissedYield>
 8001da8:	e7f0      	b.n	8001d8c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8001daa:	23ff      	movs	r3, #255	; 0xff
 8001dac:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001db0:	f001 fafa 	bl	80033a8 <vPortExitCritical>
}
 8001db4:	bd38      	pop	{r3, r4, r5, pc}

08001db6 <xQueueGenericReset>:
{
 8001db6:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8001db8:	b1e0      	cbz	r0, 8001df4 <xQueueGenericReset+0x3e>
 8001dba:	460d      	mov	r5, r1
 8001dbc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001dbe:	f001 fad1 	bl	8003364 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001dc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001dc8:	fb01 3002 	mla	r0, r1, r2, r3
 8001dcc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dce:	2000      	movs	r0, #0
 8001dd0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dd2:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001dd4:	3a01      	subs	r2, #1
 8001dd6:	fb02 3301 	mla	r3, r2, r1, r3
 8001dda:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ddc:	23ff      	movs	r3, #255	; 0xff
 8001dde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001de6:	b9fd      	cbnz	r5, 8001e28 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001de8:	6923      	ldr	r3, [r4, #16]
 8001dea:	b963      	cbnz	r3, 8001e06 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8001dec:	f001 fadc 	bl	80033a8 <vPortExitCritical>
}
 8001df0:	2001      	movs	r0, #1
 8001df2:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df8:	f383 8811 	msr	BASEPRI, r3
 8001dfc:	f3bf 8f6f 	isb	sy
 8001e00:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001e04:	e7fe      	b.n	8001e04 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e06:	f104 0010 	add.w	r0, r4, #16
 8001e0a:	f000 ff3f 	bl	8002c8c <xTaskRemoveFromEventList>
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	d0ec      	beq.n	8001dec <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8001e12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	e7e1      	b.n	8001dec <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e28:	f104 0010 	add.w	r0, r4, #16
 8001e2c:	f7ff fede 	bl	8001bec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e34:	f7ff feda 	bl	8001bec <vListInitialise>
 8001e38:	e7d8      	b.n	8001dec <xQueueGenericReset+0x36>

08001e3a <prvInitialiseNewQueue>:
{
 8001e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3c:	4605      	mov	r5, r0
 8001e3e:	461e      	mov	r6, r3
 8001e40:	9c06      	ldr	r4, [sp, #24]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001e42:	460f      	mov	r7, r1
 8001e44:	b979      	cbnz	r1, 8001e66 <prvInitialiseNewQueue+0x2c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e46:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001e48:	63e5      	str	r5, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e4a:	6427      	str	r7, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f7ff ffb1 	bl	8001db6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001e54:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 8001e58:	4633      	mov	r3, r6
 8001e5a:	463a      	mov	r2, r7
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	2073      	movs	r0, #115	; 0x73
 8001e60:	f002 f81a 	bl	8003e98 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e66:	6022      	str	r2, [r4, #0]
 8001e68:	e7ee      	b.n	8001e48 <prvInitialiseNewQueue+0xe>

08001e6a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e6a:	b940      	cbnz	r0, 8001e7e <xQueueGenericCreateStatic+0x14>
 8001e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	e7fe      	b.n	8001e7c <xQueueGenericCreateStatic+0x12>
	{
 8001e7e:	b510      	push	{r4, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	461c      	mov	r4, r3
 8001e84:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8001e86:	b153      	cbz	r3, 8001e9e <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e88:	b192      	cbz	r2, 8001eb0 <xQueueGenericCreateStatic+0x46>
 8001e8a:	b989      	cbnz	r1, 8001eb0 <xQueueGenericCreateStatic+0x46>
 8001e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e90:	f383 8811 	msr	BASEPRI, r3
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	e7fe      	b.n	8001e9c <xQueueGenericCreateStatic+0x32>
 8001e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea2:	f383 8811 	msr	BASEPRI, r3
 8001ea6:	f3bf 8f6f 	isb	sy
 8001eaa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8001eae:	e7fe      	b.n	8001eae <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001eb0:	b16a      	cbz	r2, 8001ece <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001eb2:	2350      	movs	r3, #80	; 0x50
 8001eb4:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001eb6:	9b03      	ldr	r3, [sp, #12]
 8001eb8:	2b50      	cmp	r3, #80	; 0x50
 8001eba:	d013      	beq.n	8001ee4 <xQueueGenericCreateStatic+0x7a>
 8001ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec0:	f383 8811 	msr	BASEPRI, r3
 8001ec4:	f3bf 8f6f 	isb	sy
 8001ec8:	f3bf 8f4f 	dsb	sy
 8001ecc:	e7fe      	b.n	8001ecc <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ece:	2900      	cmp	r1, #0
 8001ed0:	d0ef      	beq.n	8001eb2 <xQueueGenericCreateStatic+0x48>
 8001ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed6:	f383 8811 	msr	BASEPRI, r3
 8001eda:	f3bf 8f6f 	isb	sy
 8001ede:	f3bf 8f4f 	dsb	sy
 8001ee2:	e7fe      	b.n	8001ee2 <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001eea:	9400      	str	r4, [sp, #0]
 8001eec:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001ef0:	4660      	mov	r0, ip
 8001ef2:	f7ff ffa2 	bl	8001e3a <prvInitialiseNewQueue>
	}
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	b004      	add	sp, #16
 8001efa:	bd10      	pop	{r4, pc}

08001efc <xQueueGenericSend>:
{
 8001efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efe:	b087      	sub	sp, #28
 8001f00:	9203      	str	r2, [sp, #12]
	configASSERT( pxQueue );
 8001f02:	b188      	cbz	r0, 8001f28 <xQueueGenericSend+0x2c>
 8001f04:	460e      	mov	r6, r1
 8001f06:	461d      	mov	r5, r3
 8001f08:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f0a:	b1b1      	cbz	r1, 8001f3a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f0c:	2d02      	cmp	r5, #2
 8001f0e:	d120      	bne.n	8001f52 <xQueueGenericSend+0x56>
 8001f10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d01d      	beq.n	8001f52 <xQueueGenericSend+0x56>
 8001f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1a:	f383 8811 	msr	BASEPRI, r3
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	e7fe      	b.n	8001f26 <xQueueGenericSend+0x2a>
 8001f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2c:	f383 8811 	msr	BASEPRI, r3
 8001f30:	f3bf 8f6f 	isb	sy
 8001f34:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001f38:	e7fe      	b.n	8001f38 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0e5      	beq.n	8001f0c <xQueueGenericSend+0x10>
 8001f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f44:	f383 8811 	msr	BASEPRI, r3
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	e7fe      	b.n	8001f50 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f52:	f000 ff37 	bl	8002dc4 <xTaskGetSchedulerState>
 8001f56:	4607      	mov	r7, r0
 8001f58:	b958      	cbnz	r0, 8001f72 <xQueueGenericSend+0x76>
 8001f5a:	9b03      	ldr	r3, [sp, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d05c      	beq.n	800201a <xQueueGenericSend+0x11e>
 8001f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f64:	f383 8811 	msr	BASEPRI, r3
 8001f68:	f3bf 8f6f 	isb	sy
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	e7fe      	b.n	8001f70 <xQueueGenericSend+0x74>
 8001f72:	2700      	movs	r7, #0
 8001f74:	e051      	b.n	800201a <xQueueGenericSend+0x11e>
				traceQUEUE_SEND( pxQueue );
 8001f76:	4620      	mov	r0, r4
 8001f78:	f001 fdc2 	bl	8003b00 <SEGGER_SYSVIEW_ShrinkId>
 8001f7c:	4601      	mov	r1, r0
 8001f7e:	9500      	str	r5, [sp, #0]
 8001f80:	9b03      	ldr	r3, [sp, #12]
 8001f82:	4632      	mov	r2, r6
 8001f84:	205a      	movs	r0, #90	; 0x5a
 8001f86:	f001 ffc1 	bl	8003f0c <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f8a:	462a      	mov	r2, r5
 8001f8c:	4631      	mov	r1, r6
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f7ff fe8d 	bl	8001cae <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f96:	b97b      	cbnz	r3, 8001fb8 <xQueueGenericSend+0xbc>
					else if( xYieldRequired != pdFALSE )
 8001f98:	b148      	cbz	r0, 8001fae <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8001f9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001fa6:	f3bf 8f4f 	dsb	sy
 8001faa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001fae:	f001 f9fb 	bl	80033a8 <vPortExitCritical>
				return pdPASS;
 8001fb2:	2001      	movs	r0, #1
}
 8001fb4:	b007      	add	sp, #28
 8001fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001fbc:	f000 fe66 	bl	8002c8c <xTaskRemoveFromEventList>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d0f4      	beq.n	8001fae <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 8001fc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fcc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	f3bf 8f6f 	isb	sy
 8001fd8:	e7e9      	b.n	8001fae <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 8001fda:	f001 f9e5 	bl	80033a8 <vPortExitCritical>
					traceQUEUE_SEND_FAILED( pxQueue );
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f001 fd8e 	bl	8003b00 <SEGGER_SYSVIEW_ShrinkId>
 8001fe4:	4601      	mov	r1, r0
 8001fe6:	9500      	str	r5, [sp, #0]
 8001fe8:	9b03      	ldr	r3, [sp, #12]
 8001fea:	4632      	mov	r2, r6
 8001fec:	205a      	movs	r0, #90	; 0x5a
 8001fee:	f001 ff8d 	bl	8003f0c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	e7de      	b.n	8001fb4 <xQueueGenericSend+0xb8>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ff6:	a804      	add	r0, sp, #16
 8001ff8:	f000 fe90 	bl	8002d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ffc:	2701      	movs	r7, #1
 8001ffe:	e019      	b.n	8002034 <xQueueGenericSend+0x138>
		prvLockQueue( pxQueue );
 8002000:	2300      	movs	r3, #0
 8002002:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002006:	e021      	b.n	800204c <xQueueGenericSend+0x150>
 8002008:	2300      	movs	r3, #0
 800200a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800200e:	e023      	b.n	8002058 <xQueueGenericSend+0x15c>
				prvUnlockQueue( pxQueue );
 8002010:	4620      	mov	r0, r4
 8002012:	f7ff fe99 	bl	8001d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002016:	f000 fcf7 	bl	8002a08 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800201a:	f001 f9a3 	bl	8003364 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800201e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002020:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002022:	429a      	cmp	r2, r3
 8002024:	d3a7      	bcc.n	8001f76 <xQueueGenericSend+0x7a>
 8002026:	2d02      	cmp	r5, #2
 8002028:	d0a5      	beq.n	8001f76 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800202a:	9b03      	ldr	r3, [sp, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0d4      	beq.n	8001fda <xQueueGenericSend+0xde>
				else if( xEntryTimeSet == pdFALSE )
 8002030:	2f00      	cmp	r7, #0
 8002032:	d0e0      	beq.n	8001ff6 <xQueueGenericSend+0xfa>
		taskEXIT_CRITICAL();
 8002034:	f001 f9b8 	bl	80033a8 <vPortExitCritical>
		vTaskSuspendAll();
 8002038:	f000 fc4a 	bl	80028d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800203c:	f001 f992 	bl	8003364 <vPortEnterCritical>
 8002040:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8002044:	b252      	sxtb	r2, r2
 8002046:	f1b2 3fff 	cmp.w	r2, #4294967295
 800204a:	d0d9      	beq.n	8002000 <xQueueGenericSend+0x104>
 800204c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8002050:	b252      	sxtb	r2, r2
 8002052:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002056:	d0d7      	beq.n	8002008 <xQueueGenericSend+0x10c>
 8002058:	f001 f9a6 	bl	80033a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800205c:	a903      	add	r1, sp, #12
 800205e:	a804      	add	r0, sp, #16
 8002060:	f000 fe68 	bl	8002d34 <xTaskCheckForTimeOut>
 8002064:	b9d8      	cbnz	r0, 800209e <xQueueGenericSend+0x1a2>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002066:	4620      	mov	r0, r4
 8002068:	f7ff fe05 	bl	8001c76 <prvIsQueueFull>
 800206c:	2800      	cmp	r0, #0
 800206e:	d0cf      	beq.n	8002010 <xQueueGenericSend+0x114>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002070:	9903      	ldr	r1, [sp, #12]
 8002072:	f104 0010 	add.w	r0, r4, #16
 8002076:	f000 fdd1 	bl	8002c1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800207a:	4620      	mov	r0, r4
 800207c:	f7ff fe64 	bl	8001d48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002080:	f000 fcc2 	bl	8002a08 <xTaskResumeAll>
 8002084:	2800      	cmp	r0, #0
 8002086:	d1c8      	bne.n	800201a <xQueueGenericSend+0x11e>
					portYIELD_WITHIN_API();
 8002088:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800208c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002090:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	e7bd      	b.n	800201a <xQueueGenericSend+0x11e>
			prvUnlockQueue( pxQueue );
 800209e:	4620      	mov	r0, r4
 80020a0:	f7ff fe52 	bl	8001d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020a4:	f000 fcb0 	bl	8002a08 <xTaskResumeAll>
			traceQUEUE_SEND_FAILED( pxQueue );
 80020a8:	4620      	mov	r0, r4
 80020aa:	f001 fd29 	bl	8003b00 <SEGGER_SYSVIEW_ShrinkId>
 80020ae:	4601      	mov	r1, r0
 80020b0:	9500      	str	r5, [sp, #0]
 80020b2:	9b03      	ldr	r3, [sp, #12]
 80020b4:	4632      	mov	r2, r6
 80020b6:	205a      	movs	r0, #90	; 0x5a
 80020b8:	f001 ff28 	bl	8003f0c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80020bc:	2000      	movs	r0, #0
 80020be:	e779      	b.n	8001fb4 <xQueueGenericSend+0xb8>

080020c0 <xQueueGenericSendFromISR>:
{
 80020c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80020c4:	b190      	cbz	r0, 80020ec <xQueueGenericSendFromISR+0x2c>
 80020c6:	460f      	mov	r7, r1
 80020c8:	4615      	mov	r5, r2
 80020ca:	461c      	mov	r4, r3
 80020cc:	4606      	mov	r6, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020ce:	b1b1      	cbz	r1, 80020fe <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020d0:	2c02      	cmp	r4, #2
 80020d2:	d120      	bne.n	8002116 <xQueueGenericSendFromISR+0x56>
 80020d4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d01d      	beq.n	8002116 <xQueueGenericSendFromISR+0x56>
 80020da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020de:	f383 8811 	msr	BASEPRI, r3
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	e7fe      	b.n	80020ea <xQueueGenericSendFromISR+0x2a>
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80020fc:	e7fe      	b.n	80020fc <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0e5      	beq.n	80020d0 <xQueueGenericSendFromISR+0x10>
 8002104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002108:	f383 8811 	msr	BASEPRI, r3
 800210c:	f3bf 8f6f 	isb	sy
 8002110:	f3bf 8f4f 	dsb	sy
 8002114:	e7fe      	b.n	8002114 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002116:	f001 fa0f 	bl	8003538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800211a:	f3ef 8911 	mrs	r9, BASEPRI
 800211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800212e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8002130:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8002132:	429a      	cmp	r2, r3
 8002134:	d301      	bcc.n	800213a <xQueueGenericSendFromISR+0x7a>
 8002136:	2c02      	cmp	r4, #2
 8002138:	d12a      	bne.n	8002190 <xQueueGenericSendFromISR+0xd0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800213a:	f896 8045 	ldrb.w	r8, [r6, #69]	; 0x45
 800213e:	fa4f f888 	sxtb.w	r8, r8
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002142:	4630      	mov	r0, r6
 8002144:	f001 fcdc 	bl	8003b00 <SEGGER_SYSVIEW_ShrinkId>
 8002148:	4601      	mov	r1, r0
 800214a:	462a      	mov	r2, r5
 800214c:	2060      	movs	r0, #96	; 0x60
 800214e:	f001 fe61 	bl	8003e14 <SEGGER_SYSVIEW_RecordU32x2>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002152:	4622      	mov	r2, r4
 8002154:	4639      	mov	r1, r7
 8002156:	4630      	mov	r0, r6
 8002158:	f7ff fda9 	bl	8001cae <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800215c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002160:	d009      	beq.n	8002176 <xQueueGenericSendFromISR+0xb6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002162:	f108 0301 	add.w	r3, r8, #1
 8002166:	b25b      	sxtb	r3, r3
 8002168:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
			xReturn = pdPASS;
 800216c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800216e:	f389 8811 	msr	BASEPRI, r9
}
 8002172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002176:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002178:	b90b      	cbnz	r3, 800217e <xQueueGenericSendFromISR+0xbe>
			xReturn = pdPASS;
 800217a:	2001      	movs	r0, #1
 800217c:	e7f7      	b.n	800216e <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800217e:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8002182:	f000 fd83 	bl	8002c8c <xTaskRemoveFromEventList>
 8002186:	b168      	cbz	r0, 80021a4 <xQueueGenericSendFromISR+0xe4>
							if( pxHigherPriorityTaskWoken != NULL )
 8002188:	b175      	cbz	r5, 80021a8 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800218a:	2001      	movs	r0, #1
 800218c:	6028      	str	r0, [r5, #0]
 800218e:	e7ee      	b.n	800216e <xQueueGenericSendFromISR+0xae>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002190:	4630      	mov	r0, r6
 8002192:	f001 fcb5 	bl	8003b00 <SEGGER_SYSVIEW_ShrinkId>
 8002196:	4601      	mov	r1, r0
 8002198:	462a      	mov	r2, r5
 800219a:	2060      	movs	r0, #96	; 0x60
 800219c:	f001 fe3a 	bl	8003e14 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80021a0:	2000      	movs	r0, #0
 80021a2:	e7e4      	b.n	800216e <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
 80021a4:	2001      	movs	r0, #1
 80021a6:	e7e2      	b.n	800216e <xQueueGenericSendFromISR+0xae>
 80021a8:	2001      	movs	r0, #1
 80021aa:	e7e0      	b.n	800216e <xQueueGenericSendFromISR+0xae>

080021ac <xQueueReceive>:
{
 80021ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ae:	b087      	sub	sp, #28
 80021b0:	9203      	str	r2, [sp, #12]
	configASSERT( ( pxQueue ) );
 80021b2:	b190      	cbz	r0, 80021da <xQueueReceive+0x2e>
 80021b4:	460f      	mov	r7, r1
 80021b6:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021b8:	b1c1      	cbz	r1, 80021ec <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021ba:	f000 fe03 	bl	8002dc4 <xTaskGetSchedulerState>
 80021be:	4606      	mov	r6, r0
 80021c0:	bb00      	cbnz	r0, 8002204 <xQueueReceive+0x58>
 80021c2:	9b03      	ldr	r3, [sp, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d07c      	beq.n	80022c2 <xQueueReceive+0x116>
	__asm volatile
 80021c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	e7fe      	b.n	80021d8 <xQueueReceive+0x2c>
 80021da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021de:	f383 8811 	msr	BASEPRI, r3
 80021e2:	f3bf 8f6f 	isb	sy
 80021e6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80021ea:	e7fe      	b.n	80021ea <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0e3      	beq.n	80021ba <xQueueReceive+0xe>
 80021f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f6:	f383 8811 	msr	BASEPRI, r3
 80021fa:	f3bf 8f6f 	isb	sy
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	e7fe      	b.n	8002202 <xQueueReceive+0x56>
 8002204:	2600      	movs	r6, #0
 8002206:	e05c      	b.n	80022c2 <xQueueReceive+0x116>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002208:	4639      	mov	r1, r7
 800220a:	4620      	mov	r0, r4
 800220c:	f7ff fd8a 	bl	8001d24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8002210:	4620      	mov	r0, r4
 8002212:	f001 fc75 	bl	8003b00 <SEGGER_SYSVIEW_ShrinkId>
 8002216:	4606      	mov	r6, r0
 8002218:	2000      	movs	r0, #0
 800221a:	f001 fc71 	bl	8003b00 <SEGGER_SYSVIEW_ShrinkId>
 800221e:	4602      	mov	r2, r0
 8002220:	2301      	movs	r3, #1
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	9b03      	ldr	r3, [sp, #12]
 8002226:	4631      	mov	r1, r6
 8002228:	205c      	movs	r0, #92	; 0x5c
 800222a:	f001 fe6f 	bl	8003f0c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800222e:	3d01      	subs	r5, #1
 8002230:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002232:	6923      	ldr	r3, [r4, #16]
 8002234:	b923      	cbnz	r3, 8002240 <xQueueReceive+0x94>
				taskEXIT_CRITICAL();
 8002236:	f001 f8b7 	bl	80033a8 <vPortExitCritical>
				return pdPASS;
 800223a:	2001      	movs	r0, #1
}
 800223c:	b007      	add	sp, #28
 800223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002240:	f104 0010 	add.w	r0, r4, #16
 8002244:	f000 fd22 	bl	8002c8c <xTaskRemoveFromEventList>
 8002248:	2800      	cmp	r0, #0
 800224a:	d0f4      	beq.n	8002236 <xQueueReceive+0x8a>
						queueYIELD_IF_USING_PREEMPTION();
 800224c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002254:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	e7e9      	b.n	8002236 <xQueueReceive+0x8a>
					taskEXIT_CRITICAL();
 8002262:	f001 f8a1 	bl	80033a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002266:	4620      	mov	r0, r4
 8002268:	f001 fc4a 	bl	8003b00 <SEGGER_SYSVIEW_ShrinkId>
 800226c:	4604      	mov	r4, r0
 800226e:	2000      	movs	r0, #0
 8002270:	f001 fc46 	bl	8003b00 <SEGGER_SYSVIEW_ShrinkId>
 8002274:	4602      	mov	r2, r0
 8002276:	2301      	movs	r3, #1
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	9b03      	ldr	r3, [sp, #12]
 800227c:	4621      	mov	r1, r4
 800227e:	205c      	movs	r0, #92	; 0x5c
 8002280:	f001 fe44 	bl	8003f0c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8002284:	2000      	movs	r0, #0
 8002286:	e7d9      	b.n	800223c <xQueueReceive+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002288:	a804      	add	r0, sp, #16
 800228a:	f000 fd47 	bl	8002d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800228e:	2601      	movs	r6, #1
 8002290:	e021      	b.n	80022d6 <xQueueReceive+0x12a>
		prvLockQueue( pxQueue );
 8002292:	2300      	movs	r3, #0
 8002294:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002298:	e029      	b.n	80022ee <xQueueReceive+0x142>
 800229a:	2300      	movs	r3, #0
 800229c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80022a0:	e02b      	b.n	80022fa <xQueueReceive+0x14e>
				prvUnlockQueue( pxQueue );
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7ff fd50 	bl	8001d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022a8:	f000 fbae 	bl	8002a08 <xTaskResumeAll>
 80022ac:	e009      	b.n	80022c2 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 80022ae:	4620      	mov	r0, r4
 80022b0:	f7ff fd4a 	bl	8001d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022b4:	f000 fba8 	bl	8002a08 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff fceb 	bl	8001c94 <prvIsQueueEmpty>
 80022be:	2800      	cmp	r0, #0
 80022c0:	d13f      	bne.n	8002342 <xQueueReceive+0x196>
		taskENTER_CRITICAL();
 80022c2:	f001 f84f 	bl	8003364 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022c6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022c8:	2d00      	cmp	r5, #0
 80022ca:	d19d      	bne.n	8002208 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80022cc:	9b03      	ldr	r3, [sp, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0c7      	beq.n	8002262 <xQueueReceive+0xb6>
				else if( xEntryTimeSet == pdFALSE )
 80022d2:	2e00      	cmp	r6, #0
 80022d4:	d0d8      	beq.n	8002288 <xQueueReceive+0xdc>
		taskEXIT_CRITICAL();
 80022d6:	f001 f867 	bl	80033a8 <vPortExitCritical>
		vTaskSuspendAll();
 80022da:	f000 faf9 	bl	80028d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022de:	f001 f841 	bl	8003364 <vPortEnterCritical>
 80022e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80022e6:	b25b      	sxtb	r3, r3
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d0d1      	beq.n	8002292 <xQueueReceive+0xe6>
 80022ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d0cf      	beq.n	800229a <xQueueReceive+0xee>
 80022fa:	f001 f855 	bl	80033a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022fe:	a903      	add	r1, sp, #12
 8002300:	a804      	add	r0, sp, #16
 8002302:	f000 fd17 	bl	8002d34 <xTaskCheckForTimeOut>
 8002306:	2800      	cmp	r0, #0
 8002308:	d1d1      	bne.n	80022ae <xQueueReceive+0x102>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800230a:	4620      	mov	r0, r4
 800230c:	f7ff fcc2 	bl	8001c94 <prvIsQueueEmpty>
 8002310:	2800      	cmp	r0, #0
 8002312:	d0c6      	beq.n	80022a2 <xQueueReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002314:	9903      	ldr	r1, [sp, #12]
 8002316:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800231a:	f000 fc7f 	bl	8002c1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800231e:	4620      	mov	r0, r4
 8002320:	f7ff fd12 	bl	8001d48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002324:	f000 fb70 	bl	8002a08 <xTaskResumeAll>
 8002328:	2800      	cmp	r0, #0
 800232a:	d1ca      	bne.n	80022c2 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800232c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002334:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	e7bf      	b.n	80022c2 <xQueueReceive+0x116>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002342:	4620      	mov	r0, r4
 8002344:	f001 fbdc 	bl	8003b00 <SEGGER_SYSVIEW_ShrinkId>
 8002348:	4604      	mov	r4, r0
 800234a:	2000      	movs	r0, #0
 800234c:	f001 fbd8 	bl	8003b00 <SEGGER_SYSVIEW_ShrinkId>
 8002350:	4602      	mov	r2, r0
 8002352:	2301      	movs	r3, #1
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	9b03      	ldr	r3, [sp, #12]
 8002358:	4621      	mov	r1, r4
 800235a:	205c      	movs	r0, #92	; 0x5c
 800235c:	f001 fdd6 	bl	8003f0c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002360:	2000      	movs	r0, #0
 8002362:	e76b      	b.n	800223c <xQueueReceive+0x90>

08002364 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002364:	b510      	push	{r4, lr}
 8002366:	460c      	mov	r4, r1
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002368:	2300      	movs	r3, #0
 800236a:	2b07      	cmp	r3, #7
 800236c:	d812      	bhi.n	8002394 <vQueueAddToRegistry+0x30>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <vQueueAddToRegistry+0x34>)
 8002370:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002374:	b10a      	cbz	r2, 800237a <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002376:	3301      	adds	r3, #1
 8002378:	e7f7      	b.n	800236a <vQueueAddToRegistry+0x6>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <vQueueAddToRegistry+0x34>)
 800237c:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002384:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002386:	f001 fbbb 	bl	8003b00 <SEGGER_SYSVIEW_ShrinkId>
 800238a:	4601      	mov	r1, r0
 800238c:	4622      	mov	r2, r4
 800238e:	2071      	movs	r0, #113	; 0x71
 8002390:	f001 fd40 	bl	8003e14 <SEGGER_SYSVIEW_RecordU32x2>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002394:	bd10      	pop	{r4, pc}
 8002396:	bf00      	nop
 8002398:	200008a8 	.word	0x200008a8

0800239c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	4604      	mov	r4, r0
 80023a0:	460d      	mov	r5, r1
 80023a2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80023a4:	f000 ffde 	bl	8003364 <vPortEnterCritical>
 80023a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b2:	d00d      	beq.n	80023d0 <vQueueWaitForMessageRestricted+0x34>
 80023b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d00b      	beq.n	80023d8 <vQueueWaitForMessageRestricted+0x3c>
 80023c0:	f000 fff2 	bl	80033a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80023c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023c6:	b15b      	cbz	r3, 80023e0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80023c8:	4620      	mov	r0, r4
 80023ca:	f7ff fcbd 	bl	8001d48 <prvUnlockQueue>
	}
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80023d0:	2300      	movs	r3, #0
 80023d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80023d6:	e7ed      	b.n	80023b4 <vQueueWaitForMessageRestricted+0x18>
 80023d8:	2300      	movs	r3, #0
 80023da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023de:	e7ef      	b.n	80023c0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80023e0:	4632      	mov	r2, r6
 80023e2:	4629      	mov	r1, r5
 80023e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023e8:	f000 fc30 	bl	8002c4c <vTaskPlaceOnEventListRestricted>
 80023ec:	e7ec      	b.n	80023c8 <vQueueWaitForMessageRestricted+0x2c>
	...

080023f0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <prvResetNextTaskUnblockTime+0x24>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	b923      	cbnz	r3, 8002402 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <prvResetNextTaskUnblockTime+0x28>)
 80023fa:	f04f 32ff 	mov.w	r2, #4294967295
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <prvResetNextTaskUnblockTime+0x24>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4b02      	ldr	r3, [pc, #8]	; (8002418 <prvResetNextTaskUnblockTime+0x28>)
 800240e:	601a      	str	r2, [r3, #0]
	}
}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	200008ec 	.word	0x200008ec
 8002418:	20000d98 	.word	0x20000d98

0800241c <prvInitialiseNewTask>:
{
 800241c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002420:	4680      	mov	r8, r0
 8002422:	460d      	mov	r5, r1
 8002424:	4617      	mov	r7, r2
 8002426:	4699      	mov	r9, r3
 8002428:	9e08      	ldr	r6, [sp, #32]
 800242a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800242e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	21a5      	movs	r1, #165	; 0xa5
 8002434:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002436:	f002 f8d6 	bl	80045e6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800243a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800243c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8002440:	3a01      	subs	r2, #1
 8002442:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002446:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800244a:	f04f 0c00 	mov.w	ip, #0
 800244e:	f1bc 0f0f 	cmp.w	ip, #15
 8002452:	d80b      	bhi.n	800246c <prvInitialiseNewTask+0x50>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002454:	f815 200c 	ldrb.w	r2, [r5, ip]
 8002458:	eb04 030c 	add.w	r3, r4, ip
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8002460:	f815 300c 	ldrb.w	r3, [r5, ip]
 8002464:	b113      	cbz	r3, 800246c <prvInitialiseNewTask+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002466:	f10c 0c01 	add.w	ip, ip, #1
 800246a:	e7f0      	b.n	800244e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800246c:	2300      	movs	r3, #0
 800246e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002472:	2e37      	cmp	r6, #55	; 0x37
 8002474:	d900      	bls.n	8002478 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002476:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8002478:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800247a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800247c:	2500      	movs	r5, #0
 800247e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002480:	1d20      	adds	r0, r4, #4
 8002482:	f7ff fbbe 	bl	8001c02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002486:	f104 0018 	add.w	r0, r4, #24
 800248a:	f7ff fbba 	bl	8001c02 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800248e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002490:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8002494:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002496:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8002498:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800249c:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80024a0:	2260      	movs	r2, #96	; 0x60
 80024a2:	4629      	mov	r1, r5
 80024a4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80024a8:	f002 f89d 	bl	80045e6 <memset>
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <prvInitialiseNewTask+0xb8>)
 80024ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <prvInitialiseNewTask+0xbc>)
 80024b2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <prvInitialiseNewTask+0xc0>)
 80024b6:	6623      	str	r3, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024b8:	464a      	mov	r2, r9
 80024ba:	4641      	mov	r1, r8
 80024bc:	4638      	mov	r0, r7
 80024be:	f000 ff29 	bl	8003314 <pxPortInitialiseStack>
 80024c2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80024c4:	f1ba 0f00 	cmp.w	sl, #0
 80024c8:	d001      	beq.n	80024ce <prvInitialiseNewTask+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024ca:	f8ca 4000 	str.w	r4, [sl]
}
 80024ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024d2:	bf00      	nop
 80024d4:	08005854 	.word	0x08005854
 80024d8:	08005874 	.word	0x08005874
 80024dc:	08005834 	.word	0x08005834

080024e0 <prvInitialiseTaskLists>:
{
 80024e0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024e2:	2400      	movs	r4, #0
 80024e4:	e007      	b.n	80024f6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80024e6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80024ea:	0093      	lsls	r3, r2, #2
 80024ec:	480e      	ldr	r0, [pc, #56]	; (8002528 <prvInitialiseTaskLists+0x48>)
 80024ee:	4418      	add	r0, r3
 80024f0:	f7ff fb7c 	bl	8001bec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024f4:	3401      	adds	r4, #1
 80024f6:	2c37      	cmp	r4, #55	; 0x37
 80024f8:	d9f5      	bls.n	80024e6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80024fa:	4d0c      	ldr	r5, [pc, #48]	; (800252c <prvInitialiseTaskLists+0x4c>)
 80024fc:	4628      	mov	r0, r5
 80024fe:	f7ff fb75 	bl	8001bec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002502:	4c0b      	ldr	r4, [pc, #44]	; (8002530 <prvInitialiseTaskLists+0x50>)
 8002504:	4620      	mov	r0, r4
 8002506:	f7ff fb71 	bl	8001bec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800250a:	480a      	ldr	r0, [pc, #40]	; (8002534 <prvInitialiseTaskLists+0x54>)
 800250c:	f7ff fb6e 	bl	8001bec <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002510:	4809      	ldr	r0, [pc, #36]	; (8002538 <prvInitialiseTaskLists+0x58>)
 8002512:	f7ff fb6b 	bl	8001bec <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002516:	4809      	ldr	r0, [pc, #36]	; (800253c <prvInitialiseTaskLists+0x5c>)
 8002518:	f7ff fb68 	bl	8001bec <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <prvInitialiseTaskLists+0x60>)
 800251e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <prvInitialiseTaskLists+0x64>)
 8002522:	601c      	str	r4, [r3, #0]
}
 8002524:	bd38      	pop	{r3, r4, r5, pc}
 8002526:	bf00      	nop
 8002528:	200008f4 	.word	0x200008f4
 800252c:	20000d6c 	.word	0x20000d6c
 8002530:	20000d80 	.word	0x20000d80
 8002534:	20000da0 	.word	0x20000da0
 8002538:	20000dcc 	.word	0x20000dcc
 800253c:	20000db8 	.word	0x20000db8
 8002540:	200008ec 	.word	0x200008ec
 8002544:	200008f0 	.word	0x200008f0

08002548 <prvAddNewTaskToReadyList>:
{
 8002548:	b510      	push	{r4, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800254e:	f000 ff09 	bl	8003364 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002552:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <prvAddNewTaskToReadyList+0xb8>)
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800255a:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <prvAddNewTaskToReadyList+0xbc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	b15b      	cbz	r3, 8002578 <prvAddNewTaskToReadyList+0x30>
			if( xSchedulerRunning == pdFALSE )
 8002560:	4b29      	ldr	r3, [pc, #164]	; (8002608 <prvAddNewTaskToReadyList+0xc0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	b96b      	cbnz	r3, 8002582 <prvAddNewTaskToReadyList+0x3a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002566:	4b27      	ldr	r3, [pc, #156]	; (8002604 <prvAddNewTaskToReadyList+0xbc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800256e:	429a      	cmp	r2, r3
 8002570:	d807      	bhi.n	8002582 <prvAddNewTaskToReadyList+0x3a>
					pxCurrentTCB = pxNewTCB;
 8002572:	4b24      	ldr	r3, [pc, #144]	; (8002604 <prvAddNewTaskToReadyList+0xbc>)
 8002574:	601c      	str	r4, [r3, #0]
 8002576:	e004      	b.n	8002582 <prvAddNewTaskToReadyList+0x3a>
			pxCurrentTCB = pxNewTCB;
 8002578:	4b22      	ldr	r3, [pc, #136]	; (8002604 <prvAddNewTaskToReadyList+0xbc>)
 800257a:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800257c:	6813      	ldr	r3, [r2, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d03b      	beq.n	80025fa <prvAddNewTaskToReadyList+0xb2>
		uxTaskNumber++;
 8002582:	4a22      	ldr	r2, [pc, #136]	; (800260c <prvAddNewTaskToReadyList+0xc4>)
 8002584:	6813      	ldr	r3, [r2, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800258a:	6463      	str	r3, [r4, #68]	; 0x44
		traceTASK_CREATE( pxNewTCB );
 800258c:	b164      	cbz	r4, 80025a8 <prvAddNewTaskToReadyList+0x60>
 800258e:	4620      	mov	r0, r4
 8002590:	f001 fdd6 	bl	8004140 <SEGGER_SYSVIEW_OnTaskCreate>
 8002594:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002596:	6822      	ldr	r2, [r4, #0]
 8002598:	1ad2      	subs	r2, r2, r3
 800259a:	9200      	str	r2, [sp, #0]
 800259c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800259e:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80025a2:	4620      	mov	r0, r4
 80025a4:	f001 fea8 	bl	80042f8 <SYSVIEW_AddTask>
		prvAddTaskToReadyList( pxNewTCB );
 80025a8:	4620      	mov	r0, r4
 80025aa:	f001 fe11 	bl	80041d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <prvAddNewTaskToReadyList+0xc8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4298      	cmp	r0, r3
 80025b6:	d901      	bls.n	80025bc <prvAddNewTaskToReadyList+0x74>
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <prvAddNewTaskToReadyList+0xc8>)
 80025ba:	6018      	str	r0, [r3, #0]
 80025bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025c0:	1d21      	adds	r1, r4, #4
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <prvAddNewTaskToReadyList+0xcc>)
 80025c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80025c8:	f7ff fb1e 	bl	8001c08 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80025cc:	f000 feec 	bl	80033a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80025d0:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <prvAddNewTaskToReadyList+0xc0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b17b      	cbz	r3, 80025f6 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <prvAddNewTaskToReadyList+0xbc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025de:	429a      	cmp	r2, r3
 80025e0:	d209      	bcs.n	80025f6 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 80025e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80025e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80025ee:	f3bf 8f4f 	dsb	sy
 80025f2:	f3bf 8f6f 	isb	sy
}
 80025f6:	b002      	add	sp, #8
 80025f8:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80025fa:	f7ff ff71 	bl	80024e0 <prvInitialiseTaskLists>
 80025fe:	e7c0      	b.n	8002582 <prvAddNewTaskToReadyList+0x3a>
 8002600:	20000d54 	.word	0x20000d54
 8002604:	200008e8 	.word	0x200008e8
 8002608:	20000db4 	.word	0x20000db4
 800260c:	20000d64 	.word	0x20000d64
 8002610:	20000d68 	.word	0x20000d68
 8002614:	200008f4 	.word	0x200008f4

08002618 <prvDeleteTCB>:
	{
 8002618:	b510      	push	{r4, lr}
 800261a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800261c:	3054      	adds	r0, #84	; 0x54
 800261e:	f002 f91b 	bl	8004858 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002622:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8002626:	b163      	cbz	r3, 8002642 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002628:	2b01      	cmp	r3, #1
 800262a:	d011      	beq.n	8002650 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800262c:	2b02      	cmp	r3, #2
 800262e:	d00e      	beq.n	800264e <prvDeleteTCB+0x36>
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	e7fe      	b.n	8002640 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8002642:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002644:	f001 f880 	bl	8003748 <vPortFree>
				vPortFree( pxTCB );
 8002648:	4620      	mov	r0, r4
 800264a:	f001 f87d 	bl	8003748 <vPortFree>
	}
 800264e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8002650:	4620      	mov	r0, r4
 8002652:	f001 f879 	bl	8003748 <vPortFree>
 8002656:	e7fa      	b.n	800264e <prvDeleteTCB+0x36>

08002658 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <prvCheckTasksWaitingTermination+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	b1d3      	cbz	r3, 8002694 <prvCheckTasksWaitingTermination+0x3c>
{
 800265e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8002660:	f000 fe80 	bl	8003364 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002664:	4b0d      	ldr	r3, [pc, #52]	; (800269c <prvCheckTasksWaitingTermination+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800266a:	1d20      	adds	r0, r4, #4
 800266c:	f7ff faf0 	bl	8001c50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002670:	4a0b      	ldr	r2, [pc, #44]	; (80026a0 <prvCheckTasksWaitingTermination+0x48>)
 8002672:	6813      	ldr	r3, [r2, #0]
 8002674:	3b01      	subs	r3, #1
 8002676:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002678:	4a07      	ldr	r2, [pc, #28]	; (8002698 <prvCheckTasksWaitingTermination+0x40>)
 800267a:	6813      	ldr	r3, [r2, #0]
 800267c:	3b01      	subs	r3, #1
 800267e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8002680:	f000 fe92 	bl	80033a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002684:	4620      	mov	r0, r4
 8002686:	f7ff ffc7 	bl	8002618 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800268a:	4b03      	ldr	r3, [pc, #12]	; (8002698 <prvCheckTasksWaitingTermination+0x40>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1e6      	bne.n	8002660 <prvCheckTasksWaitingTermination+0x8>
}
 8002692:	bd10      	pop	{r4, pc}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000d58 	.word	0x20000d58
 800269c:	20000dcc 	.word	0x20000dcc
 80026a0:	20000d54 	.word	0x20000d54

080026a4 <prvIdleTask>:
{
 80026a4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80026a6:	f7ff ffd7 	bl	8002658 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <prvIdleTask+0x24>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d9f9      	bls.n	80026a6 <prvIdleTask+0x2>
				taskYIELD();
 80026b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80026b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	e7ee      	b.n	80026a6 <prvIdleTask+0x2>
 80026c8:	200008f4 	.word	0x200008f4

080026cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	4604      	mov	r4, r0
 80026d0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <prvAddCurrentTaskToDelayedList+0x64>)
 80026d4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026d6:	4b17      	ldr	r3, [pc, #92]	; (8002734 <prvAddCurrentTaskToDelayedList+0x68>)
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	3004      	adds	r0, #4
 80026dc:	f7ff fab8 	bl	8001c50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80026e0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80026e4:	d00d      	beq.n	8002702 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80026e6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <prvAddCurrentTaskToDelayedList+0x68>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80026ee:	42a6      	cmp	r6, r4
 80026f0:	d910      	bls.n	8002714 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026f2:	4b11      	ldr	r3, [pc, #68]	; (8002738 <prvAddCurrentTaskToDelayedList+0x6c>)
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <prvAddCurrentTaskToDelayedList+0x68>)
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	3104      	adds	r1, #4
 80026fc:	f7ff fa8f 	bl	8001c1e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002700:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002702:	2d00      	cmp	r5, #0
 8002704:	d0ef      	beq.n	80026e6 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <prvAddCurrentTaskToDelayedList+0x68>)
 8002708:	6819      	ldr	r1, [r3, #0]
 800270a:	3104      	adds	r1, #4
 800270c:	480b      	ldr	r0, [pc, #44]	; (800273c <prvAddCurrentTaskToDelayedList+0x70>)
 800270e:	f7ff fa7b 	bl	8001c08 <vListInsertEnd>
 8002712:	e7f5      	b.n	8002700 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <prvAddCurrentTaskToDelayedList+0x74>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <prvAddCurrentTaskToDelayedList+0x68>)
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	3104      	adds	r1, #4
 800271e:	f7ff fa7e 	bl	8001c1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <prvAddCurrentTaskToDelayedList+0x78>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	42a3      	cmp	r3, r4
 8002728:	d9ea      	bls.n	8002700 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <prvAddCurrentTaskToDelayedList+0x78>)
 800272c:	601c      	str	r4, [r3, #0]
}
 800272e:	e7e7      	b.n	8002700 <prvAddCurrentTaskToDelayedList+0x34>
 8002730:	20000de0 	.word	0x20000de0
 8002734:	200008e8 	.word	0x200008e8
 8002738:	200008f0 	.word	0x200008f0
 800273c:	20000db8 	.word	0x20000db8
 8002740:	200008ec 	.word	0x200008ec
 8002744:	20000d98 	.word	0x20000d98

08002748 <xTaskCreateStatic>:
	{
 8002748:	b530      	push	{r4, r5, lr}
 800274a:	b087      	sub	sp, #28
 800274c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800274e:	b17c      	cbz	r4, 8002770 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002750:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002752:	b1b5      	cbz	r5, 8002782 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002754:	25bc      	movs	r5, #188	; 0xbc
 8002756:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002758:	9d04      	ldr	r5, [sp, #16]
 800275a:	2dbc      	cmp	r5, #188	; 0xbc
 800275c:	d01a      	beq.n	8002794 <xTaskCreateStatic+0x4c>
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	e7fe      	b.n	800276e <xTaskCreateStatic+0x26>
 8002770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002780:	e7fe      	b.n	8002780 <xTaskCreateStatic+0x38>
 8002782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002792:	e7fe      	b.n	8002792 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002794:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002796:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002798:	2402      	movs	r4, #2
 800279a:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800279e:	2400      	movs	r4, #0
 80027a0:	9403      	str	r4, [sp, #12]
 80027a2:	9502      	str	r5, [sp, #8]
 80027a4:	ac05      	add	r4, sp, #20
 80027a6:	9401      	str	r4, [sp, #4]
 80027a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80027aa:	9400      	str	r4, [sp, #0]
 80027ac:	f7ff fe36 	bl	800241c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027b0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80027b2:	f7ff fec9 	bl	8002548 <prvAddNewTaskToReadyList>
	}
 80027b6:	9805      	ldr	r0, [sp, #20]
 80027b8:	b007      	add	sp, #28
 80027ba:	bd30      	pop	{r4, r5, pc}

080027bc <xTaskCreate>:
	{
 80027bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027c0:	b085      	sub	sp, #20
 80027c2:	4607      	mov	r7, r0
 80027c4:	4688      	mov	r8, r1
 80027c6:	4614      	mov	r4, r2
 80027c8:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ca:	0090      	lsls	r0, r2, #2
 80027cc:	f000 ff44 	bl	8003658 <pvPortMalloc>
			if( pxStack != NULL )
 80027d0:	b300      	cbz	r0, 8002814 <xTaskCreate+0x58>
 80027d2:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80027d4:	20bc      	movs	r0, #188	; 0xbc
 80027d6:	f000 ff3f 	bl	8003658 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80027da:	4605      	mov	r5, r0
 80027dc:	b1b0      	cbz	r0, 800280c <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80027de:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80027e2:	b1e5      	cbz	r5, 800281e <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027ea:	9303      	str	r3, [sp, #12]
 80027ec:	9502      	str	r5, [sp, #8]
 80027ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	4633      	mov	r3, r6
 80027f8:	4622      	mov	r2, r4
 80027fa:	4641      	mov	r1, r8
 80027fc:	4638      	mov	r0, r7
 80027fe:	f7ff fe0d 	bl	800241c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002802:	4628      	mov	r0, r5
 8002804:	f7ff fea0 	bl	8002548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002808:	2001      	movs	r0, #1
 800280a:	e005      	b.n	8002818 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800280c:	4648      	mov	r0, r9
 800280e:	f000 ff9b 	bl	8003748 <vPortFree>
 8002812:	e7e6      	b.n	80027e2 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002814:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8002818:	b005      	add	sp, #20
 800281a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800281e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002822:	e7f9      	b.n	8002818 <xTaskCreate+0x5c>

08002824 <vTaskStartScheduler>:
{
 8002824:	b510      	push	{r4, lr}
 8002826:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002828:	2400      	movs	r4, #0
 800282a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800282c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800282e:	aa07      	add	r2, sp, #28
 8002830:	a906      	add	r1, sp, #24
 8002832:	a805      	add	r0, sp, #20
 8002834:	f7ff f9c2 	bl	8001bbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002838:	9b05      	ldr	r3, [sp, #20]
 800283a:	9302      	str	r3, [sp, #8]
 800283c:	9b06      	ldr	r3, [sp, #24]
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	9400      	str	r4, [sp, #0]
 8002842:	4623      	mov	r3, r4
 8002844:	9a07      	ldr	r2, [sp, #28]
 8002846:	491a      	ldr	r1, [pc, #104]	; (80028b0 <vTaskStartScheduler+0x8c>)
 8002848:	481a      	ldr	r0, [pc, #104]	; (80028b4 <vTaskStartScheduler+0x90>)
 800284a:	f7ff ff7d 	bl	8002748 <xTaskCreateStatic>
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <vTaskStartScheduler+0x94>)
 8002850:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8002852:	b140      	cbz	r0, 8002866 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8002854:	f000 fb82 	bl	8002f5c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002858:	2801      	cmp	r0, #1
 800285a:	d006      	beq.n	800286a <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800285c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002860:	d01d      	beq.n	800289e <vTaskStartScheduler+0x7a>
}
 8002862:	b008      	add	sp, #32
 8002864:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8002866:	2000      	movs	r0, #0
 8002868:	e7f6      	b.n	8002858 <vTaskStartScheduler+0x34>
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <vTaskStartScheduler+0x98>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	3354      	adds	r3, #84	; 0x54
 8002880:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <vTaskStartScheduler+0x9c>)
 8002882:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <vTaskStartScheduler+0xa0>)
 8002886:	f04f 32ff 	mov.w	r2, #4294967295
 800288a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <vTaskStartScheduler+0xa4>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <vTaskStartScheduler+0xa8>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002898:	f000 fdee 	bl	8003478 <xPortStartScheduler>
 800289c:	e7e1      	b.n	8002862 <vTaskStartScheduler+0x3e>
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028ae:	e7fe      	b.n	80028ae <vTaskStartScheduler+0x8a>
 80028b0:	080057a8 	.word	0x080057a8
 80028b4:	080026a5 	.word	0x080026a5
 80028b8:	20000d94 	.word	0x20000d94
 80028bc:	200008e8 	.word	0x200008e8
 80028c0:	20000014 	.word	0x20000014
 80028c4:	20000d98 	.word	0x20000d98
 80028c8:	20000db4 	.word	0x20000db4
 80028cc:	20000de0 	.word	0x20000de0

080028d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80028d0:	4a02      	ldr	r2, [pc, #8]	; (80028dc <vTaskSuspendAll+0xc>)
 80028d2:	6813      	ldr	r3, [r2, #0]
 80028d4:	3301      	adds	r3, #1
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000d60 	.word	0x20000d60

080028e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80028e0:	4b01      	ldr	r3, [pc, #4]	; (80028e8 <xTaskGetTickCount+0x8>)
 80028e2:	6818      	ldr	r0, [r3, #0]
}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000de0 	.word	0x20000de0

080028ec <xTaskIncrementTick>:
{
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <xTaskIncrementTick+0xf0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d167      	bne.n	80029c6 <xTaskIncrementTick+0xda>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028f6:	4b3a      	ldr	r3, [pc, #232]	; (80029e0 <xTaskIncrementTick+0xf4>)
 80028f8:	681d      	ldr	r5, [r3, #0]
 80028fa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80028fc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028fe:	b9c5      	cbnz	r5, 8002932 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002900:	4b38      	ldr	r3, [pc, #224]	; (80029e4 <xTaskIncrementTick+0xf8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b143      	cbz	r3, 800291a <xTaskIncrementTick+0x2e>
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	e7fe      	b.n	8002918 <xTaskIncrementTick+0x2c>
 800291a:	4a32      	ldr	r2, [pc, #200]	; (80029e4 <xTaskIncrementTick+0xf8>)
 800291c:	6811      	ldr	r1, [r2, #0]
 800291e:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <xTaskIncrementTick+0xfc>)
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	6010      	str	r0, [r2, #0]
 8002924:	6019      	str	r1, [r3, #0]
 8002926:	4a31      	ldr	r2, [pc, #196]	; (80029ec <xTaskIncrementTick+0x100>)
 8002928:	6813      	ldr	r3, [r2, #0]
 800292a:	3301      	adds	r3, #1
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	f7ff fd5f 	bl	80023f0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002932:	4b2f      	ldr	r3, [pc, #188]	; (80029f0 <xTaskIncrementTick+0x104>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	42ab      	cmp	r3, r5
 8002938:	d93b      	bls.n	80029b2 <xTaskIncrementTick+0xc6>
BaseType_t xSwitchRequired = pdFALSE;
 800293a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800293c:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <xTaskIncrementTick+0x108>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002946:	009a      	lsls	r2, r3, #2
 8002948:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <xTaskIncrementTick+0x10c>)
 800294a:	589b      	ldr	r3, [r3, r2]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d93f      	bls.n	80029d0 <xTaskIncrementTick+0xe4>
				xSwitchRequired = pdTRUE;
 8002950:	2701      	movs	r7, #1
 8002952:	e03d      	b.n	80029d0 <xTaskIncrementTick+0xe4>
							xSwitchRequired = pdTRUE;
 8002954:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002956:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <xTaskIncrementTick+0xf8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	b35b      	cbz	r3, 80029b6 <xTaskIncrementTick+0xca>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800295e:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <xTaskIncrementTick+0xf8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002966:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8002968:	429d      	cmp	r5, r3
 800296a:	d329      	bcc.n	80029c0 <xTaskIncrementTick+0xd4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800296c:	1d26      	adds	r6, r4, #4
 800296e:	4630      	mov	r0, r6
 8002970:	f7ff f96e 	bl	8001c50 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002974:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002976:	b11b      	cbz	r3, 8002980 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002978:	f104 0018 	add.w	r0, r4, #24
 800297c:	f7ff f968 	bl	8001c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002980:	4620      	mov	r0, r4
 8002982:	f001 fc25 	bl	80041d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002988:	4a1c      	ldr	r2, [pc, #112]	; (80029fc <xTaskIncrementTick+0x110>)
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <xTaskIncrementTick+0xa8>
 8002990:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <xTaskIncrementTick+0x110>)
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002998:	009a      	lsls	r2, r3, #2
 800299a:	4631      	mov	r1, r6
 800299c:	4816      	ldr	r0, [pc, #88]	; (80029f8 <xTaskIncrementTick+0x10c>)
 800299e:	4410      	add	r0, r2
 80029a0:	f7ff f932 	bl	8001c08 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <xTaskIncrementTick+0x108>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d2d1      	bcs.n	8002954 <xTaskIncrementTick+0x68>
 80029b0:	e7d1      	b.n	8002956 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 80029b2:	2700      	movs	r7, #0
 80029b4:	e7cf      	b.n	8002956 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029b6:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <xTaskIncrementTick+0x104>)
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	601a      	str	r2, [r3, #0]
					break;
 80029be:	e7bd      	b.n	800293c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80029c0:	4a0b      	ldr	r2, [pc, #44]	; (80029f0 <xTaskIncrementTick+0x104>)
 80029c2:	6013      	str	r3, [r2, #0]
						break;
 80029c4:	e7ba      	b.n	800293c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 80029c6:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <xTaskIncrementTick+0x114>)
 80029c8:	6813      	ldr	r3, [r2, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80029ce:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <xTaskIncrementTick+0x118>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	b103      	cbz	r3, 80029d8 <xTaskIncrementTick+0xec>
			xSwitchRequired = pdTRUE;
 80029d6:	2701      	movs	r7, #1
}
 80029d8:	4638      	mov	r0, r7
 80029da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029dc:	20000d60 	.word	0x20000d60
 80029e0:	20000de0 	.word	0x20000de0
 80029e4:	200008ec 	.word	0x200008ec
 80029e8:	200008f0 	.word	0x200008f0
 80029ec:	20000d9c 	.word	0x20000d9c
 80029f0:	20000d98 	.word	0x20000d98
 80029f4:	200008e8 	.word	0x200008e8
 80029f8:	200008f4 	.word	0x200008f4
 80029fc:	20000d68 	.word	0x20000d68
 8002a00:	20000d5c 	.word	0x20000d5c
 8002a04:	20000de4 	.word	0x20000de4

08002a08 <xTaskResumeAll>:
{
 8002a08:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8002a0a:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <xTaskResumeAll+0xdc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	b943      	cbnz	r3, 8002a22 <xTaskResumeAll+0x1a>
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	e7fe      	b.n	8002a20 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8002a22:	f000 fc9f 	bl	8003364 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002a26:	4b2f      	ldr	r3, [pc, #188]	; (8002ae4 <xTaskResumeAll+0xdc>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	3a01      	subs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d152      	bne.n	8002ada <xTaskResumeAll+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a34:	4b2c      	ldr	r3, [pc, #176]	; (8002ae8 <xTaskResumeAll+0xe0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	b90b      	cbnz	r3, 8002a3e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002a3a:	2400      	movs	r4, #0
 8002a3c:	e04e      	b.n	8002adc <xTaskResumeAll+0xd4>
TCB_t *pxTCB = NULL;
 8002a3e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a40:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <xTaskResumeAll+0xe4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	b333      	cbz	r3, 8002a94 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002a46:	4b29      	ldr	r3, [pc, #164]	; (8002aec <xTaskResumeAll+0xe4>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a4c:	f104 0018 	add.w	r0, r4, #24
 8002a50:	f7ff f8fe 	bl	8001c50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a54:	1d25      	adds	r5, r4, #4
 8002a56:	4628      	mov	r0, r5
 8002a58:	f7ff f8fa 	bl	8001c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f001 fbb7 	bl	80041d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002a64:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <xTaskResumeAll+0xe8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4298      	cmp	r0, r3
 8002a6a:	d901      	bls.n	8002a70 <xTaskResumeAll+0x68>
 8002a6c:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <xTaskResumeAll+0xe8>)
 8002a6e:	6018      	str	r0, [r3, #0]
 8002a70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a74:	4629      	mov	r1, r5
 8002a76:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <xTaskResumeAll+0xec>)
 8002a78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002a7c:	f7ff f8c4 	bl	8001c08 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <xTaskResumeAll+0xf0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3d9      	bcc.n	8002a40 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <xTaskResumeAll+0xf4>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e7d5      	b.n	8002a40 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8002a94:	b10c      	cbz	r4, 8002a9a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8002a96:	f7ff fcab 	bl	80023f0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a9a:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <xTaskResumeAll+0xf8>)
 8002a9c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a9e:	b984      	cbnz	r4, 8002ac2 <xTaskResumeAll+0xba>
				if( xYieldPending != pdFALSE )
 8002aa0:	4b16      	ldr	r3, [pc, #88]	; (8002afc <xTaskResumeAll+0xf4>)
 8002aa2:	681c      	ldr	r4, [r3, #0]
 8002aa4:	b1d4      	cbz	r4, 8002adc <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
 8002aa6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002aba:	2401      	movs	r4, #1
 8002abc:	e00e      	b.n	8002adc <xTaskResumeAll+0xd4>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002abe:	3c01      	subs	r4, #1
 8002ac0:	d007      	beq.n	8002ad2 <xTaskResumeAll+0xca>
							if( xTaskIncrementTick() != pdFALSE )
 8002ac2:	f7ff ff13 	bl	80028ec <xTaskIncrementTick>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d0f9      	beq.n	8002abe <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <xTaskResumeAll+0xf4>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e7f5      	b.n	8002abe <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <xTaskResumeAll+0xf8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e7e2      	b.n	8002aa0 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 8002ada:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002adc:	f000 fc64 	bl	80033a8 <vPortExitCritical>
}
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	bd38      	pop	{r3, r4, r5, pc}
 8002ae4:	20000d60 	.word	0x20000d60
 8002ae8:	20000d54 	.word	0x20000d54
 8002aec:	20000da0 	.word	0x20000da0
 8002af0:	20000d68 	.word	0x20000d68
 8002af4:	200008f4 	.word	0x200008f4
 8002af8:	200008e8 	.word	0x200008e8
 8002afc:	20000de4 	.word	0x20000de4
 8002b00:	20000d5c 	.word	0x20000d5c

08002b04 <vTaskDelay>:
	{
 8002b04:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002b06:	b1c8      	cbz	r0, 8002b3c <vTaskDelay+0x38>
 8002b08:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <vTaskDelay+0x50>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b143      	cbz	r3, 8002b22 <vTaskDelay+0x1e>
 8002b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	e7fe      	b.n	8002b20 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002b22:	f7ff fed5 	bl	80028d0 <vTaskSuspendAll>
				traceTASK_DELAY();
 8002b26:	4621      	mov	r1, r4
 8002b28:	2023      	movs	r0, #35	; 0x23
 8002b2a:	f001 f953 	bl	8003dd4 <SEGGER_SYSVIEW_RecordU32>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4620      	mov	r0, r4
 8002b32:	f7ff fdcb 	bl	80026cc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002b36:	f7ff ff67 	bl	8002a08 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002b3a:	b948      	cbnz	r0, 8002b50 <vTaskDelay+0x4c>
			portYIELD_WITHIN_API();
 8002b3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	f3bf 8f6f 	isb	sy
	}
 8002b50:	bd10      	pop	{r4, pc}
 8002b52:	bf00      	nop
 8002b54:	20000d60 	.word	0x20000d60

08002b58 <vTaskSwitchContext>:
{
 8002b58:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b5a:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <vTaskSwitchContext+0xa8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	b11b      	cbz	r3, 8002b68 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <vTaskSwitchContext+0xac>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
}
 8002b66:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 8002b68:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <vTaskSwitchContext+0xac>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <vTaskSwitchContext+0xb0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002b76:	0092      	lsls	r2, r2, #2
 8002b78:	4924      	ldr	r1, [pc, #144]	; (8002c0c <vTaskSwitchContext+0xb4>)
 8002b7a:	588a      	ldr	r2, [r1, r2]
 8002b7c:	b95a      	cbnz	r2, 8002b96 <vTaskSwitchContext+0x3e>
 8002b7e:	b10b      	cbz	r3, 8002b84 <vTaskSwitchContext+0x2c>
 8002b80:	3b01      	subs	r3, #1
 8002b82:	e7f6      	b.n	8002b72 <vTaskSwitchContext+0x1a>
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	e7fe      	b.n	8002b94 <vTaskSwitchContext+0x3c>
 8002b96:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002b9a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8002b9e:	6850      	ldr	r0, [r2, #4]
 8002ba0:	6840      	ldr	r0, [r0, #4]
 8002ba2:	6050      	str	r0, [r2, #4]
 8002ba4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	3208      	adds	r2, #8
 8002bac:	440a      	add	r2, r1
 8002bae:	4290      	cmp	r0, r2
 8002bb0:	d01b      	beq.n	8002bea <vTaskSwitchContext+0x92>
 8002bb2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002bb6:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <vTaskSwitchContext+0xb4>)
 8002bb8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002bbc:	6852      	ldr	r2, [r2, #4]
 8002bbe:	68d1      	ldr	r1, [r2, #12]
 8002bc0:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <vTaskSwitchContext+0xb8>)
 8002bc2:	6011      	str	r1, [r2, #0]
 8002bc4:	4910      	ldr	r1, [pc, #64]	; (8002c08 <vTaskSwitchContext+0xb0>)
 8002bc6:	600b      	str	r3, [r1, #0]
		traceTASK_SWITCHED_IN();
 8002bc8:	6810      	ldr	r0, [r2, #0]
 8002bca:	2205      	movs	r2, #5
 8002bcc:	4911      	ldr	r1, [pc, #68]	; (8002c14 <vTaskSwitchContext+0xbc>)
 8002bce:	3034      	adds	r0, #52	; 0x34
 8002bd0:	f001 fceb 	bl	80045aa <memcmp>
 8002bd4:	b188      	cbz	r0, 8002bfa <vTaskSwitchContext+0xa2>
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <vTaskSwitchContext+0xb8>)
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	f001 fad5 	bl	8004188 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <vTaskSwitchContext+0xb8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3354      	adds	r3, #84	; 0x54
 8002be4:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <vTaskSwitchContext+0xc0>)
 8002be6:	6013      	str	r3, [r2, #0]
}
 8002be8:	e7bd      	b.n	8002b66 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002bea:	6840      	ldr	r0, [r0, #4]
 8002bec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002bf0:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <vTaskSwitchContext+0xb4>)
 8002bf2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002bf6:	6050      	str	r0, [r2, #4]
 8002bf8:	e7db      	b.n	8002bb2 <vTaskSwitchContext+0x5a>
		traceTASK_SWITCHED_IN();
 8002bfa:	f001 fa8d 	bl	8004118 <SEGGER_SYSVIEW_OnIdle>
 8002bfe:	e7ee      	b.n	8002bde <vTaskSwitchContext+0x86>
 8002c00:	20000d60 	.word	0x20000d60
 8002c04:	20000de4 	.word	0x20000de4
 8002c08:	20000d68 	.word	0x20000d68
 8002c0c:	200008f4 	.word	0x200008f4
 8002c10:	200008e8 	.word	0x200008e8
 8002c14:	080057a8 	.word	0x080057a8
 8002c18:	20000014 	.word	0x20000014

08002c1c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8002c1c:	b158      	cbz	r0, 8002c36 <vTaskPlaceOnEventList+0x1a>
{
 8002c1e:	b510      	push	{r4, lr}
 8002c20:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c22:	4a09      	ldr	r2, [pc, #36]	; (8002c48 <vTaskPlaceOnEventList+0x2c>)
 8002c24:	6811      	ldr	r1, [r2, #0]
 8002c26:	3118      	adds	r1, #24
 8002c28:	f7fe fff9 	bl	8001c1e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7ff fd4c 	bl	80026cc <prvAddCurrentTaskToDelayedList>
}
 8002c34:	bd10      	pop	{r4, pc}
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8002c46:	e7fe      	b.n	8002c46 <vTaskPlaceOnEventList+0x2a>
 8002c48:	200008e8 	.word	0x200008e8

08002c4c <vTaskPlaceOnEventListRestricted>:
	{
 8002c4c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8002c4e:	b188      	cbz	r0, 8002c74 <vTaskPlaceOnEventListRestricted+0x28>
 8002c50:	460d      	mov	r5, r1
 8002c52:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c54:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <vTaskPlaceOnEventListRestricted+0x3c>)
 8002c56:	6811      	ldr	r1, [r2, #0]
 8002c58:	3118      	adds	r1, #24
 8002c5a:	f7fe ffd5 	bl	8001c08 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8002c5e:	b10c      	cbz	r4, 8002c64 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8002c60:	f04f 35ff 	mov.w	r5, #4294967295
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002c64:	2024      	movs	r0, #36	; 0x24
 8002c66:	f001 f8a1 	bl	8003dac <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f7ff fd2d 	bl	80026cc <prvAddCurrentTaskToDelayedList>
	}
 8002c72:	bd38      	pop	{r3, r4, r5, pc}
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8002c84:	e7fe      	b.n	8002c84 <vTaskPlaceOnEventListRestricted+0x38>
 8002c86:	bf00      	nop
 8002c88:	200008e8 	.word	0x200008e8

08002c8c <xTaskRemoveFromEventList>:
{
 8002c8c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002c8e:	68c3      	ldr	r3, [r0, #12]
 8002c90:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002c92:	b33c      	cbz	r4, 8002ce4 <xTaskRemoveFromEventList+0x58>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c94:	f104 0518 	add.w	r5, r4, #24
 8002c98:	4628      	mov	r0, r5
 8002c9a:	f7fe ffd9 	bl	8001c50 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c9e:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <xTaskRemoveFromEventList+0x78>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	bb43      	cbnz	r3, 8002cf6 <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ca4:	1d25      	adds	r5, r4, #4
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f7fe ffd2 	bl	8001c50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002cac:	4620      	mov	r0, r4
 8002cae:	f001 fa8f 	bl	80041d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002cb4:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <xTaskRemoveFromEventList+0x7c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4298      	cmp	r0, r3
 8002cba:	d901      	bls.n	8002cc0 <xTaskRemoveFromEventList+0x34>
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <xTaskRemoveFromEventList+0x7c>)
 8002cbe:	6018      	str	r0, [r3, #0]
 8002cc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <xTaskRemoveFromEventList+0x80>)
 8002cc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002ccc:	f7fe ff9c 	bl	8001c08 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002cd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <xTaskRemoveFromEventList+0x84>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d911      	bls.n	8002d00 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8002cdc:	2001      	movs	r0, #1
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <xTaskRemoveFromEventList+0x88>)
 8002ce0:	6018      	str	r0, [r3, #0]
}
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8002cf4:	e7fe      	b.n	8002cf4 <xTaskRemoveFromEventList+0x68>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	4807      	ldr	r0, [pc, #28]	; (8002d18 <xTaskRemoveFromEventList+0x8c>)
 8002cfa:	f7fe ff85 	bl	8001c08 <vListInsertEnd>
 8002cfe:	e7e7      	b.n	8002cd0 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8002d00:	2000      	movs	r0, #0
	return xReturn;
 8002d02:	e7ee      	b.n	8002ce2 <xTaskRemoveFromEventList+0x56>
 8002d04:	20000d60 	.word	0x20000d60
 8002d08:	20000d68 	.word	0x20000d68
 8002d0c:	200008f4 	.word	0x200008f4
 8002d10:	200008e8 	.word	0x200008e8
 8002d14:	20000de4 	.word	0x20000de4
 8002d18:	20000da0 	.word	0x20000da0

08002d1c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <vTaskInternalSetTimeOutState+0x10>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002d22:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <vTaskInternalSetTimeOutState+0x14>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6043      	str	r3, [r0, #4]
}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000d9c 	.word	0x20000d9c
 8002d30:	20000de0 	.word	0x20000de0

08002d34 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8002d34:	b1d8      	cbz	r0, 8002d6e <xTaskCheckForTimeOut+0x3a>
{
 8002d36:	b570      	push	{r4, r5, r6, lr}
 8002d38:	460c      	mov	r4, r1
 8002d3a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8002d3c:	b301      	cbz	r1, 8002d80 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8002d3e:	f000 fb11 	bl	8003364 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002d42:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <xTaskCheckForTimeOut+0x7c>)
 8002d44:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d46:	686b      	ldr	r3, [r5, #4]
 8002d48:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002d50:	d027      	beq.n	8002da2 <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d52:	4e18      	ldr	r6, [pc, #96]	; (8002db4 <xTaskCheckForTimeOut+0x80>)
 8002d54:	6836      	ldr	r6, [r6, #0]
 8002d56:	f8d5 c000 	ldr.w	ip, [r5]
 8002d5a:	45b4      	cmp	ip, r6
 8002d5c:	d001      	beq.n	8002d62 <xTaskCheckForTimeOut+0x2e>
 8002d5e:	428b      	cmp	r3, r1
 8002d60:	d924      	bls.n	8002dac <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d62:	4282      	cmp	r2, r0
 8002d64:	d815      	bhi.n	8002d92 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8002d6a:	2401      	movs	r4, #1
 8002d6c:	e01a      	b.n	8002da4 <xTaskCheckForTimeOut+0x70>
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8002d7e:	e7fe      	b.n	8002d7e <xTaskCheckForTimeOut+0x4a>
 8002d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8002d90:	e7fe      	b.n	8002d90 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8002d92:	1a5b      	subs	r3, r3, r1
 8002d94:	4413      	add	r3, r2
 8002d96:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002d98:	4628      	mov	r0, r5
 8002d9a:	f7ff ffbf 	bl	8002d1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002d9e:	2400      	movs	r4, #0
 8002da0:	e000      	b.n	8002da4 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 8002da2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002da4:	f000 fb00 	bl	80033a8 <vPortExitCritical>
}
 8002da8:	4620      	mov	r0, r4
 8002daa:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8002dac:	2401      	movs	r4, #1
 8002dae:	e7f9      	b.n	8002da4 <xTaskCheckForTimeOut+0x70>
 8002db0:	20000de0 	.word	0x20000de0
 8002db4:	20000d9c 	.word	0x20000d9c

08002db8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002db8:	4b01      	ldr	r3, [pc, #4]	; (8002dc0 <vTaskMissedYield+0x8>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
}
 8002dbe:	4770      	bx	lr
 8002dc0:	20000de4 	.word	0x20000de4

08002dc4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <xTaskGetSchedulerState+0x18>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	b133      	cbz	r3, 8002dd8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <xTaskGetSchedulerState+0x1c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	b10b      	cbz	r3, 8002dd4 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8002dd0:	2000      	movs	r0, #0
	}
 8002dd2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002dd8:	2001      	movs	r0, #1
 8002dda:	4770      	bx	lr
 8002ddc:	20000db4 	.word	0x20000db4
 8002de0:	20000d60 	.word	0x20000d60

08002de4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8002de4:	2800      	cmp	r0, #0
 8002de6:	d043      	beq.n	8002e70 <xTaskPriorityDisinherit+0x8c>
	{
 8002de8:	b538      	push	{r3, r4, r5, lr}
 8002dea:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8002dec:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <xTaskPriorityDisinherit+0x94>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4283      	cmp	r3, r0
 8002df2:	d008      	beq.n	8002e06 <xTaskPriorityDisinherit+0x22>
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	e7fe      	b.n	8002e04 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8002e06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002e08:	b943      	cbnz	r3, 8002e1c <xTaskPriorityDisinherit+0x38>
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	e7fe      	b.n	8002e1a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002e20:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002e22:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002e24:	4291      	cmp	r1, r2
 8002e26:	d025      	beq.n	8002e74 <xTaskPriorityDisinherit+0x90>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002e28:	b10b      	cbz	r3, 8002e2e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8002e2a:	2000      	movs	r0, #0
	}
 8002e2c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e2e:	1d05      	adds	r5, r0, #4
 8002e30:	4628      	mov	r0, r5
 8002e32:	f7fe ff0d 	bl	8001c50 <uxListRemove>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002e36:	4621      	mov	r1, r4
 8002e38:	204a      	movs	r0, #74	; 0x4a
 8002e3a:	f000 ffcb 	bl	8003dd4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002e3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e40:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e42:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002e46:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f001 f9c1 	bl	80041d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <xTaskPriorityDisinherit+0x98>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4298      	cmp	r0, r3
 8002e56:	d901      	bls.n	8002e5c <xTaskPriorityDisinherit+0x78>
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <xTaskPriorityDisinherit+0x98>)
 8002e5a:	6018      	str	r0, [r3, #0]
 8002e5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e60:	4629      	mov	r1, r5
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <xTaskPriorityDisinherit+0x9c>)
 8002e64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002e68:	f7fe fece 	bl	8001c08 <vListInsertEnd>
					xReturn = pdTRUE;
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	e7dd      	b.n	8002e2c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8002e70:	2000      	movs	r0, #0
	}
 8002e72:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8002e74:	2000      	movs	r0, #0
 8002e76:	e7d9      	b.n	8002e2c <xTaskPriorityDisinherit+0x48>
 8002e78:	200008e8 	.word	0x200008e8
 8002e7c:	20000d68 	.word	0x20000d68
 8002e80:	200008f4 	.word	0x200008f4

08002e84 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <prvGetNextExpireTime+0x1c>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	6813      	ldr	r3, [r2, #0]
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002e92:	b913      	cbnz	r3, 8002e9a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e94:	68d3      	ldr	r3, [r2, #12]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002e9a:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000de8 	.word	0x20000de8

08002ea4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002ea4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002ea6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ea8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002eaa:	4291      	cmp	r1, r2
 8002eac:	d80c      	bhi.n	8002ec8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eae:	1ad2      	subs	r2, r2, r3
 8002eb0:	6983      	ldr	r3, [r0, #24]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d301      	bcc.n	8002eba <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002eb6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8002eb8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002eba:	1d01      	adds	r1, r0, #4
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <prvInsertTimerInActiveList+0x40>)
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	f7fe fead 	bl	8001c1e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	e7f7      	b.n	8002eb8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d201      	bcs.n	8002ed0 <prvInsertTimerInActiveList+0x2c>
 8002ecc:	4299      	cmp	r1, r3
 8002ece:	d206      	bcs.n	8002ede <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ed0:	1d01      	adds	r1, r0, #4
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <prvInsertTimerInActiveList+0x44>)
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	f7fe fea2 	bl	8001c1e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002eda:	2000      	movs	r0, #0
 8002edc:	e7ec      	b.n	8002eb8 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8002ede:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8002ee0:	e7ea      	b.n	8002eb8 <prvInsertTimerInActiveList+0x14>
 8002ee2:	bf00      	nop
 8002ee4:	20000dec 	.word	0x20000dec
 8002ee8:	20000de8 	.word	0x20000de8

08002eec <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002eec:	b530      	push	{r4, r5, lr}
 8002eee:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002ef0:	f000 fa38 	bl	8003364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <prvCheckForValidListAndQueue+0x50>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	b11b      	cbz	r3, 8002f02 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002efa:	f000 fa55 	bl	80033a8 <vPortExitCritical>
}
 8002efe:	b003      	add	sp, #12
 8002f00:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8002f02:	4d0f      	ldr	r5, [pc, #60]	; (8002f40 <prvCheckForValidListAndQueue+0x54>)
 8002f04:	4628      	mov	r0, r5
 8002f06:	f7fe fe71 	bl	8001bec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002f0a:	4c0e      	ldr	r4, [pc, #56]	; (8002f44 <prvCheckForValidListAndQueue+0x58>)
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7fe fe6d 	bl	8001bec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <prvCheckForValidListAndQueue+0x5c>)
 8002f14:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <prvCheckForValidListAndQueue+0x60>)
 8002f18:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <prvCheckForValidListAndQueue+0x64>)
 8002f20:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <prvCheckForValidListAndQueue+0x68>)
 8002f22:	2110      	movs	r1, #16
 8002f24:	200a      	movs	r0, #10
 8002f26:	f7fe ffa0 	bl	8001e6a <xQueueGenericCreateStatic>
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <prvCheckForValidListAndQueue+0x50>)
 8002f2c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	d0e3      	beq.n	8002efa <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002f32:	4909      	ldr	r1, [pc, #36]	; (8002f58 <prvCheckForValidListAndQueue+0x6c>)
 8002f34:	f7ff fa16 	bl	8002364 <vQueueAddToRegistry>
 8002f38:	e7df      	b.n	8002efa <prvCheckForValidListAndQueue+0xe>
 8002f3a:	bf00      	nop
 8002f3c:	20000f0c 	.word	0x20000f0c
 8002f40:	20000e90 	.word	0x20000e90
 8002f44:	20000ea4 	.word	0x20000ea4
 8002f48:	20000de8 	.word	0x20000de8
 8002f4c:	20000dec 	.word	0x20000dec
 8002f50:	20000ebc 	.word	0x20000ebc
 8002f54:	20000df0 	.word	0x20000df0
 8002f58:	080057b0 	.word	0x080057b0

08002f5c <xTimerCreateTimerTask>:
{
 8002f5c:	b510      	push	{r4, lr}
 8002f5e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002f60:	f7ff ffc4 	bl	8002eec <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <xTimerCreateTimerTask+0x54>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	b1cb      	cbz	r3, 8002f9e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002f6a:	2400      	movs	r4, #0
 8002f6c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002f6e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002f70:	aa07      	add	r2, sp, #28
 8002f72:	a906      	add	r1, sp, #24
 8002f74:	a805      	add	r0, sp, #20
 8002f76:	f7fe fe2d 	bl	8001bd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002f7a:	9b05      	ldr	r3, [sp, #20]
 8002f7c:	9302      	str	r3, [sp, #8]
 8002f7e:	9b06      	ldr	r3, [sp, #24]
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	2302      	movs	r3, #2
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	4623      	mov	r3, r4
 8002f88:	9a07      	ldr	r2, [sp, #28]
 8002f8a:	490a      	ldr	r1, [pc, #40]	; (8002fb4 <xTimerCreateTimerTask+0x58>)
 8002f8c:	480a      	ldr	r0, [pc, #40]	; (8002fb8 <xTimerCreateTimerTask+0x5c>)
 8002f8e:	f7ff fbdb 	bl	8002748 <xTaskCreateStatic>
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <xTimerCreateTimerTask+0x60>)
 8002f94:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8002f96:	b110      	cbz	r0, 8002f9e <xTimerCreateTimerTask+0x42>
}
 8002f98:	2001      	movs	r0, #1
 8002f9a:	b008      	add	sp, #32
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8002fae:	e7fe      	b.n	8002fae <xTimerCreateTimerTask+0x52>
 8002fb0:	20000f0c 	.word	0x20000f0c
 8002fb4:	080057b8 	.word	0x080057b8
 8002fb8:	0800329d 	.word	0x0800329d
 8002fbc:	20000f10 	.word	0x20000f10

08002fc0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8002fc0:	b1b8      	cbz	r0, 8002ff2 <xTimerGenericCommand+0x32>
 8002fc2:	469c      	mov	ip, r3
 8002fc4:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8002fc6:	4818      	ldr	r0, [pc, #96]	; (8003028 <xTimerGenericCommand+0x68>)
 8002fc8:	6800      	ldr	r0, [r0, #0]
 8002fca:	b358      	cbz	r0, 8003024 <xTimerGenericCommand+0x64>
{
 8002fcc:	b500      	push	{lr}
 8002fce:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8002fd0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002fd2:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002fd4:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002fd6:	2905      	cmp	r1, #5
 8002fd8:	dc1c      	bgt.n	8003014 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002fda:	f7ff fef3 	bl	8002dc4 <xTaskGetSchedulerState>
 8002fde:	2802      	cmp	r0, #2
 8002fe0:	d010      	beq.n	8003004 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4669      	mov	r1, sp
 8002fe8:	480f      	ldr	r0, [pc, #60]	; (8003028 <xTimerGenericCommand+0x68>)
 8002fea:	6800      	ldr	r0, [r0, #0]
 8002fec:	f7fe ff86 	bl	8001efc <xQueueGenericSend>
 8002ff0:	e015      	b.n	800301e <xTimerGenericCommand+0x5e>
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8003002:	e7fe      	b.n	8003002 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003004:	2300      	movs	r3, #0
 8003006:	9a06      	ldr	r2, [sp, #24]
 8003008:	4669      	mov	r1, sp
 800300a:	4807      	ldr	r0, [pc, #28]	; (8003028 <xTimerGenericCommand+0x68>)
 800300c:	6800      	ldr	r0, [r0, #0]
 800300e:	f7fe ff75 	bl	8001efc <xQueueGenericSend>
 8003012:	e004      	b.n	800301e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003014:	2300      	movs	r3, #0
 8003016:	4662      	mov	r2, ip
 8003018:	4669      	mov	r1, sp
 800301a:	f7ff f851 	bl	80020c0 <xQueueGenericSendFromISR>
}
 800301e:	b005      	add	sp, #20
 8003020:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8003024:	2000      	movs	r0, #0
}
 8003026:	4770      	bx	lr
 8003028:	20000f0c 	.word	0x20000f0c

0800302c <prvSwitchTimerLists>:
{
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <prvSwitchTimerLists+0x70>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	b352      	cbz	r2, 800308e <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800303c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800303e:	1d25      	adds	r5, r4, #4
 8003040:	4628      	mov	r0, r5
 8003042:	f7fe fe05 	bl	8001c50 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003048:	4620      	mov	r0, r4
 800304a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800304c:	69e3      	ldr	r3, [r4, #28]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d1ee      	bne.n	8003030 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003052:	69a3      	ldr	r3, [r4, #24]
 8003054:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8003056:	429e      	cmp	r6, r3
 8003058:	d207      	bcs.n	800306a <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800305a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800305c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800305e:	4629      	mov	r1, r5
 8003060:	4b0e      	ldr	r3, [pc, #56]	; (800309c <prvSwitchTimerLists+0x70>)
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	f7fe fddb 	bl	8001c1e <vListInsert>
 8003068:	e7e2      	b.n	8003030 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800306a:	2100      	movs	r1, #0
 800306c:	9100      	str	r1, [sp, #0]
 800306e:	460b      	mov	r3, r1
 8003070:	4632      	mov	r2, r6
 8003072:	4620      	mov	r0, r4
 8003074:	f7ff ffa4 	bl	8002fc0 <xTimerGenericCommand>
				configASSERT( xResult );
 8003078:	2800      	cmp	r0, #0
 800307a:	d1d9      	bne.n	8003030 <prvSwitchTimerLists+0x4>
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	e7fe      	b.n	800308c <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 800308e:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <prvSwitchTimerLists+0x74>)
 8003090:	6810      	ldr	r0, [r2, #0]
 8003092:	4902      	ldr	r1, [pc, #8]	; (800309c <prvSwitchTimerLists+0x70>)
 8003094:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8003096:	6013      	str	r3, [r2, #0]
}
 8003098:	b002      	add	sp, #8
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	20000de8 	.word	0x20000de8
 80030a0:	20000dec 	.word	0x20000dec

080030a4 <prvSampleTimeNow>:
{
 80030a4:	b538      	push	{r3, r4, r5, lr}
 80030a6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80030a8:	f7ff fc1a 	bl	80028e0 <xTaskGetTickCount>
 80030ac:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <prvSampleTimeNow+0x28>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4283      	cmp	r3, r0
 80030b4:	d805      	bhi.n	80030c2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 80030ba:	4b04      	ldr	r3, [pc, #16]	; (80030cc <prvSampleTimeNow+0x28>)
 80030bc:	601c      	str	r4, [r3, #0]
}
 80030be:	4620      	mov	r0, r4
 80030c0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 80030c2:	f7ff ffb3 	bl	800302c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80030c6:	2301      	movs	r3, #1
 80030c8:	602b      	str	r3, [r5, #0]
 80030ca:	e7f6      	b.n	80030ba <prvSampleTimeNow+0x16>
 80030cc:	20000eb8 	.word	0x20000eb8

080030d0 <prvProcessExpiredTimer>:
{
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	4606      	mov	r6, r0
 80030d6:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030d8:	4914      	ldr	r1, [pc, #80]	; (800312c <prvProcessExpiredTimer+0x5c>)
 80030da:	6809      	ldr	r1, [r1, #0]
 80030dc:	68c9      	ldr	r1, [r1, #12]
 80030de:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030e0:	1d20      	adds	r0, r4, #4
 80030e2:	f7fe fdb5 	bl	8001c50 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80030e6:	69e1      	ldr	r1, [r4, #28]
 80030e8:	2901      	cmp	r1, #1
 80030ea:	d004      	beq.n	80030f6 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030ee:	4620      	mov	r0, r4
 80030f0:	4798      	blx	r3
}
 80030f2:	b002      	add	sp, #8
 80030f4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80030f6:	69a1      	ldr	r1, [r4, #24]
 80030f8:	4633      	mov	r3, r6
 80030fa:	462a      	mov	r2, r5
 80030fc:	4431      	add	r1, r6
 80030fe:	4620      	mov	r0, r4
 8003100:	f7ff fed0 	bl	8002ea4 <prvInsertTimerInActiveList>
 8003104:	2800      	cmp	r0, #0
 8003106:	d0f1      	beq.n	80030ec <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003108:	2100      	movs	r1, #0
 800310a:	9100      	str	r1, [sp, #0]
 800310c:	460b      	mov	r3, r1
 800310e:	4632      	mov	r2, r6
 8003110:	4620      	mov	r0, r4
 8003112:	f7ff ff55 	bl	8002fc0 <xTimerGenericCommand>
			configASSERT( xResult );
 8003116:	2800      	cmp	r0, #0
 8003118:	d1e8      	bne.n	80030ec <prvProcessExpiredTimer+0x1c>
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	e7fe      	b.n	800312a <prvProcessExpiredTimer+0x5a>
 800312c:	20000de8 	.word	0x20000de8

08003130 <prvProcessTimerOrBlockTask>:
{
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	4606      	mov	r6, r0
 8003136:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8003138:	f7ff fbca 	bl	80028d0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800313c:	a801      	add	r0, sp, #4
 800313e:	f7ff ffb1 	bl	80030a4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8003142:	9b01      	ldr	r3, [sp, #4]
 8003144:	bb2b      	cbnz	r3, 8003192 <prvProcessTimerOrBlockTask+0x62>
 8003146:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003148:	b90c      	cbnz	r4, 800314e <prvProcessTimerOrBlockTask+0x1e>
 800314a:	42b0      	cmp	r0, r6
 800314c:	d21a      	bcs.n	8003184 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800314e:	b12c      	cbz	r4, 800315c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <prvProcessTimerOrBlockTask+0x6c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681c      	ldr	r4, [r3, #0]
 8003156:	fab4 f484 	clz	r4, r4
 800315a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800315c:	4622      	mov	r2, r4
 800315e:	1b71      	subs	r1, r6, r5
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <prvProcessTimerOrBlockTask+0x70>)
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	f7ff f91a 	bl	800239c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003168:	f7ff fc4e 	bl	8002a08 <xTaskResumeAll>
 800316c:	b998      	cbnz	r0, 8003196 <prvProcessTimerOrBlockTask+0x66>
					portYIELD_WITHIN_API();
 800316e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003176:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	e008      	b.n	8003196 <prvProcessTimerOrBlockTask+0x66>
				( void ) xTaskResumeAll();
 8003184:	f7ff fc40 	bl	8002a08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003188:	4629      	mov	r1, r5
 800318a:	4630      	mov	r0, r6
 800318c:	f7ff ffa0 	bl	80030d0 <prvProcessExpiredTimer>
 8003190:	e001      	b.n	8003196 <prvProcessTimerOrBlockTask+0x66>
			( void ) xTaskResumeAll();
 8003192:	f7ff fc39 	bl	8002a08 <xTaskResumeAll>
}
 8003196:	b002      	add	sp, #8
 8003198:	bd70      	pop	{r4, r5, r6, pc}
 800319a:	bf00      	nop
 800319c:	20000dec 	.word	0x20000dec
 80031a0:	20000f0c 	.word	0x20000f0c

080031a4 <prvProcessReceivedCommands>:
{
 80031a4:	b510      	push	{r4, lr}
 80031a6:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80031a8:	e002      	b.n	80031b0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80031aa:	9b04      	ldr	r3, [sp, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	da0f      	bge.n	80031d0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80031b0:	2200      	movs	r2, #0
 80031b2:	a904      	add	r1, sp, #16
 80031b4:	4b38      	ldr	r3, [pc, #224]	; (8003298 <prvProcessReceivedCommands+0xf4>)
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	f7fe fff8 	bl	80021ac <xQueueReceive>
 80031bc:	2800      	cmp	r0, #0
 80031be:	d069      	beq.n	8003294 <prvProcessReceivedCommands+0xf0>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80031c0:	9b04      	ldr	r3, [sp, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	daf1      	bge.n	80031aa <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80031c6:	9907      	ldr	r1, [sp, #28]
 80031c8:	9806      	ldr	r0, [sp, #24]
 80031ca:	9b05      	ldr	r3, [sp, #20]
 80031cc:	4798      	blx	r3
 80031ce:	e7ec      	b.n	80031aa <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80031d0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80031d2:	6963      	ldr	r3, [r4, #20]
 80031d4:	b113      	cbz	r3, 80031dc <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80031d6:	1d20      	adds	r0, r4, #4
 80031d8:	f7fe fd3a 	bl	8001c50 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80031dc:	a803      	add	r0, sp, #12
 80031de:	f7ff ff61 	bl	80030a4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80031e2:	9b04      	ldr	r3, [sp, #16]
 80031e4:	2b09      	cmp	r3, #9
 80031e6:	d8e3      	bhi.n	80031b0 <prvProcessReceivedCommands+0xc>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <prvProcessReceivedCommands+0x4c>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003219 	.word	0x08003219
 80031fc:	080031b1 	.word	0x080031b1
 8003200:	0800325f 	.word	0x0800325f
 8003204:	08003285 	.word	0x08003285
 8003208:	08003219 	.word	0x08003219
 800320c:	08003219 	.word	0x08003219
 8003210:	080031b1 	.word	0x080031b1
 8003214:	0800325f 	.word	0x0800325f
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003218:	9b05      	ldr	r3, [sp, #20]
 800321a:	69a1      	ldr	r1, [r4, #24]
 800321c:	4602      	mov	r2, r0
 800321e:	4419      	add	r1, r3
 8003220:	4620      	mov	r0, r4
 8003222:	f7ff fe3f 	bl	8002ea4 <prvInsertTimerInActiveList>
 8003226:	2800      	cmp	r0, #0
 8003228:	d0c2      	beq.n	80031b0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800322a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800322c:	4620      	mov	r0, r4
 800322e:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003230:	69e3      	ldr	r3, [r4, #28]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d1bc      	bne.n	80031b0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003236:	69a2      	ldr	r2, [r4, #24]
 8003238:	2100      	movs	r1, #0
 800323a:	9100      	str	r1, [sp, #0]
 800323c:	460b      	mov	r3, r1
 800323e:	9805      	ldr	r0, [sp, #20]
 8003240:	4402      	add	r2, r0
 8003242:	4620      	mov	r0, r4
 8003244:	f7ff febc 	bl	8002fc0 <xTimerGenericCommand>
							configASSERT( xResult );
 8003248:	2800      	cmp	r0, #0
 800324a:	d1b1      	bne.n	80031b0 <prvProcessReceivedCommands+0xc>
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	e7fe      	b.n	800325c <prvProcessReceivedCommands+0xb8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800325e:	9905      	ldr	r1, [sp, #20]
 8003260:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003262:	b131      	cbz	r1, 8003272 <prvProcessReceivedCommands+0xce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003264:	4603      	mov	r3, r0
 8003266:	4602      	mov	r2, r0
 8003268:	4401      	add	r1, r0
 800326a:	4620      	mov	r0, r4
 800326c:	f7ff fe1a 	bl	8002ea4 <prvInsertTimerInActiveList>
					break;
 8003270:	e79e      	b.n	80031b0 <prvProcessReceivedCommands+0xc>
 8003272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003282:	e7fe      	b.n	8003282 <prvProcessReceivedCommands+0xde>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003284:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d191      	bne.n	80031b0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800328c:	4620      	mov	r0, r4
 800328e:	f000 fa5b 	bl	8003748 <vPortFree>
 8003292:	e78d      	b.n	80031b0 <prvProcessReceivedCommands+0xc>
}
 8003294:	b008      	add	sp, #32
 8003296:	bd10      	pop	{r4, pc}
 8003298:	20000f0c 	.word	0x20000f0c

0800329c <prvTimerTask>:
{
 800329c:	b500      	push	{lr}
 800329e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80032a0:	a801      	add	r0, sp, #4
 80032a2:	f7ff fdef 	bl	8002e84 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80032a6:	9901      	ldr	r1, [sp, #4]
 80032a8:	f7ff ff42 	bl	8003130 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80032ac:	f7ff ff7a 	bl	80031a4 <prvProcessReceivedCommands>
	for( ;; )
 80032b0:	e7f6      	b.n	80032a0 <prvTimerTask+0x4>
	...

080032b4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80032b4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <prvTaskExitError+0x3c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d008      	beq.n	80032d6 <prvTaskExitError+0x22>
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	e7fe      	b.n	80032d4 <prvTaskExitError+0x20>
 80032d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80032e6:	9b01      	ldr	r3, [sp, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0fc      	beq.n	80032e6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80032ec:	b002      	add	sp, #8
 80032ee:	4770      	bx	lr
 80032f0:	20000010 	.word	0x20000010

080032f4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80032f4:	4806      	ldr	r0, [pc, #24]	; (8003310 <prvPortStartFirstTask+0x1c>)
 80032f6:	6800      	ldr	r0, [r0, #0]
 80032f8:	6800      	ldr	r0, [r0, #0]
 80032fa:	f380 8808 	msr	MSP, r0
 80032fe:	b662      	cpsie	i
 8003300:	b661      	cpsie	f
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	df00      	svc	0
 800330c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800330e:	0000      	.short	0x0000
 8003310:	e000ed08 	.word	0xe000ed08

08003314 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003318:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800331c:	f021 0101 	bic.w	r1, r1, #1
 8003320:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <pxPortInitialiseStack+0x20>)
 8003326:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800332a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800332e:	3840      	subs	r0, #64	; 0x40
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	080032b5 	.word	0x080032b5
	...

08003340 <SVC_Handler>:
	__asm volatile (
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <pxCurrentTCBConst2>)
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	6808      	ldr	r0, [r1, #0]
 8003346:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800334a:	f380 8809 	msr	PSP, r0
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f04f 0000 	mov.w	r0, #0
 8003356:	f380 8811 	msr	BASEPRI, r0
 800335a:	f04e 0e0d 	orr.w	lr, lr, #13
 800335e:	4770      	bx	lr

08003360 <pxCurrentTCBConst2>:
 8003360:	200008e8 	.word	0x200008e8

08003364 <vPortEnterCritical>:
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003374:	4a0b      	ldr	r2, [pc, #44]	; (80033a4 <vPortEnterCritical+0x40>)
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800337c:	2b01      	cmp	r3, #1
 800337e:	d000      	beq.n	8003382 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8003380:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003382:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003386:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800338a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800338e:	d0f7      	beq.n	8003380 <vPortEnterCritical+0x1c>
 8003390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003394:	f383 8811 	msr	BASEPRI, r3
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	e7fe      	b.n	80033a0 <vPortEnterCritical+0x3c>
 80033a2:	bf00      	nop
 80033a4:	20000010 	.word	0x20000010

080033a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <vPortExitCritical+0x28>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	b943      	cbnz	r3, 80033c0 <vPortExitCritical+0x18>
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	e7fe      	b.n	80033be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80033c0:	3b01      	subs	r3, #1
 80033c2:	4a03      	ldr	r2, [pc, #12]	; (80033d0 <vPortExitCritical+0x28>)
 80033c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80033c6:	b90b      	cbnz	r3, 80033cc <vPortExitCritical+0x24>
	__asm volatile
 80033c8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000010 	.word	0x20000010
	...

080033e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80033e0:	f3ef 8009 	mrs	r0, PSP
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <pxCurrentTCBConst>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033f0:	6010      	str	r0, [r2, #0]
 80033f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80033f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80033fa:	f380 8811 	msr	BASEPRI, r0
 80033fe:	f7ff fbab 	bl	8002b58 <vTaskSwitchContext>
 8003402:	f04f 0000 	mov.w	r0, #0
 8003406:	f380 8811 	msr	BASEPRI, r0
 800340a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800340e:	6819      	ldr	r1, [r3, #0]
 8003410:	6808      	ldr	r0, [r1, #0]
 8003412:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003416:	f380 8809 	msr	PSP, r0
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	4770      	bx	lr

08003420 <pxCurrentTCBConst>:
 8003420:	200008e8 	.word	0x200008e8

08003424 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003424:	b508      	push	{r3, lr}
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003436:	f7ff fa59 	bl	80028ec <xTaskIncrementTick>
 800343a:	b128      	cbz	r0, 8003448 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800343c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003444:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8003448:	2300      	movs	r3, #0
 800344a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800344e:	bd08      	pop	{r3, pc}

08003450 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003450:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003454:	2300      	movs	r3, #0
 8003456:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003458:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <vPortSetupTimerInterrupt+0x20>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4905      	ldr	r1, [pc, #20]	; (8003474 <vPortSetupTimerInterrupt+0x24>)
 8003460:	fba1 1303 	umull	r1, r3, r1, r3
 8003464:	099b      	lsrs	r3, r3, #6
 8003466:	3b01      	subs	r3, #1
 8003468:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800346a:	2307      	movs	r3, #7
 800346c:	6113      	str	r3, [r2, #16]
}
 800346e:	4770      	bx	lr
 8003470:	20000004 	.word	0x20000004
 8003474:	10624dd3 	.word	0x10624dd3

08003478 <xPortStartScheduler>:
{
 8003478:	b510      	push	{r4, lr}
 800347a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800347c:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <xPortStartScheduler+0xb0>)
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003484:	22ff      	movs	r2, #255	; 0xff
 8003486:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003490:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003498:	4a24      	ldr	r2, [pc, #144]	; (800352c <xPortStartScheduler+0xb4>)
 800349a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800349c:	4b24      	ldr	r3, [pc, #144]	; (8003530 <xPortStartScheduler+0xb8>)
 800349e:	2207      	movs	r2, #7
 80034a0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034a2:	e009      	b.n	80034b8 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80034a4:	4a22      	ldr	r2, [pc, #136]	; (8003530 <xPortStartScheduler+0xb8>)
 80034a6:	6813      	ldr	r3, [r2, #0]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80034bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034c0:	d1f0      	bne.n	80034a4 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034c2:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <xPortStartScheduler+0xb8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d008      	beq.n	80034dc <xPortStartScheduler+0x64>
	__asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	e7fe      	b.n	80034da <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	4a14      	ldr	r2, [pc, #80]	; (8003530 <xPortStartScheduler+0xb8>)
 80034e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80034e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034e6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80034e8:	9b01      	ldr	r3, [sp, #4]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <xPortStartScheduler+0xb0>)
 80034ee:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80034f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80034f4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80034f8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80034fc:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003500:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8003504:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003508:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800350c:	f7ff ffa0 	bl	8003450 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003510:	2400      	movs	r4, #0
 8003512:	4b08      	ldr	r3, [pc, #32]	; (8003534 <xPortStartScheduler+0xbc>)
 8003514:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8003516:	f7ff feed 	bl	80032f4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800351a:	f7ff fb1d 	bl	8002b58 <vTaskSwitchContext>
	prvTaskExitError();
 800351e:	f7ff fec9 	bl	80032b4 <prvTaskExitError>
}
 8003522:	4620      	mov	r0, r4
 8003524:	b002      	add	sp, #8
 8003526:	bd10      	pop	{r4, pc}
 8003528:	e000e400 	.word	0xe000e400
 800352c:	20000f14 	.word	0x20000f14
 8003530:	20000f18 	.word	0x20000f18
 8003534:	20000010 	.word	0x20000010

08003538 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003538:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800353c:	2b0f      	cmp	r3, #15
 800353e:	d90f      	bls.n	8003560 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003540:	4a11      	ldr	r2, [pc, #68]	; (8003588 <vPortValidateInterruptPriority+0x50>)
 8003542:	5c9b      	ldrb	r3, [r3, r2]
 8003544:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003546:	4a11      	ldr	r2, [pc, #68]	; (800358c <vPortValidateInterruptPriority+0x54>)
 8003548:	7812      	ldrb	r2, [r2, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d908      	bls.n	8003560 <vPortValidateInterruptPriority+0x28>
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	e7fe      	b.n	800355e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003560:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003564:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8003568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800356c:	4a08      	ldr	r2, [pc, #32]	; (8003590 <vPortValidateInterruptPriority+0x58>)
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	4293      	cmp	r3, r2
 8003572:	d908      	bls.n	8003586 <vPortValidateInterruptPriority+0x4e>
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	e7fe      	b.n	8003584 <vPortValidateInterruptPriority+0x4c>
	}
 8003586:	4770      	bx	lr
 8003588:	e000e3f0 	.word	0xe000e3f0
 800358c:	20000f14 	.word	0x20000f14
 8003590:	20000f18 	.word	0x20000f18

08003594 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003594:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003596:	f012 0f07 	tst.w	r2, #7
 800359a:	d01e      	beq.n	80035da <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800359c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800359e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80035a2:	f5c1 6340 	rsb	r3, r1, #3072	; 0xc00
 80035a6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035a8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80035aa:	480e      	ldr	r0, [pc, #56]	; (80035e4 <prvHeapInit+0x50>)
 80035ac:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80035ae:	2100      	movs	r1, #0
 80035b0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80035b2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80035b4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035b6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80035ba:	480b      	ldr	r0, [pc, #44]	; (80035e8 <prvHeapInit+0x54>)
 80035bc:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80035be:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80035c0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035c2:	1a99      	subs	r1, r3, r2
 80035c4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035c6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <prvHeapInit+0x58>)
 80035ca:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <prvHeapInit+0x5c>)
 80035ce:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <prvHeapInit+0x60>)
 80035d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035d6:	601a      	str	r2, [r3, #0]
}
 80035d8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80035da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035de:	e7e4      	b.n	80035aa <prvHeapInit+0x16>
 80035e0:	20000f20 	.word	0x20000f20
 80035e4:	20001b2c 	.word	0x20001b2c
 80035e8:	20000f1c 	.word	0x20000f1c
 80035ec:	20001b28 	.word	0x20001b28
 80035f0:	20001b24 	.word	0x20001b24
 80035f4:	20001b20 	.word	0x20001b20

080035f8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035f8:	4b15      	ldr	r3, [pc, #84]	; (8003650 <prvInsertBlockIntoFreeList+0x58>)
 80035fa:	461a      	mov	r2, r3
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4283      	cmp	r3, r0
 8003600:	d3fb      	bcc.n	80035fa <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003602:	6851      	ldr	r1, [r2, #4]
 8003604:	eb02 0c01 	add.w	ip, r2, r1
 8003608:	4584      	cmp	ip, r0
 800360a:	d009      	beq.n	8003620 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800360c:	6841      	ldr	r1, [r0, #4]
 800360e:	eb00 0c01 	add.w	ip, r0, r1
 8003612:	4563      	cmp	r3, ip
 8003614:	d009      	beq.n	800362a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003616:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003618:	4290      	cmp	r0, r2
 800361a:	d018      	beq.n	800364e <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800361c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800361e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003620:	6840      	ldr	r0, [r0, #4]
 8003622:	4401      	add	r1, r0
 8003624:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8003626:	4610      	mov	r0, r2
 8003628:	e7f0      	b.n	800360c <prvInsertBlockIntoFreeList+0x14>
{
 800362a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800362c:	4c09      	ldr	r4, [pc, #36]	; (8003654 <prvInsertBlockIntoFreeList+0x5c>)
 800362e:	6824      	ldr	r4, [r4, #0]
 8003630:	42a3      	cmp	r3, r4
 8003632:	d00a      	beq.n	800364a <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4419      	add	r1, r3
 8003638:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8003640:	4290      	cmp	r0, r2
 8003642:	d000      	beq.n	8003646 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003644:	6010      	str	r0, [r2, #0]
	}
}
 8003646:	bc10      	pop	{r4}
 8003648:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800364a:	6004      	str	r4, [r0, #0]
 800364c:	e7f8      	b.n	8003640 <prvInsertBlockIntoFreeList+0x48>
 800364e:	4770      	bx	lr
 8003650:	20001b2c 	.word	0x20001b2c
 8003654:	20000f1c 	.word	0x20000f1c

08003658 <pvPortMalloc>:
{
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800365c:	f7ff f938 	bl	80028d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003660:	4b34      	ldr	r3, [pc, #208]	; (8003734 <pvPortMalloc+0xdc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	b1a3      	cbz	r3, 8003690 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003666:	4b34      	ldr	r3, [pc, #208]	; (8003738 <pvPortMalloc+0xe0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	421d      	tst	r5, r3
 800366c:	d14a      	bne.n	8003704 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 800366e:	b135      	cbz	r5, 800367e <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8003670:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003672:	f015 0f07 	tst.w	r5, #7
 8003676:	d002      	beq.n	800367e <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003678:	f025 0507 	bic.w	r5, r5, #7
 800367c:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800367e:	2d00      	cmp	r5, #0
 8003680:	d042      	beq.n	8003708 <pvPortMalloc+0xb0>
 8003682:	4b2e      	ldr	r3, [pc, #184]	; (800373c <pvPortMalloc+0xe4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	42ab      	cmp	r3, r5
 8003688:	d34d      	bcc.n	8003726 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 800368a:	4a2d      	ldr	r2, [pc, #180]	; (8003740 <pvPortMalloc+0xe8>)
 800368c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800368e:	e004      	b.n	800369a <pvPortMalloc+0x42>
			prvHeapInit();
 8003690:	f7ff ff80 	bl	8003594 <prvHeapInit>
 8003694:	e7e7      	b.n	8003666 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8003696:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8003698:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800369a:	6863      	ldr	r3, [r4, #4]
 800369c:	42ab      	cmp	r3, r5
 800369e:	d202      	bcs.n	80036a6 <pvPortMalloc+0x4e>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f7      	bne.n	8003696 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80036a6:	4b23      	ldr	r3, [pc, #140]	; (8003734 <pvPortMalloc+0xdc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	42a3      	cmp	r3, r4
 80036ac:	d03d      	beq.n	800372a <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036ae:	6816      	ldr	r6, [r2, #0]
 80036b0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036b6:	6863      	ldr	r3, [r4, #4]
 80036b8:	1b5b      	subs	r3, r3, r5
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d910      	bls.n	80036e0 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036be:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036c0:	f010 0f07 	tst.w	r0, #7
 80036c4:	d008      	beq.n	80036d8 <pvPortMalloc+0x80>
 80036c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	e7fe      	b.n	80036d6 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80036d8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80036da:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80036dc:	f7ff ff8c 	bl	80035f8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036e0:	6862      	ldr	r2, [r4, #4]
 80036e2:	4916      	ldr	r1, [pc, #88]	; (800373c <pvPortMalloc+0xe4>)
 80036e4:	680b      	ldr	r3, [r1, #0]
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036ea:	4916      	ldr	r1, [pc, #88]	; (8003744 <pvPortMalloc+0xec>)
 80036ec:	6809      	ldr	r1, [r1, #0]
 80036ee:	428b      	cmp	r3, r1
 80036f0:	d201      	bcs.n	80036f6 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80036f2:	4914      	ldr	r1, [pc, #80]	; (8003744 <pvPortMalloc+0xec>)
 80036f4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <pvPortMalloc+0xe0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	e002      	b.n	800370a <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 8003704:	2600      	movs	r6, #0
 8003706:	e000      	b.n	800370a <pvPortMalloc+0xb2>
 8003708:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800370a:	f7ff f97d 	bl	8002a08 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800370e:	f016 0f07 	tst.w	r6, #7
 8003712:	d00c      	beq.n	800372e <pvPortMalloc+0xd6>
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	e7fe      	b.n	8003724 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 8003726:	2600      	movs	r6, #0
 8003728:	e7ef      	b.n	800370a <pvPortMalloc+0xb2>
 800372a:	2600      	movs	r6, #0
 800372c:	e7ed      	b.n	800370a <pvPortMalloc+0xb2>
}
 800372e:	4630      	mov	r0, r6
 8003730:	bd70      	pop	{r4, r5, r6, pc}
 8003732:	bf00      	nop
 8003734:	20000f1c 	.word	0x20000f1c
 8003738:	20001b20 	.word	0x20001b20
 800373c:	20001b24 	.word	0x20001b24
 8003740:	20001b2c 	.word	0x20001b2c
 8003744:	20001b28 	.word	0x20001b28

08003748 <vPortFree>:
	if( pv != NULL )
 8003748:	b380      	cbz	r0, 80037ac <vPortFree+0x64>
{
 800374a:	b538      	push	{r3, r4, r5, lr}
 800374c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800374e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003752:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003756:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <vPortFree+0x68>)
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	4213      	tst	r3, r2
 800375c:	d108      	bne.n	8003770 <vPortFree+0x28>
 800375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	e7fe      	b.n	800376e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003770:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003774:	b141      	cbz	r1, 8003788 <vPortFree+0x40>
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	e7fe      	b.n	8003786 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003788:	ea23 0302 	bic.w	r3, r3, r2
 800378c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003790:	f7ff f89e 	bl	80028d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003794:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003798:	4a06      	ldr	r2, [pc, #24]	; (80037b4 <vPortFree+0x6c>)
 800379a:	6813      	ldr	r3, [r2, #0]
 800379c:	440b      	add	r3, r1
 800379e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037a0:	4628      	mov	r0, r5
 80037a2:	f7ff ff29 	bl	80035f8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80037a6:	f7ff f92f 	bl	8002a08 <xTaskResumeAll>
}
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20001b20 	.word	0x20001b20
 80037b4:	20001b24 	.word	0x20001b24

080037b8 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80037b8:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 80037ba:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 80037bc:	4293      	cmp	r3, r2
 80037be:	d804      	bhi.n	80037ca <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80037c0:	6880      	ldr	r0, [r0, #8]
 80037c2:	1a80      	subs	r0, r0, r2
 80037c4:	4403      	add	r3, r0
 80037c6:	1e58      	subs	r0, r3, #1
 80037c8:	4770      	bx	lr
  } else {
    r = RdOff - WrOff - 1u;
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	1e58      	subs	r0, r3, #1
  }
  return r;
}
 80037ce:	4770      	bx	lr

080037d0 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80037d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037d4:	4604      	mov	r4, r0
 80037d6:	4688      	mov	r8, r1
 80037d8:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
 80037da:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 80037dc:	6887      	ldr	r7, [r0, #8]
 80037de:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
 80037e2:	4591      	cmp	r9, r2
 80037e4:	d907      	bls.n	80037f6 <_WriteNoCheck+0x26>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80037e6:	6840      	ldr	r0, [r0, #4]
 80037e8:	4428      	add	r0, r5
 80037ea:	f000 feee 	bl	80045ca <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80037ee:	4435      	add	r5, r6
 80037f0:	60e5      	str	r5, [r4, #12]
}
 80037f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80037f6:	6840      	ldr	r0, [r0, #4]
 80037f8:	464a      	mov	r2, r9
 80037fa:	4428      	add	r0, r5
 80037fc:	f000 fee5 	bl	80045ca <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003800:	1bed      	subs	r5, r5, r7
 8003802:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8003804:	462a      	mov	r2, r5
 8003806:	eb08 0109 	add.w	r1, r8, r9
 800380a:	6860      	ldr	r0, [r4, #4]
 800380c:	f000 fedd 	bl	80045ca <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8003810:	60e5      	str	r5, [r4, #12]
}
 8003812:	e7ee      	b.n	80037f2 <_WriteNoCheck+0x22>

08003814 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003818:	4606      	mov	r6, r0
 800381a:	4688      	mov	r8, r1
 800381c:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
 800381e:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
 8003820:	f04f 0900 	mov.w	r9, #0
 8003824:	e018      	b.n	8003858 <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003826:	1b64      	subs	r4, r4, r5
 8003828:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800382a:	68b3      	ldr	r3, [r6, #8]
 800382c:	1b5c      	subs	r4, r3, r5
 800382e:	4294      	cmp	r4, r2
 8003830:	bf28      	it	cs
 8003832:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003834:	42bc      	cmp	r4, r7
 8003836:	bf28      	it	cs
 8003838:	463c      	movcs	r4, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800383a:	6870      	ldr	r0, [r6, #4]
 800383c:	4622      	mov	r2, r4
 800383e:	4641      	mov	r1, r8
 8003840:	4428      	add	r0, r5
 8003842:	f000 fec2 	bl	80045ca <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003846:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
 8003848:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
 800384a:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
 800384c:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
 800384e:	68b3      	ldr	r3, [r6, #8]
 8003850:	42ab      	cmp	r3, r5
 8003852:	d009      	beq.n	8003868 <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
 8003854:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 8003856:	b14f      	cbz	r7, 800386c <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003858:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
 800385a:	42a5      	cmp	r5, r4
 800385c:	d3e3      	bcc.n	8003826 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800385e:	68b2      	ldr	r2, [r6, #8]
 8003860:	1b64      	subs	r4, r4, r5
 8003862:	4414      	add	r4, r2
 8003864:	1e62      	subs	r2, r4, #1
 8003866:	e7e0      	b.n	800382a <_WriteBlocking+0x16>
      WrOff = 0u;
 8003868:	2500      	movs	r5, #0
 800386a:	e7f3      	b.n	8003854 <_WriteBlocking+0x40>
}
 800386c:	4648      	mov	r0, r9
 800386e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08003874 <_DoInit>:
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003874:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <_DoInit+0x4c>)
 8003876:	2203      	movs	r2, #3
 8003878:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800387a:	615a      	str	r2, [r3, #20]
  p->aUp[0].sName         = "Terminal";
 800387c:	4911      	ldr	r1, [pc, #68]	; (80038c4 <_DoInit+0x50>)
 800387e:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003880:	4a11      	ldr	r2, [pc, #68]	; (80038c8 <_DoInit+0x54>)
 8003882:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003888:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800388a:	2200      	movs	r2, #0
 800388c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
 8003892:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003894:	490d      	ldr	r1, [pc, #52]	; (80038cc <_DoInit+0x58>)
 8003896:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003898:	2110      	movs	r1, #16
 800389a:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800389c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800389e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80038a0:	675a      	str	r2, [r3, #116]	; 0x74
  strcpy(&p->acID[7], "RTT");
 80038a2:	4a0b      	ldr	r2, [pc, #44]	; (80038d0 <_DoInit+0x5c>)
 80038a4:	6810      	ldr	r0, [r2, #0]
 80038a6:	f8c3 0007 	str.w	r0, [r3, #7]
  strcpy(&p->acID[0], "SEGGER");
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <_DoInit+0x60>)
 80038ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038b0:	6018      	str	r0, [r3, #0]
 80038b2:	8099      	strh	r1, [r3, #4]
 80038b4:	0c09      	lsrs	r1, r1, #16
 80038b6:	7199      	strb	r1, [r3, #6]
  p->acID[6] = ' ';
 80038b8:	2220      	movs	r2, #32
 80038ba:	719a      	strb	r2, [r3, #6]
}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20001b34 	.word	0x20001b34
 80038c4:	080057c0 	.word	0x080057c0
 80038c8:	20001bec 	.word	0x20001bec
 80038cc:	20001bdc 	.word	0x20001bdc
 80038d0:	080057cc 	.word	0x080057cc
 80038d4:	080057d0 	.word	0x080057d0

080038d8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80038d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038dc:	4604      	mov	r4, r0
 80038de:	4688      	mov	r8, r1
 80038e0:	4691      	mov	r9, r2
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <SEGGER_RTT_ReadNoLock+0x9c>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b1c3      	cbz	r3, 800391a <SEGGER_RTT_ReadNoLock+0x42>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
  pBuffer = (unsigned char*)pData;
  RdOff = pRing->RdOff;
 80038e8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80038ec:	4a21      	ldr	r2, [pc, #132]	; (8003974 <SEGGER_RTT_ReadNoLock+0x9c>)
 80038ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80038f2:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  WrOff = pRing->WrOff;
 80038f4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
  NumBytesRead = 0u;
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80038f6:	42af      	cmp	r7, r5
 80038f8:	d812      	bhi.n	8003920 <SEGGER_RTT_ReadNoLock+0x48>
  NumBytesRead = 0u;
 80038fa:	2600      	movs	r6, #0
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80038fc:	1bed      	subs	r5, r5, r7
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80038fe:	454d      	cmp	r5, r9
 8003900:	bf28      	it	cs
 8003902:	464d      	movcs	r5, r9
  if (NumBytesRem > 0u) {
 8003904:	bb3d      	cbnz	r5, 8003956 <SEGGER_RTT_ReadNoLock+0x7e>
    pBuffer      += NumBytesRem;
    BufferSize   -= NumBytesRem;
    RdOff        += NumBytesRem;
#endif
  }
  if (NumBytesRead) {
 8003906:	b12e      	cbz	r6, 8003914 <SEGGER_RTT_ReadNoLock+0x3c>
    pRing->RdOff = RdOff;
 8003908:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800390c:	4819      	ldr	r0, [pc, #100]	; (8003974 <SEGGER_RTT_ReadNoLock+0x9c>)
 800390e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8003912:	6727      	str	r7, [r4, #112]	; 0x70
  }
  //
  return NumBytesRead;
}
 8003914:	4630      	mov	r0, r6
 8003916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INIT();
 800391a:	f7ff ffab 	bl	8003874 <_DoInit>
 800391e:	e7e3      	b.n	80038e8 <SEGGER_RTT_ReadNoLock+0x10>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003920:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8003924:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 8003928:	f8da 6068 	ldr.w	r6, [sl, #104]	; 0x68
 800392c:	1bf6      	subs	r6, r6, r7
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800392e:	454e      	cmp	r6, r9
 8003930:	bf28      	it	cs
 8003932:	464e      	movcs	r6, r9
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003934:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
 8003938:	4632      	mov	r2, r6
 800393a:	4439      	add	r1, r7
 800393c:	4640      	mov	r0, r8
 800393e:	f000 fe44 	bl	80045ca <memcpy>
    pBuffer      += NumBytesRem;
 8003942:	44b0      	add	r8, r6
    BufferSize   -= NumBytesRem;
 8003944:	eba9 0906 	sub.w	r9, r9, r6
    RdOff        += NumBytesRem;
 8003948:	4437      	add	r7, r6
    if (RdOff == pRing->SizeOfBuffer) {
 800394a:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
 800394e:	42bb      	cmp	r3, r7
 8003950:	d1d4      	bne.n	80038fc <SEGGER_RTT_ReadNoLock+0x24>
      RdOff = 0u;
 8003952:	2700      	movs	r7, #0
 8003954:	e7d2      	b.n	80038fc <SEGGER_RTT_ReadNoLock+0x24>
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003956:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800395a:	4a06      	ldr	r2, [pc, #24]	; (8003974 <SEGGER_RTT_ReadNoLock+0x9c>)
 800395c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003960:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003962:	462a      	mov	r2, r5
 8003964:	4439      	add	r1, r7
 8003966:	4640      	mov	r0, r8
 8003968:	f000 fe2f 	bl	80045ca <memcpy>
    NumBytesRead += NumBytesRem;
 800396c:	442e      	add	r6, r5
    RdOff        += NumBytesRem;
 800396e:	442f      	add	r7, r5
 8003970:	e7c9      	b.n	8003906 <SEGGER_RTT_ReadNoLock+0x2e>
 8003972:	bf00      	nop
 8003974:	20001b34 	.word	0x20001b34

08003978 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	460f      	mov	r7, r1
 800397c:	4616      	mov	r6, r2

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800397e:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <SEGGER_RTT_WriteNoLock+0x68>)
 8003980:	1c45      	adds	r5, r0, #1
 8003982:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003986:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800398a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800398e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003992:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003994:	2c01      	cmp	r4, #1
 8003996:	d011      	beq.n	80039bc <SEGGER_RTT_WriteNoLock+0x44>
 8003998:	2c02      	cmp	r4, #2
 800399a:	d01c      	beq.n	80039d6 <SEGGER_RTT_WriteNoLock+0x5e>
 800399c:	b114      	cbz	r4, 80039a4 <SEGGER_RTT_WriteNoLock+0x2c>
 800399e:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
 80039a0:	4620      	mov	r0, r4
 80039a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 80039a4:	4628      	mov	r0, r5
 80039a6:	f7ff ff07 	bl	80037b8 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 80039aa:	4286      	cmp	r6, r0
 80039ac:	d8f8      	bhi.n	80039a0 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
 80039ae:	4632      	mov	r2, r6
 80039b0:	4639      	mov	r1, r7
 80039b2:	4628      	mov	r0, r5
 80039b4:	f7ff ff0c 	bl	80037d0 <_WriteNoCheck>
      Status = NumBytes;
 80039b8:	4634      	mov	r4, r6
 80039ba:	e7f1      	b.n	80039a0 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
 80039bc:	4628      	mov	r0, r5
 80039be:	f7ff fefb 	bl	80037b8 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 80039c2:	4634      	mov	r4, r6
 80039c4:	4286      	cmp	r6, r0
 80039c6:	bf28      	it	cs
 80039c8:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 80039ca:	4622      	mov	r2, r4
 80039cc:	4639      	mov	r1, r7
 80039ce:	4628      	mov	r0, r5
 80039d0:	f7ff fefe 	bl	80037d0 <_WriteNoCheck>
    break;
 80039d4:	e7e4      	b.n	80039a0 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80039d6:	4628      	mov	r0, r5
 80039d8:	f7ff ff1c 	bl	8003814 <_WriteBlocking>
 80039dc:	4604      	mov	r4, r0
    break;
 80039de:	e7df      	b.n	80039a0 <SEGGER_RTT_WriteNoLock+0x28>
 80039e0:	20001b34 	.word	0x20001b34

080039e4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	4604      	mov	r4, r0
 80039e8:	460d      	mov	r5, r1
 80039ea:	4616      	mov	r6, r2
  unsigned Status;
  //
  INIT();
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <SEGGER_RTT_Write+0x30>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b16b      	cbz	r3, 8003a0e <SEGGER_RTT_Write+0x2a>
  SEGGER_RTT_LOCK();
 80039f2:	f3ef 8711 	mrs	r7, BASEPRI
 80039f6:	f04f 0120 	mov.w	r1, #32
 80039fa:	f381 8811 	msr	BASEPRI, r1
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 80039fe:	4632      	mov	r2, r6
 8003a00:	4629      	mov	r1, r5
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7ff ffb8 	bl	8003978 <SEGGER_RTT_WriteNoLock>
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8003a08:	f387 8811 	msr	BASEPRI, r7
  //
  return Status;
}
 8003a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 8003a0e:	f7ff ff31 	bl	8003874 <_DoInit>
 8003a12:	e7ee      	b.n	80039f2 <SEGGER_RTT_Write+0xe>
 8003a14:	20001b34 	.word	0x20001b34

08003a18 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
int _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	461c      	mov	r4, r3
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2000      	movs	r0, #0
 8003a22:	f7ff ffdf 	bl	80039e4 <SEGGER_RTT_Write>
  return len;
}
 8003a26:	4620      	mov	r0, r4
 8003a28:	bd10      	pop	{r4, pc}

08003a2a <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003a2a:	b410      	push	{r4}
 8003a2c:	4684      	mov	ip, r0
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003a2e:	2300      	movs	r3, #0
  while(*(pText + Len) != 0) {
 8003a30:	e000      	b.n	8003a34 <_EncodeStr+0xa>
    Len++;
 8003a32:	3301      	adds	r3, #1
  while(*(pText + Len) != 0) {
 8003a34:	5ccc      	ldrb	r4, [r1, r3]
 8003a36:	2c00      	cmp	r4, #0
 8003a38:	d1fb      	bne.n	8003a32 <_EncodeStr+0x8>
  }
  if (Len > Limit) {
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d800      	bhi.n	8003a40 <_EncodeStr+0x16>
 8003a3e:	461a      	mov	r2, r3
    Len = Limit;
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003a40:	2afe      	cmp	r2, #254	; 0xfe
 8003a42:	d804      	bhi.n	8003a4e <_EncodeStr+0x24>
    *pPayload++ = Len; 
 8003a44:	4660      	mov	r0, ip
 8003a46:	f800 2b01 	strb.w	r2, [r0], #1
  if (Len > Limit) {
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e00f      	b.n	8003a6e <_EncodeStr+0x44>
  } else {
    *pPayload++ = 255;
 8003a4e:	23ff      	movs	r3, #255	; 0xff
 8003a50:	f88c 3000 	strb.w	r3, [ip]
    *pPayload++ = (Len & 255);
 8003a54:	f88c 2001 	strb.w	r2, [ip, #1]
    *pPayload++ = ((Len >> 8) & 255);
 8003a58:	0a13      	lsrs	r3, r2, #8
 8003a5a:	f10c 0003 	add.w	r0, ip, #3
 8003a5e:	f88c 3002 	strb.w	r3, [ip, #2]
 8003a62:	e7f2      	b.n	8003a4a <_EncodeStr+0x20>
  //
  // copy string
  //
  n = 0;
  while (n < Len) {
    *pPayload++ = *pText++;
 8003a64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a68:	f800 4b01 	strb.w	r4, [r0], #1
    n++;
 8003a6c:	3301      	adds	r3, #1
  while (n < Len) {
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d3f8      	bcc.n	8003a64 <_EncodeStr+0x3a>
  }
  return pPayload;
}
 8003a72:	bc10      	pop	{r4}
 8003a74:	4770      	bx	lr

08003a76 <_PreparePacket>:
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
  return pPacket + 4;
}
 8003a76:	3004      	adds	r0, #4
 8003a78:	4770      	bx	lr
	...

08003a7c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	b084      	sub	sp, #16
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003a80:	2301      	movs	r3, #1
 8003a82:	f88d 3004 	strb.w	r3, [sp, #4]
  pPayload   = &aPacket[1];
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003a86:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <_TrySendOverflowPacket+0x68>)
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f10d 0205 	add.w	r2, sp, #5
 8003a8e:	e004      	b.n	8003a9a <_TrySendOverflowPacket+0x1e>
 8003a90:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8003a94:	f802 1b01 	strb.w	r1, [r2], #1
 8003a98:	09db      	lsrs	r3, r3, #7
 8003a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a9c:	d8f8      	bhi.n	8003a90 <_TrySendOverflowPacket+0x14>
 8003a9e:	f802 3b01 	strb.w	r3, [r2], #1
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <_TrySendOverflowPacket+0x6c>)
 8003aa4:	685c      	ldr	r4, [r3, #4]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <_TrySendOverflowPacket+0x68>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	1ae3      	subs	r3, r4, r3
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003aac:	e004      	b.n	8003ab8 <_TrySendOverflowPacket+0x3c>
 8003aae:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8003ab2:	f802 1b01 	strb.w	r1, [r2], #1
 8003ab6:	09db      	lsrs	r3, r3, #7
 8003ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8003aba:	d8f8      	bhi.n	8003aae <_TrySendOverflowPacket+0x32>
 8003abc:	f802 3b01 	strb.w	r3, [r2], #1
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003ac0:	a901      	add	r1, sp, #4
 8003ac2:	1a52      	subs	r2, r2, r1
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	f7fc fb43 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
  if (Status) {
 8003aca:	b130      	cbz	r0, 8003ada <_TrySendOverflowPacket+0x5e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <_TrySendOverflowPacket+0x68>)
 8003ace:	60dc      	str	r4, [r3, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	3a01      	subs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
  } else {
    _SYSVIEW_Globals.DropCount++;
  }
  //
  return Status;
}
 8003ad6:	b004      	add	sp, #16
 8003ad8:	bd10      	pop	{r4, pc}
    _SYSVIEW_Globals.DropCount++;
 8003ada:	4a02      	ldr	r2, [pc, #8]	; (8003ae4 <_TrySendOverflowPacket+0x68>)
 8003adc:	6953      	ldr	r3, [r2, #20]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	6153      	str	r3, [r2, #20]
  return Status;
 8003ae2:	e7f8      	b.n	8003ad6 <_TrySendOverflowPacket+0x5a>
 8003ae4:	20001ff0 	.word	0x20001ff0
 8003ae8:	e0001000 	.word	0xe0001000

08003aec <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003aec:	b508      	push	{r3, lr}
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003aee:	4b03      	ldr	r3, [pc, #12]	; (8003afc <SEGGER_SYSVIEW_SendTaskList+0x10>)
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	b113      	cbz	r3, 8003afa <SEGGER_SYSVIEW_SendTaskList+0xe>
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	b103      	cbz	r3, 8003afa <SEGGER_SYSVIEW_SendTaskList+0xe>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003af8:	4798      	blx	r3
  }
}
 8003afa:	bd08      	pop	{r3, pc}
 8003afc:	20001ff0 	.word	0x20001ff0

08003b00 <SEGGER_SYSVIEW_ShrinkId>:
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
  return SHRINK_ID(Id);
 8003b00:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <SEGGER_SYSVIEW_ShrinkId+0xc>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	1ac0      	subs	r0, r0, r3
}
 8003b06:	0880      	lsrs	r0, r0, #2
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20001ff0 	.word	0x20001ff0

08003b10 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003b10:	b510      	push	{r4, lr}
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <SEGGER_SYSVIEW_SendModuleDescription+0x1c>)
 8003b14:	681c      	ldr	r4, [r3, #0]
 8003b16:	b924      	cbnz	r4, 8003b22 <SEGGER_SYSVIEW_SendModuleDescription+0x12>
        pModule->pfSendModuleDesc();
      }
      pModule = pModule->pNext;
    } while (pModule);
  }
}
 8003b18:	bd10      	pop	{r4, pc}
        pModule->pfSendModuleDesc();
 8003b1a:	4798      	blx	r3
      pModule = pModule->pNext;
 8003b1c:	6924      	ldr	r4, [r4, #16]
    } while (pModule);
 8003b1e:	2c00      	cmp	r4, #0
 8003b20:	d0fa      	beq.n	8003b18 <SEGGER_SYSVIEW_SendModuleDescription+0x8>
      if (pModule->pfSendModuleDesc) {
 8003b22:	68e3      	ldr	r3, [r4, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f8      	bne.n	8003b1a <SEGGER_SYSVIEW_SendModuleDescription+0xa>
 8003b28:	e7f8      	b.n	8003b1c <SEGGER_SYSVIEW_SendModuleDescription+0xc>
 8003b2a:	bf00      	nop
 8003b2c:	200020fc 	.word	0x200020fc

08003b30 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003b30:	b510      	push	{r4, lr}
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003b32:	f3ef 8411 	mrs	r4, BASEPRI
 8003b36:	f04f 0120 	mov.w	r1, #32
 8003b3a:	f381 8811 	msr	BASEPRI, r1
 8003b3e:	480b      	ldr	r0, [pc, #44]	; (8003b6c <SEGGER_SYSVIEW_SendNumModules+0x3c>)
 8003b40:	f7ff ff99 	bl	8003a76 <_PreparePacket>
  pPayload = pPayloadStart;
  ENCODE_U32(pPayload, _NumModules);
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <SEGGER_SYSVIEW_SendNumModules+0x40>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	4601      	mov	r1, r0
 8003b4a:	e004      	b.n	8003b56 <SEGGER_SYSVIEW_SendNumModules+0x26>
 8003b4c:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8003b50:	f801 2b01 	strb.w	r2, [r1], #1
 8003b54:	09db      	lsrs	r3, r3, #7
 8003b56:	2b7f      	cmp	r3, #127	; 0x7f
 8003b58:	d8f8      	bhi.n	8003b4c <SEGGER_SYSVIEW_SendNumModules+0x1c>
 8003b5a:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003b5e:	221b      	movs	r2, #27
 8003b60:	f000 f8b0 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 8003b64:	f384 8811 	msr	BASEPRI, r4
}
 8003b68:	bd10      	pop	{r4, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20002018 	.word	0x20002018
 8003b70:	20001fec 	.word	0x20001fec

08003b74 <SEGGER_SYSVIEW_Start>:
void SEGGER_SYSVIEW_Start(void) {
 8003b74:	b538      	push	{r3, r4, r5, lr}
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003b76:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <SEGGER_SYSVIEW_Start+0xb0>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	b103      	cbz	r3, 8003b7e <SEGGER_SYSVIEW_Start+0xa>
}
 8003b7c:	bd38      	pop	{r3, r4, r5, pc}
    _SYSVIEW_Globals.EnableState = 1;
 8003b7e:	4d29      	ldr	r5, [pc, #164]	; (8003c24 <SEGGER_SYSVIEW_Start+0xb0>)
 8003b80:	2001      	movs	r0, #1
 8003b82:	7028      	strb	r0, [r5, #0]
    SEGGER_SYSVIEW_LOCK();
 8003b84:	f3ef 8411 	mrs	r4, BASEPRI
 8003b88:	f04f 0120 	mov.w	r1, #32
 8003b8c:	f381 8811 	msr	BASEPRI, r1
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003b90:	220a      	movs	r2, #10
 8003b92:	4925      	ldr	r1, [pc, #148]	; (8003c28 <SEGGER_SYSVIEW_Start+0xb4>)
 8003b94:	f7fc fadc 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003b98:	f384 8811 	msr	BASEPRI, r4
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003b9c:	200a      	movs	r0, #10
 8003b9e:	f000 f905 	bl	8003dac <SEGGER_SYSVIEW_RecordVoid>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003ba2:	f3ef 8411 	mrs	r4, BASEPRI
 8003ba6:	f04f 0120 	mov.w	r1, #32
 8003baa:	f381 8811 	msr	BASEPRI, r1
 8003bae:	481f      	ldr	r0, [pc, #124]	; (8003c2c <SEGGER_SYSVIEW_Start+0xb8>)
 8003bb0:	f7ff ff61 	bl	8003a76 <_PreparePacket>
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003bb4:	686a      	ldr	r2, [r5, #4]
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	e004      	b.n	8003bc4 <SEGGER_SYSVIEW_Start+0x50>
 8003bba:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	09d2      	lsrs	r2, r2, #7
 8003bc4:	2a7f      	cmp	r2, #127	; 0x7f
 8003bc6:	d8f8      	bhi.n	8003bba <SEGGER_SYSVIEW_Start+0x46>
 8003bc8:	f803 2b01 	strb.w	r2, [r3], #1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003bcc:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <SEGGER_SYSVIEW_Start+0xb0>)
 8003bce:	6892      	ldr	r2, [r2, #8]
 8003bd0:	e004      	b.n	8003bdc <SEGGER_SYSVIEW_Start+0x68>
 8003bd2:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8003bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bda:	09d2      	lsrs	r2, r2, #7
 8003bdc:	2a7f      	cmp	r2, #127	; 0x7f
 8003bde:	d8f8      	bhi.n	8003bd2 <SEGGER_SYSVIEW_Start+0x5e>
 8003be0:	f803 2b01 	strb.w	r2, [r3], #1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003be4:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <SEGGER_SYSVIEW_Start+0xb0>)
 8003be6:	6912      	ldr	r2, [r2, #16]
 8003be8:	e004      	b.n	8003bf4 <SEGGER_SYSVIEW_Start+0x80>
 8003bea:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8003bee:	f803 1b01 	strb.w	r1, [r3], #1
 8003bf2:	09d2      	lsrs	r2, r2, #7
 8003bf4:	2a7f      	cmp	r2, #127	; 0x7f
 8003bf6:	d8f8      	bhi.n	8003bea <SEGGER_SYSVIEW_Start+0x76>
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f801 2b02 	strb.w	r2, [r1], #2
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003bfe:	2202      	movs	r2, #2
 8003c00:	705a      	strb	r2, [r3, #1]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003c02:	2218      	movs	r2, #24
 8003c04:	f000 f85e 	bl	8003cc4 <_SendPacket>
      RECORD_END();
 8003c08:	f384 8811 	msr	BASEPRI, r4
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <SEGGER_SYSVIEW_Start+0xb0>)
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	b103      	cbz	r3, 8003c14 <SEGGER_SYSVIEW_Start+0xa0>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003c12:	4798      	blx	r3
    SEGGER_SYSVIEW_RecordSystime();
 8003c14:	f000 f928 	bl	8003e68 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003c18:	f7ff ff68 	bl	8003aec <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003c1c:	f7ff ff88 	bl	8003b30 <SEGGER_SYSVIEW_SendNumModules>
}
 8003c20:	e7ac      	b.n	8003b7c <SEGGER_SYSVIEW_Start+0x8>
 8003c22:	bf00      	nop
 8003c24:	20001ff0 	.word	0x20001ff0
 8003c28:	080057d8 	.word	0x080057d8
 8003c2c:	20002018 	.word	0x20002018

08003c30 <_HandleIncomingPacket>:
static void _HandleIncomingPacket(void) {
 8003c30:	b500      	push	{lr}
 8003c32:	b083      	sub	sp, #12
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c34:	2201      	movs	r2, #1
 8003c36:	f10d 0107 	add.w	r1, sp, #7
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f7ff fe4c 	bl	80038d8 <SEGGER_RTT_ReadNoLock>
  if (Status > 0) {
 8003c40:	2800      	cmp	r0, #0
 8003c42:	dd1f      	ble.n	8003c84 <_HandleIncomingPacket+0x54>
    switch (Cmd) {
 8003c44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c48:	2b07      	cmp	r3, #7
 8003c4a:	d80a      	bhi.n	8003c62 <_HandleIncomingPacket+0x32>
 8003c4c:	b25a      	sxtb	r2, r3
 8003c4e:	b372      	cbz	r2, 8003cae <_HandleIncomingPacket+0x7e>
 8003c50:	1e5a      	subs	r2, r3, #1
 8003c52:	2a06      	cmp	r2, #6
 8003c54:	d82b      	bhi.n	8003cae <_HandleIncomingPacket+0x7e>
 8003c56:	e8df f002 	tbb	[pc, r2]
 8003c5a:	1813      	.short	0x1813
 8003c5c:	24211e1b 	.word	0x24211e1b
 8003c60:	27          	.byte	0x27
 8003c61:	00          	.byte	0x00
 8003c62:	2b80      	cmp	r3, #128	; 0x80
 8003c64:	d123      	bne.n	8003cae <_HandleIncomingPacket+0x7e>
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c66:	2201      	movs	r2, #1
 8003c68:	f10d 0107 	add.w	r1, sp, #7
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7ff fe33 	bl	80038d8 <SEGGER_RTT_ReadNoLock>
      if (Status > 0) {
 8003c72:	2800      	cmp	r0, #0
 8003c74:	dd06      	ble.n	8003c84 <_HandleIncomingPacket+0x54>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003c76:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003c7a:	f000 facd 	bl	8004218 <SEGGER_SYSVIEW_SendModule>
 8003c7e:	e001      	b.n	8003c84 <_HandleIncomingPacket+0x54>
      SEGGER_SYSVIEW_Start();
 8003c80:	f7ff ff78 	bl	8003b74 <SEGGER_SYSVIEW_Start>
}
 8003c84:	b003      	add	sp, #12
 8003c86:	f85d fb04 	ldr.w	pc, [sp], #4
      SEGGER_SYSVIEW_Stop();
 8003c8a:	f000 f985 	bl	8003f98 <SEGGER_SYSVIEW_Stop>
      break;
 8003c8e:	e7f9      	b.n	8003c84 <_HandleIncomingPacket+0x54>
      SEGGER_SYSVIEW_RecordSystime();
 8003c90:	f000 f8ea 	bl	8003e68 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003c94:	e7f6      	b.n	8003c84 <_HandleIncomingPacket+0x54>
      SEGGER_SYSVIEW_SendTaskList();
 8003c96:	f7ff ff29 	bl	8003aec <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003c9a:	e7f3      	b.n	8003c84 <_HandleIncomingPacket+0x54>
      SEGGER_SYSVIEW_GetSysDesc();
 8003c9c:	f000 f998 	bl	8003fd0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003ca0:	e7f0      	b.n	8003c84 <_HandleIncomingPacket+0x54>
      SEGGER_SYSVIEW_SendNumModules();
 8003ca2:	f7ff ff45 	bl	8003b30 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003ca6:	e7ed      	b.n	8003c84 <_HandleIncomingPacket+0x54>
      SEGGER_SYSVIEW_SendModuleDescription();
 8003ca8:	f7ff ff32 	bl	8003b10 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003cac:	e7ea      	b.n	8003c84 <_HandleIncomingPacket+0x54>
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003cae:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003cb2:	d0e7      	beq.n	8003c84 <_HandleIncomingPacket+0x54>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f10d 0107 	add.w	r1, sp, #7
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f7ff fe0c 	bl	80038d8 <SEGGER_RTT_ReadNoLock>
}
 8003cc0:	e7e0      	b.n	8003c84 <_HandleIncomingPacket+0x54>
	...

08003cc4 <_SendPacket>:
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	460c      	mov	r4, r1
 8003cca:	4615      	mov	r5, r2
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003ccc:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <_SendPacket+0xdc>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d003      	beq.n	8003cdc <_SendPacket+0x18>
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d04b      	beq.n	8003d70 <_SendPacket+0xac>
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d012      	beq.n	8003d02 <_SendPacket+0x3e>
  if (EventId < 32) {
 8003cdc:	2d1f      	cmp	r5, #31
 8003cde:	d805      	bhi.n	8003cec <_SendPacket+0x28>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003ce0:	4b2f      	ldr	r3, [pc, #188]	; (8003da0 <_SendPacket+0xdc>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	40eb      	lsrs	r3, r5
 8003ce6:	f013 0f01 	tst.w	r3, #1
 8003cea:	d141      	bne.n	8003d70 <_SendPacket+0xac>
  if (EventId < 24) {
 8003cec:	2d17      	cmp	r5, #23
 8003cee:	d80f      	bhi.n	8003d10 <_SendPacket+0x4c>
    *--pStartPacket = EventId;
 8003cf0:	1e71      	subs	r1, r6, #1
 8003cf2:	f806 5c01 	strb.w	r5, [r6, #-1]
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003cf6:	4b2b      	ldr	r3, [pc, #172]	; (8003da4 <_SendPacket+0xe0>)
 8003cf8:	685d      	ldr	r5, [r3, #4]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003cfa:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <_SendPacket+0xdc>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	1aeb      	subs	r3, r5, r3
  ENCODE_U32(pEndPacket, Delta);
 8003d00:	e02b      	b.n	8003d5a <_SendPacket+0x96>
    _TrySendOverflowPacket();
 8003d02:	f7ff febb 	bl	8003a7c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003d06:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <_SendPacket+0xdc>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d130      	bne.n	8003d70 <_SendPacket+0xac>
Send:
 8003d0e:	e7e5      	b.n	8003cdc <_SendPacket+0x18>
    NumBytes = pEndPacket - pStartPacket;
 8003d10:	1ba3      	subs	r3, r4, r6
    if (NumBytes > 127) {
 8003d12:	2b7f      	cmp	r3, #127	; 0x7f
 8003d14:	d912      	bls.n	8003d3c <_SendPacket+0x78>
      *--pStartPacket = (NumBytes >> 7);
 8003d16:	09da      	lsrs	r2, r3, #7
 8003d18:	f806 2c01 	strb.w	r2, [r6, #-1]
      *--pStartPacket = NumBytes | 0x80;
 8003d1c:	1eb0      	subs	r0, r6, #2
 8003d1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d22:	f806 3c02 	strb.w	r3, [r6, #-2]
    if (EventId > 127) {
 8003d26:	2d7f      	cmp	r5, #127	; 0x7f
 8003d28:	d90c      	bls.n	8003d44 <_SendPacket+0x80>
      *--pStartPacket = (EventId >> 7);
 8003d2a:	09eb      	lsrs	r3, r5, #7
 8003d2c:	f800 3c01 	strb.w	r3, [r0, #-1]
      *--pStartPacket = EventId | 0x80;
 8003d30:	1e81      	subs	r1, r0, #2
 8003d32:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8003d36:	f800 5c02 	strb.w	r5, [r0, #-2]
 8003d3a:	e7dc      	b.n	8003cf6 <_SendPacket+0x32>
      *--pStartPacket = NumBytes;
 8003d3c:	1e70      	subs	r0, r6, #1
 8003d3e:	f806 3c01 	strb.w	r3, [r6, #-1]
 8003d42:	e7f0      	b.n	8003d26 <_SendPacket+0x62>
      *--pStartPacket = EventId;
 8003d44:	1e41      	subs	r1, r0, #1
 8003d46:	f800 5c01 	strb.w	r5, [r0, #-1]
 8003d4a:	e7d4      	b.n	8003cf6 <_SendPacket+0x32>
  ENCODE_U32(pEndPacket, Delta);
 8003d4c:	4622      	mov	r2, r4
 8003d4e:	f063 007f 	orn	r0, r3, #127	; 0x7f
 8003d52:	f802 0b01 	strb.w	r0, [r2], #1
 8003d56:	09db      	lsrs	r3, r3, #7
 8003d58:	4614      	mov	r4, r2
 8003d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d5c:	d8f6      	bhi.n	8003d4c <_SendPacket+0x88>
 8003d5e:	f804 3b01 	strb.w	r3, [r4], #1
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003d62:	1a62      	subs	r2, r4, r1
 8003d64:	2001      	movs	r0, #1
 8003d66:	f7fc f9f3 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
  if (Status) {
 8003d6a:	b160      	cbz	r0, 8003d86 <_SendPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <_SendPacket+0xdc>)
 8003d6e:	60dd      	str	r5, [r3, #12]
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <_SendPacket+0xe4>)
 8003d72:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d002      	beq.n	8003d84 <_SendPacket+0xc0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <_SendPacket+0xdc>)
 8003d80:	789b      	ldrb	r3, [r3, #2]
 8003d82:	b12b      	cbz	r3, 8003d90 <_SendPacket+0xcc>
}
 8003d84:	bd70      	pop	{r4, r5, r6, pc}
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003d86:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <_SendPacket+0xdc>)
 8003d88:	7813      	ldrb	r3, [r2, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	7013      	strb	r3, [r2, #0]
 8003d8e:	e7ef      	b.n	8003d70 <_SendPacket+0xac>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003d90:	4c03      	ldr	r4, [pc, #12]	; (8003da0 <_SendPacket+0xdc>)
 8003d92:	2301      	movs	r3, #1
 8003d94:	70a3      	strb	r3, [r4, #2]
      _HandleIncomingPacket();
 8003d96:	f7ff ff4b 	bl	8003c30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	70a3      	strb	r3, [r4, #2]
}
 8003d9e:	e7f1      	b.n	8003d84 <_SendPacket+0xc0>
 8003da0:	20001ff0 	.word	0x20001ff0
 8003da4:	e0001000 	.word	0xe0001000
 8003da8:	20001b34 	.word	0x20001b34

08003dac <SEGGER_SYSVIEW_RecordVoid>:
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003dac:	b538      	push	{r3, r4, r5, lr}
 8003dae:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003db0:	f3ef 8511 	mrs	r5, BASEPRI
 8003db4:	f04f 0120 	mov.w	r1, #32
 8003db8:	f381 8811 	msr	BASEPRI, r1
 8003dbc:	4804      	ldr	r0, [pc, #16]	; (8003dd0 <SEGGER_SYSVIEW_RecordVoid+0x24>)
 8003dbe:	f7ff fe5a 	bl	8003a76 <_PreparePacket>
 8003dc2:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003dc4:	4622      	mov	r2, r4
 8003dc6:	f7ff ff7d 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 8003dca:	f385 8811 	msr	BASEPRI, r5
}
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	20002018 	.word	0x20002018

08003dd4 <SEGGER_SYSVIEW_RecordU32>:
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	460c      	mov	r4, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003dda:	f3ef 8611 	mrs	r6, BASEPRI
 8003dde:	f04f 0120 	mov.w	r1, #32
 8003de2:	f381 8811 	msr	BASEPRI, r1
 8003de6:	480a      	ldr	r0, [pc, #40]	; (8003e10 <SEGGER_SYSVIEW_RecordU32+0x3c>)
 8003de8:	f7ff fe45 	bl	8003a76 <_PreparePacket>
  ENCODE_U32(pPayload, Value);
 8003dec:	4601      	mov	r1, r0
 8003dee:	e004      	b.n	8003dfa <SEGGER_SYSVIEW_RecordU32+0x26>
 8003df0:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8003df4:	f801 3b01 	strb.w	r3, [r1], #1
 8003df8:	09e4      	lsrs	r4, r4, #7
 8003dfa:	2c7f      	cmp	r4, #127	; 0x7f
 8003dfc:	d8f8      	bhi.n	8003df0 <SEGGER_SYSVIEW_RecordU32+0x1c>
 8003dfe:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003e02:	462a      	mov	r2, r5
 8003e04:	f7ff ff5e 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 8003e08:	f386 8811 	msr	BASEPRI, r6
}
 8003e0c:	bd70      	pop	{r4, r5, r6, pc}
 8003e0e:	bf00      	nop
 8003e10:	20002018 	.word	0x20002018

08003e14 <SEGGER_SYSVIEW_RecordU32x2>:
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	4605      	mov	r5, r0
 8003e18:	460f      	mov	r7, r1
 8003e1a:	4614      	mov	r4, r2
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e1c:	f3ef 8611 	mrs	r6, BASEPRI
 8003e20:	f04f 0120 	mov.w	r1, #32
 8003e24:	f381 8811 	msr	BASEPRI, r1
 8003e28:	480e      	ldr	r0, [pc, #56]	; (8003e64 <SEGGER_SYSVIEW_RecordU32x2+0x50>)
 8003e2a:	f7ff fe24 	bl	8003a76 <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8003e2e:	4601      	mov	r1, r0
 8003e30:	e004      	b.n	8003e3c <SEGGER_SYSVIEW_RecordU32x2+0x28>
 8003e32:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8003e36:	f801 3b01 	strb.w	r3, [r1], #1
 8003e3a:	09ff      	lsrs	r7, r7, #7
 8003e3c:	2f7f      	cmp	r7, #127	; 0x7f
 8003e3e:	d8f8      	bhi.n	8003e32 <SEGGER_SYSVIEW_RecordU32x2+0x1e>
 8003e40:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8003e44:	e004      	b.n	8003e50 <SEGGER_SYSVIEW_RecordU32x2+0x3c>
 8003e46:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8003e4a:	f801 3b01 	strb.w	r3, [r1], #1
 8003e4e:	09e4      	lsrs	r4, r4, #7
 8003e50:	2c7f      	cmp	r4, #127	; 0x7f
 8003e52:	d8f8      	bhi.n	8003e46 <SEGGER_SYSVIEW_RecordU32x2+0x32>
 8003e54:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003e58:	462a      	mov	r2, r5
 8003e5a:	f7ff ff33 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 8003e5e:	f386 8811 	msr	BASEPRI, r6
}
 8003e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e64:	20002018 	.word	0x20002018

08003e68 <SEGGER_SYSVIEW_RecordSystime>:
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003e68:	b508      	push	{r3, lr}
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <SEGGER_SYSVIEW_RecordSystime+0x28>)
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	b143      	cbz	r3, 8003e82 <SEGGER_SYSVIEW_RecordSystime+0x1a>
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	b133      	cbz	r3, 8003e82 <SEGGER_SYSVIEW_RecordSystime+0x1a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003e74:	4798      	blx	r3
 8003e76:	460a      	mov	r2, r1
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003e78:	4601      	mov	r1, r0
 8003e7a:	200d      	movs	r0, #13
 8003e7c:	f7ff ffca 	bl	8003e14 <SEGGER_SYSVIEW_RecordU32x2>
}
 8003e80:	bd08      	pop	{r3, pc}
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003e82:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <SEGGER_SYSVIEW_RecordSystime+0x2c>)
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	200c      	movs	r0, #12
 8003e88:	f7ff ffa4 	bl	8003dd4 <SEGGER_SYSVIEW_RecordU32>
}
 8003e8c:	e7f8      	b.n	8003e80 <SEGGER_SYSVIEW_RecordSystime+0x18>
 8003e8e:	bf00      	nop
 8003e90:	20001ff0 	.word	0x20001ff0
 8003e94:	e0001000 	.word	0xe0001000

08003e98 <SEGGER_SYSVIEW_RecordU32x3>:
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e9c:	4605      	mov	r5, r0
 8003e9e:	4688      	mov	r8, r1
 8003ea0:	4617      	mov	r7, r2
 8003ea2:	461c      	mov	r4, r3
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003ea4:	f3ef 8611 	mrs	r6, BASEPRI
 8003ea8:	f04f 0120 	mov.w	r1, #32
 8003eac:	f381 8811 	msr	BASEPRI, r1
 8003eb0:	4815      	ldr	r0, [pc, #84]	; (8003f08 <SEGGER_SYSVIEW_RecordU32x3+0x70>)
 8003eb2:	f7ff fde0 	bl	8003a76 <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8003eb6:	4601      	mov	r1, r0
 8003eb8:	e005      	b.n	8003ec6 <SEGGER_SYSVIEW_RecordU32x3+0x2e>
 8003eba:	f068 037f 	orn	r3, r8, #127	; 0x7f
 8003ebe:	f801 3b01 	strb.w	r3, [r1], #1
 8003ec2:	ea4f 18d8 	mov.w	r8, r8, lsr #7
 8003ec6:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8003eca:	d8f6      	bhi.n	8003eba <SEGGER_SYSVIEW_RecordU32x3+0x22>
 8003ecc:	f801 8b01 	strb.w	r8, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8003ed0:	e004      	b.n	8003edc <SEGGER_SYSVIEW_RecordU32x3+0x44>
 8003ed2:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8003ed6:	f801 3b01 	strb.w	r3, [r1], #1
 8003eda:	09ff      	lsrs	r7, r7, #7
 8003edc:	2f7f      	cmp	r7, #127	; 0x7f
 8003ede:	d8f8      	bhi.n	8003ed2 <SEGGER_SYSVIEW_RecordU32x3+0x3a>
 8003ee0:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para2);
 8003ee4:	e004      	b.n	8003ef0 <SEGGER_SYSVIEW_RecordU32x3+0x58>
 8003ee6:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8003eea:	f801 3b01 	strb.w	r3, [r1], #1
 8003eee:	09e4      	lsrs	r4, r4, #7
 8003ef0:	2c7f      	cmp	r4, #127	; 0x7f
 8003ef2:	d8f8      	bhi.n	8003ee6 <SEGGER_SYSVIEW_RecordU32x3+0x4e>
 8003ef4:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003ef8:	462a      	mov	r2, r5
 8003efa:	f7ff fee3 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 8003efe:	f386 8811 	msr	BASEPRI, r6
}
 8003f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f06:	bf00      	nop
 8003f08:	20002018 	.word	0x20002018

08003f0c <SEGGER_SYSVIEW_RecordU32x4>:
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f10:	4605      	mov	r5, r0
 8003f12:	4689      	mov	r9, r1
 8003f14:	4690      	mov	r8, r2
 8003f16:	461f      	mov	r7, r3
 8003f18:	9c08      	ldr	r4, [sp, #32]
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003f1a:	f3ef 8611 	mrs	r6, BASEPRI
 8003f1e:	f04f 0120 	mov.w	r1, #32
 8003f22:	f381 8811 	msr	BASEPRI, r1
 8003f26:	481b      	ldr	r0, [pc, #108]	; (8003f94 <SEGGER_SYSVIEW_RecordU32x4+0x88>)
 8003f28:	f7ff fda5 	bl	8003a76 <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8003f2c:	4601      	mov	r1, r0
 8003f2e:	e005      	b.n	8003f3c <SEGGER_SYSVIEW_RecordU32x4+0x30>
 8003f30:	f069 037f 	orn	r3, r9, #127	; 0x7f
 8003f34:	f801 3b01 	strb.w	r3, [r1], #1
 8003f38:	ea4f 19d9 	mov.w	r9, r9, lsr #7
 8003f3c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
 8003f40:	d8f6      	bhi.n	8003f30 <SEGGER_SYSVIEW_RecordU32x4+0x24>
 8003f42:	f801 9b01 	strb.w	r9, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8003f46:	e005      	b.n	8003f54 <SEGGER_SYSVIEW_RecordU32x4+0x48>
 8003f48:	f068 037f 	orn	r3, r8, #127	; 0x7f
 8003f4c:	f801 3b01 	strb.w	r3, [r1], #1
 8003f50:	ea4f 18d8 	mov.w	r8, r8, lsr #7
 8003f54:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8003f58:	d8f6      	bhi.n	8003f48 <SEGGER_SYSVIEW_RecordU32x4+0x3c>
 8003f5a:	f801 8b01 	strb.w	r8, [r1], #1
  ENCODE_U32(pPayload, Para2);
 8003f5e:	e004      	b.n	8003f6a <SEGGER_SYSVIEW_RecordU32x4+0x5e>
 8003f60:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8003f64:	f801 3b01 	strb.w	r3, [r1], #1
 8003f68:	09ff      	lsrs	r7, r7, #7
 8003f6a:	2f7f      	cmp	r7, #127	; 0x7f
 8003f6c:	d8f8      	bhi.n	8003f60 <SEGGER_SYSVIEW_RecordU32x4+0x54>
 8003f6e:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para3);
 8003f72:	e004      	b.n	8003f7e <SEGGER_SYSVIEW_RecordU32x4+0x72>
 8003f74:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8003f78:	f801 3b01 	strb.w	r3, [r1], #1
 8003f7c:	09e4      	lsrs	r4, r4, #7
 8003f7e:	2c7f      	cmp	r4, #127	; 0x7f
 8003f80:	d8f8      	bhi.n	8003f74 <SEGGER_SYSVIEW_RecordU32x4+0x68>
 8003f82:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003f86:	462a      	mov	r2, r5
 8003f88:	f7ff fe9c 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 8003f8c:	f386 8811 	msr	BASEPRI, r6
}
 8003f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f94:	20002018 	.word	0x20002018

08003f98 <SEGGER_SYSVIEW_Stop>:
void SEGGER_SYSVIEW_Stop(void) {
 8003f98:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f9a:	f3ef 8411 	mrs	r4, BASEPRI
 8003f9e:	f04f 0120 	mov.w	r1, #32
 8003fa2:	f381 8811 	msr	BASEPRI, r1
 8003fa6:	4808      	ldr	r0, [pc, #32]	; (8003fc8 <SEGGER_SYSVIEW_Stop+0x30>)
 8003fa8:	f7ff fd65 	bl	8003a76 <_PreparePacket>
  if (_SYSVIEW_Globals.EnableState) {
 8003fac:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <SEGGER_SYSVIEW_Stop+0x34>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b913      	cbnz	r3, 8003fb8 <SEGGER_SYSVIEW_Stop+0x20>
  RECORD_END();
 8003fb2:	f384 8811 	msr	BASEPRI, r4
}
 8003fb6:	bd10      	pop	{r4, pc}
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003fb8:	220b      	movs	r2, #11
 8003fba:	4601      	mov	r1, r0
 8003fbc:	f7ff fe82 	bl	8003cc4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003fc0:	4b02      	ldr	r3, [pc, #8]	; (8003fcc <SEGGER_SYSVIEW_Stop+0x34>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e7f4      	b.n	8003fb2 <SEGGER_SYSVIEW_Stop+0x1a>
 8003fc8:	20002018 	.word	0x20002018
 8003fcc:	20001ff0 	.word	0x20001ff0

08003fd0 <SEGGER_SYSVIEW_GetSysDesc>:
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003fd0:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003fd2:	f3ef 8411 	mrs	r4, BASEPRI
 8003fd6:	f04f 0120 	mov.w	r1, #32
 8003fda:	f381 8811 	msr	BASEPRI, r1
 8003fde:	481a      	ldr	r0, [pc, #104]	; (8004048 <SEGGER_SYSVIEW_GetSysDesc+0x78>)
 8003fe0:	f7ff fd49 	bl	8003a76 <_PreparePacket>
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	4603      	mov	r3, r0
 8003fea:	e004      	b.n	8003ff6 <SEGGER_SYSVIEW_GetSysDesc+0x26>
 8003fec:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8003ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ff4:	09d2      	lsrs	r2, r2, #7
 8003ff6:	2a7f      	cmp	r2, #127	; 0x7f
 8003ff8:	d8f8      	bhi.n	8003fec <SEGGER_SYSVIEW_GetSysDesc+0x1c>
 8003ffa:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003ffe:	4a13      	ldr	r2, [pc, #76]	; (800404c <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 8004000:	6892      	ldr	r2, [r2, #8]
 8004002:	e004      	b.n	800400e <SEGGER_SYSVIEW_GetSysDesc+0x3e>
 8004004:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8004008:	f803 1b01 	strb.w	r1, [r3], #1
 800400c:	09d2      	lsrs	r2, r2, #7
 800400e:	2a7f      	cmp	r2, #127	; 0x7f
 8004010:	d8f8      	bhi.n	8004004 <SEGGER_SYSVIEW_GetSysDesc+0x34>
 8004012:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004016:	4a0d      	ldr	r2, [pc, #52]	; (800404c <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 8004018:	6912      	ldr	r2, [r2, #16]
 800401a:	e004      	b.n	8004026 <SEGGER_SYSVIEW_GetSysDesc+0x56>
 800401c:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8004020:	f803 1b01 	strb.w	r1, [r3], #1
 8004024:	09d2      	lsrs	r2, r2, #7
 8004026:	2a7f      	cmp	r2, #127	; 0x7f
 8004028:	d8f8      	bhi.n	800401c <SEGGER_SYSVIEW_GetSysDesc+0x4c>
 800402a:	4619      	mov	r1, r3
 800402c:	f801 2b02 	strb.w	r2, [r1], #2
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004030:	2202      	movs	r2, #2
 8004032:	705a      	strb	r2, [r3, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004034:	2218      	movs	r2, #24
 8004036:	f7ff fe45 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 800403a:	f384 8811 	msr	BASEPRI, r4
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800403e:	4b03      	ldr	r3, [pc, #12]	; (800404c <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	b103      	cbz	r3, 8004046 <SEGGER_SYSVIEW_GetSysDesc+0x76>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004044:	4798      	blx	r3
}
 8004046:	bd10      	pop	{r4, pc}
 8004048:	20002018 	.word	0x20002018
 800404c:	20001ff0 	.word	0x20001ff0

08004050 <SEGGER_SYSVIEW_SendTaskInfo>:
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	4606      	mov	r6, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004054:	f3ef 8511 	mrs	r5, BASEPRI
 8004058:	f04f 0120 	mov.w	r1, #32
 800405c:	f381 8811 	msr	BASEPRI, r1
 8004060:	482b      	ldr	r0, [pc, #172]	; (8004110 <SEGGER_SYSVIEW_SendTaskInfo+0xc0>)
 8004062:	f7ff fd08 	bl	8003a76 <_PreparePacket>
 8004066:	4604      	mov	r4, r0
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004068:	6833      	ldr	r3, [r6, #0]
 800406a:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <SEGGER_SYSVIEW_SendTaskInfo+0xc4>)
 800406c:	6912      	ldr	r2, [r2, #16]
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	089b      	lsrs	r3, r3, #2
 8004072:	e004      	b.n	800407e <SEGGER_SYSVIEW_SendTaskInfo+0x2e>
 8004074:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8004078:	f800 2b01 	strb.w	r2, [r0], #1
 800407c:	09db      	lsrs	r3, r3, #7
 800407e:	2b7f      	cmp	r3, #127	; 0x7f
 8004080:	d8f8      	bhi.n	8004074 <SEGGER_SYSVIEW_SendTaskInfo+0x24>
 8004082:	f800 3b01 	strb.w	r3, [r0], #1
  ENCODE_U32(pPayload, pInfo->Prio);
 8004086:	68b3      	ldr	r3, [r6, #8]
 8004088:	e004      	b.n	8004094 <SEGGER_SYSVIEW_SendTaskInfo+0x44>
 800408a:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800408e:	f800 2b01 	strb.w	r2, [r0], #1
 8004092:	09db      	lsrs	r3, r3, #7
 8004094:	2b7f      	cmp	r3, #127	; 0x7f
 8004096:	d8f8      	bhi.n	800408a <SEGGER_SYSVIEW_SendTaskInfo+0x3a>
 8004098:	f800 3b01 	strb.w	r3, [r0], #1
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800409c:	2220      	movs	r2, #32
 800409e:	6871      	ldr	r1, [r6, #4]
 80040a0:	f7ff fcc3 	bl	8003a2a <_EncodeStr>
 80040a4:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80040a6:	2209      	movs	r2, #9
 80040a8:	4620      	mov	r0, r4
 80040aa:	f7ff fe0b 	bl	8003cc4 <_SendPacket>
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80040ae:	6832      	ldr	r2, [r6, #0]
 80040b0:	4b18      	ldr	r3, [pc, #96]	; (8004114 <SEGGER_SYSVIEW_SendTaskInfo+0xc4>)
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	1ad2      	subs	r2, r2, r3
 80040b6:	0892      	lsrs	r2, r2, #2
 80040b8:	4623      	mov	r3, r4
 80040ba:	e004      	b.n	80040c6 <SEGGER_SYSVIEW_SendTaskInfo+0x76>
 80040bc:	f062 017f 	orn	r1, r2, #127	; 0x7f
 80040c0:	f803 1b01 	strb.w	r1, [r3], #1
 80040c4:	09d2      	lsrs	r2, r2, #7
 80040c6:	2a7f      	cmp	r2, #127	; 0x7f
 80040c8:	d8f8      	bhi.n	80040bc <SEGGER_SYSVIEW_SendTaskInfo+0x6c>
 80040ca:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, pInfo->StackBase);
 80040ce:	68f2      	ldr	r2, [r6, #12]
 80040d0:	e004      	b.n	80040dc <SEGGER_SYSVIEW_SendTaskInfo+0x8c>
 80040d2:	f062 017f 	orn	r1, r2, #127	; 0x7f
 80040d6:	f803 1b01 	strb.w	r1, [r3], #1
 80040da:	09d2      	lsrs	r2, r2, #7
 80040dc:	2a7f      	cmp	r2, #127	; 0x7f
 80040de:	d8f8      	bhi.n	80040d2 <SEGGER_SYSVIEW_SendTaskInfo+0x82>
 80040e0:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, pInfo->StackSize);
 80040e4:	6932      	ldr	r2, [r6, #16]
 80040e6:	e004      	b.n	80040f2 <SEGGER_SYSVIEW_SendTaskInfo+0xa2>
 80040e8:	f062 017f 	orn	r1, r2, #127	; 0x7f
 80040ec:	f803 1b01 	strb.w	r1, [r3], #1
 80040f0:	09d2      	lsrs	r2, r2, #7
 80040f2:	2a7f      	cmp	r2, #127	; 0x7f
 80040f4:	d8f8      	bhi.n	80040e8 <SEGGER_SYSVIEW_SendTaskInfo+0x98>
 80040f6:	4619      	mov	r1, r3
 80040f8:	f801 2b02 	strb.w	r2, [r1], #2
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80040fc:	2200      	movs	r2, #0
 80040fe:	705a      	strb	r2, [r3, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004100:	2215      	movs	r2, #21
 8004102:	4620      	mov	r0, r4
 8004104:	f7ff fdde 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 8004108:	f385 8811 	msr	BASEPRI, r5
}
 800410c:	bd70      	pop	{r4, r5, r6, pc}
 800410e:	bf00      	nop
 8004110:	20002018 	.word	0x20002018
 8004114:	20001ff0 	.word	0x20001ff0

08004118 <SEGGER_SYSVIEW_OnIdle>:
void SEGGER_SYSVIEW_OnIdle(void) {
 8004118:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800411a:	f3ef 8411 	mrs	r4, BASEPRI
 800411e:	f04f 0120 	mov.w	r1, #32
 8004122:	f381 8811 	msr	BASEPRI, r1
 8004126:	4805      	ldr	r0, [pc, #20]	; (800413c <SEGGER_SYSVIEW_OnIdle+0x24>)
 8004128:	f7ff fca5 	bl	8003a76 <_PreparePacket>
 800412c:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800412e:	2211      	movs	r2, #17
 8004130:	f7ff fdc8 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 8004134:	f384 8811 	msr	BASEPRI, r4
}
 8004138:	bd10      	pop	{r4, pc}
 800413a:	bf00      	nop
 800413c:	20002018 	.word	0x20002018

08004140 <SEGGER_SYSVIEW_OnTaskCreate>:
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004144:	f3ef 8511 	mrs	r5, BASEPRI
 8004148:	f04f 0120 	mov.w	r1, #32
 800414c:	f381 8811 	msr	BASEPRI, r1
 8004150:	480b      	ldr	r0, [pc, #44]	; (8004180 <SEGGER_SYSVIEW_OnTaskCreate+0x40>)
 8004152:	f7ff fc90 	bl	8003a76 <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <SEGGER_SYSVIEW_OnTaskCreate+0x44>)
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	1ae3      	subs	r3, r4, r3
 800415c:	089b      	lsrs	r3, r3, #2
  ENCODE_U32(pPayload, TaskId);
 800415e:	4601      	mov	r1, r0
 8004160:	e004      	b.n	800416c <SEGGER_SYSVIEW_OnTaskCreate+0x2c>
 8004162:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8004166:	f801 2b01 	strb.w	r2, [r1], #1
 800416a:	09db      	lsrs	r3, r3, #7
 800416c:	2b7f      	cmp	r3, #127	; 0x7f
 800416e:	d8f8      	bhi.n	8004162 <SEGGER_SYSVIEW_OnTaskCreate+0x22>
 8004170:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004174:	2208      	movs	r2, #8
 8004176:	f7ff fda5 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 800417a:	f385 8811 	msr	BASEPRI, r5
}
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	20002018 	.word	0x20002018
 8004184:	20001ff0 	.word	0x20001ff0

08004188 <SEGGER_SYSVIEW_OnTaskStartExec>:
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800418c:	f3ef 8511 	mrs	r5, BASEPRI
 8004190:	f04f 0120 	mov.w	r1, #32
 8004194:	f381 8811 	msr	BASEPRI, r1
 8004198:	480b      	ldr	r0, [pc, #44]	; (80041c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x40>)
 800419a:	f7ff fc6c 	bl	8003a76 <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <SEGGER_SYSVIEW_OnTaskStartExec+0x44>)
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	1ae3      	subs	r3, r4, r3
 80041a4:	089b      	lsrs	r3, r3, #2
  ENCODE_U32(pPayload, TaskId);
 80041a6:	4601      	mov	r1, r0
 80041a8:	e004      	b.n	80041b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x2c>
 80041aa:	f063 027f 	orn	r2, r3, #127	; 0x7f
 80041ae:	f801 2b01 	strb.w	r2, [r1], #1
 80041b2:	09db      	lsrs	r3, r3, #7
 80041b4:	2b7f      	cmp	r3, #127	; 0x7f
 80041b6:	d8f8      	bhi.n	80041aa <SEGGER_SYSVIEW_OnTaskStartExec+0x22>
 80041b8:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80041bc:	2204      	movs	r2, #4
 80041be:	f7ff fd81 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 80041c2:	f385 8811 	msr	BASEPRI, r5
}
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	20002018 	.word	0x20002018
 80041cc:	20001ff0 	.word	0x20001ff0

080041d0 <SEGGER_SYSVIEW_OnTaskStartReady>:
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041d4:	f3ef 8511 	mrs	r5, BASEPRI
 80041d8:	f04f 0120 	mov.w	r1, #32
 80041dc:	f381 8811 	msr	BASEPRI, r1
 80041e0:	480b      	ldr	r0, [pc, #44]	; (8004210 <SEGGER_SYSVIEW_OnTaskStartReady+0x40>)
 80041e2:	f7ff fc48 	bl	8003a76 <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <SEGGER_SYSVIEW_OnTaskStartReady+0x44>)
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	1ae3      	subs	r3, r4, r3
 80041ec:	089b      	lsrs	r3, r3, #2
  ENCODE_U32(pPayload, TaskId);
 80041ee:	4601      	mov	r1, r0
 80041f0:	e004      	b.n	80041fc <SEGGER_SYSVIEW_OnTaskStartReady+0x2c>
 80041f2:	f063 027f 	orn	r2, r3, #127	; 0x7f
 80041f6:	f801 2b01 	strb.w	r2, [r1], #1
 80041fa:	09db      	lsrs	r3, r3, #7
 80041fc:	2b7f      	cmp	r3, #127	; 0x7f
 80041fe:	d8f8      	bhi.n	80041f2 <SEGGER_SYSVIEW_OnTaskStartReady+0x22>
 8004200:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004204:	2206      	movs	r2, #6
 8004206:	f7ff fd5d 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 800420a:	f385 8811 	msr	BASEPRI, r5
}
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	20002018 	.word	0x20002018
 8004214:	20001ff0 	.word	0x20001ff0

08004218 <SEGGER_SYSVIEW_SendModule>:
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_pFirstModule != 0) {
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <SEGGER_SYSVIEW_SendModule+0x70>)
 800421c:	681c      	ldr	r4, [r3, #0]
 800421e:	b394      	cbz	r4, 8004286 <SEGGER_SYSVIEW_SendModule+0x6e>
    for (n = 0; n < ModuleId; n++) {
 8004220:	2300      	movs	r3, #0
 8004222:	4607      	mov	r7, r0
 8004224:	4298      	cmp	r0, r3
 8004226:	d903      	bls.n	8004230 <SEGGER_SYSVIEW_SendModule+0x18>
      pModule = pModule->pNext;
 8004228:	6924      	ldr	r4, [r4, #16]
      if (pModule == 0) {
 800422a:	b10c      	cbz	r4, 8004230 <SEGGER_SYSVIEW_SendModule+0x18>
    for (n = 0; n < ModuleId; n++) {
 800422c:	3301      	adds	r3, #1
 800422e:	e7f8      	b.n	8004222 <SEGGER_SYSVIEW_SendModule+0xa>
    if (pModule != 0) {
 8004230:	b34c      	cbz	r4, 8004286 <SEGGER_SYSVIEW_SendModule+0x6e>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004232:	f3ef 8611 	mrs	r6, BASEPRI
 8004236:	f04f 0120 	mov.w	r1, #32
 800423a:	f381 8811 	msr	BASEPRI, r1
 800423e:	4813      	ldr	r0, [pc, #76]	; (800428c <SEGGER_SYSVIEW_SendModule+0x74>)
 8004240:	f7ff fc19 	bl	8003a76 <_PreparePacket>
 8004244:	4605      	mov	r5, r0
      ENCODE_U32(pPayload, ModuleId);
 8004246:	e004      	b.n	8004252 <SEGGER_SYSVIEW_SendModule+0x3a>
 8004248:	f067 037f 	orn	r3, r7, #127	; 0x7f
 800424c:	f800 3b01 	strb.w	r3, [r0], #1
 8004250:	09ff      	lsrs	r7, r7, #7
 8004252:	2f7f      	cmp	r7, #127	; 0x7f
 8004254:	d8f8      	bhi.n	8004248 <SEGGER_SYSVIEW_SendModule+0x30>
 8004256:	f800 7b01 	strb.w	r7, [r0], #1
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800425a:	68a3      	ldr	r3, [r4, #8]
 800425c:	e004      	b.n	8004268 <SEGGER_SYSVIEW_SendModule+0x50>
 800425e:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8004262:	f800 2b01 	strb.w	r2, [r0], #1
 8004266:	09db      	lsrs	r3, r3, #7
 8004268:	2b7f      	cmp	r3, #127	; 0x7f
 800426a:	d8f8      	bhi.n	800425e <SEGGER_SYSVIEW_SendModule+0x46>
 800426c:	f800 3b01 	strb.w	r3, [r0], #1
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	6821      	ldr	r1, [r4, #0]
 8004274:	f7ff fbd9 	bl	8003a2a <_EncodeStr>
 8004278:	4601      	mov	r1, r0
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800427a:	2216      	movs	r2, #22
 800427c:	4628      	mov	r0, r5
 800427e:	f7ff fd21 	bl	8003cc4 <_SendPacket>
      RECORD_END();
 8004282:	f386 8811 	msr	BASEPRI, r6
}
 8004286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004288:	200020fc 	.word	0x200020fc
 800428c:	20002018 	.word	0x20002018

08004290 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004290:	b570      	push	{r4, r5, r6, lr}
 8004292:	4605      	mov	r5, r0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004294:	f3ef 8611 	mrs	r6, BASEPRI
 8004298:	f04f 0120 	mov.w	r1, #32
 800429c:	f381 8811 	msr	BASEPRI, r1
 80042a0:	480a      	ldr	r0, [pc, #40]	; (80042cc <SEGGER_SYSVIEW_Warn+0x3c>)
 80042a2:	f7ff fbe8 	bl	8003a76 <_PreparePacket>
 80042a6:	4604      	mov	r4, r0
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042a8:	2280      	movs	r2, #128	; 0x80
 80042aa:	4629      	mov	r1, r5
 80042ac:	f7ff fbbd 	bl	8003a2a <_EncodeStr>
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80042b0:	4601      	mov	r1, r0
 80042b2:	2301      	movs	r3, #1
 80042b4:	f801 3b02 	strb.w	r3, [r1], #2
  ENCODE_U32(pPayload, 0);
 80042b8:	2300      	movs	r3, #0
 80042ba:	7043      	strb	r3, [r0, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80042bc:	221a      	movs	r2, #26
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff fd00 	bl	8003cc4 <_SendPacket>
  RECORD_END();
 80042c4:	f386 8811 	msr	BASEPRI, r6
}
 80042c8:	bd70      	pop	{r4, r5, r6, pc}
 80042ca:	bf00      	nop
 80042cc:	20002018 	.word	0x20002018

080042d0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80042d0:	b510      	push	{r4, lr}
 80042d2:	b086      	sub	sp, #24
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80042d4:	2400      	movs	r4, #0
 80042d6:	9401      	str	r4, [sp, #4]
 80042d8:	9402      	str	r4, [sp, #8]
 80042da:	9403      	str	r4, [sp, #12]
 80042dc:	9404      	str	r4, [sp, #16]
 80042de:	9405      	str	r4, [sp, #20]
  TaskInfo.TaskID     = TaskID;
 80042e0:	9001      	str	r0, [sp, #4]
  TaskInfo.sName      = sName;
 80042e2:	9102      	str	r1, [sp, #8]
  TaskInfo.Prio       = Prio;
 80042e4:	9203      	str	r2, [sp, #12]
  TaskInfo.StackBase  = StackBase;
 80042e6:	9304      	str	r3, [sp, #16]
  TaskInfo.StackSize  = StackSize;
 80042e8:	9b08      	ldr	r3, [sp, #32]
 80042ea:	9305      	str	r3, [sp, #20]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80042ec:	a801      	add	r0, sp, #4
 80042ee:	f7ff feaf 	bl	8004050 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80042f2:	b006      	add	sp, #24
 80042f4:	bd10      	pop	{r4, pc}
	...

080042f8 <SYSVIEW_AddTask>:
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80042f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042fa:	b083      	sub	sp, #12
 80042fc:	4605      	mov	r5, r0
 80042fe:	460c      	mov	r4, r1
 8004300:	4616      	mov	r6, r2
 8004302:	461f      	mov	r7, r3
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004304:	2205      	movs	r2, #5
 8004306:	4913      	ldr	r1, [pc, #76]	; (8004354 <SYSVIEW_AddTask+0x5c>)
 8004308:	4620      	mov	r0, r4
 800430a:	f000 f94e 	bl	80045aa <memcmp>
 800430e:	b1d0      	cbz	r0, 8004346 <SYSVIEW_AddTask+0x4e>
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <SYSVIEW_AddTask+0x60>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2a07      	cmp	r2, #7
 8004316:	d818      	bhi.n	800434a <SYSVIEW_AddTask+0x52>
  _aTasks[_NumTasks].xHandle = xHandle;
 8004318:	4b10      	ldr	r3, [pc, #64]	; (800435c <SYSVIEW_AddTask+0x64>)
 800431a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800431e:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8004322:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004326:	604c      	str	r4, [r1, #4]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004328:	608e      	str	r6, [r1, #8]
  _aTasks[_NumTasks].pxStack = pxStack;
 800432a:	60cf      	str	r7, [r1, #12]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800432c:	9b08      	ldr	r3, [sp, #32]
 800432e:	610b      	str	r3, [r1, #16]
  _NumTasks++;
 8004330:	3201      	adds	r2, #1
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <SYSVIEW_AddTask+0x60>)
 8004334:	601a      	str	r2, [r3, #0]
  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004336:	9b08      	ldr	r3, [sp, #32]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	463b      	mov	r3, r7
 800433c:	4632      	mov	r2, r6
 800433e:	4621      	mov	r1, r4
 8004340:	4628      	mov	r0, r5
 8004342:	f7ff ffc5 	bl	80042d0 <SYSVIEW_SendTaskInfo>
}
 8004346:	b003      	add	sp, #12
 8004348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800434a:	4805      	ldr	r0, [pc, #20]	; (8004360 <SYSVIEW_AddTask+0x68>)
 800434c:	f7ff ffa0 	bl	8004290 <SEGGER_SYSVIEW_Warn>
    return;
 8004350:	e7f9      	b.n	8004346 <SYSVIEW_AddTask+0x4e>
 8004352:	bf00      	nop
 8004354:	080057a8 	.word	0x080057a8
 8004358:	20002100 	.word	0x20002100
 800435c:	20002104 	.word	0x20002104
 8004360:	080057e4 	.word	0x080057e4

08004364 <__errno>:
 8004364:	4b01      	ldr	r3, [pc, #4]	; (800436c <__errno+0x8>)
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000014 	.word	0x20000014

08004370 <std>:
 8004370:	2300      	movs	r3, #0
 8004372:	b510      	push	{r4, lr}
 8004374:	4604      	mov	r4, r0
 8004376:	e9c0 3300 	strd	r3, r3, [r0]
 800437a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800437e:	6083      	str	r3, [r0, #8]
 8004380:	8181      	strh	r1, [r0, #12]
 8004382:	6643      	str	r3, [r0, #100]	; 0x64
 8004384:	81c2      	strh	r2, [r0, #14]
 8004386:	6183      	str	r3, [r0, #24]
 8004388:	4619      	mov	r1, r3
 800438a:	2208      	movs	r2, #8
 800438c:	305c      	adds	r0, #92	; 0x5c
 800438e:	f000 f92a 	bl	80045e6 <memset>
 8004392:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <std+0x38>)
 8004394:	6224      	str	r4, [r4, #32]
 8004396:	6263      	str	r3, [r4, #36]	; 0x24
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <std+0x3c>)
 800439a:	62a3      	str	r3, [r4, #40]	; 0x28
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <std+0x40>)
 800439e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <std+0x44>)
 80043a2:	6323      	str	r3, [r4, #48]	; 0x30
 80043a4:	bd10      	pop	{r4, pc}
 80043a6:	bf00      	nop
 80043a8:	08004931 	.word	0x08004931
 80043ac:	08004953 	.word	0x08004953
 80043b0:	0800498b 	.word	0x0800498b
 80043b4:	080049af 	.word	0x080049af

080043b8 <_cleanup_r>:
 80043b8:	4901      	ldr	r1, [pc, #4]	; (80043c0 <_cleanup_r+0x8>)
 80043ba:	f000 b8af 	b.w	800451c <_fwalk_reent>
 80043be:	bf00      	nop
 80043c0:	08004c5d 	.word	0x08004c5d

080043c4 <__sfmoreglue>:
 80043c4:	2268      	movs	r2, #104	; 0x68
 80043c6:	b570      	push	{r4, r5, r6, lr}
 80043c8:	1e4d      	subs	r5, r1, #1
 80043ca:	4355      	muls	r5, r2
 80043cc:	460e      	mov	r6, r1
 80043ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043d2:	f000 f931 	bl	8004638 <_malloc_r>
 80043d6:	4604      	mov	r4, r0
 80043d8:	b140      	cbz	r0, 80043ec <__sfmoreglue+0x28>
 80043da:	2100      	movs	r1, #0
 80043dc:	e9c0 1600 	strd	r1, r6, [r0]
 80043e0:	300c      	adds	r0, #12
 80043e2:	60a0      	str	r0, [r4, #8]
 80043e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043e8:	f000 f8fd 	bl	80045e6 <memset>
 80043ec:	4620      	mov	r0, r4
 80043ee:	bd70      	pop	{r4, r5, r6, pc}

080043f0 <__sfp_lock_acquire>:
 80043f0:	4801      	ldr	r0, [pc, #4]	; (80043f8 <__sfp_lock_acquire+0x8>)
 80043f2:	f000 b8d8 	b.w	80045a6 <__retarget_lock_acquire_recursive>
 80043f6:	bf00      	nop
 80043f8:	200021a5 	.word	0x200021a5

080043fc <__sfp_lock_release>:
 80043fc:	4801      	ldr	r0, [pc, #4]	; (8004404 <__sfp_lock_release+0x8>)
 80043fe:	f000 b8d3 	b.w	80045a8 <__retarget_lock_release_recursive>
 8004402:	bf00      	nop
 8004404:	200021a5 	.word	0x200021a5

08004408 <__sinit_lock_acquire>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__sinit_lock_acquire+0x8>)
 800440a:	f000 b8cc 	b.w	80045a6 <__retarget_lock_acquire_recursive>
 800440e:	bf00      	nop
 8004410:	200021a6 	.word	0x200021a6

08004414 <__sinit_lock_release>:
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <__sinit_lock_release+0x8>)
 8004416:	f000 b8c7 	b.w	80045a8 <__retarget_lock_release_recursive>
 800441a:	bf00      	nop
 800441c:	200021a6 	.word	0x200021a6

08004420 <__sinit>:
 8004420:	b510      	push	{r4, lr}
 8004422:	4604      	mov	r4, r0
 8004424:	f7ff fff0 	bl	8004408 <__sinit_lock_acquire>
 8004428:	69a3      	ldr	r3, [r4, #24]
 800442a:	b11b      	cbz	r3, 8004434 <__sinit+0x14>
 800442c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004430:	f7ff bff0 	b.w	8004414 <__sinit_lock_release>
 8004434:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004438:	6523      	str	r3, [r4, #80]	; 0x50
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <__sinit+0x68>)
 800443c:	4a13      	ldr	r2, [pc, #76]	; (800448c <__sinit+0x6c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	62a2      	str	r2, [r4, #40]	; 0x28
 8004442:	42a3      	cmp	r3, r4
 8004444:	bf08      	it	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	4620      	mov	r0, r4
 800444a:	bf08      	it	eq
 800444c:	61a3      	streq	r3, [r4, #24]
 800444e:	f000 f81f 	bl	8004490 <__sfp>
 8004452:	6060      	str	r0, [r4, #4]
 8004454:	4620      	mov	r0, r4
 8004456:	f000 f81b 	bl	8004490 <__sfp>
 800445a:	60a0      	str	r0, [r4, #8]
 800445c:	4620      	mov	r0, r4
 800445e:	f000 f817 	bl	8004490 <__sfp>
 8004462:	2200      	movs	r2, #0
 8004464:	2104      	movs	r1, #4
 8004466:	60e0      	str	r0, [r4, #12]
 8004468:	6860      	ldr	r0, [r4, #4]
 800446a:	f7ff ff81 	bl	8004370 <std>
 800446e:	2201      	movs	r2, #1
 8004470:	2109      	movs	r1, #9
 8004472:	68a0      	ldr	r0, [r4, #8]
 8004474:	f7ff ff7c 	bl	8004370 <std>
 8004478:	2202      	movs	r2, #2
 800447a:	2112      	movs	r1, #18
 800447c:	68e0      	ldr	r0, [r4, #12]
 800447e:	f7ff ff77 	bl	8004370 <std>
 8004482:	2301      	movs	r3, #1
 8004484:	61a3      	str	r3, [r4, #24]
 8004486:	e7d1      	b.n	800442c <__sinit+0xc>
 8004488:	08005894 	.word	0x08005894
 800448c:	080043b9 	.word	0x080043b9

08004490 <__sfp>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	4607      	mov	r7, r0
 8004494:	f7ff ffac 	bl	80043f0 <__sfp_lock_acquire>
 8004498:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <__sfp+0x84>)
 800449a:	681e      	ldr	r6, [r3, #0]
 800449c:	69b3      	ldr	r3, [r6, #24]
 800449e:	b913      	cbnz	r3, 80044a6 <__sfp+0x16>
 80044a0:	4630      	mov	r0, r6
 80044a2:	f7ff ffbd 	bl	8004420 <__sinit>
 80044a6:	3648      	adds	r6, #72	; 0x48
 80044a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	d503      	bpl.n	80044b8 <__sfp+0x28>
 80044b0:	6833      	ldr	r3, [r6, #0]
 80044b2:	b30b      	cbz	r3, 80044f8 <__sfp+0x68>
 80044b4:	6836      	ldr	r6, [r6, #0]
 80044b6:	e7f7      	b.n	80044a8 <__sfp+0x18>
 80044b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044bc:	b9d5      	cbnz	r5, 80044f4 <__sfp+0x64>
 80044be:	4b16      	ldr	r3, [pc, #88]	; (8004518 <__sfp+0x88>)
 80044c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044c4:	60e3      	str	r3, [r4, #12]
 80044c6:	6665      	str	r5, [r4, #100]	; 0x64
 80044c8:	f000 f86c 	bl	80045a4 <__retarget_lock_init_recursive>
 80044cc:	f7ff ff96 	bl	80043fc <__sfp_lock_release>
 80044d0:	2208      	movs	r2, #8
 80044d2:	4629      	mov	r1, r5
 80044d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044dc:	6025      	str	r5, [r4, #0]
 80044de:	61a5      	str	r5, [r4, #24]
 80044e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044e4:	f000 f87f 	bl	80045e6 <memset>
 80044e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044f0:	4620      	mov	r0, r4
 80044f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f4:	3468      	adds	r4, #104	; 0x68
 80044f6:	e7d9      	b.n	80044ac <__sfp+0x1c>
 80044f8:	2104      	movs	r1, #4
 80044fa:	4638      	mov	r0, r7
 80044fc:	f7ff ff62 	bl	80043c4 <__sfmoreglue>
 8004500:	4604      	mov	r4, r0
 8004502:	6030      	str	r0, [r6, #0]
 8004504:	2800      	cmp	r0, #0
 8004506:	d1d5      	bne.n	80044b4 <__sfp+0x24>
 8004508:	f7ff ff78 	bl	80043fc <__sfp_lock_release>
 800450c:	230c      	movs	r3, #12
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	e7ee      	b.n	80044f0 <__sfp+0x60>
 8004512:	bf00      	nop
 8004514:	08005894 	.word	0x08005894
 8004518:	ffff0001 	.word	0xffff0001

0800451c <_fwalk_reent>:
 800451c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004520:	4606      	mov	r6, r0
 8004522:	4688      	mov	r8, r1
 8004524:	2700      	movs	r7, #0
 8004526:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800452a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800452e:	f1b9 0901 	subs.w	r9, r9, #1
 8004532:	d505      	bpl.n	8004540 <_fwalk_reent+0x24>
 8004534:	6824      	ldr	r4, [r4, #0]
 8004536:	2c00      	cmp	r4, #0
 8004538:	d1f7      	bne.n	800452a <_fwalk_reent+0xe>
 800453a:	4638      	mov	r0, r7
 800453c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004540:	89ab      	ldrh	r3, [r5, #12]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d907      	bls.n	8004556 <_fwalk_reent+0x3a>
 8004546:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800454a:	3301      	adds	r3, #1
 800454c:	d003      	beq.n	8004556 <_fwalk_reent+0x3a>
 800454e:	4629      	mov	r1, r5
 8004550:	4630      	mov	r0, r6
 8004552:	47c0      	blx	r8
 8004554:	4307      	orrs	r7, r0
 8004556:	3568      	adds	r5, #104	; 0x68
 8004558:	e7e9      	b.n	800452e <_fwalk_reent+0x12>
	...

0800455c <__libc_init_array>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	2600      	movs	r6, #0
 8004560:	4d0c      	ldr	r5, [pc, #48]	; (8004594 <__libc_init_array+0x38>)
 8004562:	4c0d      	ldr	r4, [pc, #52]	; (8004598 <__libc_init_array+0x3c>)
 8004564:	1b64      	subs	r4, r4, r5
 8004566:	10a4      	asrs	r4, r4, #2
 8004568:	42a6      	cmp	r6, r4
 800456a:	d109      	bne.n	8004580 <__libc_init_array+0x24>
 800456c:	f000 ffae 	bl	80054cc <_init>
 8004570:	2600      	movs	r6, #0
 8004572:	4d0a      	ldr	r5, [pc, #40]	; (800459c <__libc_init_array+0x40>)
 8004574:	4c0a      	ldr	r4, [pc, #40]	; (80045a0 <__libc_init_array+0x44>)
 8004576:	1b64      	subs	r4, r4, r5
 8004578:	10a4      	asrs	r4, r4, #2
 800457a:	42a6      	cmp	r6, r4
 800457c:	d105      	bne.n	800458a <__libc_init_array+0x2e>
 800457e:	bd70      	pop	{r4, r5, r6, pc}
 8004580:	f855 3b04 	ldr.w	r3, [r5], #4
 8004584:	4798      	blx	r3
 8004586:	3601      	adds	r6, #1
 8004588:	e7ee      	b.n	8004568 <__libc_init_array+0xc>
 800458a:	f855 3b04 	ldr.w	r3, [r5], #4
 800458e:	4798      	blx	r3
 8004590:	3601      	adds	r6, #1
 8004592:	e7f2      	b.n	800457a <__libc_init_array+0x1e>
 8004594:	080058cc 	.word	0x080058cc
 8004598:	080058cc 	.word	0x080058cc
 800459c:	080058cc 	.word	0x080058cc
 80045a0:	080058d0 	.word	0x080058d0

080045a4 <__retarget_lock_init_recursive>:
 80045a4:	4770      	bx	lr

080045a6 <__retarget_lock_acquire_recursive>:
 80045a6:	4770      	bx	lr

080045a8 <__retarget_lock_release_recursive>:
 80045a8:	4770      	bx	lr

080045aa <memcmp>:
 80045aa:	b510      	push	{r4, lr}
 80045ac:	3901      	subs	r1, #1
 80045ae:	4402      	add	r2, r0
 80045b0:	4290      	cmp	r0, r2
 80045b2:	d101      	bne.n	80045b8 <memcmp+0xe>
 80045b4:	2000      	movs	r0, #0
 80045b6:	e005      	b.n	80045c4 <memcmp+0x1a>
 80045b8:	7803      	ldrb	r3, [r0, #0]
 80045ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80045be:	42a3      	cmp	r3, r4
 80045c0:	d001      	beq.n	80045c6 <memcmp+0x1c>
 80045c2:	1b18      	subs	r0, r3, r4
 80045c4:	bd10      	pop	{r4, pc}
 80045c6:	3001      	adds	r0, #1
 80045c8:	e7f2      	b.n	80045b0 <memcmp+0x6>

080045ca <memcpy>:
 80045ca:	440a      	add	r2, r1
 80045cc:	4291      	cmp	r1, r2
 80045ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80045d2:	d100      	bne.n	80045d6 <memcpy+0xc>
 80045d4:	4770      	bx	lr
 80045d6:	b510      	push	{r4, lr}
 80045d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045dc:	4291      	cmp	r1, r2
 80045de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045e2:	d1f9      	bne.n	80045d8 <memcpy+0xe>
 80045e4:	bd10      	pop	{r4, pc}

080045e6 <memset>:
 80045e6:	4603      	mov	r3, r0
 80045e8:	4402      	add	r2, r0
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d100      	bne.n	80045f0 <memset+0xa>
 80045ee:	4770      	bx	lr
 80045f0:	f803 1b01 	strb.w	r1, [r3], #1
 80045f4:	e7f9      	b.n	80045ea <memset+0x4>
	...

080045f8 <sbrk_aligned>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	4e0e      	ldr	r6, [pc, #56]	; (8004634 <sbrk_aligned+0x3c>)
 80045fc:	460c      	mov	r4, r1
 80045fe:	6831      	ldr	r1, [r6, #0]
 8004600:	4605      	mov	r5, r0
 8004602:	b911      	cbnz	r1, 800460a <sbrk_aligned+0x12>
 8004604:	f000 f984 	bl	8004910 <_sbrk_r>
 8004608:	6030      	str	r0, [r6, #0]
 800460a:	4621      	mov	r1, r4
 800460c:	4628      	mov	r0, r5
 800460e:	f000 f97f 	bl	8004910 <_sbrk_r>
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	d00a      	beq.n	800462c <sbrk_aligned+0x34>
 8004616:	1cc4      	adds	r4, r0, #3
 8004618:	f024 0403 	bic.w	r4, r4, #3
 800461c:	42a0      	cmp	r0, r4
 800461e:	d007      	beq.n	8004630 <sbrk_aligned+0x38>
 8004620:	1a21      	subs	r1, r4, r0
 8004622:	4628      	mov	r0, r5
 8004624:	f000 f974 	bl	8004910 <_sbrk_r>
 8004628:	3001      	adds	r0, #1
 800462a:	d101      	bne.n	8004630 <sbrk_aligned+0x38>
 800462c:	f04f 34ff 	mov.w	r4, #4294967295
 8004630:	4620      	mov	r0, r4
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	200021ac 	.word	0x200021ac

08004638 <_malloc_r>:
 8004638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463c:	1ccd      	adds	r5, r1, #3
 800463e:	f025 0503 	bic.w	r5, r5, #3
 8004642:	3508      	adds	r5, #8
 8004644:	2d0c      	cmp	r5, #12
 8004646:	bf38      	it	cc
 8004648:	250c      	movcc	r5, #12
 800464a:	2d00      	cmp	r5, #0
 800464c:	4607      	mov	r7, r0
 800464e:	db01      	blt.n	8004654 <_malloc_r+0x1c>
 8004650:	42a9      	cmp	r1, r5
 8004652:	d905      	bls.n	8004660 <_malloc_r+0x28>
 8004654:	230c      	movs	r3, #12
 8004656:	2600      	movs	r6, #0
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	4630      	mov	r0, r6
 800465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004660:	4e2e      	ldr	r6, [pc, #184]	; (800471c <_malloc_r+0xe4>)
 8004662:	f000 fbaf 	bl	8004dc4 <__malloc_lock>
 8004666:	6833      	ldr	r3, [r6, #0]
 8004668:	461c      	mov	r4, r3
 800466a:	bb34      	cbnz	r4, 80046ba <_malloc_r+0x82>
 800466c:	4629      	mov	r1, r5
 800466e:	4638      	mov	r0, r7
 8004670:	f7ff ffc2 	bl	80045f8 <sbrk_aligned>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	4604      	mov	r4, r0
 8004678:	d14d      	bne.n	8004716 <_malloc_r+0xde>
 800467a:	6834      	ldr	r4, [r6, #0]
 800467c:	4626      	mov	r6, r4
 800467e:	2e00      	cmp	r6, #0
 8004680:	d140      	bne.n	8004704 <_malloc_r+0xcc>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	4631      	mov	r1, r6
 8004686:	4638      	mov	r0, r7
 8004688:	eb04 0803 	add.w	r8, r4, r3
 800468c:	f000 f940 	bl	8004910 <_sbrk_r>
 8004690:	4580      	cmp	r8, r0
 8004692:	d13a      	bne.n	800470a <_malloc_r+0xd2>
 8004694:	6821      	ldr	r1, [r4, #0]
 8004696:	3503      	adds	r5, #3
 8004698:	1a6d      	subs	r5, r5, r1
 800469a:	f025 0503 	bic.w	r5, r5, #3
 800469e:	3508      	adds	r5, #8
 80046a0:	2d0c      	cmp	r5, #12
 80046a2:	bf38      	it	cc
 80046a4:	250c      	movcc	r5, #12
 80046a6:	4638      	mov	r0, r7
 80046a8:	4629      	mov	r1, r5
 80046aa:	f7ff ffa5 	bl	80045f8 <sbrk_aligned>
 80046ae:	3001      	adds	r0, #1
 80046b0:	d02b      	beq.n	800470a <_malloc_r+0xd2>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	442b      	add	r3, r5
 80046b6:	6023      	str	r3, [r4, #0]
 80046b8:	e00e      	b.n	80046d8 <_malloc_r+0xa0>
 80046ba:	6822      	ldr	r2, [r4, #0]
 80046bc:	1b52      	subs	r2, r2, r5
 80046be:	d41e      	bmi.n	80046fe <_malloc_r+0xc6>
 80046c0:	2a0b      	cmp	r2, #11
 80046c2:	d916      	bls.n	80046f2 <_malloc_r+0xba>
 80046c4:	1961      	adds	r1, r4, r5
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	6025      	str	r5, [r4, #0]
 80046ca:	bf18      	it	ne
 80046cc:	6059      	strne	r1, [r3, #4]
 80046ce:	6863      	ldr	r3, [r4, #4]
 80046d0:	bf08      	it	eq
 80046d2:	6031      	streq	r1, [r6, #0]
 80046d4:	5162      	str	r2, [r4, r5]
 80046d6:	604b      	str	r3, [r1, #4]
 80046d8:	4638      	mov	r0, r7
 80046da:	f104 060b 	add.w	r6, r4, #11
 80046de:	f000 fb77 	bl	8004dd0 <__malloc_unlock>
 80046e2:	f026 0607 	bic.w	r6, r6, #7
 80046e6:	1d23      	adds	r3, r4, #4
 80046e8:	1af2      	subs	r2, r6, r3
 80046ea:	d0b6      	beq.n	800465a <_malloc_r+0x22>
 80046ec:	1b9b      	subs	r3, r3, r6
 80046ee:	50a3      	str	r3, [r4, r2]
 80046f0:	e7b3      	b.n	800465a <_malloc_r+0x22>
 80046f2:	6862      	ldr	r2, [r4, #4]
 80046f4:	42a3      	cmp	r3, r4
 80046f6:	bf0c      	ite	eq
 80046f8:	6032      	streq	r2, [r6, #0]
 80046fa:	605a      	strne	r2, [r3, #4]
 80046fc:	e7ec      	b.n	80046d8 <_malloc_r+0xa0>
 80046fe:	4623      	mov	r3, r4
 8004700:	6864      	ldr	r4, [r4, #4]
 8004702:	e7b2      	b.n	800466a <_malloc_r+0x32>
 8004704:	4634      	mov	r4, r6
 8004706:	6876      	ldr	r6, [r6, #4]
 8004708:	e7b9      	b.n	800467e <_malloc_r+0x46>
 800470a:	230c      	movs	r3, #12
 800470c:	4638      	mov	r0, r7
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	f000 fb5e 	bl	8004dd0 <__malloc_unlock>
 8004714:	e7a1      	b.n	800465a <_malloc_r+0x22>
 8004716:	6025      	str	r5, [r4, #0]
 8004718:	e7de      	b.n	80046d8 <_malloc_r+0xa0>
 800471a:	bf00      	nop
 800471c:	200021a8 	.word	0x200021a8

08004720 <iprintf>:
 8004720:	b40f      	push	{r0, r1, r2, r3}
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <iprintf+0x2c>)
 8004724:	b513      	push	{r0, r1, r4, lr}
 8004726:	681c      	ldr	r4, [r3, #0]
 8004728:	b124      	cbz	r4, 8004734 <iprintf+0x14>
 800472a:	69a3      	ldr	r3, [r4, #24]
 800472c:	b913      	cbnz	r3, 8004734 <iprintf+0x14>
 800472e:	4620      	mov	r0, r4
 8004730:	f7ff fe76 	bl	8004420 <__sinit>
 8004734:	ab05      	add	r3, sp, #20
 8004736:	4620      	mov	r0, r4
 8004738:	9a04      	ldr	r2, [sp, #16]
 800473a:	68a1      	ldr	r1, [r4, #8]
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	f000 fbbd 	bl	8004ebc <_vfiprintf_r>
 8004742:	b002      	add	sp, #8
 8004744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004748:	b004      	add	sp, #16
 800474a:	4770      	bx	lr
 800474c:	20000014 	.word	0x20000014

08004750 <_puts_r>:
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	460e      	mov	r6, r1
 8004754:	4605      	mov	r5, r0
 8004756:	b118      	cbz	r0, 8004760 <_puts_r+0x10>
 8004758:	6983      	ldr	r3, [r0, #24]
 800475a:	b90b      	cbnz	r3, 8004760 <_puts_r+0x10>
 800475c:	f7ff fe60 	bl	8004420 <__sinit>
 8004760:	69ab      	ldr	r3, [r5, #24]
 8004762:	68ac      	ldr	r4, [r5, #8]
 8004764:	b913      	cbnz	r3, 800476c <_puts_r+0x1c>
 8004766:	4628      	mov	r0, r5
 8004768:	f7ff fe5a 	bl	8004420 <__sinit>
 800476c:	4b2c      	ldr	r3, [pc, #176]	; (8004820 <_puts_r+0xd0>)
 800476e:	429c      	cmp	r4, r3
 8004770:	d120      	bne.n	80047b4 <_puts_r+0x64>
 8004772:	686c      	ldr	r4, [r5, #4]
 8004774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004776:	07db      	lsls	r3, r3, #31
 8004778:	d405      	bmi.n	8004786 <_puts_r+0x36>
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	0598      	lsls	r0, r3, #22
 800477e:	d402      	bmi.n	8004786 <_puts_r+0x36>
 8004780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004782:	f7ff ff10 	bl	80045a6 <__retarget_lock_acquire_recursive>
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	0719      	lsls	r1, r3, #28
 800478a:	d51d      	bpl.n	80047c8 <_puts_r+0x78>
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	b1db      	cbz	r3, 80047c8 <_puts_r+0x78>
 8004790:	3e01      	subs	r6, #1
 8004792:	68a3      	ldr	r3, [r4, #8]
 8004794:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004798:	3b01      	subs	r3, #1
 800479a:	60a3      	str	r3, [r4, #8]
 800479c:	bb39      	cbnz	r1, 80047ee <_puts_r+0x9e>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	da38      	bge.n	8004814 <_puts_r+0xc4>
 80047a2:	4622      	mov	r2, r4
 80047a4:	210a      	movs	r1, #10
 80047a6:	4628      	mov	r0, r5
 80047a8:	f000 f906 	bl	80049b8 <__swbuf_r>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d011      	beq.n	80047d4 <_puts_r+0x84>
 80047b0:	250a      	movs	r5, #10
 80047b2:	e011      	b.n	80047d8 <_puts_r+0x88>
 80047b4:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <_puts_r+0xd4>)
 80047b6:	429c      	cmp	r4, r3
 80047b8:	d101      	bne.n	80047be <_puts_r+0x6e>
 80047ba:	68ac      	ldr	r4, [r5, #8]
 80047bc:	e7da      	b.n	8004774 <_puts_r+0x24>
 80047be:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <_puts_r+0xd8>)
 80047c0:	429c      	cmp	r4, r3
 80047c2:	bf08      	it	eq
 80047c4:	68ec      	ldreq	r4, [r5, #12]
 80047c6:	e7d5      	b.n	8004774 <_puts_r+0x24>
 80047c8:	4621      	mov	r1, r4
 80047ca:	4628      	mov	r0, r5
 80047cc:	f000 f946 	bl	8004a5c <__swsetup_r>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d0dd      	beq.n	8004790 <_puts_r+0x40>
 80047d4:	f04f 35ff 	mov.w	r5, #4294967295
 80047d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047da:	07da      	lsls	r2, r3, #31
 80047dc:	d405      	bmi.n	80047ea <_puts_r+0x9a>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	059b      	lsls	r3, r3, #22
 80047e2:	d402      	bmi.n	80047ea <_puts_r+0x9a>
 80047e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047e6:	f7ff fedf 	bl	80045a8 <__retarget_lock_release_recursive>
 80047ea:	4628      	mov	r0, r5
 80047ec:	bd70      	pop	{r4, r5, r6, pc}
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	da04      	bge.n	80047fc <_puts_r+0xac>
 80047f2:	69a2      	ldr	r2, [r4, #24]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	dc06      	bgt.n	8004806 <_puts_r+0xb6>
 80047f8:	290a      	cmp	r1, #10
 80047fa:	d004      	beq.n	8004806 <_puts_r+0xb6>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	6022      	str	r2, [r4, #0]
 8004802:	7019      	strb	r1, [r3, #0]
 8004804:	e7c5      	b.n	8004792 <_puts_r+0x42>
 8004806:	4622      	mov	r2, r4
 8004808:	4628      	mov	r0, r5
 800480a:	f000 f8d5 	bl	80049b8 <__swbuf_r>
 800480e:	3001      	adds	r0, #1
 8004810:	d1bf      	bne.n	8004792 <_puts_r+0x42>
 8004812:	e7df      	b.n	80047d4 <_puts_r+0x84>
 8004814:	250a      	movs	r5, #10
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	6022      	str	r2, [r4, #0]
 800481c:	701d      	strb	r5, [r3, #0]
 800481e:	e7db      	b.n	80047d8 <_puts_r+0x88>
 8004820:	08005854 	.word	0x08005854
 8004824:	08005874 	.word	0x08005874
 8004828:	08005834 	.word	0x08005834

0800482c <puts>:
 800482c:	4b02      	ldr	r3, [pc, #8]	; (8004838 <puts+0xc>)
 800482e:	4601      	mov	r1, r0
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	f7ff bf8d 	b.w	8004750 <_puts_r>
 8004836:	bf00      	nop
 8004838:	20000014 	.word	0x20000014

0800483c <cleanup_glue>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	460c      	mov	r4, r1
 8004840:	6809      	ldr	r1, [r1, #0]
 8004842:	4605      	mov	r5, r0
 8004844:	b109      	cbz	r1, 800484a <cleanup_glue+0xe>
 8004846:	f7ff fff9 	bl	800483c <cleanup_glue>
 800484a:	4621      	mov	r1, r4
 800484c:	4628      	mov	r0, r5
 800484e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004852:	f000 bac3 	b.w	8004ddc <_free_r>
	...

08004858 <_reclaim_reent>:
 8004858:	4b2c      	ldr	r3, [pc, #176]	; (800490c <_reclaim_reent+0xb4>)
 800485a:	b570      	push	{r4, r5, r6, lr}
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4604      	mov	r4, r0
 8004860:	4283      	cmp	r3, r0
 8004862:	d051      	beq.n	8004908 <_reclaim_reent+0xb0>
 8004864:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004866:	b143      	cbz	r3, 800487a <_reclaim_reent+0x22>
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d14a      	bne.n	8004904 <_reclaim_reent+0xac>
 800486e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004870:	6819      	ldr	r1, [r3, #0]
 8004872:	b111      	cbz	r1, 800487a <_reclaim_reent+0x22>
 8004874:	4620      	mov	r0, r4
 8004876:	f000 fab1 	bl	8004ddc <_free_r>
 800487a:	6961      	ldr	r1, [r4, #20]
 800487c:	b111      	cbz	r1, 8004884 <_reclaim_reent+0x2c>
 800487e:	4620      	mov	r0, r4
 8004880:	f000 faac 	bl	8004ddc <_free_r>
 8004884:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004886:	b111      	cbz	r1, 800488e <_reclaim_reent+0x36>
 8004888:	4620      	mov	r0, r4
 800488a:	f000 faa7 	bl	8004ddc <_free_r>
 800488e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004890:	b111      	cbz	r1, 8004898 <_reclaim_reent+0x40>
 8004892:	4620      	mov	r0, r4
 8004894:	f000 faa2 	bl	8004ddc <_free_r>
 8004898:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800489a:	b111      	cbz	r1, 80048a2 <_reclaim_reent+0x4a>
 800489c:	4620      	mov	r0, r4
 800489e:	f000 fa9d 	bl	8004ddc <_free_r>
 80048a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80048a4:	b111      	cbz	r1, 80048ac <_reclaim_reent+0x54>
 80048a6:	4620      	mov	r0, r4
 80048a8:	f000 fa98 	bl	8004ddc <_free_r>
 80048ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80048ae:	b111      	cbz	r1, 80048b6 <_reclaim_reent+0x5e>
 80048b0:	4620      	mov	r0, r4
 80048b2:	f000 fa93 	bl	8004ddc <_free_r>
 80048b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80048b8:	b111      	cbz	r1, 80048c0 <_reclaim_reent+0x68>
 80048ba:	4620      	mov	r0, r4
 80048bc:	f000 fa8e 	bl	8004ddc <_free_r>
 80048c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048c2:	b111      	cbz	r1, 80048ca <_reclaim_reent+0x72>
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 fa89 	bl	8004ddc <_free_r>
 80048ca:	69a3      	ldr	r3, [r4, #24]
 80048cc:	b1e3      	cbz	r3, 8004908 <_reclaim_reent+0xb0>
 80048ce:	4620      	mov	r0, r4
 80048d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048d2:	4798      	blx	r3
 80048d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80048d6:	b1b9      	cbz	r1, 8004908 <_reclaim_reent+0xb0>
 80048d8:	4620      	mov	r0, r4
 80048da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80048de:	f7ff bfad 	b.w	800483c <cleanup_glue>
 80048e2:	5949      	ldr	r1, [r1, r5]
 80048e4:	b941      	cbnz	r1, 80048f8 <_reclaim_reent+0xa0>
 80048e6:	3504      	adds	r5, #4
 80048e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048ea:	2d80      	cmp	r5, #128	; 0x80
 80048ec:	68d9      	ldr	r1, [r3, #12]
 80048ee:	d1f8      	bne.n	80048e2 <_reclaim_reent+0x8a>
 80048f0:	4620      	mov	r0, r4
 80048f2:	f000 fa73 	bl	8004ddc <_free_r>
 80048f6:	e7ba      	b.n	800486e <_reclaim_reent+0x16>
 80048f8:	680e      	ldr	r6, [r1, #0]
 80048fa:	4620      	mov	r0, r4
 80048fc:	f000 fa6e 	bl	8004ddc <_free_r>
 8004900:	4631      	mov	r1, r6
 8004902:	e7ef      	b.n	80048e4 <_reclaim_reent+0x8c>
 8004904:	2500      	movs	r5, #0
 8004906:	e7ef      	b.n	80048e8 <_reclaim_reent+0x90>
 8004908:	bd70      	pop	{r4, r5, r6, pc}
 800490a:	bf00      	nop
 800490c:	20000014 	.word	0x20000014

08004910 <_sbrk_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	2300      	movs	r3, #0
 8004914:	4d05      	ldr	r5, [pc, #20]	; (800492c <_sbrk_r+0x1c>)
 8004916:	4604      	mov	r4, r0
 8004918:	4608      	mov	r0, r1
 800491a:	602b      	str	r3, [r5, #0]
 800491c:	f7fb fe38 	bl	8000590 <_sbrk>
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	d102      	bne.n	800492a <_sbrk_r+0x1a>
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	b103      	cbz	r3, 800492a <_sbrk_r+0x1a>
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	bd38      	pop	{r3, r4, r5, pc}
 800492c:	200021b0 	.word	0x200021b0

08004930 <__sread>:
 8004930:	b510      	push	{r4, lr}
 8004932:	460c      	mov	r4, r1
 8004934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004938:	f000 fd86 	bl	8005448 <_read_r>
 800493c:	2800      	cmp	r0, #0
 800493e:	bfab      	itete	ge
 8004940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004942:	89a3      	ldrhlt	r3, [r4, #12]
 8004944:	181b      	addge	r3, r3, r0
 8004946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800494a:	bfac      	ite	ge
 800494c:	6563      	strge	r3, [r4, #84]	; 0x54
 800494e:	81a3      	strhlt	r3, [r4, #12]
 8004950:	bd10      	pop	{r4, pc}

08004952 <__swrite>:
 8004952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004956:	461f      	mov	r7, r3
 8004958:	898b      	ldrh	r3, [r1, #12]
 800495a:	4605      	mov	r5, r0
 800495c:	05db      	lsls	r3, r3, #23
 800495e:	460c      	mov	r4, r1
 8004960:	4616      	mov	r6, r2
 8004962:	d505      	bpl.n	8004970 <__swrite+0x1e>
 8004964:	2302      	movs	r3, #2
 8004966:	2200      	movs	r2, #0
 8004968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800496c:	f000 f9b2 	bl	8004cd4 <_lseek_r>
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	4632      	mov	r2, r6
 8004974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004978:	81a3      	strh	r3, [r4, #12]
 800497a:	4628      	mov	r0, r5
 800497c:	463b      	mov	r3, r7
 800497e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004986:	f7ff b847 	b.w	8003a18 <_write_r>

0800498a <__sseek>:
 800498a:	b510      	push	{r4, lr}
 800498c:	460c      	mov	r4, r1
 800498e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004992:	f000 f99f 	bl	8004cd4 <_lseek_r>
 8004996:	1c43      	adds	r3, r0, #1
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	bf15      	itete	ne
 800499c:	6560      	strne	r0, [r4, #84]	; 0x54
 800499e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049a6:	81a3      	strheq	r3, [r4, #12]
 80049a8:	bf18      	it	ne
 80049aa:	81a3      	strhne	r3, [r4, #12]
 80049ac:	bd10      	pop	{r4, pc}

080049ae <__sclose>:
 80049ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b2:	f000 b8c1 	b.w	8004b38 <_close_r>
	...

080049b8 <__swbuf_r>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	460e      	mov	r6, r1
 80049bc:	4614      	mov	r4, r2
 80049be:	4605      	mov	r5, r0
 80049c0:	b118      	cbz	r0, 80049ca <__swbuf_r+0x12>
 80049c2:	6983      	ldr	r3, [r0, #24]
 80049c4:	b90b      	cbnz	r3, 80049ca <__swbuf_r+0x12>
 80049c6:	f7ff fd2b 	bl	8004420 <__sinit>
 80049ca:	4b21      	ldr	r3, [pc, #132]	; (8004a50 <__swbuf_r+0x98>)
 80049cc:	429c      	cmp	r4, r3
 80049ce:	d12b      	bne.n	8004a28 <__swbuf_r+0x70>
 80049d0:	686c      	ldr	r4, [r5, #4]
 80049d2:	69a3      	ldr	r3, [r4, #24]
 80049d4:	60a3      	str	r3, [r4, #8]
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	071a      	lsls	r2, r3, #28
 80049da:	d52f      	bpl.n	8004a3c <__swbuf_r+0x84>
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	b36b      	cbz	r3, 8004a3c <__swbuf_r+0x84>
 80049e0:	6923      	ldr	r3, [r4, #16]
 80049e2:	6820      	ldr	r0, [r4, #0]
 80049e4:	b2f6      	uxtb	r6, r6
 80049e6:	1ac0      	subs	r0, r0, r3
 80049e8:	6963      	ldr	r3, [r4, #20]
 80049ea:	4637      	mov	r7, r6
 80049ec:	4283      	cmp	r3, r0
 80049ee:	dc04      	bgt.n	80049fa <__swbuf_r+0x42>
 80049f0:	4621      	mov	r1, r4
 80049f2:	4628      	mov	r0, r5
 80049f4:	f000 f932 	bl	8004c5c <_fflush_r>
 80049f8:	bb30      	cbnz	r0, 8004a48 <__swbuf_r+0x90>
 80049fa:	68a3      	ldr	r3, [r4, #8]
 80049fc:	3001      	adds	r0, #1
 80049fe:	3b01      	subs	r3, #1
 8004a00:	60a3      	str	r3, [r4, #8]
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	6022      	str	r2, [r4, #0]
 8004a08:	701e      	strb	r6, [r3, #0]
 8004a0a:	6963      	ldr	r3, [r4, #20]
 8004a0c:	4283      	cmp	r3, r0
 8004a0e:	d004      	beq.n	8004a1a <__swbuf_r+0x62>
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	07db      	lsls	r3, r3, #31
 8004a14:	d506      	bpl.n	8004a24 <__swbuf_r+0x6c>
 8004a16:	2e0a      	cmp	r6, #10
 8004a18:	d104      	bne.n	8004a24 <__swbuf_r+0x6c>
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f000 f91d 	bl	8004c5c <_fflush_r>
 8004a22:	b988      	cbnz	r0, 8004a48 <__swbuf_r+0x90>
 8004a24:	4638      	mov	r0, r7
 8004a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <__swbuf_r+0x9c>)
 8004a2a:	429c      	cmp	r4, r3
 8004a2c:	d101      	bne.n	8004a32 <__swbuf_r+0x7a>
 8004a2e:	68ac      	ldr	r4, [r5, #8]
 8004a30:	e7cf      	b.n	80049d2 <__swbuf_r+0x1a>
 8004a32:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <__swbuf_r+0xa0>)
 8004a34:	429c      	cmp	r4, r3
 8004a36:	bf08      	it	eq
 8004a38:	68ec      	ldreq	r4, [r5, #12]
 8004a3a:	e7ca      	b.n	80049d2 <__swbuf_r+0x1a>
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4628      	mov	r0, r5
 8004a40:	f000 f80c 	bl	8004a5c <__swsetup_r>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d0cb      	beq.n	80049e0 <__swbuf_r+0x28>
 8004a48:	f04f 37ff 	mov.w	r7, #4294967295
 8004a4c:	e7ea      	b.n	8004a24 <__swbuf_r+0x6c>
 8004a4e:	bf00      	nop
 8004a50:	08005854 	.word	0x08005854
 8004a54:	08005874 	.word	0x08005874
 8004a58:	08005834 	.word	0x08005834

08004a5c <__swsetup_r>:
 8004a5c:	4b32      	ldr	r3, [pc, #200]	; (8004b28 <__swsetup_r+0xcc>)
 8004a5e:	b570      	push	{r4, r5, r6, lr}
 8004a60:	681d      	ldr	r5, [r3, #0]
 8004a62:	4606      	mov	r6, r0
 8004a64:	460c      	mov	r4, r1
 8004a66:	b125      	cbz	r5, 8004a72 <__swsetup_r+0x16>
 8004a68:	69ab      	ldr	r3, [r5, #24]
 8004a6a:	b913      	cbnz	r3, 8004a72 <__swsetup_r+0x16>
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f7ff fcd7 	bl	8004420 <__sinit>
 8004a72:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <__swsetup_r+0xd0>)
 8004a74:	429c      	cmp	r4, r3
 8004a76:	d10f      	bne.n	8004a98 <__swsetup_r+0x3c>
 8004a78:	686c      	ldr	r4, [r5, #4]
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a80:	0719      	lsls	r1, r3, #28
 8004a82:	d42c      	bmi.n	8004ade <__swsetup_r+0x82>
 8004a84:	06dd      	lsls	r5, r3, #27
 8004a86:	d411      	bmi.n	8004aac <__swsetup_r+0x50>
 8004a88:	2309      	movs	r3, #9
 8004a8a:	6033      	str	r3, [r6, #0]
 8004a8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	81a3      	strh	r3, [r4, #12]
 8004a96:	e03e      	b.n	8004b16 <__swsetup_r+0xba>
 8004a98:	4b25      	ldr	r3, [pc, #148]	; (8004b30 <__swsetup_r+0xd4>)
 8004a9a:	429c      	cmp	r4, r3
 8004a9c:	d101      	bne.n	8004aa2 <__swsetup_r+0x46>
 8004a9e:	68ac      	ldr	r4, [r5, #8]
 8004aa0:	e7eb      	b.n	8004a7a <__swsetup_r+0x1e>
 8004aa2:	4b24      	ldr	r3, [pc, #144]	; (8004b34 <__swsetup_r+0xd8>)
 8004aa4:	429c      	cmp	r4, r3
 8004aa6:	bf08      	it	eq
 8004aa8:	68ec      	ldreq	r4, [r5, #12]
 8004aaa:	e7e6      	b.n	8004a7a <__swsetup_r+0x1e>
 8004aac:	0758      	lsls	r0, r3, #29
 8004aae:	d512      	bpl.n	8004ad6 <__swsetup_r+0x7a>
 8004ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ab2:	b141      	cbz	r1, 8004ac6 <__swsetup_r+0x6a>
 8004ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ab8:	4299      	cmp	r1, r3
 8004aba:	d002      	beq.n	8004ac2 <__swsetup_r+0x66>
 8004abc:	4630      	mov	r0, r6
 8004abe:	f000 f98d 	bl	8004ddc <_free_r>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6063      	str	r3, [r4, #4]
 8004ad2:	6923      	ldr	r3, [r4, #16]
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	89a3      	ldrh	r3, [r4, #12]
 8004ad8:	f043 0308 	orr.w	r3, r3, #8
 8004adc:	81a3      	strh	r3, [r4, #12]
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	b94b      	cbnz	r3, 8004af6 <__swsetup_r+0x9a>
 8004ae2:	89a3      	ldrh	r3, [r4, #12]
 8004ae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aec:	d003      	beq.n	8004af6 <__swsetup_r+0x9a>
 8004aee:	4621      	mov	r1, r4
 8004af0:	4630      	mov	r0, r6
 8004af2:	f000 f927 	bl	8004d44 <__smakebuf_r>
 8004af6:	89a0      	ldrh	r0, [r4, #12]
 8004af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004afc:	f010 0301 	ands.w	r3, r0, #1
 8004b00:	d00a      	beq.n	8004b18 <__swsetup_r+0xbc>
 8004b02:	2300      	movs	r3, #0
 8004b04:	60a3      	str	r3, [r4, #8]
 8004b06:	6963      	ldr	r3, [r4, #20]
 8004b08:	425b      	negs	r3, r3
 8004b0a:	61a3      	str	r3, [r4, #24]
 8004b0c:	6923      	ldr	r3, [r4, #16]
 8004b0e:	b943      	cbnz	r3, 8004b22 <__swsetup_r+0xc6>
 8004b10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b14:	d1ba      	bne.n	8004a8c <__swsetup_r+0x30>
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
 8004b18:	0781      	lsls	r1, r0, #30
 8004b1a:	bf58      	it	pl
 8004b1c:	6963      	ldrpl	r3, [r4, #20]
 8004b1e:	60a3      	str	r3, [r4, #8]
 8004b20:	e7f4      	b.n	8004b0c <__swsetup_r+0xb0>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e7f7      	b.n	8004b16 <__swsetup_r+0xba>
 8004b26:	bf00      	nop
 8004b28:	20000014 	.word	0x20000014
 8004b2c:	08005854 	.word	0x08005854
 8004b30:	08005874 	.word	0x08005874
 8004b34:	08005834 	.word	0x08005834

08004b38 <_close_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	4d05      	ldr	r5, [pc, #20]	; (8004b54 <_close_r+0x1c>)
 8004b3e:	4604      	mov	r4, r0
 8004b40:	4608      	mov	r0, r1
 8004b42:	602b      	str	r3, [r5, #0]
 8004b44:	f7fb fd18 	bl	8000578 <_close>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d102      	bne.n	8004b52 <_close_r+0x1a>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b103      	cbz	r3, 8004b52 <_close_r+0x1a>
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	200021b0 	.word	0x200021b0

08004b58 <__sflush_r>:
 8004b58:	898a      	ldrh	r2, [r1, #12]
 8004b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	0710      	lsls	r0, r2, #28
 8004b60:	460c      	mov	r4, r1
 8004b62:	d457      	bmi.n	8004c14 <__sflush_r+0xbc>
 8004b64:	684b      	ldr	r3, [r1, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	dc04      	bgt.n	8004b74 <__sflush_r+0x1c>
 8004b6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	dc01      	bgt.n	8004b74 <__sflush_r+0x1c>
 8004b70:	2000      	movs	r0, #0
 8004b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b76:	2e00      	cmp	r6, #0
 8004b78:	d0fa      	beq.n	8004b70 <__sflush_r+0x18>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b80:	682f      	ldr	r7, [r5, #0]
 8004b82:	602b      	str	r3, [r5, #0]
 8004b84:	d032      	beq.n	8004bec <__sflush_r+0x94>
 8004b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	075a      	lsls	r2, r3, #29
 8004b8c:	d505      	bpl.n	8004b9a <__sflush_r+0x42>
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	1ac0      	subs	r0, r0, r3
 8004b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b94:	b10b      	cbz	r3, 8004b9a <__sflush_r+0x42>
 8004b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b98:	1ac0      	subs	r0, r0, r3
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	6a21      	ldr	r1, [r4, #32]
 8004ba4:	47b0      	blx	r6
 8004ba6:	1c43      	adds	r3, r0, #1
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	d106      	bne.n	8004bba <__sflush_r+0x62>
 8004bac:	6829      	ldr	r1, [r5, #0]
 8004bae:	291d      	cmp	r1, #29
 8004bb0:	d82c      	bhi.n	8004c0c <__sflush_r+0xb4>
 8004bb2:	4a29      	ldr	r2, [pc, #164]	; (8004c58 <__sflush_r+0x100>)
 8004bb4:	40ca      	lsrs	r2, r1
 8004bb6:	07d6      	lsls	r6, r2, #31
 8004bb8:	d528      	bpl.n	8004c0c <__sflush_r+0xb4>
 8004bba:	2200      	movs	r2, #0
 8004bbc:	6062      	str	r2, [r4, #4]
 8004bbe:	6922      	ldr	r2, [r4, #16]
 8004bc0:	04d9      	lsls	r1, r3, #19
 8004bc2:	6022      	str	r2, [r4, #0]
 8004bc4:	d504      	bpl.n	8004bd0 <__sflush_r+0x78>
 8004bc6:	1c42      	adds	r2, r0, #1
 8004bc8:	d101      	bne.n	8004bce <__sflush_r+0x76>
 8004bca:	682b      	ldr	r3, [r5, #0]
 8004bcc:	b903      	cbnz	r3, 8004bd0 <__sflush_r+0x78>
 8004bce:	6560      	str	r0, [r4, #84]	; 0x54
 8004bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bd2:	602f      	str	r7, [r5, #0]
 8004bd4:	2900      	cmp	r1, #0
 8004bd6:	d0cb      	beq.n	8004b70 <__sflush_r+0x18>
 8004bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bdc:	4299      	cmp	r1, r3
 8004bde:	d002      	beq.n	8004be6 <__sflush_r+0x8e>
 8004be0:	4628      	mov	r0, r5
 8004be2:	f000 f8fb 	bl	8004ddc <_free_r>
 8004be6:	2000      	movs	r0, #0
 8004be8:	6360      	str	r0, [r4, #52]	; 0x34
 8004bea:	e7c2      	b.n	8004b72 <__sflush_r+0x1a>
 8004bec:	6a21      	ldr	r1, [r4, #32]
 8004bee:	2301      	movs	r3, #1
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b0      	blx	r6
 8004bf4:	1c41      	adds	r1, r0, #1
 8004bf6:	d1c7      	bne.n	8004b88 <__sflush_r+0x30>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0c4      	beq.n	8004b88 <__sflush_r+0x30>
 8004bfe:	2b1d      	cmp	r3, #29
 8004c00:	d001      	beq.n	8004c06 <__sflush_r+0xae>
 8004c02:	2b16      	cmp	r3, #22
 8004c04:	d101      	bne.n	8004c0a <__sflush_r+0xb2>
 8004c06:	602f      	str	r7, [r5, #0]
 8004c08:	e7b2      	b.n	8004b70 <__sflush_r+0x18>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c10:	81a3      	strh	r3, [r4, #12]
 8004c12:	e7ae      	b.n	8004b72 <__sflush_r+0x1a>
 8004c14:	690f      	ldr	r7, [r1, #16]
 8004c16:	2f00      	cmp	r7, #0
 8004c18:	d0aa      	beq.n	8004b70 <__sflush_r+0x18>
 8004c1a:	0793      	lsls	r3, r2, #30
 8004c1c:	bf18      	it	ne
 8004c1e:	2300      	movne	r3, #0
 8004c20:	680e      	ldr	r6, [r1, #0]
 8004c22:	bf08      	it	eq
 8004c24:	694b      	ldreq	r3, [r1, #20]
 8004c26:	1bf6      	subs	r6, r6, r7
 8004c28:	600f      	str	r7, [r1, #0]
 8004c2a:	608b      	str	r3, [r1, #8]
 8004c2c:	2e00      	cmp	r6, #0
 8004c2e:	dd9f      	ble.n	8004b70 <__sflush_r+0x18>
 8004c30:	4633      	mov	r3, r6
 8004c32:	463a      	mov	r2, r7
 8004c34:	4628      	mov	r0, r5
 8004c36:	6a21      	ldr	r1, [r4, #32]
 8004c38:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004c3c:	47e0      	blx	ip
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	dc06      	bgt.n	8004c50 <__sflush_r+0xf8>
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c4c:	81a3      	strh	r3, [r4, #12]
 8004c4e:	e790      	b.n	8004b72 <__sflush_r+0x1a>
 8004c50:	4407      	add	r7, r0
 8004c52:	1a36      	subs	r6, r6, r0
 8004c54:	e7ea      	b.n	8004c2c <__sflush_r+0xd4>
 8004c56:	bf00      	nop
 8004c58:	20400001 	.word	0x20400001

08004c5c <_fflush_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	690b      	ldr	r3, [r1, #16]
 8004c60:	4605      	mov	r5, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	b913      	cbnz	r3, 8004c6c <_fflush_r+0x10>
 8004c66:	2500      	movs	r5, #0
 8004c68:	4628      	mov	r0, r5
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	b118      	cbz	r0, 8004c76 <_fflush_r+0x1a>
 8004c6e:	6983      	ldr	r3, [r0, #24]
 8004c70:	b90b      	cbnz	r3, 8004c76 <_fflush_r+0x1a>
 8004c72:	f7ff fbd5 	bl	8004420 <__sinit>
 8004c76:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <_fflush_r+0x6c>)
 8004c78:	429c      	cmp	r4, r3
 8004c7a:	d11b      	bne.n	8004cb4 <_fflush_r+0x58>
 8004c7c:	686c      	ldr	r4, [r5, #4]
 8004c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0ef      	beq.n	8004c66 <_fflush_r+0xa>
 8004c86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c88:	07d0      	lsls	r0, r2, #31
 8004c8a:	d404      	bmi.n	8004c96 <_fflush_r+0x3a>
 8004c8c:	0599      	lsls	r1, r3, #22
 8004c8e:	d402      	bmi.n	8004c96 <_fflush_r+0x3a>
 8004c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c92:	f7ff fc88 	bl	80045a6 <__retarget_lock_acquire_recursive>
 8004c96:	4628      	mov	r0, r5
 8004c98:	4621      	mov	r1, r4
 8004c9a:	f7ff ff5d 	bl	8004b58 <__sflush_r>
 8004c9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	07da      	lsls	r2, r3, #31
 8004ca4:	d4e0      	bmi.n	8004c68 <_fflush_r+0xc>
 8004ca6:	89a3      	ldrh	r3, [r4, #12]
 8004ca8:	059b      	lsls	r3, r3, #22
 8004caa:	d4dd      	bmi.n	8004c68 <_fflush_r+0xc>
 8004cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cae:	f7ff fc7b 	bl	80045a8 <__retarget_lock_release_recursive>
 8004cb2:	e7d9      	b.n	8004c68 <_fflush_r+0xc>
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <_fflush_r+0x70>)
 8004cb6:	429c      	cmp	r4, r3
 8004cb8:	d101      	bne.n	8004cbe <_fflush_r+0x62>
 8004cba:	68ac      	ldr	r4, [r5, #8]
 8004cbc:	e7df      	b.n	8004c7e <_fflush_r+0x22>
 8004cbe:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <_fflush_r+0x74>)
 8004cc0:	429c      	cmp	r4, r3
 8004cc2:	bf08      	it	eq
 8004cc4:	68ec      	ldreq	r4, [r5, #12]
 8004cc6:	e7da      	b.n	8004c7e <_fflush_r+0x22>
 8004cc8:	08005854 	.word	0x08005854
 8004ccc:	08005874 	.word	0x08005874
 8004cd0:	08005834 	.word	0x08005834

08004cd4 <_lseek_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	4608      	mov	r0, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	2200      	movs	r2, #0
 8004cde:	4d05      	ldr	r5, [pc, #20]	; (8004cf4 <_lseek_r+0x20>)
 8004ce0:	602a      	str	r2, [r5, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f7fb fc52 	bl	800058c <_lseek>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d102      	bne.n	8004cf2 <_lseek_r+0x1e>
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	b103      	cbz	r3, 8004cf2 <_lseek_r+0x1e>
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
 8004cf4:	200021b0 	.word	0x200021b0

08004cf8 <__swhatbuf_r>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	460e      	mov	r6, r1
 8004cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d00:	4614      	mov	r4, r2
 8004d02:	2900      	cmp	r1, #0
 8004d04:	461d      	mov	r5, r3
 8004d06:	b096      	sub	sp, #88	; 0x58
 8004d08:	da08      	bge.n	8004d1c <__swhatbuf_r+0x24>
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d10:	602a      	str	r2, [r5, #0]
 8004d12:	061a      	lsls	r2, r3, #24
 8004d14:	d410      	bmi.n	8004d38 <__swhatbuf_r+0x40>
 8004d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d1a:	e00e      	b.n	8004d3a <__swhatbuf_r+0x42>
 8004d1c:	466a      	mov	r2, sp
 8004d1e:	f000 fba5 	bl	800546c <_fstat_r>
 8004d22:	2800      	cmp	r0, #0
 8004d24:	dbf1      	blt.n	8004d0a <__swhatbuf_r+0x12>
 8004d26:	9a01      	ldr	r2, [sp, #4]
 8004d28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d30:	425a      	negs	r2, r3
 8004d32:	415a      	adcs	r2, r3
 8004d34:	602a      	str	r2, [r5, #0]
 8004d36:	e7ee      	b.n	8004d16 <__swhatbuf_r+0x1e>
 8004d38:	2340      	movs	r3, #64	; 0x40
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	b016      	add	sp, #88	; 0x58
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d44 <__smakebuf_r>:
 8004d44:	898b      	ldrh	r3, [r1, #12]
 8004d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d48:	079d      	lsls	r5, r3, #30
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	d507      	bpl.n	8004d60 <__smakebuf_r+0x1c>
 8004d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	6123      	str	r3, [r4, #16]
 8004d58:	2301      	movs	r3, #1
 8004d5a:	6163      	str	r3, [r4, #20]
 8004d5c:	b002      	add	sp, #8
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	466a      	mov	r2, sp
 8004d62:	ab01      	add	r3, sp, #4
 8004d64:	f7ff ffc8 	bl	8004cf8 <__swhatbuf_r>
 8004d68:	9900      	ldr	r1, [sp, #0]
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f7ff fc63 	bl	8004638 <_malloc_r>
 8004d72:	b948      	cbnz	r0, 8004d88 <__smakebuf_r+0x44>
 8004d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d78:	059a      	lsls	r2, r3, #22
 8004d7a:	d4ef      	bmi.n	8004d5c <__smakebuf_r+0x18>
 8004d7c:	f023 0303 	bic.w	r3, r3, #3
 8004d80:	f043 0302 	orr.w	r3, r3, #2
 8004d84:	81a3      	strh	r3, [r4, #12]
 8004d86:	e7e3      	b.n	8004d50 <__smakebuf_r+0xc>
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <__smakebuf_r+0x7c>)
 8004d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	6020      	str	r0, [r4, #0]
 8004d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	9b00      	ldr	r3, [sp, #0]
 8004d98:	6120      	str	r0, [r4, #16]
 8004d9a:	6163      	str	r3, [r4, #20]
 8004d9c:	9b01      	ldr	r3, [sp, #4]
 8004d9e:	b15b      	cbz	r3, 8004db8 <__smakebuf_r+0x74>
 8004da0:	4630      	mov	r0, r6
 8004da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004da6:	f000 fb73 	bl	8005490 <_isatty_r>
 8004daa:	b128      	cbz	r0, 8004db8 <__smakebuf_r+0x74>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	89a0      	ldrh	r0, [r4, #12]
 8004dba:	4305      	orrs	r5, r0
 8004dbc:	81a5      	strh	r5, [r4, #12]
 8004dbe:	e7cd      	b.n	8004d5c <__smakebuf_r+0x18>
 8004dc0:	080043b9 	.word	0x080043b9

08004dc4 <__malloc_lock>:
 8004dc4:	4801      	ldr	r0, [pc, #4]	; (8004dcc <__malloc_lock+0x8>)
 8004dc6:	f7ff bbee 	b.w	80045a6 <__retarget_lock_acquire_recursive>
 8004dca:	bf00      	nop
 8004dcc:	200021a4 	.word	0x200021a4

08004dd0 <__malloc_unlock>:
 8004dd0:	4801      	ldr	r0, [pc, #4]	; (8004dd8 <__malloc_unlock+0x8>)
 8004dd2:	f7ff bbe9 	b.w	80045a8 <__retarget_lock_release_recursive>
 8004dd6:	bf00      	nop
 8004dd8:	200021a4 	.word	0x200021a4

08004ddc <_free_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4605      	mov	r5, r0
 8004de0:	2900      	cmp	r1, #0
 8004de2:	d040      	beq.n	8004e66 <_free_r+0x8a>
 8004de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de8:	1f0c      	subs	r4, r1, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bfb8      	it	lt
 8004dee:	18e4      	addlt	r4, r4, r3
 8004df0:	f7ff ffe8 	bl	8004dc4 <__malloc_lock>
 8004df4:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <_free_r+0x8c>)
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	b933      	cbnz	r3, 8004e08 <_free_r+0x2c>
 8004dfa:	6063      	str	r3, [r4, #4]
 8004dfc:	6014      	str	r4, [r2, #0]
 8004dfe:	4628      	mov	r0, r5
 8004e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e04:	f7ff bfe4 	b.w	8004dd0 <__malloc_unlock>
 8004e08:	42a3      	cmp	r3, r4
 8004e0a:	d908      	bls.n	8004e1e <_free_r+0x42>
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	1821      	adds	r1, r4, r0
 8004e10:	428b      	cmp	r3, r1
 8004e12:	bf01      	itttt	eq
 8004e14:	6819      	ldreq	r1, [r3, #0]
 8004e16:	685b      	ldreq	r3, [r3, #4]
 8004e18:	1809      	addeq	r1, r1, r0
 8004e1a:	6021      	streq	r1, [r4, #0]
 8004e1c:	e7ed      	b.n	8004dfa <_free_r+0x1e>
 8004e1e:	461a      	mov	r2, r3
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	b10b      	cbz	r3, 8004e28 <_free_r+0x4c>
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	d9fa      	bls.n	8004e1e <_free_r+0x42>
 8004e28:	6811      	ldr	r1, [r2, #0]
 8004e2a:	1850      	adds	r0, r2, r1
 8004e2c:	42a0      	cmp	r0, r4
 8004e2e:	d10b      	bne.n	8004e48 <_free_r+0x6c>
 8004e30:	6820      	ldr	r0, [r4, #0]
 8004e32:	4401      	add	r1, r0
 8004e34:	1850      	adds	r0, r2, r1
 8004e36:	4283      	cmp	r3, r0
 8004e38:	6011      	str	r1, [r2, #0]
 8004e3a:	d1e0      	bne.n	8004dfe <_free_r+0x22>
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	4401      	add	r1, r0
 8004e42:	6011      	str	r1, [r2, #0]
 8004e44:	6053      	str	r3, [r2, #4]
 8004e46:	e7da      	b.n	8004dfe <_free_r+0x22>
 8004e48:	d902      	bls.n	8004e50 <_free_r+0x74>
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	602b      	str	r3, [r5, #0]
 8004e4e:	e7d6      	b.n	8004dfe <_free_r+0x22>
 8004e50:	6820      	ldr	r0, [r4, #0]
 8004e52:	1821      	adds	r1, r4, r0
 8004e54:	428b      	cmp	r3, r1
 8004e56:	bf01      	itttt	eq
 8004e58:	6819      	ldreq	r1, [r3, #0]
 8004e5a:	685b      	ldreq	r3, [r3, #4]
 8004e5c:	1809      	addeq	r1, r1, r0
 8004e5e:	6021      	streq	r1, [r4, #0]
 8004e60:	6063      	str	r3, [r4, #4]
 8004e62:	6054      	str	r4, [r2, #4]
 8004e64:	e7cb      	b.n	8004dfe <_free_r+0x22>
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	200021a8 	.word	0x200021a8

08004e6c <__sfputc_r>:
 8004e6c:	6893      	ldr	r3, [r2, #8]
 8004e6e:	b410      	push	{r4}
 8004e70:	3b01      	subs	r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	6093      	str	r3, [r2, #8]
 8004e76:	da07      	bge.n	8004e88 <__sfputc_r+0x1c>
 8004e78:	6994      	ldr	r4, [r2, #24]
 8004e7a:	42a3      	cmp	r3, r4
 8004e7c:	db01      	blt.n	8004e82 <__sfputc_r+0x16>
 8004e7e:	290a      	cmp	r1, #10
 8004e80:	d102      	bne.n	8004e88 <__sfputc_r+0x1c>
 8004e82:	bc10      	pop	{r4}
 8004e84:	f7ff bd98 	b.w	80049b8 <__swbuf_r>
 8004e88:	6813      	ldr	r3, [r2, #0]
 8004e8a:	1c58      	adds	r0, r3, #1
 8004e8c:	6010      	str	r0, [r2, #0]
 8004e8e:	7019      	strb	r1, [r3, #0]
 8004e90:	4608      	mov	r0, r1
 8004e92:	bc10      	pop	{r4}
 8004e94:	4770      	bx	lr

08004e96 <__sfputs_r>:
 8004e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e98:	4606      	mov	r6, r0
 8004e9a:	460f      	mov	r7, r1
 8004e9c:	4614      	mov	r4, r2
 8004e9e:	18d5      	adds	r5, r2, r3
 8004ea0:	42ac      	cmp	r4, r5
 8004ea2:	d101      	bne.n	8004ea8 <__sfputs_r+0x12>
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	e007      	b.n	8004eb8 <__sfputs_r+0x22>
 8004ea8:	463a      	mov	r2, r7
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb0:	f7ff ffdc 	bl	8004e6c <__sfputc_r>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d1f3      	bne.n	8004ea0 <__sfputs_r+0xa>
 8004eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ebc <_vfiprintf_r>:
 8004ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec0:	460d      	mov	r5, r1
 8004ec2:	4614      	mov	r4, r2
 8004ec4:	4698      	mov	r8, r3
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	b09d      	sub	sp, #116	; 0x74
 8004eca:	b118      	cbz	r0, 8004ed4 <_vfiprintf_r+0x18>
 8004ecc:	6983      	ldr	r3, [r0, #24]
 8004ece:	b90b      	cbnz	r3, 8004ed4 <_vfiprintf_r+0x18>
 8004ed0:	f7ff faa6 	bl	8004420 <__sinit>
 8004ed4:	4b89      	ldr	r3, [pc, #548]	; (80050fc <_vfiprintf_r+0x240>)
 8004ed6:	429d      	cmp	r5, r3
 8004ed8:	d11b      	bne.n	8004f12 <_vfiprintf_r+0x56>
 8004eda:	6875      	ldr	r5, [r6, #4]
 8004edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ede:	07d9      	lsls	r1, r3, #31
 8004ee0:	d405      	bmi.n	8004eee <_vfiprintf_r+0x32>
 8004ee2:	89ab      	ldrh	r3, [r5, #12]
 8004ee4:	059a      	lsls	r2, r3, #22
 8004ee6:	d402      	bmi.n	8004eee <_vfiprintf_r+0x32>
 8004ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eea:	f7ff fb5c 	bl	80045a6 <__retarget_lock_acquire_recursive>
 8004eee:	89ab      	ldrh	r3, [r5, #12]
 8004ef0:	071b      	lsls	r3, r3, #28
 8004ef2:	d501      	bpl.n	8004ef8 <_vfiprintf_r+0x3c>
 8004ef4:	692b      	ldr	r3, [r5, #16]
 8004ef6:	b9eb      	cbnz	r3, 8004f34 <_vfiprintf_r+0x78>
 8004ef8:	4629      	mov	r1, r5
 8004efa:	4630      	mov	r0, r6
 8004efc:	f7ff fdae 	bl	8004a5c <__swsetup_r>
 8004f00:	b1c0      	cbz	r0, 8004f34 <_vfiprintf_r+0x78>
 8004f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f04:	07dc      	lsls	r4, r3, #31
 8004f06:	d50e      	bpl.n	8004f26 <_vfiprintf_r+0x6a>
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	b01d      	add	sp, #116	; 0x74
 8004f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f12:	4b7b      	ldr	r3, [pc, #492]	; (8005100 <_vfiprintf_r+0x244>)
 8004f14:	429d      	cmp	r5, r3
 8004f16:	d101      	bne.n	8004f1c <_vfiprintf_r+0x60>
 8004f18:	68b5      	ldr	r5, [r6, #8]
 8004f1a:	e7df      	b.n	8004edc <_vfiprintf_r+0x20>
 8004f1c:	4b79      	ldr	r3, [pc, #484]	; (8005104 <_vfiprintf_r+0x248>)
 8004f1e:	429d      	cmp	r5, r3
 8004f20:	bf08      	it	eq
 8004f22:	68f5      	ldreq	r5, [r6, #12]
 8004f24:	e7da      	b.n	8004edc <_vfiprintf_r+0x20>
 8004f26:	89ab      	ldrh	r3, [r5, #12]
 8004f28:	0598      	lsls	r0, r3, #22
 8004f2a:	d4ed      	bmi.n	8004f08 <_vfiprintf_r+0x4c>
 8004f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f2e:	f7ff fb3b 	bl	80045a8 <__retarget_lock_release_recursive>
 8004f32:	e7e9      	b.n	8004f08 <_vfiprintf_r+0x4c>
 8004f34:	2300      	movs	r3, #0
 8004f36:	9309      	str	r3, [sp, #36]	; 0x24
 8004f38:	2320      	movs	r3, #32
 8004f3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f3e:	2330      	movs	r3, #48	; 0x30
 8004f40:	f04f 0901 	mov.w	r9, #1
 8004f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f48:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005108 <_vfiprintf_r+0x24c>
 8004f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f50:	4623      	mov	r3, r4
 8004f52:	469a      	mov	sl, r3
 8004f54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f58:	b10a      	cbz	r2, 8004f5e <_vfiprintf_r+0xa2>
 8004f5a:	2a25      	cmp	r2, #37	; 0x25
 8004f5c:	d1f9      	bne.n	8004f52 <_vfiprintf_r+0x96>
 8004f5e:	ebba 0b04 	subs.w	fp, sl, r4
 8004f62:	d00b      	beq.n	8004f7c <_vfiprintf_r+0xc0>
 8004f64:	465b      	mov	r3, fp
 8004f66:	4622      	mov	r2, r4
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f7ff ff93 	bl	8004e96 <__sfputs_r>
 8004f70:	3001      	adds	r0, #1
 8004f72:	f000 80aa 	beq.w	80050ca <_vfiprintf_r+0x20e>
 8004f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f78:	445a      	add	r2, fp
 8004f7a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80a2 	beq.w	80050ca <_vfiprintf_r+0x20e>
 8004f86:	2300      	movs	r3, #0
 8004f88:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f90:	f10a 0a01 	add.w	sl, sl, #1
 8004f94:	9304      	str	r3, [sp, #16]
 8004f96:	9307      	str	r3, [sp, #28]
 8004f98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f9c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f9e:	4654      	mov	r4, sl
 8004fa0:	2205      	movs	r2, #5
 8004fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa6:	4858      	ldr	r0, [pc, #352]	; (8005108 <_vfiprintf_r+0x24c>)
 8004fa8:	f000 fa82 	bl	80054b0 <memchr>
 8004fac:	9a04      	ldr	r2, [sp, #16]
 8004fae:	b9d8      	cbnz	r0, 8004fe8 <_vfiprintf_r+0x12c>
 8004fb0:	06d1      	lsls	r1, r2, #27
 8004fb2:	bf44      	itt	mi
 8004fb4:	2320      	movmi	r3, #32
 8004fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fba:	0713      	lsls	r3, r2, #28
 8004fbc:	bf44      	itt	mi
 8004fbe:	232b      	movmi	r3, #43	; 0x2b
 8004fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8004fca:	d015      	beq.n	8004ff8 <_vfiprintf_r+0x13c>
 8004fcc:	4654      	mov	r4, sl
 8004fce:	2000      	movs	r0, #0
 8004fd0:	f04f 0c0a 	mov.w	ip, #10
 8004fd4:	9a07      	ldr	r2, [sp, #28]
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fdc:	3b30      	subs	r3, #48	; 0x30
 8004fde:	2b09      	cmp	r3, #9
 8004fe0:	d94e      	bls.n	8005080 <_vfiprintf_r+0x1c4>
 8004fe2:	b1b0      	cbz	r0, 8005012 <_vfiprintf_r+0x156>
 8004fe4:	9207      	str	r2, [sp, #28]
 8004fe6:	e014      	b.n	8005012 <_vfiprintf_r+0x156>
 8004fe8:	eba0 0308 	sub.w	r3, r0, r8
 8004fec:	fa09 f303 	lsl.w	r3, r9, r3
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	46a2      	mov	sl, r4
 8004ff4:	9304      	str	r3, [sp, #16]
 8004ff6:	e7d2      	b.n	8004f9e <_vfiprintf_r+0xe2>
 8004ff8:	9b03      	ldr	r3, [sp, #12]
 8004ffa:	1d19      	adds	r1, r3, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	9103      	str	r1, [sp, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	bfbb      	ittet	lt
 8005004:	425b      	neglt	r3, r3
 8005006:	f042 0202 	orrlt.w	r2, r2, #2
 800500a:	9307      	strge	r3, [sp, #28]
 800500c:	9307      	strlt	r3, [sp, #28]
 800500e:	bfb8      	it	lt
 8005010:	9204      	strlt	r2, [sp, #16]
 8005012:	7823      	ldrb	r3, [r4, #0]
 8005014:	2b2e      	cmp	r3, #46	; 0x2e
 8005016:	d10c      	bne.n	8005032 <_vfiprintf_r+0x176>
 8005018:	7863      	ldrb	r3, [r4, #1]
 800501a:	2b2a      	cmp	r3, #42	; 0x2a
 800501c:	d135      	bne.n	800508a <_vfiprintf_r+0x1ce>
 800501e:	9b03      	ldr	r3, [sp, #12]
 8005020:	3402      	adds	r4, #2
 8005022:	1d1a      	adds	r2, r3, #4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	9203      	str	r2, [sp, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	bfb8      	it	lt
 800502c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005030:	9305      	str	r3, [sp, #20]
 8005032:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800510c <_vfiprintf_r+0x250>
 8005036:	2203      	movs	r2, #3
 8005038:	4650      	mov	r0, sl
 800503a:	7821      	ldrb	r1, [r4, #0]
 800503c:	f000 fa38 	bl	80054b0 <memchr>
 8005040:	b140      	cbz	r0, 8005054 <_vfiprintf_r+0x198>
 8005042:	2340      	movs	r3, #64	; 0x40
 8005044:	eba0 000a 	sub.w	r0, r0, sl
 8005048:	fa03 f000 	lsl.w	r0, r3, r0
 800504c:	9b04      	ldr	r3, [sp, #16]
 800504e:	3401      	adds	r4, #1
 8005050:	4303      	orrs	r3, r0
 8005052:	9304      	str	r3, [sp, #16]
 8005054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005058:	2206      	movs	r2, #6
 800505a:	482d      	ldr	r0, [pc, #180]	; (8005110 <_vfiprintf_r+0x254>)
 800505c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005060:	f000 fa26 	bl	80054b0 <memchr>
 8005064:	2800      	cmp	r0, #0
 8005066:	d03f      	beq.n	80050e8 <_vfiprintf_r+0x22c>
 8005068:	4b2a      	ldr	r3, [pc, #168]	; (8005114 <_vfiprintf_r+0x258>)
 800506a:	bb1b      	cbnz	r3, 80050b4 <_vfiprintf_r+0x1f8>
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	3307      	adds	r3, #7
 8005070:	f023 0307 	bic.w	r3, r3, #7
 8005074:	3308      	adds	r3, #8
 8005076:	9303      	str	r3, [sp, #12]
 8005078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507a:	443b      	add	r3, r7
 800507c:	9309      	str	r3, [sp, #36]	; 0x24
 800507e:	e767      	b.n	8004f50 <_vfiprintf_r+0x94>
 8005080:	460c      	mov	r4, r1
 8005082:	2001      	movs	r0, #1
 8005084:	fb0c 3202 	mla	r2, ip, r2, r3
 8005088:	e7a5      	b.n	8004fd6 <_vfiprintf_r+0x11a>
 800508a:	2300      	movs	r3, #0
 800508c:	f04f 0c0a 	mov.w	ip, #10
 8005090:	4619      	mov	r1, r3
 8005092:	3401      	adds	r4, #1
 8005094:	9305      	str	r3, [sp, #20]
 8005096:	4620      	mov	r0, r4
 8005098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800509c:	3a30      	subs	r2, #48	; 0x30
 800509e:	2a09      	cmp	r2, #9
 80050a0:	d903      	bls.n	80050aa <_vfiprintf_r+0x1ee>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0c5      	beq.n	8005032 <_vfiprintf_r+0x176>
 80050a6:	9105      	str	r1, [sp, #20]
 80050a8:	e7c3      	b.n	8005032 <_vfiprintf_r+0x176>
 80050aa:	4604      	mov	r4, r0
 80050ac:	2301      	movs	r3, #1
 80050ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80050b2:	e7f0      	b.n	8005096 <_vfiprintf_r+0x1da>
 80050b4:	ab03      	add	r3, sp, #12
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	462a      	mov	r2, r5
 80050ba:	4630      	mov	r0, r6
 80050bc:	4b16      	ldr	r3, [pc, #88]	; (8005118 <_vfiprintf_r+0x25c>)
 80050be:	a904      	add	r1, sp, #16
 80050c0:	f3af 8000 	nop.w
 80050c4:	4607      	mov	r7, r0
 80050c6:	1c78      	adds	r0, r7, #1
 80050c8:	d1d6      	bne.n	8005078 <_vfiprintf_r+0x1bc>
 80050ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050cc:	07d9      	lsls	r1, r3, #31
 80050ce:	d405      	bmi.n	80050dc <_vfiprintf_r+0x220>
 80050d0:	89ab      	ldrh	r3, [r5, #12]
 80050d2:	059a      	lsls	r2, r3, #22
 80050d4:	d402      	bmi.n	80050dc <_vfiprintf_r+0x220>
 80050d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050d8:	f7ff fa66 	bl	80045a8 <__retarget_lock_release_recursive>
 80050dc:	89ab      	ldrh	r3, [r5, #12]
 80050de:	065b      	lsls	r3, r3, #25
 80050e0:	f53f af12 	bmi.w	8004f08 <_vfiprintf_r+0x4c>
 80050e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050e6:	e711      	b.n	8004f0c <_vfiprintf_r+0x50>
 80050e8:	ab03      	add	r3, sp, #12
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	462a      	mov	r2, r5
 80050ee:	4630      	mov	r0, r6
 80050f0:	4b09      	ldr	r3, [pc, #36]	; (8005118 <_vfiprintf_r+0x25c>)
 80050f2:	a904      	add	r1, sp, #16
 80050f4:	f000 f882 	bl	80051fc <_printf_i>
 80050f8:	e7e4      	b.n	80050c4 <_vfiprintf_r+0x208>
 80050fa:	bf00      	nop
 80050fc:	08005854 	.word	0x08005854
 8005100:	08005874 	.word	0x08005874
 8005104:	08005834 	.word	0x08005834
 8005108:	08005898 	.word	0x08005898
 800510c:	0800589e 	.word	0x0800589e
 8005110:	080058a2 	.word	0x080058a2
 8005114:	00000000 	.word	0x00000000
 8005118:	08004e97 	.word	0x08004e97

0800511c <_printf_common>:
 800511c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005120:	4616      	mov	r6, r2
 8005122:	4699      	mov	r9, r3
 8005124:	688a      	ldr	r2, [r1, #8]
 8005126:	690b      	ldr	r3, [r1, #16]
 8005128:	4607      	mov	r7, r0
 800512a:	4293      	cmp	r3, r2
 800512c:	bfb8      	it	lt
 800512e:	4613      	movlt	r3, r2
 8005130:	6033      	str	r3, [r6, #0]
 8005132:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005136:	460c      	mov	r4, r1
 8005138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800513c:	b10a      	cbz	r2, 8005142 <_printf_common+0x26>
 800513e:	3301      	adds	r3, #1
 8005140:	6033      	str	r3, [r6, #0]
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	0699      	lsls	r1, r3, #26
 8005146:	bf42      	ittt	mi
 8005148:	6833      	ldrmi	r3, [r6, #0]
 800514a:	3302      	addmi	r3, #2
 800514c:	6033      	strmi	r3, [r6, #0]
 800514e:	6825      	ldr	r5, [r4, #0]
 8005150:	f015 0506 	ands.w	r5, r5, #6
 8005154:	d106      	bne.n	8005164 <_printf_common+0x48>
 8005156:	f104 0a19 	add.w	sl, r4, #25
 800515a:	68e3      	ldr	r3, [r4, #12]
 800515c:	6832      	ldr	r2, [r6, #0]
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	42ab      	cmp	r3, r5
 8005162:	dc28      	bgt.n	80051b6 <_printf_common+0x9a>
 8005164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005168:	1e13      	subs	r3, r2, #0
 800516a:	6822      	ldr	r2, [r4, #0]
 800516c:	bf18      	it	ne
 800516e:	2301      	movne	r3, #1
 8005170:	0692      	lsls	r2, r2, #26
 8005172:	d42d      	bmi.n	80051d0 <_printf_common+0xb4>
 8005174:	4649      	mov	r1, r9
 8005176:	4638      	mov	r0, r7
 8005178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800517c:	47c0      	blx	r8
 800517e:	3001      	adds	r0, #1
 8005180:	d020      	beq.n	80051c4 <_printf_common+0xa8>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	68e5      	ldr	r5, [r4, #12]
 8005186:	f003 0306 	and.w	r3, r3, #6
 800518a:	2b04      	cmp	r3, #4
 800518c:	bf18      	it	ne
 800518e:	2500      	movne	r5, #0
 8005190:	6832      	ldr	r2, [r6, #0]
 8005192:	f04f 0600 	mov.w	r6, #0
 8005196:	68a3      	ldr	r3, [r4, #8]
 8005198:	bf08      	it	eq
 800519a:	1aad      	subeq	r5, r5, r2
 800519c:	6922      	ldr	r2, [r4, #16]
 800519e:	bf08      	it	eq
 80051a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a4:	4293      	cmp	r3, r2
 80051a6:	bfc4      	itt	gt
 80051a8:	1a9b      	subgt	r3, r3, r2
 80051aa:	18ed      	addgt	r5, r5, r3
 80051ac:	341a      	adds	r4, #26
 80051ae:	42b5      	cmp	r5, r6
 80051b0:	d11a      	bne.n	80051e8 <_printf_common+0xcc>
 80051b2:	2000      	movs	r0, #0
 80051b4:	e008      	b.n	80051c8 <_printf_common+0xac>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4652      	mov	r2, sl
 80051ba:	4649      	mov	r1, r9
 80051bc:	4638      	mov	r0, r7
 80051be:	47c0      	blx	r8
 80051c0:	3001      	adds	r0, #1
 80051c2:	d103      	bne.n	80051cc <_printf_common+0xb0>
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051cc:	3501      	adds	r5, #1
 80051ce:	e7c4      	b.n	800515a <_printf_common+0x3e>
 80051d0:	2030      	movs	r0, #48	; 0x30
 80051d2:	18e1      	adds	r1, r4, r3
 80051d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051de:	4422      	add	r2, r4
 80051e0:	3302      	adds	r3, #2
 80051e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051e6:	e7c5      	b.n	8005174 <_printf_common+0x58>
 80051e8:	2301      	movs	r3, #1
 80051ea:	4622      	mov	r2, r4
 80051ec:	4649      	mov	r1, r9
 80051ee:	4638      	mov	r0, r7
 80051f0:	47c0      	blx	r8
 80051f2:	3001      	adds	r0, #1
 80051f4:	d0e6      	beq.n	80051c4 <_printf_common+0xa8>
 80051f6:	3601      	adds	r6, #1
 80051f8:	e7d9      	b.n	80051ae <_printf_common+0x92>
	...

080051fc <_printf_i>:
 80051fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005200:	7e0f      	ldrb	r7, [r1, #24]
 8005202:	4691      	mov	r9, r2
 8005204:	2f78      	cmp	r7, #120	; 0x78
 8005206:	4680      	mov	r8, r0
 8005208:	460c      	mov	r4, r1
 800520a:	469a      	mov	sl, r3
 800520c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800520e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005212:	d807      	bhi.n	8005224 <_printf_i+0x28>
 8005214:	2f62      	cmp	r7, #98	; 0x62
 8005216:	d80a      	bhi.n	800522e <_printf_i+0x32>
 8005218:	2f00      	cmp	r7, #0
 800521a:	f000 80d9 	beq.w	80053d0 <_printf_i+0x1d4>
 800521e:	2f58      	cmp	r7, #88	; 0x58
 8005220:	f000 80a4 	beq.w	800536c <_printf_i+0x170>
 8005224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800522c:	e03a      	b.n	80052a4 <_printf_i+0xa8>
 800522e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005232:	2b15      	cmp	r3, #21
 8005234:	d8f6      	bhi.n	8005224 <_printf_i+0x28>
 8005236:	a101      	add	r1, pc, #4	; (adr r1, 800523c <_printf_i+0x40>)
 8005238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800523c:	08005295 	.word	0x08005295
 8005240:	080052a9 	.word	0x080052a9
 8005244:	08005225 	.word	0x08005225
 8005248:	08005225 	.word	0x08005225
 800524c:	08005225 	.word	0x08005225
 8005250:	08005225 	.word	0x08005225
 8005254:	080052a9 	.word	0x080052a9
 8005258:	08005225 	.word	0x08005225
 800525c:	08005225 	.word	0x08005225
 8005260:	08005225 	.word	0x08005225
 8005264:	08005225 	.word	0x08005225
 8005268:	080053b7 	.word	0x080053b7
 800526c:	080052d9 	.word	0x080052d9
 8005270:	08005399 	.word	0x08005399
 8005274:	08005225 	.word	0x08005225
 8005278:	08005225 	.word	0x08005225
 800527c:	080053d9 	.word	0x080053d9
 8005280:	08005225 	.word	0x08005225
 8005284:	080052d9 	.word	0x080052d9
 8005288:	08005225 	.word	0x08005225
 800528c:	08005225 	.word	0x08005225
 8005290:	080053a1 	.word	0x080053a1
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	1d1a      	adds	r2, r3, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	602a      	str	r2, [r5, #0]
 800529c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0a4      	b.n	80053f2 <_printf_i+0x1f6>
 80052a8:	6820      	ldr	r0, [r4, #0]
 80052aa:	6829      	ldr	r1, [r5, #0]
 80052ac:	0606      	lsls	r6, r0, #24
 80052ae:	f101 0304 	add.w	r3, r1, #4
 80052b2:	d50a      	bpl.n	80052ca <_printf_i+0xce>
 80052b4:	680e      	ldr	r6, [r1, #0]
 80052b6:	602b      	str	r3, [r5, #0]
 80052b8:	2e00      	cmp	r6, #0
 80052ba:	da03      	bge.n	80052c4 <_printf_i+0xc8>
 80052bc:	232d      	movs	r3, #45	; 0x2d
 80052be:	4276      	negs	r6, r6
 80052c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c4:	230a      	movs	r3, #10
 80052c6:	485e      	ldr	r0, [pc, #376]	; (8005440 <_printf_i+0x244>)
 80052c8:	e019      	b.n	80052fe <_printf_i+0x102>
 80052ca:	680e      	ldr	r6, [r1, #0]
 80052cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052d0:	602b      	str	r3, [r5, #0]
 80052d2:	bf18      	it	ne
 80052d4:	b236      	sxthne	r6, r6
 80052d6:	e7ef      	b.n	80052b8 <_printf_i+0xbc>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	6820      	ldr	r0, [r4, #0]
 80052dc:	1d19      	adds	r1, r3, #4
 80052de:	6029      	str	r1, [r5, #0]
 80052e0:	0601      	lsls	r1, r0, #24
 80052e2:	d501      	bpl.n	80052e8 <_printf_i+0xec>
 80052e4:	681e      	ldr	r6, [r3, #0]
 80052e6:	e002      	b.n	80052ee <_printf_i+0xf2>
 80052e8:	0646      	lsls	r6, r0, #25
 80052ea:	d5fb      	bpl.n	80052e4 <_printf_i+0xe8>
 80052ec:	881e      	ldrh	r6, [r3, #0]
 80052ee:	2f6f      	cmp	r7, #111	; 0x6f
 80052f0:	bf0c      	ite	eq
 80052f2:	2308      	moveq	r3, #8
 80052f4:	230a      	movne	r3, #10
 80052f6:	4852      	ldr	r0, [pc, #328]	; (8005440 <_printf_i+0x244>)
 80052f8:	2100      	movs	r1, #0
 80052fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052fe:	6865      	ldr	r5, [r4, #4]
 8005300:	2d00      	cmp	r5, #0
 8005302:	bfa8      	it	ge
 8005304:	6821      	ldrge	r1, [r4, #0]
 8005306:	60a5      	str	r5, [r4, #8]
 8005308:	bfa4      	itt	ge
 800530a:	f021 0104 	bicge.w	r1, r1, #4
 800530e:	6021      	strge	r1, [r4, #0]
 8005310:	b90e      	cbnz	r6, 8005316 <_printf_i+0x11a>
 8005312:	2d00      	cmp	r5, #0
 8005314:	d04d      	beq.n	80053b2 <_printf_i+0x1b6>
 8005316:	4615      	mov	r5, r2
 8005318:	fbb6 f1f3 	udiv	r1, r6, r3
 800531c:	fb03 6711 	mls	r7, r3, r1, r6
 8005320:	5dc7      	ldrb	r7, [r0, r7]
 8005322:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005326:	4637      	mov	r7, r6
 8005328:	42bb      	cmp	r3, r7
 800532a:	460e      	mov	r6, r1
 800532c:	d9f4      	bls.n	8005318 <_printf_i+0x11c>
 800532e:	2b08      	cmp	r3, #8
 8005330:	d10b      	bne.n	800534a <_printf_i+0x14e>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	07de      	lsls	r6, r3, #31
 8005336:	d508      	bpl.n	800534a <_printf_i+0x14e>
 8005338:	6923      	ldr	r3, [r4, #16]
 800533a:	6861      	ldr	r1, [r4, #4]
 800533c:	4299      	cmp	r1, r3
 800533e:	bfde      	ittt	le
 8005340:	2330      	movle	r3, #48	; 0x30
 8005342:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005346:	f105 35ff 	addle.w	r5, r5, #4294967295
 800534a:	1b52      	subs	r2, r2, r5
 800534c:	6122      	str	r2, [r4, #16]
 800534e:	464b      	mov	r3, r9
 8005350:	4621      	mov	r1, r4
 8005352:	4640      	mov	r0, r8
 8005354:	f8cd a000 	str.w	sl, [sp]
 8005358:	aa03      	add	r2, sp, #12
 800535a:	f7ff fedf 	bl	800511c <_printf_common>
 800535e:	3001      	adds	r0, #1
 8005360:	d14c      	bne.n	80053fc <_printf_i+0x200>
 8005362:	f04f 30ff 	mov.w	r0, #4294967295
 8005366:	b004      	add	sp, #16
 8005368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536c:	4834      	ldr	r0, [pc, #208]	; (8005440 <_printf_i+0x244>)
 800536e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005372:	6829      	ldr	r1, [r5, #0]
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	f851 6b04 	ldr.w	r6, [r1], #4
 800537a:	6029      	str	r1, [r5, #0]
 800537c:	061d      	lsls	r5, r3, #24
 800537e:	d514      	bpl.n	80053aa <_printf_i+0x1ae>
 8005380:	07df      	lsls	r7, r3, #31
 8005382:	bf44      	itt	mi
 8005384:	f043 0320 	orrmi.w	r3, r3, #32
 8005388:	6023      	strmi	r3, [r4, #0]
 800538a:	b91e      	cbnz	r6, 8005394 <_printf_i+0x198>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	f023 0320 	bic.w	r3, r3, #32
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	2310      	movs	r3, #16
 8005396:	e7af      	b.n	80052f8 <_printf_i+0xfc>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	f043 0320 	orr.w	r3, r3, #32
 800539e:	6023      	str	r3, [r4, #0]
 80053a0:	2378      	movs	r3, #120	; 0x78
 80053a2:	4828      	ldr	r0, [pc, #160]	; (8005444 <_printf_i+0x248>)
 80053a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053a8:	e7e3      	b.n	8005372 <_printf_i+0x176>
 80053aa:	0659      	lsls	r1, r3, #25
 80053ac:	bf48      	it	mi
 80053ae:	b2b6      	uxthmi	r6, r6
 80053b0:	e7e6      	b.n	8005380 <_printf_i+0x184>
 80053b2:	4615      	mov	r5, r2
 80053b4:	e7bb      	b.n	800532e <_printf_i+0x132>
 80053b6:	682b      	ldr	r3, [r5, #0]
 80053b8:	6826      	ldr	r6, [r4, #0]
 80053ba:	1d18      	adds	r0, r3, #4
 80053bc:	6961      	ldr	r1, [r4, #20]
 80053be:	6028      	str	r0, [r5, #0]
 80053c0:	0635      	lsls	r5, r6, #24
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	d501      	bpl.n	80053ca <_printf_i+0x1ce>
 80053c6:	6019      	str	r1, [r3, #0]
 80053c8:	e002      	b.n	80053d0 <_printf_i+0x1d4>
 80053ca:	0670      	lsls	r0, r6, #25
 80053cc:	d5fb      	bpl.n	80053c6 <_printf_i+0x1ca>
 80053ce:	8019      	strh	r1, [r3, #0]
 80053d0:	2300      	movs	r3, #0
 80053d2:	4615      	mov	r5, r2
 80053d4:	6123      	str	r3, [r4, #16]
 80053d6:	e7ba      	b.n	800534e <_printf_i+0x152>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	2100      	movs	r1, #0
 80053dc:	1d1a      	adds	r2, r3, #4
 80053de:	602a      	str	r2, [r5, #0]
 80053e0:	681d      	ldr	r5, [r3, #0]
 80053e2:	6862      	ldr	r2, [r4, #4]
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 f863 	bl	80054b0 <memchr>
 80053ea:	b108      	cbz	r0, 80053f0 <_printf_i+0x1f4>
 80053ec:	1b40      	subs	r0, r0, r5
 80053ee:	6060      	str	r0, [r4, #4]
 80053f0:	6863      	ldr	r3, [r4, #4]
 80053f2:	6123      	str	r3, [r4, #16]
 80053f4:	2300      	movs	r3, #0
 80053f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053fa:	e7a8      	b.n	800534e <_printf_i+0x152>
 80053fc:	462a      	mov	r2, r5
 80053fe:	4649      	mov	r1, r9
 8005400:	4640      	mov	r0, r8
 8005402:	6923      	ldr	r3, [r4, #16]
 8005404:	47d0      	blx	sl
 8005406:	3001      	adds	r0, #1
 8005408:	d0ab      	beq.n	8005362 <_printf_i+0x166>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	079b      	lsls	r3, r3, #30
 800540e:	d413      	bmi.n	8005438 <_printf_i+0x23c>
 8005410:	68e0      	ldr	r0, [r4, #12]
 8005412:	9b03      	ldr	r3, [sp, #12]
 8005414:	4298      	cmp	r0, r3
 8005416:	bfb8      	it	lt
 8005418:	4618      	movlt	r0, r3
 800541a:	e7a4      	b.n	8005366 <_printf_i+0x16a>
 800541c:	2301      	movs	r3, #1
 800541e:	4632      	mov	r2, r6
 8005420:	4649      	mov	r1, r9
 8005422:	4640      	mov	r0, r8
 8005424:	47d0      	blx	sl
 8005426:	3001      	adds	r0, #1
 8005428:	d09b      	beq.n	8005362 <_printf_i+0x166>
 800542a:	3501      	adds	r5, #1
 800542c:	68e3      	ldr	r3, [r4, #12]
 800542e:	9903      	ldr	r1, [sp, #12]
 8005430:	1a5b      	subs	r3, r3, r1
 8005432:	42ab      	cmp	r3, r5
 8005434:	dcf2      	bgt.n	800541c <_printf_i+0x220>
 8005436:	e7eb      	b.n	8005410 <_printf_i+0x214>
 8005438:	2500      	movs	r5, #0
 800543a:	f104 0619 	add.w	r6, r4, #25
 800543e:	e7f5      	b.n	800542c <_printf_i+0x230>
 8005440:	080058a9 	.word	0x080058a9
 8005444:	080058ba 	.word	0x080058ba

08005448 <_read_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	4611      	mov	r1, r2
 8005450:	2200      	movs	r2, #0
 8005452:	4d05      	ldr	r5, [pc, #20]	; (8005468 <_read_r+0x20>)
 8005454:	602a      	str	r2, [r5, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	f7fb f87e 	bl	8000558 <_read>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_read_r+0x1e>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b103      	cbz	r3, 8005466 <_read_r+0x1e>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	200021b0 	.word	0x200021b0

0800546c <_fstat_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	2300      	movs	r3, #0
 8005470:	4d06      	ldr	r5, [pc, #24]	; (800548c <_fstat_r+0x20>)
 8005472:	4604      	mov	r4, r0
 8005474:	4608      	mov	r0, r1
 8005476:	4611      	mov	r1, r2
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	f7fb f880 	bl	800057e <_fstat>
 800547e:	1c43      	adds	r3, r0, #1
 8005480:	d102      	bne.n	8005488 <_fstat_r+0x1c>
 8005482:	682b      	ldr	r3, [r5, #0]
 8005484:	b103      	cbz	r3, 8005488 <_fstat_r+0x1c>
 8005486:	6023      	str	r3, [r4, #0]
 8005488:	bd38      	pop	{r3, r4, r5, pc}
 800548a:	bf00      	nop
 800548c:	200021b0 	.word	0x200021b0

08005490 <_isatty_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	2300      	movs	r3, #0
 8005494:	4d05      	ldr	r5, [pc, #20]	; (80054ac <_isatty_r+0x1c>)
 8005496:	4604      	mov	r4, r0
 8005498:	4608      	mov	r0, r1
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	f7fb f874 	bl	8000588 <_isatty>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_isatty_r+0x1a>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_isatty_r+0x1a>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	200021b0 	.word	0x200021b0

080054b0 <memchr>:
 80054b0:	4603      	mov	r3, r0
 80054b2:	b510      	push	{r4, lr}
 80054b4:	b2c9      	uxtb	r1, r1
 80054b6:	4402      	add	r2, r0
 80054b8:	4293      	cmp	r3, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	d101      	bne.n	80054c2 <memchr+0x12>
 80054be:	2000      	movs	r0, #0
 80054c0:	e003      	b.n	80054ca <memchr+0x1a>
 80054c2:	7804      	ldrb	r4, [r0, #0]
 80054c4:	3301      	adds	r3, #1
 80054c6:	428c      	cmp	r4, r1
 80054c8:	d1f6      	bne.n	80054b8 <memchr+0x8>
 80054ca:	bd10      	pop	{r4, pc}

080054cc <_init>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	bf00      	nop
 80054d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d2:	bc08      	pop	{r3}
 80054d4:	469e      	mov	lr, r3
 80054d6:	4770      	bx	lr

080054d8 <_fini>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	bf00      	nop
 80054dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054de:	bc08      	pop	{r3}
 80054e0:	469e      	mov	lr, r3
 80054e2:	4770      	bx	lr
