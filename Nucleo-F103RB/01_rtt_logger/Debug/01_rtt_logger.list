
01_rtt_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006910  08006910  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006910  08006910  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006910  08006910  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad0  2000007c  08006994  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b4c  08006994  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016847  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003741  00000000  00000000  000368ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0003a030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005999  00000000  00000000  0003c728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018028  00000000  00000000  000420c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e2e  00000000  00000000  0005a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eff17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b14  00000000  00000000  000eff68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080064d8 	.word	0x080064d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080064d8 	.word	0x080064d8

08000150 <_write>:

// Called from syscalls in printf implementation,
// it will override weak implementation
#if OVERWRITE_PRINTF_WRITE
int _write(int file, char *ptr, int len)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
    return led_config._write(ptr, len);
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <_write+0x20>)
 800015e:	685b      	ldr	r3, [r3, #4]
 8000160:	6879      	ldr	r1, [r7, #4]
 8000162:	68b8      	ldr	r0, [r7, #8]
 8000164:	4798      	blx	r3
 8000166:	4603      	mov	r3, r0
}
 8000168:	4618      	mov	r0, r3
 800016a:	3710      	adds	r7, #16
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}
 8000170:	20000000 	.word	0x20000000

08000174 <log_get_level>:
    }
    return 1; 
}

log_level_t log_get_level(void)
{
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
    return led_config.current_log_level;
 8000178:	4b02      	ldr	r3, [pc, #8]	; (8000184 <log_get_level+0x10>)
 800017a:	781b      	ldrb	r3, [r3, #0]
}
 800017c:	4618      	mov	r0, r3
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000000 	.word	0x20000000

08000188 <log_init>:

uint8_t log_init(log_level_t log_level, int (*_write)(char *ptr, int len))
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	6039      	str	r1, [r7, #0]
 8000192:	71fb      	strb	r3, [r7, #7]
    assert_param(_write == NULL);
 8000194:	683b      	ldr	r3, [r7, #0]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d003      	beq.n	80001a2 <log_init+0x1a>
 800019a:	2137      	movs	r1, #55	; 0x37
 800019c:	4806      	ldr	r0, [pc, #24]	; (80001b8 <log_init+0x30>)
 800019e:	f000 fac4 	bl	800072a <assert_failed>
    led_config.current_log_level = log_level;
 80001a2:	4a06      	ldr	r2, [pc, #24]	; (80001bc <log_init+0x34>)
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	7013      	strb	r3, [r2, #0]
    led_config._write = _write;
 80001a8:	4a04      	ldr	r2, [pc, #16]	; (80001bc <log_init+0x34>)
 80001aa:	683b      	ldr	r3, [r7, #0]
 80001ac:	6053      	str	r3, [r2, #4]
    return 0;
 80001ae:	2300      	movs	r3, #0
};
 80001b0:	4618      	mov	r0, r3
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	080064f0 	.word	0x080064f0
 80001bc:	20000000 	.word	0x20000000

080001c0 <log_demo>:

void log_demo(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b08e      	sub	sp, #56	; 0x38
 80001c4:	af02      	add	r7, sp, #8
    const char *tag = "DEMO";
 80001c6:	4b4f      	ldr	r3, [pc, #316]	; (8000304 <log_demo+0x144>)
 80001c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    log_message_tag(LOG_LEVEL_ERROR, tag, "Error: Something went wrong!\r\n");
 80001ca:	f7ff ffd3 	bl	8000174 <log_get_level>
 80001ce:	4b4e      	ldr	r3, [pc, #312]	; (8000308 <log_demo+0x148>)
 80001d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80001d2:	4b4d      	ldr	r3, [pc, #308]	; (8000308 <log_demo+0x148>)
 80001d4:	627b      	str	r3, [r7, #36]	; 0x24
 80001d6:	4b4d      	ldr	r3, [pc, #308]	; (800030c <log_demo+0x14c>)
 80001d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80001da:	4b4d      	ldr	r3, [pc, #308]	; (8000310 <log_demo+0x150>)
 80001dc:	627b      	str	r3, [r7, #36]	; 0x24
 80001de:	bf00      	nop
 80001e0:	f000 fcc0 	bl	8000b64 <HAL_GetTick>
 80001e4:	4602      	mov	r2, r0
 80001e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	4613      	mov	r3, r2
 80001ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80001ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80001f0:	4848      	ldr	r0, [pc, #288]	; (8000314 <log_demo+0x154>)
 80001f2:	f005 fa89 	bl	8005708 <iprintf>
 80001f6:	4848      	ldr	r0, [pc, #288]	; (8000318 <log_demo+0x158>)
 80001f8:	f005 fb0c 	bl	8005814 <puts>
 80001fc:	4847      	ldr	r0, [pc, #284]	; (800031c <log_demo+0x15c>)
 80001fe:	f005 fa83 	bl	8005708 <iprintf>
    log_message_tag(LOG_LEVEL_WARNING, tag, "Warning: Something might be wrong...\r\n");
 8000202:	f7ff ffb7 	bl	8000174 <log_get_level>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d019      	beq.n	8000240 <log_demo+0x80>
 800020c:	4b3e      	ldr	r3, [pc, #248]	; (8000308 <log_demo+0x148>)
 800020e:	623b      	str	r3, [r7, #32]
 8000210:	4b3d      	ldr	r3, [pc, #244]	; (8000308 <log_demo+0x148>)
 8000212:	61fb      	str	r3, [r7, #28]
 8000214:	4b42      	ldr	r3, [pc, #264]	; (8000320 <log_demo+0x160>)
 8000216:	623b      	str	r3, [r7, #32]
 8000218:	4b42      	ldr	r3, [pc, #264]	; (8000324 <log_demo+0x164>)
 800021a:	61fb      	str	r3, [r7, #28]
 800021c:	bf00      	nop
 800021e:	f000 fca1 	bl	8000b64 <HAL_GetTick>
 8000222:	4602      	mov	r2, r0
 8000224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	4613      	mov	r3, r2
 800022a:	69fa      	ldr	r2, [r7, #28]
 800022c:	6a39      	ldr	r1, [r7, #32]
 800022e:	4839      	ldr	r0, [pc, #228]	; (8000314 <log_demo+0x154>)
 8000230:	f005 fa6a 	bl	8005708 <iprintf>
 8000234:	483c      	ldr	r0, [pc, #240]	; (8000328 <log_demo+0x168>)
 8000236:	f005 faed 	bl	8005814 <puts>
 800023a:	4838      	ldr	r0, [pc, #224]	; (800031c <log_demo+0x15c>)
 800023c:	f005 fa64 	bl	8005708 <iprintf>
    log_message_tag(LOG_LEVEL_INFO, tag, "Starting program...\r\n");
 8000240:	f7ff ff98 	bl	8000174 <log_get_level>
 8000244:	4603      	mov	r3, r0
 8000246:	2b01      	cmp	r3, #1
 8000248:	d919      	bls.n	800027e <log_demo+0xbe>
 800024a:	4b2f      	ldr	r3, [pc, #188]	; (8000308 <log_demo+0x148>)
 800024c:	61bb      	str	r3, [r7, #24]
 800024e:	4b2e      	ldr	r3, [pc, #184]	; (8000308 <log_demo+0x148>)
 8000250:	617b      	str	r3, [r7, #20]
 8000252:	4b36      	ldr	r3, [pc, #216]	; (800032c <log_demo+0x16c>)
 8000254:	61bb      	str	r3, [r7, #24]
 8000256:	4b36      	ldr	r3, [pc, #216]	; (8000330 <log_demo+0x170>)
 8000258:	617b      	str	r3, [r7, #20]
 800025a:	bf00      	nop
 800025c:	f000 fc82 	bl	8000b64 <HAL_GetTick>
 8000260:	4602      	mov	r2, r0
 8000262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	4613      	mov	r3, r2
 8000268:	697a      	ldr	r2, [r7, #20]
 800026a:	69b9      	ldr	r1, [r7, #24]
 800026c:	4829      	ldr	r0, [pc, #164]	; (8000314 <log_demo+0x154>)
 800026e:	f005 fa4b 	bl	8005708 <iprintf>
 8000272:	4830      	ldr	r0, [pc, #192]	; (8000334 <log_demo+0x174>)
 8000274:	f005 face 	bl	8005814 <puts>
 8000278:	4828      	ldr	r0, [pc, #160]	; (800031c <log_demo+0x15c>)
 800027a:	f005 fa45 	bl	8005708 <iprintf>
    log_message_tag(LOG_LEVEL_DEBUG, tag, "Debugging information...\r\n");
 800027e:	f7ff ff79 	bl	8000174 <log_get_level>
 8000282:	4603      	mov	r3, r0
 8000284:	2b02      	cmp	r3, #2
 8000286:	d919      	bls.n	80002bc <log_demo+0xfc>
 8000288:	4b1f      	ldr	r3, [pc, #124]	; (8000308 <log_demo+0x148>)
 800028a:	613b      	str	r3, [r7, #16]
 800028c:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <log_demo+0x148>)
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	4b29      	ldr	r3, [pc, #164]	; (8000338 <log_demo+0x178>)
 8000292:	613b      	str	r3, [r7, #16]
 8000294:	4b29      	ldr	r3, [pc, #164]	; (800033c <log_demo+0x17c>)
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	bf00      	nop
 800029a:	f000 fc63 	bl	8000b64 <HAL_GetTick>
 800029e:	4602      	mov	r2, r0
 80002a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002a2:	9300      	str	r3, [sp, #0]
 80002a4:	4613      	mov	r3, r2
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	6939      	ldr	r1, [r7, #16]
 80002aa:	481a      	ldr	r0, [pc, #104]	; (8000314 <log_demo+0x154>)
 80002ac:	f005 fa2c 	bl	8005708 <iprintf>
 80002b0:	4823      	ldr	r0, [pc, #140]	; (8000340 <log_demo+0x180>)
 80002b2:	f005 faaf 	bl	8005814 <puts>
 80002b6:	4819      	ldr	r0, [pc, #100]	; (800031c <log_demo+0x15c>)
 80002b8:	f005 fa26 	bl	8005708 <iprintf>
    log_message_tag(LOG_LEVEL_TRACE, tag, "Trace: acquiring some data!\r\n");
 80002bc:	f7ff ff5a 	bl	8000174 <log_get_level>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b03      	cmp	r3, #3
 80002c4:	d919      	bls.n	80002fa <log_demo+0x13a>
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <log_demo+0x148>)
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <log_demo+0x148>)
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <log_demo+0x184>)
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <log_demo+0x188>)
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	bf00      	nop
 80002d8:	f000 fc44 	bl	8000b64 <HAL_GetTick>
 80002dc:	4602      	mov	r2, r0
 80002de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	4613      	mov	r3, r2
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	480a      	ldr	r0, [pc, #40]	; (8000314 <log_demo+0x154>)
 80002ea:	f005 fa0d 	bl	8005708 <iprintf>
 80002ee:	4817      	ldr	r0, [pc, #92]	; (800034c <log_demo+0x18c>)
 80002f0:	f005 fa90 	bl	8005814 <puts>
 80002f4:	4809      	ldr	r0, [pc, #36]	; (800031c <log_demo+0x15c>)
 80002f6:	f005 fa07 	bl	8005708 <iprintf>
}
 80002fa:	bf00      	nop
 80002fc:	3730      	adds	r7, #48	; 0x30
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	08006500 	.word	0x08006500
 8000308:	08006508 	.word	0x08006508
 800030c:	0800650c 	.word	0x0800650c
 8000310:	08006514 	.word	0x08006514
 8000314:	08006518 	.word	0x08006518
 8000318:	08006528 	.word	0x08006528
 800031c:	08006548 	.word	0x08006548
 8000320:	08006550 	.word	0x08006550
 8000324:	08006558 	.word	0x08006558
 8000328:	0800655c 	.word	0x0800655c
 800032c:	08006584 	.word	0x08006584
 8000330:	0800658c 	.word	0x0800658c
 8000334:	08006590 	.word	0x08006590
 8000338:	080065a8 	.word	0x080065a8
 800033c:	080065b0 	.word	0x080065b0
 8000340:	080065b4 	.word	0x080065b4
 8000344:	080065d0 	.word	0x080065d0
 8000348:	080065d8 	.word	0x080065d8
 800034c:	080065dc 	.word	0x080065dc

08000350 <blink_led_non_blocking>:
uint8_t counter = 0;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void blink_led_non_blocking(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af02      	add	r7, sp, #8
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000356:	2120      	movs	r1, #32
 8000358:	4818      	ldr	r0, [pc, #96]	; (80003bc <blink_led_non_blocking+0x6c>)
 800035a:	f000 ffbb 	bl	80012d4 <HAL_GPIO_TogglePin>
    log_message(LOG_LEVEL_INFO, "Led2 toggle! -> [%d]\r\n", counter++);
 800035e:	f7ff ff09 	bl	8000174 <log_get_level>
 8000362:	4603      	mov	r3, r0
 8000364:	2b01      	cmp	r3, #1
 8000366:	d91f      	bls.n	80003a8 <blink_led_non_blocking+0x58>
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <blink_led_non_blocking+0x70>)
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <blink_led_non_blocking+0x70>)
 800036e:	603b      	str	r3, [r7, #0]
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <blink_led_non_blocking+0x74>)
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <blink_led_non_blocking+0x78>)
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	bf00      	nop
 800037a:	f000 fbf3 	bl	8000b64 <HAL_GetTick>
 800037e:	4603      	mov	r3, r0
 8000380:	4a0f      	ldr	r2, [pc, #60]	; (80003c0 <blink_led_non_blocking+0x70>)
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	6879      	ldr	r1, [r7, #4]
 8000388:	4810      	ldr	r0, [pc, #64]	; (80003cc <blink_led_non_blocking+0x7c>)
 800038a:	f005 f9bd 	bl	8005708 <iprintf>
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <blink_led_non_blocking+0x80>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	1c5a      	adds	r2, r3, #1
 8000394:	b2d1      	uxtb	r1, r2
 8000396:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <blink_led_non_blocking+0x80>)
 8000398:	7011      	strb	r1, [r2, #0]
 800039a:	4619      	mov	r1, r3
 800039c:	480d      	ldr	r0, [pc, #52]	; (80003d4 <blink_led_non_blocking+0x84>)
 800039e:	f005 f9b3 	bl	8005708 <iprintf>
 80003a2:	480d      	ldr	r0, [pc, #52]	; (80003d8 <blink_led_non_blocking+0x88>)
 80003a4:	f005 f9b0 	bl	8005708 <iprintf>
    log_demo();
 80003a8:	f7ff ff0a 	bl	80001c0 <log_demo>
//    SEGGER_SYSVIEW_PrintfHost("Sysview : Led2 toggle!");

    osDelay(1000);
 80003ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b0:	f002 fbea 	bl	8002b88 <osDelay>
}
 80003b4:	bf00      	nop
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40010800 	.word	0x40010800
 80003c0:	08006608 	.word	0x08006608
 80003c4:	0800660c 	.word	0x0800660c
 80003c8:	08006614 	.word	0x08006614
 80003cc:	08006618 	.word	0x08006618
 80003d0:	2000009c 	.word	0x2000009c
 80003d4:	08006628 	.word	0x08006628
 80003d8:	08006640 	.word	0x08006640

080003dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of defaultTask */
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <MX_FREERTOS_Init+0x18>)
 80003e2:	2100      	movs	r1, #0
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <MX_FREERTOS_Init+0x1c>)
 80003e6:	f002 fb25 	bl	8002a34 <osThreadNew>
 80003ea:	4603      	mov	r3, r0
 80003ec:	4a03      	ldr	r2, [pc, #12]	; (80003fc <MX_FREERTOS_Init+0x20>)
 80003ee:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	0800683c 	.word	0x0800683c
 80003f8:	08000401 	.word	0x08000401
 80003fc:	20000098 	.word	0x20000098

08000400 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	blink_led_non_blocking();
 8000408:	f7ff ffa2 	bl	8000350 <blink_led_non_blocking>
 800040c:	e7fc      	b.n	8000408 <StartDefaultTask+0x8>
	...

08000410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b088      	sub	sp, #32
 8000414:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000424:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <MX_GPIO_Init+0xcc>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a2c      	ldr	r2, [pc, #176]	; (80004dc <MX_GPIO_Init+0xcc>)
 800042a:	f043 0310 	orr.w	r3, r3, #16
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b2a      	ldr	r3, [pc, #168]	; (80004dc <MX_GPIO_Init+0xcc>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0310 	and.w	r3, r3, #16
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800043c:	4b27      	ldr	r3, [pc, #156]	; (80004dc <MX_GPIO_Init+0xcc>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a26      	ldr	r2, [pc, #152]	; (80004dc <MX_GPIO_Init+0xcc>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b24      	ldr	r3, [pc, #144]	; (80004dc <MX_GPIO_Init+0xcc>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0320 	and.w	r3, r3, #32
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b21      	ldr	r3, [pc, #132]	; (80004dc <MX_GPIO_Init+0xcc>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a20      	ldr	r2, [pc, #128]	; (80004dc <MX_GPIO_Init+0xcc>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <MX_GPIO_Init+0xcc>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <MX_GPIO_Init+0xcc>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a1a      	ldr	r2, [pc, #104]	; (80004dc <MX_GPIO_Init+0xcc>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b18      	ldr	r3, [pc, #96]	; (80004dc <MX_GPIO_Init+0xcc>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0308 	and.w	r3, r3, #8
 8000480:	603b      	str	r3, [r7, #0]
 8000482:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2160      	movs	r1, #96	; 0x60
 8000488:	4815      	ldr	r0, [pc, #84]	; (80004e0 <MX_GPIO_Init+0xd0>)
 800048a:	f000 fef1 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800048e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <MX_GPIO_Init+0xd4>)
 8000496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	4619      	mov	r1, r3
 80004a2:	4811      	ldr	r0, [pc, #68]	; (80004e8 <MX_GPIO_Init+0xd8>)
 80004a4:	f000 fc76 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 80004a8:	2360      	movs	r3, #96	; 0x60
 80004aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ac:	2301      	movs	r3, #1
 80004ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b4:	2302      	movs	r3, #2
 80004b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	4808      	ldr	r0, [pc, #32]	; (80004e0 <MX_GPIO_Init+0xd0>)
 80004c0:	f000 fc68 	bl	8000d94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2105      	movs	r1, #5
 80004c8:	2028      	movs	r0, #40	; 0x28
 80004ca:	f000 fc1f 	bl	8000d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004ce:	2028      	movs	r0, #40	; 0x28
 80004d0:	f000 fc48 	bl	8000d64 <HAL_NVIC_EnableIRQ>

}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010800 	.word	0x40010800
 80004e4:	10110000 	.word	0x10110000
 80004e8:	40011000 	.word	0x40011000

080004ec <print_startup_msg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_startup_msg(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08a      	sub	sp, #40	; 0x28
 80004f0:	af02      	add	r7, sp, #8
	log_message(LOG_LEVEL_INFO,"************************************\r\n");
 80004f2:	f7ff fe3f 	bl	8000174 <log_get_level>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d918      	bls.n	800052e <print_startup_msg+0x42>
 80004fc:	4b3c      	ldr	r3, [pc, #240]	; (80005f0 <print_startup_msg+0x104>)
 80004fe:	61fb      	str	r3, [r7, #28]
 8000500:	4b3b      	ldr	r3, [pc, #236]	; (80005f0 <print_startup_msg+0x104>)
 8000502:	61bb      	str	r3, [r7, #24]
 8000504:	4b3b      	ldr	r3, [pc, #236]	; (80005f4 <print_startup_msg+0x108>)
 8000506:	61fb      	str	r3, [r7, #28]
 8000508:	4b3b      	ldr	r3, [pc, #236]	; (80005f8 <print_startup_msg+0x10c>)
 800050a:	61bb      	str	r3, [r7, #24]
 800050c:	bf00      	nop
 800050e:	f000 fb29 	bl	8000b64 <HAL_GetTick>
 8000512:	4603      	mov	r3, r0
 8000514:	4a36      	ldr	r2, [pc, #216]	; (80005f0 <print_startup_msg+0x104>)
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	69ba      	ldr	r2, [r7, #24]
 800051a:	69f9      	ldr	r1, [r7, #28]
 800051c:	4837      	ldr	r0, [pc, #220]	; (80005fc <print_startup_msg+0x110>)
 800051e:	f005 f8f3 	bl	8005708 <iprintf>
 8000522:	4837      	ldr	r0, [pc, #220]	; (8000600 <print_startup_msg+0x114>)
 8000524:	f005 f976 	bl	8005814 <puts>
 8000528:	4836      	ldr	r0, [pc, #216]	; (8000604 <print_startup_msg+0x118>)
 800052a:	f005 f8ed 	bl	8005708 <iprintf>
	log_message(LOG_LEVEL_INFO,"***** %s - %s ****/\r\n", __DATE__, __TIME__);
 800052e:	f7ff fe21 	bl	8000174 <log_get_level>
 8000532:	4603      	mov	r3, r0
 8000534:	2b01      	cmp	r3, #1
 8000536:	d91a      	bls.n	800056e <print_startup_msg+0x82>
 8000538:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <print_startup_msg+0x104>)
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	4b2c      	ldr	r3, [pc, #176]	; (80005f0 <print_startup_msg+0x104>)
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <print_startup_msg+0x108>)
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <print_startup_msg+0x10c>)
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	bf00      	nop
 800054a:	f000 fb0b 	bl	8000b64 <HAL_GetTick>
 800054e:	4603      	mov	r3, r0
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <print_startup_msg+0x104>)
 8000552:	9200      	str	r2, [sp, #0]
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	6979      	ldr	r1, [r7, #20]
 8000558:	4828      	ldr	r0, [pc, #160]	; (80005fc <print_startup_msg+0x110>)
 800055a:	f005 f8d5 	bl	8005708 <iprintf>
 800055e:	4a2a      	ldr	r2, [pc, #168]	; (8000608 <print_startup_msg+0x11c>)
 8000560:	492a      	ldr	r1, [pc, #168]	; (800060c <print_startup_msg+0x120>)
 8000562:	482b      	ldr	r0, [pc, #172]	; (8000610 <print_startup_msg+0x124>)
 8000564:	f005 f8d0 	bl	8005708 <iprintf>
 8000568:	4826      	ldr	r0, [pc, #152]	; (8000604 <print_startup_msg+0x118>)
 800056a:	f005 f8cd 	bl	8005708 <iprintf>
	log_message(LOG_LEVEL_INFO,"***** Author : Bayron Cabrera ******\r\n");
 800056e:	f7ff fe01 	bl	8000174 <log_get_level>
 8000572:	4603      	mov	r3, r0
 8000574:	2b01      	cmp	r3, #1
 8000576:	d918      	bls.n	80005aa <print_startup_msg+0xbe>
 8000578:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <print_startup_msg+0x104>)
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <print_startup_msg+0x104>)
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <print_startup_msg+0x108>)
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <print_startup_msg+0x10c>)
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	bf00      	nop
 800058a:	f000 faeb 	bl	8000b64 <HAL_GetTick>
 800058e:	4603      	mov	r3, r0
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <print_startup_msg+0x104>)
 8000592:	9200      	str	r2, [sp, #0]
 8000594:	68ba      	ldr	r2, [r7, #8]
 8000596:	68f9      	ldr	r1, [r7, #12]
 8000598:	4818      	ldr	r0, [pc, #96]	; (80005fc <print_startup_msg+0x110>)
 800059a:	f005 f8b5 	bl	8005708 <iprintf>
 800059e:	481d      	ldr	r0, [pc, #116]	; (8000614 <print_startup_msg+0x128>)
 80005a0:	f005 f938 	bl	8005814 <puts>
 80005a4:	4817      	ldr	r0, [pc, #92]	; (8000604 <print_startup_msg+0x118>)
 80005a6:	f005 f8af 	bl	8005708 <iprintf>
	log_message(LOG_LEVEL_INFO,"************************************\r\n");
 80005aa:	f7ff fde3 	bl	8000174 <log_get_level>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d918      	bls.n	80005e6 <print_startup_msg+0xfa>
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <print_startup_msg+0x104>)
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <print_startup_msg+0x104>)
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <print_startup_msg+0x108>)
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <print_startup_msg+0x10c>)
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	bf00      	nop
 80005c6:	f000 facd 	bl	8000b64 <HAL_GetTick>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <print_startup_msg+0x104>)
 80005ce:	9200      	str	r2, [sp, #0]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	4809      	ldr	r0, [pc, #36]	; (80005fc <print_startup_msg+0x110>)
 80005d6:	f005 f897 	bl	8005708 <iprintf>
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <print_startup_msg+0x114>)
 80005dc:	f005 f91a 	bl	8005814 <puts>
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <print_startup_msg+0x118>)
 80005e2:	f005 f891 	bl	8005708 <iprintf>
}
 80005e6:	bf00      	nop
 80005e8:	3720      	adds	r7, #32
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	08006648 	.word	0x08006648
 80005f4:	0800664c 	.word	0x0800664c
 80005f8:	08006654 	.word	0x08006654
 80005fc:	08006658 	.word	0x08006658
 8000600:	08006668 	.word	0x08006668
 8000604:	08006690 	.word	0x08006690
 8000608:	08006698 	.word	0x08006698
 800060c:	080066a4 	.word	0x080066a4
 8000610:	080066b0 	.word	0x080066b0
 8000614:	080066c8 	.word	0x080066c8

08000618 <uart_write>:

int uart_write(char *ptr, int len)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	b29a      	uxth	r2, r3
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <uart_write+0x24>)
 800062e:	f001 fff1 	bl	8002614 <HAL_UART_Transmit>
  return len;
 8000632:	683b      	ldr	r3, [r7, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000ec 	.word	0x200000ec

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fa66 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f816 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f7ff fee0 	bl	8000410 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f9d2 	bl	80009f8 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  log_init(LOG_LEVEL_TRACE, &uart_write);
 8000654:	4907      	ldr	r1, [pc, #28]	; (8000674 <main+0x34>)
 8000656:	2004      	movs	r0, #4
 8000658:	f7ff fd96 	bl	8000188 <log_init>
  print_startup_msg();
 800065c:	f7ff ff46 	bl	80004ec <print_startup_msg>
  log_demo();
 8000660:	f7ff fdae 	bl	80001c0 <log_demo>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000664:	f002 f980 	bl	8002968 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000668:	f7ff feb8 	bl	80003dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800066c:	f002 f9ae 	bl	80029cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	e7fe      	b.n	8000670 <main+0x30>
 8000672:	bf00      	nop
 8000674:	08000619 	.word	0x08000619

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b090      	sub	sp, #64	; 0x40
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0318 	add.w	r3, r7, #24
 8000682:	2228      	movs	r2, #40	; 0x28
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 ffa1 	bl	80055ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069a:	2302      	movs	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	2310      	movs	r3, #16
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006aa:	2300      	movs	r3, #0
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006ae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0318 	add.w	r3, r7, #24
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fe55 	bl	8001368 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006c4:	f000 f82c 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f9ae 	bl	8001a44 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006ee:	f000 f817 	bl	8000720 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3740      	adds	r7, #64	; 0x40
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d101      	bne.n	8000712 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800070e:	f000 fa17 	bl	8000b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40012c00 	.word	0x40012c00

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>

0800072a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <HAL_MspInit+0x68>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <HAL_MspInit+0x68>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_MspInit+0x68>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_MspInit+0x68>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <HAL_MspInit+0x68>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x68>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	210f      	movs	r1, #15
 800077a:	f06f 0001 	mvn.w	r0, #1
 800077e:	f000 fac5 	bl	8000d0c <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_MspInit+0x6c>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_MspInit+0x6c>)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010000 	.word	0x40010000

080007b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <HAL_InitTick+0xd0>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <HAL_InitTick+0xd0>)
 80007cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <HAL_InitTick+0xd0>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007de:	f107 020c 	add.w	r2, r7, #12
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fb4b 	bl	8001e84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007ee:	f001 fb35 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 80007f2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f6:	4a23      	ldr	r2, [pc, #140]	; (8000884 <HAL_InitTick+0xd4>)
 80007f8:	fba2 2303 	umull	r2, r3, r2, r3
 80007fc:	0c9b      	lsrs	r3, r3, #18
 80007fe:	3b01      	subs	r3, #1
 8000800:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <HAL_InitTick+0xd8>)
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <HAL_InitTick+0xdc>)
 8000806:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <HAL_InitTick+0xd8>)
 800080a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800080e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000810:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <HAL_InitTick+0xd8>)
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <HAL_InitTick+0xd8>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <HAL_InitTick+0xd8>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_InitTick+0xd8>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000828:	4817      	ldr	r0, [pc, #92]	; (8000888 <HAL_InitTick+0xd8>)
 800082a:	f001 fb8b 	bl	8001f44 <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000834:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000838:	2b00      	cmp	r3, #0
 800083a:	d11b      	bne.n	8000874 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800083c:	4812      	ldr	r0, [pc, #72]	; (8000888 <HAL_InitTick+0xd8>)
 800083e:	f001 fc35 	bl	80020ac <HAL_TIM_Base_Start_IT>
 8000842:	4603      	mov	r3, r0
 8000844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800084c:	2b00      	cmp	r3, #0
 800084e:	d111      	bne.n	8000874 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000850:	2019      	movs	r0, #25
 8000852:	f000 fa87 	bl	8000d64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d808      	bhi.n	800086e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	2019      	movs	r0, #25
 8000862:	f000 fa53 	bl	8000d0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <HAL_InitTick+0xe0>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	e002      	b.n	8000874 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000878:	4618      	mov	r0, r3
 800087a:	3730      	adds	r7, #48	; 0x30
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000
 8000884:	431bde83 	.word	0x431bde83
 8000888:	200000a0 	.word	0x200000a0
 800088c:	40012c00 	.word	0x40012c00
 8000890:	2000000c 	.word	0x2000000c

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
	...

080008c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM1_UP_IRQHandler+0x10>)
 80008c6:	f001 fc5d 	bl	8002184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000a0 	.word	0x200000a0

080008d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008dc:	f000 fd22 	bl	8001324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e00a      	b.n	800090c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008f6:	f3af 8000 	nop.w
 80008fa:	4601      	mov	r1, r0
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	60ba      	str	r2, [r7, #8]
 8000902:	b2ca      	uxtb	r2, r1
 8000904:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf0      	blt.n	80008f6 <_read+0x12>
  }

  return len;
 8000914:	687b      	ldr	r3, [r7, #4]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_close>:
  }
  return len;
}

int _close(int file)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000944:	605a      	str	r2, [r3, #4]
  return 0;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <_isatty>:

int _isatty(int file)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr

08000966 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
	...

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f004 fcdc 	bl	800536c <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20005000 	.word	0x20005000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	200000e8 	.word	0x200000e8
 80009e8:	20001b50 	.word	0x20001b50

080009ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_USART2_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f001 fd48 	bl	80024c4 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f7ff fe71 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000ec 	.word	0x200000ec
 8000a48:	40004400 	.word	0x40004400

08000a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <HAL_UART_MspInit+0x70>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d123      	bne.n	8000ab4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_UART_MspInit+0x74>)
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <HAL_UART_MspInit+0x74>)
 8000a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a76:	61d3      	str	r3, [r2, #28]
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_UART_MspInit+0x74>)
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_UART_MspInit+0x74>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <HAL_UART_MspInit+0x74>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_UART_MspInit+0x74>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_UART_MspInit+0x78>)
 8000ab0:	f000 f970 	bl	8000d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3720      	adds	r7, #32
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aca:	490d      	ldr	r1, [pc, #52]	; (8000b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	; (8000b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aee:	f7ff ff7d 	bl	80009ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f004 fd37 	bl	8005564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff fda3 	bl	8000640 <main>
  bx lr
 8000afa:	4770      	bx	lr
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000b04:	08006918 	.word	0x08006918
  ldr r2, =_sbss
 8000b08:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000b0c:	20001b4c 	.word	0x20001b4c

08000b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_2_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x28>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f8d1 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f7ff fe40 	bl	80007b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fe06 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <HAL_IncTick+0x20>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000010 	.word	0x20000010
 8000b60:	20000130 	.word	0x20000130

08000b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	20000130 	.word	0x20000130

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4906      	ldr	r1, [pc, #24]	; (8000c10 <__NVIC_EnableIRQ+0x34>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b07      	cmp	r3, #7
 8000cd8:	d00f      	beq.n	8000cfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b06      	cmp	r3, #6
 8000cde:	d00c      	beq.n	8000cfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b05      	cmp	r3, #5
 8000ce4:	d009      	beq.n	8000cfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d006      	beq.n	8000cfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d003      	beq.n	8000cfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cf2:	2192      	movs	r1, #146	; 0x92
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000cf6:	f7ff fd18 	bl	800072a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ff3c 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	080066f0 	.word	0x080066f0

08000d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d903      	bls.n	8000d2c <HAL_NVIC_SetPriority+0x20>
 8000d24:	21aa      	movs	r1, #170	; 0xaa
 8000d26:	480e      	ldr	r0, [pc, #56]	; (8000d60 <HAL_NVIC_SetPriority+0x54>)
 8000d28:	f7ff fcff 	bl	800072a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	d903      	bls.n	8000d3a <HAL_NVIC_SetPriority+0x2e>
 8000d32:	21ab      	movs	r1, #171	; 0xab
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <HAL_NVIC_SetPriority+0x54>)
 8000d36:	f7ff fcf8 	bl	800072a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3a:	f7ff ff41 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	6978      	ldr	r0, [r7, #20]
 8000d46:	f7ff ff8f 	bl	8000c68 <NVIC_EncodePriority>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff5e 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	080066f0 	.word	0x080066f0

08000d64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da03      	bge.n	8000d7e <HAL_NVIC_EnableIRQ+0x1a>
 8000d76:	21be      	movs	r1, #190	; 0xbe
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_NVIC_EnableIRQ+0x2c>)
 8000d7a:	f7ff fcd6 	bl	800072a <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff2a 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	080066f0 	.word	0x080066f0

08000d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a96      	ldr	r2, [pc, #600]	; (8001004 <HAL_GPIO_Init+0x270>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0x42>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a95      	ldr	r2, [pc, #596]	; (8001008 <HAL_GPIO_Init+0x274>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d00f      	beq.n	8000dd6 <HAL_GPIO_Init+0x42>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a94      	ldr	r2, [pc, #592]	; (800100c <HAL_GPIO_Init+0x278>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00b      	beq.n	8000dd6 <HAL_GPIO_Init+0x42>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a93      	ldr	r2, [pc, #588]	; (8001010 <HAL_GPIO_Init+0x27c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d007      	beq.n	8000dd6 <HAL_GPIO_Init+0x42>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a92      	ldr	r2, [pc, #584]	; (8001014 <HAL_GPIO_Init+0x280>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x42>
 8000dce:	21bd      	movs	r1, #189	; 0xbd
 8000dd0:	4891      	ldr	r0, [pc, #580]	; (8001018 <HAL_GPIO_Init+0x284>)
 8000dd2:	f7ff fcaa 	bl	800072a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d005      	beq.n	8000dec <HAL_GPIO_Init+0x58>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	0c1b      	lsrs	r3, r3, #16
 8000de6:	041b      	lsls	r3, r3, #16
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x60>
 8000dec:	21be      	movs	r1, #190	; 0xbe
 8000dee:	488a      	ldr	r0, [pc, #552]	; (8001018 <HAL_GPIO_Init+0x284>)
 8000df0:	f7ff fc9b 	bl	800072a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 821c 	beq.w	8001236 <HAL_GPIO_Init+0x4a2>
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	f000 8217 	beq.w	8001236 <HAL_GPIO_Init+0x4a2>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b11      	cmp	r3, #17
 8000e0e:	f000 8212 	beq.w	8001236 <HAL_GPIO_Init+0x4a2>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	f000 820d 	beq.w	8001236 <HAL_GPIO_Init+0x4a2>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b12      	cmp	r3, #18
 8000e22:	f000 8208 	beq.w	8001236 <HAL_GPIO_Init+0x4a2>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4a7c      	ldr	r2, [pc, #496]	; (800101c <HAL_GPIO_Init+0x288>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	f000 8202 	beq.w	8001236 <HAL_GPIO_Init+0x4a2>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4a7a      	ldr	r2, [pc, #488]	; (8001020 <HAL_GPIO_Init+0x28c>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	f000 81fc 	beq.w	8001236 <HAL_GPIO_Init+0x4a2>
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	4a78      	ldr	r2, [pc, #480]	; (8001024 <HAL_GPIO_Init+0x290>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	f000 81f6 	beq.w	8001236 <HAL_GPIO_Init+0x4a2>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4a76      	ldr	r2, [pc, #472]	; (8001028 <HAL_GPIO_Init+0x294>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	f000 81f0 	beq.w	8001236 <HAL_GPIO_Init+0x4a2>
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	4a74      	ldr	r2, [pc, #464]	; (800102c <HAL_GPIO_Init+0x298>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	f000 81ea 	beq.w	8001236 <HAL_GPIO_Init+0x4a2>
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	4a72      	ldr	r2, [pc, #456]	; (8001030 <HAL_GPIO_Init+0x29c>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	f000 81e4 	beq.w	8001236 <HAL_GPIO_Init+0x4a2>
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	f000 81df 	beq.w	8001236 <HAL_GPIO_Init+0x4a2>
 8000e78:	21bf      	movs	r1, #191	; 0xbf
 8000e7a:	4867      	ldr	r0, [pc, #412]	; (8001018 <HAL_GPIO_Init+0x284>)
 8000e7c:	f7ff fc55 	bl	800072a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e80:	e1d9      	b.n	8001236 <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e82:	2201      	movs	r2, #1
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	69fa      	ldr	r2, [r7, #28]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f040 81c8 	bne.w	8001230 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a58      	ldr	r2, [pc, #352]	; (8001004 <HAL_GPIO_Init+0x270>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d013      	beq.n	8000ed0 <HAL_GPIO_Init+0x13c>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a57      	ldr	r2, [pc, #348]	; (8001008 <HAL_GPIO_Init+0x274>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d00f      	beq.n	8000ed0 <HAL_GPIO_Init+0x13c>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a56      	ldr	r2, [pc, #344]	; (800100c <HAL_GPIO_Init+0x278>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d00b      	beq.n	8000ed0 <HAL_GPIO_Init+0x13c>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a55      	ldr	r2, [pc, #340]	; (8001010 <HAL_GPIO_Init+0x27c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d007      	beq.n	8000ed0 <HAL_GPIO_Init+0x13c>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a54      	ldr	r2, [pc, #336]	; (8001014 <HAL_GPIO_Init+0x280>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x13c>
 8000ec8:	21cd      	movs	r1, #205	; 0xcd
 8000eca:	4853      	ldr	r0, [pc, #332]	; (8001018 <HAL_GPIO_Init+0x284>)
 8000ecc:	f7ff fc2d 	bl	800072a <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4a56      	ldr	r2, [pc, #344]	; (8001030 <HAL_GPIO_Init+0x29c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f000 80c1 	beq.w	800105e <HAL_GPIO_Init+0x2ca>
 8000edc:	4a54      	ldr	r2, [pc, #336]	; (8001030 <HAL_GPIO_Init+0x29c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	f200 80e7 	bhi.w	80010b2 <HAL_GPIO_Init+0x31e>
 8000ee4:	4a4f      	ldr	r2, [pc, #316]	; (8001024 <HAL_GPIO_Init+0x290>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	f000 80b9 	beq.w	800105e <HAL_GPIO_Init+0x2ca>
 8000eec:	4a4d      	ldr	r2, [pc, #308]	; (8001024 <HAL_GPIO_Init+0x290>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	f200 80df 	bhi.w	80010b2 <HAL_GPIO_Init+0x31e>
 8000ef4:	4a4d      	ldr	r2, [pc, #308]	; (800102c <HAL_GPIO_Init+0x298>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	f000 80b1 	beq.w	800105e <HAL_GPIO_Init+0x2ca>
 8000efc:	4a4b      	ldr	r2, [pc, #300]	; (800102c <HAL_GPIO_Init+0x298>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	f200 80d7 	bhi.w	80010b2 <HAL_GPIO_Init+0x31e>
 8000f04:	4a46      	ldr	r2, [pc, #280]	; (8001020 <HAL_GPIO_Init+0x28c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	f000 80a9 	beq.w	800105e <HAL_GPIO_Init+0x2ca>
 8000f0c:	4a44      	ldr	r2, [pc, #272]	; (8001020 <HAL_GPIO_Init+0x28c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	f200 80cf 	bhi.w	80010b2 <HAL_GPIO_Init+0x31e>
 8000f14:	4a44      	ldr	r2, [pc, #272]	; (8001028 <HAL_GPIO_Init+0x294>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	f000 80a1 	beq.w	800105e <HAL_GPIO_Init+0x2ca>
 8000f1c:	4a42      	ldr	r2, [pc, #264]	; (8001028 <HAL_GPIO_Init+0x294>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	f200 80c7 	bhi.w	80010b2 <HAL_GPIO_Init+0x31e>
 8000f24:	2b12      	cmp	r3, #18
 8000f26:	d82b      	bhi.n	8000f80 <HAL_GPIO_Init+0x1ec>
 8000f28:	2b12      	cmp	r3, #18
 8000f2a:	f200 80c2 	bhi.w	80010b2 <HAL_GPIO_Init+0x31e>
 8000f2e:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <HAL_GPIO_Init+0x1a0>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	0800105f 	.word	0x0800105f
 8000f38:	08000f89 	.word	0x08000f89
 8000f3c:	08000fdb 	.word	0x08000fdb
 8000f40:	080010ad 	.word	0x080010ad
 8000f44:	080010b3 	.word	0x080010b3
 8000f48:	080010b3 	.word	0x080010b3
 8000f4c:	080010b3 	.word	0x080010b3
 8000f50:	080010b3 	.word	0x080010b3
 8000f54:	080010b3 	.word	0x080010b3
 8000f58:	080010b3 	.word	0x080010b3
 8000f5c:	080010b3 	.word	0x080010b3
 8000f60:	080010b3 	.word	0x080010b3
 8000f64:	080010b3 	.word	0x080010b3
 8000f68:	080010b3 	.word	0x080010b3
 8000f6c:	080010b3 	.word	0x080010b3
 8000f70:	080010b3 	.word	0x080010b3
 8000f74:	080010b3 	.word	0x080010b3
 8000f78:	08000fb1 	.word	0x08000fb1
 8000f7c:	08001035 	.word	0x08001035
 8000f80:	4a26      	ldr	r2, [pc, #152]	; (800101c <HAL_GPIO_Init+0x288>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d06b      	beq.n	800105e <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f86:	e094      	b.n	80010b2 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d00b      	beq.n	8000fa8 <HAL_GPIO_Init+0x214>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d007      	beq.n	8000fa8 <HAL_GPIO_Init+0x214>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x214>
 8000fa0:	21d5      	movs	r1, #213	; 0xd5
 8000fa2:	481d      	ldr	r0, [pc, #116]	; (8001018 <HAL_GPIO_Init+0x284>)
 8000fa4:	f7ff fbc1 	bl	800072a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	623b      	str	r3, [r7, #32]
          break;
 8000fae:	e081      	b.n	80010b4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d00b      	beq.n	8000fd0 <HAL_GPIO_Init+0x23c>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0x23c>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x23c>
 8000fc8:	21dc      	movs	r1, #220	; 0xdc
 8000fca:	4813      	ldr	r0, [pc, #76]	; (8001018 <HAL_GPIO_Init+0x284>)
 8000fcc:	f7ff fbad 	bl	800072a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e06c      	b.n	80010b4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d00b      	beq.n	8000ffa <HAL_GPIO_Init+0x266>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x266>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x266>
 8000ff2:	21e3      	movs	r1, #227	; 0xe3
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <HAL_GPIO_Init+0x284>)
 8000ff6:	f7ff fb98 	bl	800072a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	3308      	adds	r3, #8
 8001000:	623b      	str	r3, [r7, #32]
          break;
 8001002:	e057      	b.n	80010b4 <HAL_GPIO_Init+0x320>
 8001004:	40010800 	.word	0x40010800
 8001008:	40010c00 	.word	0x40010c00
 800100c:	40011000 	.word	0x40011000
 8001010:	40011400 	.word	0x40011400
 8001014:	40011800 	.word	0x40011800
 8001018:	0800672c 	.word	0x0800672c
 800101c:	10110000 	.word	0x10110000
 8001020:	10210000 	.word	0x10210000
 8001024:	10310000 	.word	0x10310000
 8001028:	10120000 	.word	0x10120000
 800102c:	10220000 	.word	0x10220000
 8001030:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d00b      	beq.n	8001054 <HAL_GPIO_Init+0x2c0>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_Init+0x2c0>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x2c0>
 800104c:	21ea      	movs	r1, #234	; 0xea
 800104e:	4880      	ldr	r0, [pc, #512]	; (8001250 <HAL_GPIO_Init+0x4bc>)
 8001050:	f7ff fb6b 	bl	800072a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	330c      	adds	r3, #12
 800105a:	623b      	str	r3, [r7, #32]
          break;
 800105c:	e02a      	b.n	80010b4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00b      	beq.n	800107e <HAL_GPIO_Init+0x2ea>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x2ea>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2ea>
 8001076:	21f7      	movs	r1, #247	; 0xf7
 8001078:	4875      	ldr	r0, [pc, #468]	; (8001250 <HAL_GPIO_Init+0x4bc>)
 800107a:	f7ff fb56 	bl	800072a <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001086:	2304      	movs	r3, #4
 8001088:	623b      	str	r3, [r7, #32]
          break;
 800108a:	e013      	b.n	80010b4 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d105      	bne.n	80010a0 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001094:	2308      	movs	r3, #8
 8001096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	611a      	str	r2, [r3, #16]
          break;
 800109e:	e009      	b.n	80010b4 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a0:	2308      	movs	r3, #8
 80010a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	615a      	str	r2, [r3, #20]
          break;
 80010aa:	e003      	b.n	80010b4 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
          break;
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x320>
          break;
 80010b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2bff      	cmp	r3, #255	; 0xff
 80010b8:	d801      	bhi.n	80010be <HAL_GPIO_Init+0x32a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	e001      	b.n	80010c2 <HAL_GPIO_Init+0x32e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3304      	adds	r3, #4
 80010c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2bff      	cmp	r3, #255	; 0xff
 80010c8:	d802      	bhi.n	80010d0 <HAL_GPIO_Init+0x33c>
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	e002      	b.n	80010d6 <HAL_GPIO_Init+0x342>
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	3b08      	subs	r3, #8
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	210f      	movs	r1, #15
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	6a39      	ldr	r1, [r7, #32]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	431a      	orrs	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8096 	beq.w	8001230 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001104:	4b53      	ldr	r3, [pc, #332]	; (8001254 <HAL_GPIO_Init+0x4c0>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a52      	ldr	r2, [pc, #328]	; (8001254 <HAL_GPIO_Init+0x4c0>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b50      	ldr	r3, [pc, #320]	; (8001254 <HAL_GPIO_Init+0x4c0>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800111c:	4a4e      	ldr	r2, [pc, #312]	; (8001258 <HAL_GPIO_Init+0x4c4>)
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a46      	ldr	r2, [pc, #280]	; (800125c <HAL_GPIO_Init+0x4c8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d013      	beq.n	8001170 <HAL_GPIO_Init+0x3dc>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a45      	ldr	r2, [pc, #276]	; (8001260 <HAL_GPIO_Init+0x4cc>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d00d      	beq.n	800116c <HAL_GPIO_Init+0x3d8>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a44      	ldr	r2, [pc, #272]	; (8001264 <HAL_GPIO_Init+0x4d0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d007      	beq.n	8001168 <HAL_GPIO_Init+0x3d4>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a43      	ldr	r2, [pc, #268]	; (8001268 <HAL_GPIO_Init+0x4d4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d101      	bne.n	8001164 <HAL_GPIO_Init+0x3d0>
 8001160:	2303      	movs	r3, #3
 8001162:	e006      	b.n	8001172 <HAL_GPIO_Init+0x3de>
 8001164:	2304      	movs	r3, #4
 8001166:	e004      	b.n	8001172 <HAL_GPIO_Init+0x3de>
 8001168:	2302      	movs	r3, #2
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0x3de>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_GPIO_Init+0x3de>
 8001170:	2300      	movs	r3, #0
 8001172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4093      	lsls	r3, r2
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001182:	4935      	ldr	r1, [pc, #212]	; (8001258 <HAL_GPIO_Init+0x4c4>)
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <HAL_GPIO_Init+0x4d8>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4932      	ldr	r1, [pc, #200]	; (800126c <HAL_GPIO_Init+0x4d8>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011aa:	4b30      	ldr	r3, [pc, #192]	; (800126c <HAL_GPIO_Init+0x4d8>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	492e      	ldr	r1, [pc, #184]	; (800126c <HAL_GPIO_Init+0x4d8>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011c4:	4b29      	ldr	r3, [pc, #164]	; (800126c <HAL_GPIO_Init+0x4d8>)
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4928      	ldr	r1, [pc, #160]	; (800126c <HAL_GPIO_Init+0x4d8>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <HAL_GPIO_Init+0x4d8>)
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	43db      	mvns	r3, r3
 80011da:	4924      	ldr	r1, [pc, #144]	; (800126c <HAL_GPIO_Init+0x4d8>)
 80011dc:	4013      	ands	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_GPIO_Init+0x4d8>)
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	491e      	ldr	r1, [pc, #120]	; (800126c <HAL_GPIO_Init+0x4d8>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	608b      	str	r3, [r1, #8]
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_GPIO_Init+0x4d8>)
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	43db      	mvns	r3, r3
 8001202:	491a      	ldr	r1, [pc, #104]	; (800126c <HAL_GPIO_Init+0x4d8>)
 8001204:	4013      	ands	r3, r2
 8001206:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_GPIO_Init+0x4d8>)
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	4914      	ldr	r1, [pc, #80]	; (800126c <HAL_GPIO_Init+0x4d8>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	60cb      	str	r3, [r1, #12]
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_GPIO_Init+0x4d8>)
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	43db      	mvns	r3, r3
 800122a:	4910      	ldr	r1, [pc, #64]	; (800126c <HAL_GPIO_Init+0x4d8>)
 800122c:	4013      	ands	r3, r2
 800122e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	3301      	adds	r3, #1
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	f47f ae1e 	bne.w	8000e82 <HAL_GPIO_Init+0xee>
  }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	0800672c 	.word	0x0800672c
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000
 800125c:	40010800 	.word	0x40010800
 8001260:	40010c00 	.word	0x40010c00
 8001264:	40011000 	.word	0x40011000
 8001268:	40011400 	.word	0x40011400
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001280:	887b      	ldrh	r3, [r7, #2]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d004      	beq.n	8001290 <HAL_GPIO_WritePin+0x20>
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	0c1b      	lsrs	r3, r3, #16
 800128a:	041b      	lsls	r3, r3, #16
 800128c:	2b00      	cmp	r3, #0
 800128e:	d004      	beq.n	800129a <HAL_GPIO_WritePin+0x2a>
 8001290:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001294:	480e      	ldr	r0, [pc, #56]	; (80012d0 <HAL_GPIO_WritePin+0x60>)
 8001296:	f7ff fa48 	bl	800072a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800129a:	787b      	ldrb	r3, [r7, #1]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d007      	beq.n	80012b0 <HAL_GPIO_WritePin+0x40>
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d004      	beq.n	80012b0 <HAL_GPIO_WritePin+0x40>
 80012a6:	f240 11d5 	movw	r1, #469	; 0x1d5
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <HAL_GPIO_WritePin+0x60>)
 80012ac:	f7ff fa3d 	bl	800072a <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80012b0:	787b      	ldrb	r3, [r7, #1]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b6:	887a      	ldrh	r2, [r7, #2]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012bc:	e003      	b.n	80012c6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	041a      	lsls	r2, r3, #16
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	611a      	str	r2, [r3, #16]
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	0800672c 	.word	0x0800672c

080012d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <HAL_GPIO_TogglePin+0x1c>
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	0c1b      	lsrs	r3, r3, #16
 80012ea:	041b      	lsls	r3, r3, #16
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <HAL_GPIO_TogglePin+0x26>
 80012f0:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80012f4:	480a      	ldr	r0, [pc, #40]	; (8001320 <HAL_GPIO_TogglePin+0x4c>)
 80012f6:	f7ff fa18 	bl	800072a <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001300:	887a      	ldrh	r2, [r7, #2]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4013      	ands	r3, r2
 8001306:	041a      	lsls	r2, r3, #16
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43d9      	mvns	r1, r3
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	400b      	ands	r3, r1
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	611a      	str	r2, [r3, #16]
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	0800672c 	.word	0x0800672c

08001324 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f806 	bl	8001354 <HAL_GPIO_EXTI_Callback>
  }
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e35a      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01c      	beq.n	80013bc <HAL_RCC_OscConfig+0x54>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d116      	bne.n	80013bc <HAL_RCC_OscConfig+0x54>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d110      	bne.n	80013bc <HAL_RCC_OscConfig+0x54>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10a      	bne.n	80013bc <HAL_RCC_OscConfig+0x54>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d104      	bne.n	80013bc <HAL_RCC_OscConfig+0x54>
 80013b2:	f240 1167 	movw	r1, #359	; 0x167
 80013b6:	488f      	ldr	r0, [pc, #572]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80013b8:	f7ff f9b7 	bl	800072a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 809a 	beq.w	80014fe <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00e      	beq.n	80013f0 <HAL_RCC_OscConfig+0x88>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013da:	d009      	beq.n	80013f0 <HAL_RCC_OscConfig+0x88>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e4:	d004      	beq.n	80013f0 <HAL_RCC_OscConfig+0x88>
 80013e6:	f240 116d 	movw	r1, #365	; 0x16d
 80013ea:	4882      	ldr	r0, [pc, #520]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80013ec:	f7ff f99d 	bl	800072a <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f0:	4b81      	ldr	r3, [pc, #516]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 030c 	and.w	r3, r3, #12
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d00c      	beq.n	8001416 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013fc:	4b7e      	ldr	r3, [pc, #504]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b08      	cmp	r3, #8
 8001406:	d112      	bne.n	800142e <HAL_RCC_OscConfig+0xc6>
 8001408:	4b7b      	ldr	r3, [pc, #492]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001414:	d10b      	bne.n	800142e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001416:	4b78      	ldr	r3, [pc, #480]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d06c      	beq.n	80014fc <HAL_RCC_OscConfig+0x194>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d168      	bne.n	80014fc <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e300      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001436:	d106      	bne.n	8001446 <HAL_RCC_OscConfig+0xde>
 8001438:	4b6f      	ldr	r3, [pc, #444]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a6e      	ldr	r2, [pc, #440]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 800143e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e02e      	b.n	80014a4 <HAL_RCC_OscConfig+0x13c>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x100>
 800144e:	4b6a      	ldr	r3, [pc, #424]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a69      	ldr	r2, [pc, #420]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b67      	ldr	r3, [pc, #412]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a66      	ldr	r2, [pc, #408]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e01d      	b.n	80014a4 <HAL_RCC_OscConfig+0x13c>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x124>
 8001472:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a60      	ldr	r2, [pc, #384]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b5e      	ldr	r3, [pc, #376]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a5d      	ldr	r2, [pc, #372]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0x13c>
 800148c:	4b5a      	ldr	r3, [pc, #360]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a59      	ldr	r2, [pc, #356]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a56      	ldr	r2, [pc, #344]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 800149e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb5a 	bl	8000b64 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fb56 	bl	8000b64 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e2b4      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x14c>
 80014d2:	e014      	b.n	80014fe <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fb46 	bl	8000b64 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fb42 	bl	8000b64 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e2a0      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x174>
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8080 	beq.w	800160c <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_RCC_OscConfig+0x1be>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d004      	beq.n	8001526 <HAL_RCC_OscConfig+0x1be>
 800151c:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001520:	4834      	ldr	r0, [pc, #208]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001522:	f7ff f902 	bl	800072a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	2b1f      	cmp	r3, #31
 800152c:	d904      	bls.n	8001538 <HAL_RCC_OscConfig+0x1d0>
 800152e:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001532:	4830      	ldr	r0, [pc, #192]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001534:	f7ff f8f9 	bl	800072a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001538:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00b      	beq.n	800155c <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001544:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b08      	cmp	r3, #8
 800154e:	d11c      	bne.n	800158a <HAL_RCC_OscConfig+0x222>
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d116      	bne.n	800158a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_OscConfig+0x20c>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d001      	beq.n	8001574 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e25d      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	491d      	ldr	r1, [pc, #116]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001588:	e040      	b.n	800160c <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d020      	beq.n	80015d4 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_RCC_OscConfig+0x294>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fae4 	bl	8000b64 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a0:	f7ff fae0 	bl	8000b64 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e23e      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	490a      	ldr	r1, [pc, #40]	; (80015f8 <HAL_RCC_OscConfig+0x290>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
 80015d2:	e01b      	b.n	800160c <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_RCC_OscConfig+0x294>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fac3 	bl	8000b64 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e0:	e00e      	b.n	8001600 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff fabf 	bl	8000b64 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d907      	bls.n	8001600 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e21d      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
 80015f4:	08006768 	.word	0x08006768
 80015f8:	40021000 	.word	0x40021000
 80015fc:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001600:	4b7d      	ldr	r3, [pc, #500]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1ea      	bne.n	80015e2 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d040      	beq.n	800169a <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d008      	beq.n	8001632 <HAL_RCC_OscConfig+0x2ca>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d004      	beq.n	8001632 <HAL_RCC_OscConfig+0x2ca>
 8001628:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800162c:	4873      	ldr	r0, [pc, #460]	; (80017fc <HAL_RCC_OscConfig+0x494>)
 800162e:	f7ff f87c 	bl	800072a <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d019      	beq.n	800166e <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163a:	4b71      	ldr	r3, [pc, #452]	; (8001800 <HAL_RCC_OscConfig+0x498>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff fa90 	bl	8000b64 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001648:	f7ff fa8c 	bl	8000b64 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e1ea      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001666:	2001      	movs	r0, #1
 8001668:	f000 fc4e 	bl	8001f08 <RCC_Delay>
 800166c:	e015      	b.n	800169a <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166e:	4b64      	ldr	r3, [pc, #400]	; (8001800 <HAL_RCC_OscConfig+0x498>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001674:	f7ff fa76 	bl	8000b64 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff fa72 	bl	8000b64 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1d0      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168e:	4b5a      	ldr	r3, [pc, #360]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80bf 	beq.w	8001826 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00c      	beq.n	80016ce <HAL_RCC_OscConfig+0x366>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_OscConfig+0x366>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d004      	beq.n	80016ce <HAL_RCC_OscConfig+0x366>
 80016c4:	f240 2111 	movw	r1, #529	; 0x211
 80016c8:	484c      	ldr	r0, [pc, #304]	; (80017fc <HAL_RCC_OscConfig+0x494>)
 80016ca:	f7ff f82e 	bl	800072a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10d      	bne.n	80016f6 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a46      	ldr	r2, [pc, #280]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f2:	2301      	movs	r3, #1
 80016f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_RCC_OscConfig+0x49c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d118      	bne.n	8001734 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001702:	4b40      	ldr	r3, [pc, #256]	; (8001804 <HAL_RCC_OscConfig+0x49c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a3f      	ldr	r2, [pc, #252]	; (8001804 <HAL_RCC_OscConfig+0x49c>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170e:	f7ff fa29 	bl	8000b64 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001716:	f7ff fa25 	bl	8000b64 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b64      	cmp	r3, #100	; 0x64
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e183      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <HAL_RCC_OscConfig+0x49c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d106      	bne.n	800174a <HAL_RCC_OscConfig+0x3e2>
 800173c:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4a2d      	ldr	r2, [pc, #180]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6213      	str	r3, [r2, #32]
 8001748:	e02d      	b.n	80017a6 <HAL_RCC_OscConfig+0x43e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0x404>
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a25      	ldr	r2, [pc, #148]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	6213      	str	r3, [r2, #32]
 800176a:	e01c      	b.n	80017a6 <HAL_RCC_OscConfig+0x43e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b05      	cmp	r3, #5
 8001772:	d10c      	bne.n	800178e <HAL_RCC_OscConfig+0x426>
 8001774:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	e00b      	b.n	80017a6 <HAL_RCC_OscConfig+0x43e>
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 80017a0:	f023 0304 	bic.w	r3, r3, #4
 80017a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d015      	beq.n	80017da <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff f9d9 	bl	8000b64 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b4:	e00a      	b.n	80017cc <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b6:	f7ff f9d5 	bl	8000b64 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e131      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_RCC_OscConfig+0x490>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ee      	beq.n	80017b6 <HAL_RCC_OscConfig+0x44e>
 80017d8:	e01c      	b.n	8001814 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017da:	f7ff f9c3 	bl	8000b64 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e0:	e012      	b.n	8001808 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff f9bf 	bl	8000b64 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d909      	bls.n	8001808 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e11b      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
 80017f8:	40021000 	.word	0x40021000
 80017fc:	08006768 	.word	0x08006768
 8001800:	42420480 	.word	0x42420480
 8001804:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001808:	4b8b      	ldr	r3, [pc, #556]	; (8001a38 <HAL_RCC_OscConfig+0x6d0>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e6      	bne.n	80017e2 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d105      	bne.n	8001826 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800181a:	4b87      	ldr	r3, [pc, #540]	; (8001a38 <HAL_RCC_OscConfig+0x6d0>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a86      	ldr	r2, [pc, #536]	; (8001a38 <HAL_RCC_OscConfig+0x6d0>)
 8001820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001824:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00c      	beq.n	8001848 <HAL_RCC_OscConfig+0x4e0>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d008      	beq.n	8001848 <HAL_RCC_OscConfig+0x4e0>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d004      	beq.n	8001848 <HAL_RCC_OscConfig+0x4e0>
 800183e:	f240 21af 	movw	r1, #687	; 0x2af
 8001842:	487e      	ldr	r0, [pc, #504]	; (8001a3c <HAL_RCC_OscConfig+0x6d4>)
 8001844:	f7fe ff71 	bl	800072a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80ee 	beq.w	8001a2e <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001852:	4b79      	ldr	r3, [pc, #484]	; (8001a38 <HAL_RCC_OscConfig+0x6d0>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b08      	cmp	r3, #8
 800185c:	f000 80ce 	beq.w	80019fc <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2b02      	cmp	r3, #2
 8001866:	f040 80b2 	bne.w	80019ce <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <HAL_RCC_OscConfig+0x51e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187a:	d004      	beq.n	8001886 <HAL_RCC_OscConfig+0x51e>
 800187c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001880:	486e      	ldr	r0, [pc, #440]	; (8001a3c <HAL_RCC_OscConfig+0x6d4>)
 8001882:	f7fe ff52 	bl	800072a <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	2b00      	cmp	r3, #0
 800188c:	d04a      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001896:	d045      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80018a0:	d040      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80018aa:	d03b      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018b4:	d036      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80018be:	d031      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80018c8:	d02c      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80018d2:	d027      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018dc:	d022      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80018e6:	d01d      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80018f0:	d018      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001904:	d00e      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800190e:	d009      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001918:	d004      	beq.n	8001924 <HAL_RCC_OscConfig+0x5bc>
 800191a:	f240 21b9 	movw	r1, #697	; 0x2b9
 800191e:	4847      	ldr	r0, [pc, #284]	; (8001a3c <HAL_RCC_OscConfig+0x6d4>)
 8001920:	f7fe ff03 	bl	800072a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001924:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <HAL_RCC_OscConfig+0x6d8>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff f91b 	bl	8000b64 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff f917 	bl	8000b64 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e075      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001944:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <HAL_RCC_OscConfig+0x6d0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d116      	bne.n	8001988 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <HAL_RCC_OscConfig+0x60e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800196a:	d004      	beq.n	8001976 <HAL_RCC_OscConfig+0x60e>
 800196c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001970:	4832      	ldr	r0, [pc, #200]	; (8001a3c <HAL_RCC_OscConfig+0x6d4>)
 8001972:	f7fe feda 	bl	800072a <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_RCC_OscConfig+0x6d0>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	492d      	ldr	r1, [pc, #180]	; (8001a38 <HAL_RCC_OscConfig+0x6d0>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_RCC_OscConfig+0x6d0>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a19      	ldr	r1, [r3, #32]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	430b      	orrs	r3, r1
 800199a:	4927      	ldr	r1, [pc, #156]	; (8001a38 <HAL_RCC_OscConfig+0x6d0>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <HAL_RCC_OscConfig+0x6d8>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7ff f8dd 	bl	8000b64 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ae:	f7ff f8d9 	bl	8000b64 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e037      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_RCC_OscConfig+0x6d0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x646>
 80019cc:	e02f      	b.n	8001a2e <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_RCC_OscConfig+0x6d8>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff f8c6 	bl	8000b64 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f8c2 	bl	8000b64 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e020      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_RCC_OscConfig+0x6d0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x674>
 80019fa:	e018      	b.n	8001a2e <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e013      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_OscConfig+0x6d0>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	08006768 	.word	0x08006768
 8001a40:	42420060 	.word	0x42420060

08001a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e176      	b.n	8001d46 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d116      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x4e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d110      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x4e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10a      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x4e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d104      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x4e>
 8001a88:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001a8c:	4874      	ldr	r0, [pc, #464]	; (8001c60 <HAL_RCC_ClockConfig+0x21c>)
 8001a8e:	f7fe fe4c 	bl	800072a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00a      	beq.n	8001aae <HAL_RCC_ClockConfig+0x6a>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d007      	beq.n	8001aae <HAL_RCC_ClockConfig+0x6a>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d004      	beq.n	8001aae <HAL_RCC_ClockConfig+0x6a>
 8001aa4:	f240 3139 	movw	r1, #825	; 0x339
 8001aa8:	486d      	ldr	r0, [pc, #436]	; (8001c60 <HAL_RCC_ClockConfig+0x21c>)
 8001aaa:	f7fe fe3e 	bl	800072a <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aae:	4b6d      	ldr	r3, [pc, #436]	; (8001c64 <HAL_RCC_ClockConfig+0x220>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d910      	bls.n	8001ade <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abc:	4b69      	ldr	r3, [pc, #420]	; (8001c64 <HAL_RCC_ClockConfig+0x220>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 0207 	bic.w	r2, r3, #7
 8001ac4:	4967      	ldr	r1, [pc, #412]	; (8001c64 <HAL_RCC_ClockConfig+0x220>)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001acc:	4b65      	ldr	r3, [pc, #404]	; (8001c64 <HAL_RCC_ClockConfig+0x220>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e133      	b.n	8001d46 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d049      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af6:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <HAL_RCC_ClockConfig+0x224>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4a5b      	ldr	r2, [pc, #364]	; (8001c68 <HAL_RCC_ClockConfig+0x224>)
 8001afc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b00:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b0e:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <HAL_RCC_ClockConfig+0x224>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4a55      	ldr	r2, [pc, #340]	; (8001c68 <HAL_RCC_ClockConfig+0x224>)
 8001b14:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b18:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d024      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x128>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b80      	cmp	r3, #128	; 0x80
 8001b28:	d020      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x128>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b90      	cmp	r3, #144	; 0x90
 8001b30:	d01c      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x128>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2ba0      	cmp	r3, #160	; 0xa0
 8001b38:	d018      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x128>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2bb0      	cmp	r3, #176	; 0xb0
 8001b40:	d014      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x128>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2bc0      	cmp	r3, #192	; 0xc0
 8001b48:	d010      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x128>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2bd0      	cmp	r3, #208	; 0xd0
 8001b50:	d00c      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x128>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2be0      	cmp	r3, #224	; 0xe0
 8001b58:	d008      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x128>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2bf0      	cmp	r3, #240	; 0xf0
 8001b60:	d004      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x128>
 8001b62:	f240 315f 	movw	r1, #863	; 0x35f
 8001b66:	483e      	ldr	r0, [pc, #248]	; (8001c60 <HAL_RCC_ClockConfig+0x21c>)
 8001b68:	f7fe fddf 	bl	800072a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6c:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <HAL_RCC_ClockConfig+0x224>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	493b      	ldr	r1, [pc, #236]	; (8001c68 <HAL_RCC_ClockConfig+0x224>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d051      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00c      	beq.n	8001bac <HAL_RCC_ClockConfig+0x168>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d008      	beq.n	8001bac <HAL_RCC_ClockConfig+0x168>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d004      	beq.n	8001bac <HAL_RCC_ClockConfig+0x168>
 8001ba2:	f240 3166 	movw	r1, #870	; 0x366
 8001ba6:	482e      	ldr	r0, [pc, #184]	; (8001c60 <HAL_RCC_ClockConfig+0x21c>)
 8001ba8:	f7fe fdbf 	bl	800072a <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <HAL_RCC_ClockConfig+0x224>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d115      	bne.n	8001bec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0c0      	b.n	8001d46 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_RCC_ClockConfig+0x224>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0b4      	b.n	8001d46 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_RCC_ClockConfig+0x224>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0ac      	b.n	8001d46 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_RCC_ClockConfig+0x224>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f023 0203 	bic.w	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	491b      	ldr	r1, [pc, #108]	; (8001c68 <HAL_RCC_ClockConfig+0x224>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bfe:	f7fe ffb1 	bl	8000b64 <HAL_GetTick>
 8001c02:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c06:	f7fe ffad 	bl	8000b64 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e094      	b.n	8001d46 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_ClockConfig+0x224>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 020c 	and.w	r2, r3, #12
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d1eb      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_RCC_ClockConfig+0x220>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d217      	bcs.n	8001c6c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x220>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 0207 	bic.w	r2, r3, #7
 8001c44:	4907      	ldr	r1, [pc, #28]	; (8001c64 <HAL_RCC_ClockConfig+0x220>)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_ClockConfig+0x220>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d008      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e073      	b.n	8001d46 <HAL_RCC_ClockConfig+0x302>
 8001c5e:	bf00      	nop
 8001c60:	08006768 	.word	0x08006768
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d025      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d018      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x26e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c88:	d013      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x26e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001c92:	d00e      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x26e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001c9c:	d009      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x26e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ca6:	d004      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x26e>
 8001ca8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001cac:	4828      	ldr	r0, [pc, #160]	; (8001d50 <HAL_RCC_ClockConfig+0x30c>)
 8001cae:	f7fe fd3c 	bl	800072a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_RCC_ClockConfig+0x310>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	4925      	ldr	r1, [pc, #148]	; (8001d54 <HAL_RCC_ClockConfig+0x310>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d026      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d018      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x2c6>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce0:	d013      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x2c6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001cea:	d00e      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x2c6>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x2c6>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001cfe:	d004      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x2c6>
 8001d00:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001d04:	4812      	ldr	r0, [pc, #72]	; (8001d50 <HAL_RCC_ClockConfig+0x30c>)
 8001d06:	f7fe fd10 	bl	800072a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_ClockConfig+0x310>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	490e      	ldr	r1, [pc, #56]	; (8001d54 <HAL_RCC_ClockConfig+0x310>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d1e:	f000 f821 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_ClockConfig+0x310>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	490a      	ldr	r1, [pc, #40]	; (8001d58 <HAL_RCC_ClockConfig+0x314>)
 8001d30:	5ccb      	ldrb	r3, [r1, r3]
 8001d32:	fa22 f303 	lsr.w	r3, r2, r3
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x318>)
 8001d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x31c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fd36 	bl	80007b0 <HAL_InitTick>

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	08006768 	.word	0x08006768
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08006860 	.word	0x08006860
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	2000000c 	.word	0x2000000c

08001d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b490      	push	{r4, r7}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d6a:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d6c:	1d3c      	adds	r4, r7, #4
 8001d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d74:	f240 2301 	movw	r3, #513	; 0x201
 8001d78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d002      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x40>
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d003      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0x46>
 8001da2:	e02b      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001da4:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001da6:	623b      	str	r3, [r7, #32]
      break;
 8001da8:	e02b      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	0c9b      	lsrs	r3, r3, #18
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3328      	adds	r3, #40	; 0x28
 8001db4:	443b      	add	r3, r7
 8001db6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d012      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	0c5b      	lsrs	r3, r3, #17
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	3328      	adds	r3, #40	; 0x28
 8001dd2:	443b      	add	r3, r7
 8001dd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dde:	fb03 f202 	mul.w	r2, r3, r2
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dea:	e004      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	623b      	str	r3, [r7, #32]
      break;
 8001dfa:	e002      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dfe:	623b      	str	r3, [r7, #32]
      break;
 8001e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e02:	6a3b      	ldr	r3, [r7, #32]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3728      	adds	r7, #40	; 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc90      	pop	{r4, r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	080067a0 	.word	0x080067a0
 8001e14:	40021000 	.word	0x40021000
 8001e18:	007a1200 	.word	0x007a1200
 8001e1c:	003d0900 	.word	0x003d0900

08001e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e24:	4b02      	ldr	r3, [pc, #8]	; (8001e30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	20000008 	.word	0x20000008

08001e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e38:	f7ff fff2 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	4903      	ldr	r1, [pc, #12]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08006870 	.word	0x08006870

08001e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	0adb      	lsrs	r3, r3, #11
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4903      	ldr	r1, [pc, #12]	; (8001e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	08006870 	.word	0x08006870

08001e84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d104      	bne.n	8001e9e <HAL_RCC_GetClockConfig+0x1a>
 8001e94:	f240 5123 	movw	r1, #1315	; 0x523
 8001e98:	4818      	ldr	r0, [pc, #96]	; (8001efc <HAL_RCC_GetClockConfig+0x78>)
 8001e9a:	f7fe fc46 	bl	800072a <assert_failed>
  assert_param(pFLatency != NULL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d104      	bne.n	8001eae <HAL_RCC_GetClockConfig+0x2a>
 8001ea4:	f240 5124 	movw	r1, #1316	; 0x524
 8001ea8:	4814      	ldr	r0, [pc, #80]	; (8001efc <HAL_RCC_GetClockConfig+0x78>)
 8001eaa:	f7fe fc3e 	bl	800072a <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_RCC_GetClockConfig+0x7c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0203 	and.w	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_RCC_GetClockConfig+0x7c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_RCC_GetClockConfig+0x7c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_RCC_GetClockConfig+0x7c>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	08db      	lsrs	r3, r3, #3
 8001ede:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_RCC_GetClockConfig+0x80>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0207 	and.w	r2, r3, #7
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	08006768 	.word	0x08006768
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40022000 	.word	0x40022000

08001f08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <RCC_Delay+0x34>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <RCC_Delay+0x38>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	0a5b      	lsrs	r3, r3, #9
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f24:	bf00      	nop
  }
  while (Delay --);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	60fa      	str	r2, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f9      	bne.n	8001f24 <RCC_Delay+0x1c>
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	10624dd3 	.word	0x10624dd3

08001f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e093      	b.n	800207e <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a4b      	ldr	r2, [pc, #300]	; (8002088 <HAL_TIM_Base_Init+0x144>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_TIM_Base_Init+0x44>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f68:	d00e      	beq.n	8001f88 <HAL_TIM_Base_Init+0x44>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a47      	ldr	r2, [pc, #284]	; (800208c <HAL_TIM_Base_Init+0x148>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d009      	beq.n	8001f88 <HAL_TIM_Base_Init+0x44>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a45      	ldr	r2, [pc, #276]	; (8002090 <HAL_TIM_Base_Init+0x14c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d004      	beq.n	8001f88 <HAL_TIM_Base_Init+0x44>
 8001f7e:	f240 1113 	movw	r1, #275	; 0x113
 8001f82:	4844      	ldr	r0, [pc, #272]	; (8002094 <HAL_TIM_Base_Init+0x150>)
 8001f84:	f7fe fbd1 	bl	800072a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d014      	beq.n	8001fba <HAL_TIM_Base_Init+0x76>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d010      	beq.n	8001fba <HAL_TIM_Base_Init+0x76>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d00c      	beq.n	8001fba <HAL_TIM_Base_Init+0x76>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b40      	cmp	r3, #64	; 0x40
 8001fa6:	d008      	beq.n	8001fba <HAL_TIM_Base_Init+0x76>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b60      	cmp	r3, #96	; 0x60
 8001fae:	d004      	beq.n	8001fba <HAL_TIM_Base_Init+0x76>
 8001fb0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001fb4:	4837      	ldr	r0, [pc, #220]	; (8002094 <HAL_TIM_Base_Init+0x150>)
 8001fb6:	f7fe fbb8 	bl	800072a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00e      	beq.n	8001fe0 <HAL_TIM_Base_Init+0x9c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fca:	d009      	beq.n	8001fe0 <HAL_TIM_Base_Init+0x9c>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd4:	d004      	beq.n	8001fe0 <HAL_TIM_Base_Init+0x9c>
 8001fd6:	f240 1115 	movw	r1, #277	; 0x115
 8001fda:	482e      	ldr	r0, [pc, #184]	; (8002094 <HAL_TIM_Base_Init+0x150>)
 8001fdc:	f7fe fba5 	bl	800072a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_TIM_Base_Init+0xb6>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b80      	cmp	r3, #128	; 0x80
 8001fee:	d004      	beq.n	8001ffa <HAL_TIM_Base_Init+0xb6>
 8001ff0:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001ff4:	4827      	ldr	r0, [pc, #156]	; (8002094 <HAL_TIM_Base_Init+0x150>)
 8001ff6:	f7fe fb98 	bl	800072a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f842 	bl	8002098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3304      	adds	r3, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f000 f9d8 	bl	80023dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40000400 	.word	0x40000400
 8002090:	40000800 	.word	0x40000800
 8002094:	080067b0 	.word	0x080067b0

08002098 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a2e      	ldr	r2, [pc, #184]	; (8002174 <HAL_TIM_Base_Start_IT+0xc8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <HAL_TIM_Base_Start_IT+0x3a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c6:	d00e      	beq.n	80020e6 <HAL_TIM_Base_Start_IT+0x3a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a2a      	ldr	r2, [pc, #168]	; (8002178 <HAL_TIM_Base_Start_IT+0xcc>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d009      	beq.n	80020e6 <HAL_TIM_Base_Start_IT+0x3a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a29      	ldr	r2, [pc, #164]	; (800217c <HAL_TIM_Base_Start_IT+0xd0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d004      	beq.n	80020e6 <HAL_TIM_Base_Start_IT+0x3a>
 80020dc:	f240 11cf 	movw	r1, #463	; 0x1cf
 80020e0:	4827      	ldr	r0, [pc, #156]	; (8002180 <HAL_TIM_Base_Start_IT+0xd4>)
 80020e2:	f7fe fb22 	bl	800072a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e03a      	b.n	800216c <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a18      	ldr	r2, [pc, #96]	; (8002174 <HAL_TIM_Base_Start_IT+0xc8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00e      	beq.n	8002136 <HAL_TIM_Base_Start_IT+0x8a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d009      	beq.n	8002136 <HAL_TIM_Base_Start_IT+0x8a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a14      	ldr	r2, [pc, #80]	; (8002178 <HAL_TIM_Base_Start_IT+0xcc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d004      	beq.n	8002136 <HAL_TIM_Base_Start_IT+0x8a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a12      	ldr	r2, [pc, #72]	; (800217c <HAL_TIM_Base_Start_IT+0xd0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d111      	bne.n	800215a <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b06      	cmp	r3, #6
 8002146:	d010      	beq.n	800216a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002158:	e007      	b.n	800216a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0201 	orr.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800
 8002180:	080067b0 	.word	0x080067b0

08002184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b02      	cmp	r3, #2
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0202 	mvn.w	r2, #2
 80021b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f8ed 	bl	80023a6 <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f8e0 	bl	8002394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f8ef 	bl	80023b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d122      	bne.n	8002234 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d11b      	bne.n	8002234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0204 	mvn.w	r2, #4
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f8c3 	bl	80023a6 <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f8b6 	bl	8002394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f8c5 	bl	80023b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b08      	cmp	r3, #8
 8002240:	d122      	bne.n	8002288 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b08      	cmp	r3, #8
 800224e:	d11b      	bne.n	8002288 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0208 	mvn.w	r2, #8
 8002258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2204      	movs	r2, #4
 800225e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f899 	bl	80023a6 <HAL_TIM_IC_CaptureCallback>
 8002274:	e005      	b.n	8002282 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f88c 	bl	8002394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f89b 	bl	80023b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b10      	cmp	r3, #16
 8002294:	d122      	bne.n	80022dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b10      	cmp	r3, #16
 80022a2:	d11b      	bne.n	80022dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0210 	mvn.w	r2, #16
 80022ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2208      	movs	r2, #8
 80022b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f86f 	bl	80023a6 <HAL_TIM_IC_CaptureCallback>
 80022c8:	e005      	b.n	80022d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f862 	bl	8002394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f871 	bl	80023b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d10e      	bne.n	8002308 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d107      	bne.n	8002308 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0201 	mvn.w	r2, #1
 8002300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe f9fa 	bl	80006fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002312:	2b80      	cmp	r3, #128	; 0x80
 8002314:	d10e      	bne.n	8002334 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002320:	2b80      	cmp	r3, #128	; 0x80
 8002322:	d107      	bne.n	8002334 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800232c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f8bf 	bl	80024b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	d10e      	bne.n	8002360 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234c:	2b40      	cmp	r3, #64	; 0x40
 800234e:	d107      	bne.n	8002360 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f835 	bl	80023ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b20      	cmp	r3, #32
 800236c:	d10e      	bne.n	800238c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b20      	cmp	r3, #32
 800237a:	d107      	bne.n	800238c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0220 	mvn.w	r2, #32
 8002384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f88a 	bl	80024a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a29      	ldr	r2, [pc, #164]	; (8002494 <TIM_Base_SetConfig+0xb8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00b      	beq.n	800240c <TIM_Base_SetConfig+0x30>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fa:	d007      	beq.n	800240c <TIM_Base_SetConfig+0x30>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a26      	ldr	r2, [pc, #152]	; (8002498 <TIM_Base_SetConfig+0xbc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <TIM_Base_SetConfig+0x30>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a25      	ldr	r2, [pc, #148]	; (800249c <TIM_Base_SetConfig+0xc0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d108      	bne.n	800241e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <TIM_Base_SetConfig+0xb8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00b      	beq.n	800243e <TIM_Base_SetConfig+0x62>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242c:	d007      	beq.n	800243e <TIM_Base_SetConfig+0x62>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a19      	ldr	r2, [pc, #100]	; (8002498 <TIM_Base_SetConfig+0xbc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d003      	beq.n	800243e <TIM_Base_SetConfig+0x62>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a18      	ldr	r2, [pc, #96]	; (800249c <TIM_Base_SetConfig+0xc0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d108      	bne.n	8002450 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <TIM_Base_SetConfig+0xb8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d103      	bne.n	8002484 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	615a      	str	r2, [r3, #20]
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40000400 	.word	0x40000400
 800249c:	40000800 	.word	0x40000800

080024a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e092      	b.n	80025fc <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d02c      	beq.n	8002538 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a48      	ldr	r2, [pc, #288]	; (8002604 <HAL_UART_Init+0x140>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00e      	beq.n	8002506 <HAL_UART_Init+0x42>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a46      	ldr	r2, [pc, #280]	; (8002608 <HAL_UART_Init+0x144>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_UART_Init+0x42>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a45      	ldr	r2, [pc, #276]	; (800260c <HAL_UART_Init+0x148>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d004      	beq.n	8002506 <HAL_UART_Init+0x42>
 80024fc:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8002500:	4843      	ldr	r0, [pc, #268]	; (8002610 <HAL_UART_Init+0x14c>)
 8002502:	f7fe f912 	bl	800072a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d028      	beq.n	8002560 <HAL_UART_Init+0x9c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002516:	d023      	beq.n	8002560 <HAL_UART_Init+0x9c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002520:	d01e      	beq.n	8002560 <HAL_UART_Init+0x9c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800252a:	d019      	beq.n	8002560 <HAL_UART_Init+0x9c>
 800252c:	f240 116d 	movw	r1, #365	; 0x16d
 8002530:	4837      	ldr	r0, [pc, #220]	; (8002610 <HAL_UART_Init+0x14c>)
 8002532:	f7fe f8fa 	bl	800072a <assert_failed>
 8002536:	e013      	b.n	8002560 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a31      	ldr	r2, [pc, #196]	; (8002604 <HAL_UART_Init+0x140>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00e      	beq.n	8002560 <HAL_UART_Init+0x9c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a30      	ldr	r2, [pc, #192]	; (8002608 <HAL_UART_Init+0x144>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d009      	beq.n	8002560 <HAL_UART_Init+0x9c>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2e      	ldr	r2, [pc, #184]	; (800260c <HAL_UART_Init+0x148>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_UART_Init+0x9c>
 8002556:	f240 1171 	movw	r1, #369	; 0x171
 800255a:	482d      	ldr	r0, [pc, #180]	; (8002610 <HAL_UART_Init+0x14c>)
 800255c:	f7fe f8e5 	bl	800072a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d009      	beq.n	800257c <HAL_UART_Init+0xb8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002570:	d004      	beq.n	800257c <HAL_UART_Init+0xb8>
 8002572:	f240 1173 	movw	r1, #371	; 0x173
 8002576:	4826      	ldr	r0, [pc, #152]	; (8002610 <HAL_UART_Init+0x14c>)
 8002578:	f7fe f8d7 	bl	800072a <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d106      	bne.n	8002596 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7fe fa5b 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2224      	movs	r2, #36	; 0x24
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f90c 	bl	80027cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40013800 	.word	0x40013800
 8002608:	40004400 	.word	0x40004400
 800260c:	40004800 	.word	0x40004800
 8002610:	080067e8 	.word	0x080067e8

08002614 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b20      	cmp	r3, #32
 8002632:	d17c      	bne.n	800272e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_UART_Transmit+0x2c>
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e075      	b.n	8002730 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_UART_Transmit+0x3e>
 800264e:	2302      	movs	r3, #2
 8002650:	e06e      	b.n	8002730 <HAL_UART_Transmit+0x11c>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2221      	movs	r2, #33	; 0x21
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002668:	f7fe fa7c 	bl	8000b64 <HAL_GetTick>
 800266c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	88fa      	ldrh	r2, [r7, #6]
 8002672:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	88fa      	ldrh	r2, [r7, #6]
 8002678:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002682:	d108      	bne.n	8002696 <HAL_UART_Transmit+0x82>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d104      	bne.n	8002696 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	e003      	b.n	800269e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80026a6:	e02a      	b.n	80026fe <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2200      	movs	r2, #0
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f840 	bl	8002738 <UART_WaitOnFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e036      	b.n	8002730 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	3302      	adds	r3, #2
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e007      	b.n	80026f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	781a      	ldrb	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1cf      	bne.n	80026a8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2200      	movs	r2, #0
 8002710:	2140      	movs	r1, #64	; 0x40
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f810 	bl	8002738 <UART_WaitOnFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e006      	b.n	8002730 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
  }
}
 8002730:	4618      	mov	r0, r3
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002748:	e02c      	b.n	80027a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d028      	beq.n	80027a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <UART_WaitOnFlagUntilTimeout+0x30>
 8002758:	f7fe fa04 	bl	8000b64 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	429a      	cmp	r2, r3
 8002766:	d21d      	bcs.n	80027a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002776:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e00f      	b.n	80027c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4013      	ands	r3, r2
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d0c3      	beq.n	800274a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a5f      	ldr	r2, [pc, #380]	; (8002958 <UART_SetConfig+0x18c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d904      	bls.n	80027e8 <UART_SetConfig+0x1c>
 80027de:	f640 6153 	movw	r1, #3667	; 0xe53
 80027e2:	485e      	ldr	r0, [pc, #376]	; (800295c <UART_SetConfig+0x190>)
 80027e4:	f7fd ffa1 	bl	800072a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <UART_SetConfig+0x38>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f8:	d004      	beq.n	8002804 <UART_SetConfig+0x38>
 80027fa:	f640 6154 	movw	r1, #3668	; 0xe54
 80027fe:	4857      	ldr	r0, [pc, #348]	; (800295c <UART_SetConfig+0x190>)
 8002800:	f7fd ff93 	bl	800072a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00e      	beq.n	800282a <UART_SetConfig+0x5e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002814:	d009      	beq.n	800282a <UART_SetConfig+0x5e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800281e:	d004      	beq.n	800282a <UART_SetConfig+0x5e>
 8002820:	f640 6155 	movw	r1, #3669	; 0xe55
 8002824:	484d      	ldr	r0, [pc, #308]	; (800295c <UART_SetConfig+0x190>)
 8002826:	f7fd ff80 	bl	800072a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d103      	bne.n	8002840 <UART_SetConfig+0x74>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d104      	bne.n	800284a <UART_SetConfig+0x7e>
 8002840:	f640 6156 	movw	r1, #3670	; 0xe56
 8002844:	4845      	ldr	r0, [pc, #276]	; (800295c <UART_SetConfig+0x190>)
 8002846:	f7fd ff70 	bl	800072a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	4313      	orrs	r3, r2
 8002870:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800287c:	f023 030c 	bic.w	r3, r3, #12
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	430b      	orrs	r3, r1
 8002888:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699a      	ldr	r2, [r3, #24]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2e      	ldr	r2, [pc, #184]	; (8002960 <UART_SetConfig+0x194>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d103      	bne.n	80028b2 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028aa:	f7ff fad7 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	e002      	b.n	80028b8 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028b2:	f7ff fabf 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 80028b6:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	009a      	lsls	r2, r3, #2
 80028c2:	441a      	add	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	4a25      	ldr	r2, [pc, #148]	; (8002964 <UART_SetConfig+0x198>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	0119      	lsls	r1, r3, #4
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	009a      	lsls	r2, r3, #2
 80028e2:	441a      	add	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <UART_SetConfig+0x198>)
 80028f0:	fba3 0302 	umull	r0, r3, r3, r2
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	2064      	movs	r0, #100	; 0x64
 80028f8:	fb00 f303 	mul.w	r3, r0, r3
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	3332      	adds	r3, #50	; 0x32
 8002902:	4a18      	ldr	r2, [pc, #96]	; (8002964 <UART_SetConfig+0x198>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290e:	4419      	add	r1, r3
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	009a      	lsls	r2, r3, #2
 800291a:	441a      	add	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	fbb2 f2f3 	udiv	r2, r2, r3
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <UART_SetConfig+0x198>)
 8002928:	fba3 0302 	umull	r0, r3, r3, r2
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	2064      	movs	r0, #100	; 0x64
 8002930:	fb00 f303 	mul.w	r3, r0, r3
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	3332      	adds	r3, #50	; 0x32
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <UART_SetConfig+0x198>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	f003 020f 	and.w	r2, r3, #15
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	440a      	add	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	0044aa20 	.word	0x0044aa20
 800295c:	080067e8 	.word	0x080067e8
 8002960:	40013800 	.word	0x40013800
 8002964:	51eb851f 	.word	0x51eb851f

08002968 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800296e:	f3ef 8305 	mrs	r3, IPSR
 8002972:	60bb      	str	r3, [r7, #8]
  return(result);
 8002974:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800297a:	f3ef 8310 	mrs	r3, PRIMASK
 800297e:	607b      	str	r3, [r7, #4]
  return(result);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <osKernelInitialize+0x32>
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <osKernelInitialize+0x60>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d109      	bne.n	80029a2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800298e:	f3ef 8311 	mrs	r3, BASEPRI
 8002992:	603b      	str	r3, [r7, #0]
  return(result);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800299a:	f06f 0305 	mvn.w	r3, #5
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e00c      	b.n	80029bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <osKernelInitialize+0x60>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d105      	bne.n	80029b6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <osKernelInitialize+0x60>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e002      	b.n	80029bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80029b6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80029bc:	68fb      	ldr	r3, [r7, #12]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	20000134 	.word	0x20000134

080029cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029d2:	f3ef 8305 	mrs	r3, IPSR
 80029d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80029d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029de:	f3ef 8310 	mrs	r3, PRIMASK
 80029e2:	607b      	str	r3, [r7, #4]
  return(result);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <osKernelStart+0x32>
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <osKernelStart+0x64>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d109      	bne.n	8002a06 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029f2:	f3ef 8311 	mrs	r3, BASEPRI
 80029f6:	603b      	str	r3, [r7, #0]
  return(result);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <osKernelStart+0x3a>
    stat = osErrorISR;
 80029fe:	f06f 0305 	mvn.w	r3, #5
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e00e      	b.n	8002a24 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <osKernelStart+0x64>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <osKernelStart+0x64>)
 8002a10:	2202      	movs	r2, #2
 8002a12:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002a14:	f001 f890 	bl	8003b38 <vTaskStartScheduler>
      stat = osOK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e002      	b.n	8002a24 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a24:	68fb      	ldr	r3, [r7, #12]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000134 	.word	0x20000134

08002a34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b092      	sub	sp, #72	; 0x48
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a44:	f3ef 8305 	mrs	r3, IPSR
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f040 8094 	bne.w	8002b7a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a52:	f3ef 8310 	mrs	r3, PRIMASK
 8002a56:	623b      	str	r3, [r7, #32]
  return(result);
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f040 808d 	bne.w	8002b7a <osThreadNew+0x146>
 8002a60:	4b48      	ldr	r3, [pc, #288]	; (8002b84 <osThreadNew+0x150>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d106      	bne.n	8002a76 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a68:	f3ef 8311 	mrs	r3, BASEPRI
 8002a6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f040 8082 	bne.w	8002b7a <osThreadNew+0x146>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d07e      	beq.n	8002b7a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002a80:	2318      	movs	r3, #24
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002a84:	2300      	movs	r3, #0
 8002a86:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002a88:	f107 031b 	add.w	r3, r7, #27
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d045      	beq.n	8002b26 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <osThreadNew+0x74>
        name = attr->name;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <osThreadNew+0x9a>
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	2b38      	cmp	r3, #56	; 0x38
 8002ac0:	d805      	bhi.n	8002ace <osThreadNew+0x9a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <osThreadNew+0x9e>
        return (NULL);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e054      	b.n	8002b7c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00e      	beq.n	8002b08 <osThreadNew+0xd4>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2bbb      	cmp	r3, #187	; 0xbb
 8002af0:	d90a      	bls.n	8002b08 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d006      	beq.n	8002b08 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <osThreadNew+0xd4>
        mem = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b06:	e010      	b.n	8002b2a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10c      	bne.n	8002b2a <osThreadNew+0xf6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d108      	bne.n	8002b2a <osThreadNew+0xf6>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d104      	bne.n	8002b2a <osThreadNew+0xf6>
          mem = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b24:	e001      	b.n	8002b2a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d110      	bne.n	8002b52 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b38:	9202      	str	r2, [sp, #8]
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fe12 	bl	8003770 <xTaskCreateStatic>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e013      	b.n	8002b7a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d110      	bne.n	8002b7a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fe5c 	bl	8003828 <xTaskCreate>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <osThreadNew+0x146>
          hTask = NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b7a:	697b      	ldr	r3, [r7, #20]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3738      	adds	r7, #56	; 0x38
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000134 	.word	0x20000134

08002b88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b90:	f3ef 8305 	mrs	r3, IPSR
 8002b94:	613b      	str	r3, [r7, #16]
  return(result);
 8002b96:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10f      	bne.n	8002bbc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <osDelay+0x34>
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <osDelay+0x58>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d109      	bne.n	8002bc4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8002bb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <osDelay+0x3c>
    stat = osErrorISR;
 8002bbc:	f06f 0305 	mvn.w	r3, #5
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e007      	b.n	8002bd4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 ff7e 	bl	8003ad0 <vTaskDelay>
    }
  }

  return (stat);
 8002bd4:	697b      	ldr	r3, [r7, #20]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000134 	.word	0x20000134

08002be4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <vApplicationGetIdleTaskMemory+0x28>)
 8002bf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4a05      	ldr	r2, [pc, #20]	; (8002c10 <vApplicationGetIdleTaskMemory+0x2c>)
 8002bfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2280      	movs	r2, #128	; 0x80
 8002c00:	601a      	str	r2, [r3, #0]
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	20000138 	.word	0x20000138
 8002c10:	200001f4 	.word	0x200001f4

08002c14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4a06      	ldr	r2, [pc, #24]	; (8002c44 <vApplicationGetTimerTaskMemory+0x30>)
 8002c2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	200003f4 	.word	0x200003f4
 8002c44:	200004b0 	.word	0x200004b0

08002c48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f103 0208 	add.w	r2, r3, #8
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f103 0208 	add.w	r2, r3, #8
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f103 0208 	add.w	r2, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfa:	d103      	bne.n	8002d04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	e00c      	b.n	8002d1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3308      	adds	r3, #8
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	e002      	b.n	8002d12 <vListInsert+0x2e>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d2f6      	bcs.n	8002d0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	601a      	str	r2, [r3, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6892      	ldr	r2, [r2, #8]
 8002d6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6852      	ldr	r2, [r2, #4]
 8002d74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d103      	bne.n	8002d88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	1e5a      	subs	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
	...

08002da8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dd2:	f001 fff3 	bl	8004dbc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	68f9      	ldr	r1, [r7, #12]
 8002de0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	441a      	add	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	3b01      	subs	r3, #1
 8002e04:	68f9      	ldr	r1, [r7, #12]
 8002e06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	441a      	add	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	22ff      	movs	r2, #255	; 0xff
 8002e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	22ff      	movs	r2, #255	; 0xff
 8002e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d114      	bne.n	8002e52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01a      	beq.n	8002e66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3310      	adds	r3, #16
 8002e34:	4618      	mov	r0, r3
 8002e36:	f001 f91b 	bl	8004070 <xTaskRemoveFromEventList>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d012      	beq.n	8002e66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <xQueueGenericReset+0xcc>)
 8002e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	e009      	b.n	8002e66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3310      	adds	r3, #16
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fef6 	bl	8002c48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3324      	adds	r3, #36	; 0x24
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fef1 	bl	8002c48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e66:	f001 ffd9 	bl	8004e1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e6a:	2301      	movs	r3, #1
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	e000ed04 	.word	0xe000ed04

08002e78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08e      	sub	sp, #56	; 0x38
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <xQueueGenericCreateStatic+0x52>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <xQueueGenericCreateStatic+0x56>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <xQueueGenericCreateStatic+0x58>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	623b      	str	r3, [r7, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <xQueueGenericCreateStatic+0x7e>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <xQueueGenericCreateStatic+0x82>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <xQueueGenericCreateStatic+0x84>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	61fb      	str	r3, [r7, #28]
}
 8002f12:	bf00      	nop
 8002f14:	e7fe      	b.n	8002f14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f16:	2350      	movs	r3, #80	; 0x50
 8002f18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b50      	cmp	r3, #80	; 0x50
 8002f1e:	d00a      	beq.n	8002f36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	61bb      	str	r3, [r7, #24]
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f48:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f805 	bl	8002f66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3730      	adds	r7, #48	; 0x30
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	e002      	b.n	8002f88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f94:	2101      	movs	r1, #1
 8002f96:	69b8      	ldr	r0, [r7, #24]
 8002f98:	f7ff ff06 	bl	8002da8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08e      	sub	sp, #56	; 0x38
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <xQueueGenericSend+0x32>
	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fda:	bf00      	nop
 8002fdc:	e7fe      	b.n	8002fdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d103      	bne.n	8002fec <xQueueGenericSend+0x40>
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <xQueueGenericSend+0x44>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <xQueueGenericSend+0x46>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <xQueueGenericSend+0x60>
	__asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003008:	bf00      	nop
 800300a:	e7fe      	b.n	800300a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d103      	bne.n	800301a <xQueueGenericSend+0x6e>
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <xQueueGenericSend+0x72>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <xQueueGenericSend+0x74>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <xQueueGenericSend+0x8e>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	623b      	str	r3, [r7, #32]
}
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800303a:	f001 f9df 	bl	80043fc <xTaskGetSchedulerState>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <xQueueGenericSend+0x9e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <xQueueGenericSend+0xa2>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <xQueueGenericSend+0xa4>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <xQueueGenericSend+0xbe>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	61fb      	str	r3, [r7, #28]
}
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800306a:	f001 fea7 	bl	8004dbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <xQueueGenericSend+0xd4>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d129      	bne.n	80030d4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003086:	f000 fa07 	bl	8003498 <prvCopyDataToQueue>
 800308a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b00      	cmp	r3, #0
 8003092:	d010      	beq.n	80030b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	3324      	adds	r3, #36	; 0x24
 8003098:	4618      	mov	r0, r3
 800309a:	f000 ffe9 	bl	8004070 <xTaskRemoveFromEventList>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030a4:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <xQueueGenericSend+0x1f8>)
 80030a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	e00a      	b.n	80030cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030bc:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <xQueueGenericSend+0x1f8>)
 80030be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030cc:	f001 fea6 	bl	8004e1c <vPortExitCritical>
				return pdPASS;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e063      	b.n	800319c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d103      	bne.n	80030e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030da:	f001 fe9f 	bl	8004e1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	e05c      	b.n	800319c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 f823 	bl	8004138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030f6:	f001 fe91 	bl	8004e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030fa:	f000 fd8d 	bl	8003c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030fe:	f001 fe5d 	bl	8004dbc <vPortEnterCritical>
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003108:	b25b      	sxtb	r3, r3
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d103      	bne.n	8003118 <xQueueGenericSend+0x16c>
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800311e:	b25b      	sxtb	r3, r3
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d103      	bne.n	800312e <xQueueGenericSend+0x182>
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800312e:	f001 fe75 	bl	8004e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003132:	1d3a      	adds	r2, r7, #4
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f001 f812 	bl	8004164 <xTaskCheckForTimeOut>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d124      	bne.n	8003190 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003148:	f000 fa9e 	bl	8003688 <prvIsQueueFull>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d018      	beq.n	8003184 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	3310      	adds	r3, #16
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f000 ff38 	bl	8003fd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003162:	f000 fa29 	bl	80035b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003166:	f000 fd65 	bl	8003c34 <xTaskResumeAll>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	f47f af7c 	bne.w	800306a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <xQueueGenericSend+0x1f8>)
 8003174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	e772      	b.n	800306a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003186:	f000 fa17 	bl	80035b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800318a:	f000 fd53 	bl	8003c34 <xTaskResumeAll>
 800318e:	e76c      	b.n	800306a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003192:	f000 fa11 	bl	80035b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003196:	f000 fd4d 	bl	8003c34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800319a:	2300      	movs	r3, #0
		}
	}
}
 800319c:	4618      	mov	r0, r3
 800319e:	3738      	adds	r7, #56	; 0x38
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	e000ed04 	.word	0xe000ed04

080031a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08e      	sub	sp, #56	; 0x38
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031d2:	bf00      	nop
 80031d4:	e7fe      	b.n	80031d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d103      	bne.n	80031e4 <xQueueGenericSendFromISR+0x3c>
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <xQueueGenericSendFromISR+0x40>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <xQueueGenericSendFromISR+0x42>
 80031e8:	2300      	movs	r3, #0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10a      	bne.n	8003204 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	623b      	str	r3, [r7, #32]
}
 8003200:	bf00      	nop
 8003202:	e7fe      	b.n	8003202 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d103      	bne.n	8003212 <xQueueGenericSendFromISR+0x6a>
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <xQueueGenericSendFromISR+0x6e>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <xQueueGenericSendFromISR+0x70>
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	61fb      	str	r3, [r7, #28]
}
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003232:	f001 fe85 	bl	8004f40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003236:	f3ef 8211 	mrs	r2, BASEPRI
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	61ba      	str	r2, [r7, #24]
 800324c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800324e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <xQueueGenericSendFromISR+0xbc>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d12c      	bne.n	80032be <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003274:	f000 f910 	bl	8003498 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003278:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d112      	bne.n	80032a8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	3324      	adds	r3, #36	; 0x24
 800328e:	4618      	mov	r0, r3
 8003290:	f000 feee 	bl	8004070 <xTaskRemoveFromEventList>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00e      	beq.n	80032b8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00b      	beq.n	80032b8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e007      	b.n	80032b8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032ac:	3301      	adds	r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	b25a      	sxtb	r2, r3
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032b8:	2301      	movs	r3, #1
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80032bc:	e001      	b.n	80032c2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	637b      	str	r3, [r7, #52]	; 0x34
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3738      	adds	r7, #56	; 0x38
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <xQueueReceive+0x30>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	623b      	str	r3, [r7, #32]
}
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <xQueueReceive+0x3e>
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <xQueueReceive+0x42>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <xQueueReceive+0x44>
 800331a:	2300      	movs	r3, #0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <xQueueReceive+0x5e>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	61fb      	str	r3, [r7, #28]
}
 8003332:	bf00      	nop
 8003334:	e7fe      	b.n	8003334 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003336:	f001 f861 	bl	80043fc <xTaskGetSchedulerState>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <xQueueReceive+0x6e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <xQueueReceive+0x72>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <xQueueReceive+0x74>
 800334a:	2300      	movs	r3, #0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <xQueueReceive+0x8e>
	__asm volatile
 8003350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	61bb      	str	r3, [r7, #24]
}
 8003362:	bf00      	nop
 8003364:	e7fe      	b.n	8003364 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003366:	f001 fd29 	bl	8004dbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01f      	beq.n	80033b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800337a:	f000 f8f7 	bl	800356c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	1e5a      	subs	r2, r3, #1
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00f      	beq.n	80033ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	3310      	adds	r3, #16
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fe6c 	bl	8004070 <xTaskRemoveFromEventList>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800339e:	4b3d      	ldr	r3, [pc, #244]	; (8003494 <xQueueReceive+0x1bc>)
 80033a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033ae:	f001 fd35 	bl	8004e1c <vPortExitCritical>
				return pdPASS;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e069      	b.n	800348a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033bc:	f001 fd2e 	bl	8004e1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e062      	b.n	800348a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033ca:	f107 0310 	add.w	r3, r7, #16
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 feb2 	bl	8004138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033d8:	f001 fd20 	bl	8004e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033dc:	f000 fc1c 	bl	8003c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033e0:	f001 fcec 	bl	8004dbc <vPortEnterCritical>
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ea:	b25b      	sxtb	r3, r3
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d103      	bne.n	80033fa <xQueueReceive+0x122>
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003400:	b25b      	sxtb	r3, r3
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d103      	bne.n	8003410 <xQueueReceive+0x138>
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003410:	f001 fd04 	bl	8004e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003414:	1d3a      	adds	r2, r7, #4
 8003416:	f107 0310 	add.w	r3, r7, #16
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fea1 	bl	8004164 <xTaskCheckForTimeOut>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d123      	bne.n	8003470 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800342a:	f000 f917 	bl	800365c <prvIsQueueEmpty>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d017      	beq.n	8003464 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	3324      	adds	r3, #36	; 0x24
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fdc7 	bl	8003fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003444:	f000 f8b8 	bl	80035b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003448:	f000 fbf4 	bl	8003c34 <xTaskResumeAll>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d189      	bne.n	8003366 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <xQueueReceive+0x1bc>)
 8003454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	e780      	b.n	8003366 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003466:	f000 f8a7 	bl	80035b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800346a:	f000 fbe3 	bl	8003c34 <xTaskResumeAll>
 800346e:	e77a      	b.n	8003366 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003472:	f000 f8a1 	bl	80035b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003476:	f000 fbdd 	bl	8003c34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800347a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800347c:	f000 f8ee 	bl	800365c <prvIsQueueEmpty>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	f43f af6f 	beq.w	8003366 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003488:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800348a:	4618      	mov	r0, r3
 800348c:	3730      	adds	r7, #48	; 0x30
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	e000ed04 	.word	0xe000ed04

08003498 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10d      	bne.n	80034d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d14d      	bne.n	800355a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 ffb8 	bl	8004438 <xTaskPriorityDisinherit>
 80034c8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	e043      	b.n	800355a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d119      	bne.n	800350c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6898      	ldr	r0, [r3, #8]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	461a      	mov	r2, r3
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	f002 f865 	bl	80055b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	441a      	add	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d32b      	bcc.n	800355a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	e026      	b.n	800355a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	68d8      	ldr	r0, [r3, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	461a      	mov	r2, r3
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	f002 f84b 	bl	80055b2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	425b      	negs	r3, r3
 8003526:	441a      	add	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d207      	bcs.n	8003548 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	425b      	negs	r3, r3
 8003542:	441a      	add	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d105      	bne.n	800355a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	3b01      	subs	r3, #1
 8003558:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003562:	697b      	ldr	r3, [r7, #20]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d018      	beq.n	80035b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	441a      	add	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	d303      	bcc.n	80035a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68d9      	ldr	r1, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	461a      	mov	r2, r3
 80035aa:	6838      	ldr	r0, [r7, #0]
 80035ac:	f002 f801 	bl	80055b2 <memcpy>
	}
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035c0:	f001 fbfc 	bl	8004dbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035cc:	e011      	b.n	80035f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3324      	adds	r3, #36	; 0x24
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fd48 	bl	8004070 <xTaskRemoveFromEventList>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80035e6:	f000 fe1f 	bl	8004228 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	dce9      	bgt.n	80035ce <prvUnlockQueue+0x16>
 80035fa:	e000      	b.n	80035fe <prvUnlockQueue+0x46>
					break;
 80035fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	22ff      	movs	r2, #255	; 0xff
 8003602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003606:	f001 fc09 	bl	8004e1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800360a:	f001 fbd7 	bl	8004dbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003614:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003616:	e011      	b.n	800363c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d012      	beq.n	8003646 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3310      	adds	r3, #16
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fd23 	bl	8004070 <xTaskRemoveFromEventList>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003630:	f000 fdfa 	bl	8004228 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003634:	7bbb      	ldrb	r3, [r7, #14]
 8003636:	3b01      	subs	r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800363c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003640:	2b00      	cmp	r3, #0
 8003642:	dce9      	bgt.n	8003618 <prvUnlockQueue+0x60>
 8003644:	e000      	b.n	8003648 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003646:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	22ff      	movs	r2, #255	; 0xff
 800364c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003650:	f001 fbe4 	bl	8004e1c <vPortExitCritical>
}
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003664:	f001 fbaa 	bl	8004dbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003670:	2301      	movs	r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e001      	b.n	800367a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800367a:	f001 fbcf 	bl	8004e1c <vPortExitCritical>

	return xReturn;
 800367e:	68fb      	ldr	r3, [r7, #12]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003690:	f001 fb94 	bl	8004dbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	429a      	cmp	r2, r3
 800369e:	d102      	bne.n	80036a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036a0:	2301      	movs	r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	e001      	b.n	80036aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036aa:	f001 fbb7 	bl	8004e1c <vPortExitCritical>

	return xReturn;
 80036ae:	68fb      	ldr	r3, [r7, #12]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e014      	b.n	80036f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036c8:	4a0e      	ldr	r2, [pc, #56]	; (8003704 <vQueueAddToRegistry+0x4c>)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036d4:	490b      	ldr	r1, [pc, #44]	; (8003704 <vQueueAddToRegistry+0x4c>)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <vQueueAddToRegistry+0x4c>)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80036ea:	e006      	b.n	80036fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b07      	cmp	r3, #7
 80036f6:	d9e7      	bls.n	80036c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	200008b0 	.word	0x200008b0

08003708 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003718:	f001 fb50 	bl	8004dbc <vPortEnterCritical>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003722:	b25b      	sxtb	r3, r3
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d103      	bne.n	8003732 <vQueueWaitForMessageRestricted+0x2a>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003738:	b25b      	sxtb	r3, r3
 800373a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373e:	d103      	bne.n	8003748 <vQueueWaitForMessageRestricted+0x40>
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003748:	f001 fb68 	bl	8004e1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3324      	adds	r3, #36	; 0x24
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fc5b 	bl	8004018 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003762:	6978      	ldr	r0, [r7, #20]
 8003764:	f7ff ff28 	bl	80035b8 <prvUnlockQueue>
	}
 8003768:	bf00      	nop
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08e      	sub	sp, #56	; 0x38
 8003774:	af04      	add	r7, sp, #16
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	623b      	str	r3, [r7, #32]
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	61fb      	str	r3, [r7, #28]
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037b6:	23bc      	movs	r3, #188	; 0xbc
 80037b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2bbc      	cmp	r3, #188	; 0xbc
 80037be:	d00a      	beq.n	80037d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	61bb      	str	r3, [r7, #24]
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01e      	beq.n	800381a <xTaskCreateStatic+0xaa>
 80037dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01b      	beq.n	800381a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037f4:	2300      	movs	r3, #0
 80037f6:	9303      	str	r3, [sp, #12]
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	9302      	str	r3, [sp, #8]
 80037fc:	f107 0314 	add.w	r3, r7, #20
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f851 	bl	80038b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003814:	f000 f8ec 	bl	80039f0 <prvAddNewTaskToReadyList>
 8003818:	e001      	b.n	800381e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800381e:	697b      	ldr	r3, [r7, #20]
	}
 8003820:	4618      	mov	r0, r3
 8003822:	3728      	adds	r7, #40	; 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08c      	sub	sp, #48	; 0x30
 800382c:	af04      	add	r7, sp, #16
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4618      	mov	r0, r3
 800383e:	f001 fbbd 	bl	8004fbc <pvPortMalloc>
 8003842:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00e      	beq.n	8003868 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800384a:	20bc      	movs	r0, #188	; 0xbc
 800384c:	f001 fbb6 	bl	8004fbc <pvPortMalloc>
 8003850:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
 800385e:	e005      	b.n	800386c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003860:	6978      	ldr	r0, [r7, #20]
 8003862:	f001 fc6f 	bl	8005144 <vPortFree>
 8003866:	e001      	b.n	800386c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d017      	beq.n	80038a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	2300      	movs	r3, #0
 800387e:	9303      	str	r3, [sp, #12]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	9302      	str	r3, [sp, #8]
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f80f 	bl	80038b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003896:	69f8      	ldr	r0, [r7, #28]
 8003898:	f000 f8aa 	bl	80039f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800389c:	2301      	movs	r3, #1
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	e002      	b.n	80038a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038a2:	f04f 33ff 	mov.w	r3, #4294967295
 80038a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038a8:	69bb      	ldr	r3, [r7, #24]
	}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	461a      	mov	r2, r3
 80038cc:	21a5      	movs	r1, #165	; 0xa5
 80038ce:	f001 fe7e 	bl	80055ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038dc:	3b01      	subs	r3, #1
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f023 0307 	bic.w	r3, r3, #7
 80038ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <prvInitialiseNewTask+0x58>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	617b      	str	r3, [r7, #20]
}
 8003908:	bf00      	nop
 800390a:	e7fe      	b.n	800390a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	e012      	b.n	8003938 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	7819      	ldrb	r1, [r3, #0]
 800391a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	4413      	add	r3, r2
 8003920:	3334      	adds	r3, #52	; 0x34
 8003922:	460a      	mov	r2, r1
 8003924:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d006      	beq.n	8003940 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3301      	adds	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b0f      	cmp	r3, #15
 800393c:	d9e9      	bls.n	8003912 <prvInitialiseNewTask+0x5e>
 800393e:	e000      	b.n	8003942 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003940:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	2b37      	cmp	r3, #55	; 0x37
 800394e:	d901      	bls.n	8003954 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003950:	2337      	movs	r3, #55	; 0x37
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800395e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	2200      	movs	r2, #0
 8003964:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	3304      	adds	r3, #4
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff f98b 	bl	8002c86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	3318      	adds	r3, #24
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff f986 	bl	8002c86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	2200      	movs	r2, #0
 8003994:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	2200      	movs	r2, #0
 800399c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	3354      	adds	r3, #84	; 0x54
 80039a4:	2260      	movs	r2, #96	; 0x60
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 fe10 	bl	80055ce <memset>
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <prvInitialiseNewTask+0x130>)
 80039b2:	659a      	str	r2, [r3, #88]	; 0x58
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	4a0c      	ldr	r2, [pc, #48]	; (80039e8 <prvInitialiseNewTask+0x134>)
 80039b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <prvInitialiseNewTask+0x138>)
 80039be:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	68f9      	ldr	r1, [r7, #12]
 80039c4:	69b8      	ldr	r0, [r7, #24]
 80039c6:	f001 f90b 	bl	8004be0 <pxPortInitialiseStack>
 80039ca:	4602      	mov	r2, r0
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039dc:	bf00      	nop
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	08006898 	.word	0x08006898
 80039e8:	080068b8 	.word	0x080068b8
 80039ec:	08006878 	.word	0x08006878

080039f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039f8:	f001 f9e0 	bl	8004dbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039fc:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <prvAddNewTaskToReadyList+0xc4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3301      	adds	r3, #1
 8003a02:	4a2c      	ldr	r2, [pc, #176]	; (8003ab4 <prvAddNewTaskToReadyList+0xc4>)
 8003a04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a06:	4b2c      	ldr	r3, [pc, #176]	; (8003ab8 <prvAddNewTaskToReadyList+0xc8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a0e:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <prvAddNewTaskToReadyList+0xc8>)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a14:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <prvAddNewTaskToReadyList+0xc4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d110      	bne.n	8003a3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a1c:	f000 fc28 	bl	8004270 <prvInitialiseTaskLists>
 8003a20:	e00d      	b.n	8003a3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a22:	4b26      	ldr	r3, [pc, #152]	; (8003abc <prvAddNewTaskToReadyList+0xcc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a2a:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <prvAddNewTaskToReadyList+0xc8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d802      	bhi.n	8003a3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <prvAddNewTaskToReadyList+0xc8>)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <prvAddNewTaskToReadyList+0xd0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3301      	adds	r3, #1
 8003a44:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <prvAddNewTaskToReadyList+0xd0>)
 8003a46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <prvAddNewTaskToReadyList+0xd0>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <prvAddNewTaskToReadyList+0xd4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d903      	bls.n	8003a64 <prvAddNewTaskToReadyList+0x74>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <prvAddNewTaskToReadyList+0xd4>)
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <prvAddNewTaskToReadyList+0xd8>)
 8003a72:	441a      	add	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	f7ff f90f 	bl	8002c9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a80:	f001 f9cc 	bl	8004e1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a84:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <prvAddNewTaskToReadyList+0xcc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00e      	beq.n	8003aaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <prvAddNewTaskToReadyList+0xc8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d207      	bcs.n	8003aaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <prvAddNewTaskToReadyList+0xdc>)
 8003a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000dc4 	.word	0x20000dc4
 8003ab8:	200008f0 	.word	0x200008f0
 8003abc:	20000dd0 	.word	0x20000dd0
 8003ac0:	20000de0 	.word	0x20000de0
 8003ac4:	20000dcc 	.word	0x20000dcc
 8003ac8:	200008f4 	.word	0x200008f4
 8003acc:	e000ed04 	.word	0xe000ed04

08003ad0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d017      	beq.n	8003b12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ae2:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <vTaskDelay+0x60>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <vTaskDelay+0x30>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	60bb      	str	r3, [r7, #8]
}
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b00:	f000 f88a 	bl	8003c18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b04:	2100      	movs	r1, #0
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fd04 	bl	8004514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b0c:	f000 f892 	bl	8003c34 <xTaskResumeAll>
 8003b10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d107      	bne.n	8003b28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <vTaskDelay+0x64>)
 8003b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000dec 	.word	0x20000dec
 8003b34:	e000ed04 	.word	0xe000ed04

08003b38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b46:	463a      	mov	r2, r7
 8003b48:	1d39      	adds	r1, r7, #4
 8003b4a:	f107 0308 	add.w	r3, r7, #8
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff f848 	bl	8002be4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b54:	6839      	ldr	r1, [r7, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	9202      	str	r2, [sp, #8]
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2300      	movs	r3, #0
 8003b64:	460a      	mov	r2, r1
 8003b66:	4924      	ldr	r1, [pc, #144]	; (8003bf8 <vTaskStartScheduler+0xc0>)
 8003b68:	4824      	ldr	r0, [pc, #144]	; (8003bfc <vTaskStartScheduler+0xc4>)
 8003b6a:	f7ff fe01 	bl	8003770 <xTaskCreateStatic>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4a23      	ldr	r2, [pc, #140]	; (8003c00 <vTaskStartScheduler+0xc8>)
 8003b72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b74:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <vTaskStartScheduler+0xc8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	e001      	b.n	8003b86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d102      	bne.n	8003b92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b8c:	f000 fd16 	bl	80045bc <xTimerCreateTimerTask>
 8003b90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d11b      	bne.n	8003bd0 <vTaskStartScheduler+0x98>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	613b      	str	r3, [r7, #16]
}
 8003baa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bac:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <vTaskStartScheduler+0xcc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3354      	adds	r3, #84	; 0x54
 8003bb2:	4a15      	ldr	r2, [pc, #84]	; (8003c08 <vTaskStartScheduler+0xd0>)
 8003bb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bb6:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <vTaskStartScheduler+0xd4>)
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bbe:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <vTaskStartScheduler+0xd8>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003bc4:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <vTaskStartScheduler+0xdc>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bca:	f001 f885 	bl	8004cd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bce:	e00e      	b.n	8003bee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d10a      	bne.n	8003bee <vTaskStartScheduler+0xb6>
	__asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	60fb      	str	r3, [r7, #12]
}
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <vTaskStartScheduler+0xb4>
}
 8003bee:	bf00      	nop
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	08006824 	.word	0x08006824
 8003bfc:	08004241 	.word	0x08004241
 8003c00:	20000de8 	.word	0x20000de8
 8003c04:	200008f0 	.word	0x200008f0
 8003c08:	20000018 	.word	0x20000018
 8003c0c:	20000de4 	.word	0x20000de4
 8003c10:	20000dd0 	.word	0x20000dd0
 8003c14:	20000dc8 	.word	0x20000dc8

08003c18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <vTaskSuspendAll+0x18>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	4a03      	ldr	r2, [pc, #12]	; (8003c30 <vTaskSuspendAll+0x18>)
 8003c24:	6013      	str	r3, [r2, #0]
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000dec 	.word	0x20000dec

08003c34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c42:	4b42      	ldr	r3, [pc, #264]	; (8003d4c <xTaskResumeAll+0x118>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	603b      	str	r3, [r7, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c60:	f001 f8ac 	bl	8004dbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c64:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <xTaskResumeAll+0x118>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	4a38      	ldr	r2, [pc, #224]	; (8003d4c <xTaskResumeAll+0x118>)
 8003c6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c6e:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <xTaskResumeAll+0x118>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d162      	bne.n	8003d3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c76:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <xTaskResumeAll+0x11c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d05e      	beq.n	8003d3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c7e:	e02f      	b.n	8003ce0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c80:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <xTaskResumeAll+0x120>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3318      	adds	r3, #24
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff f861 	bl	8002d54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3304      	adds	r3, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff f85c 	bl	8002d54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <xTaskResumeAll+0x124>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d903      	bls.n	8003cb0 <xTaskResumeAll+0x7c>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <xTaskResumeAll+0x124>)
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4a27      	ldr	r2, [pc, #156]	; (8003d5c <xTaskResumeAll+0x128>)
 8003cbe:	441a      	add	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f7fe ffe9 	bl	8002c9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <xTaskResumeAll+0x12c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d302      	bcc.n	8003ce0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003cda:	4b22      	ldr	r3, [pc, #136]	; (8003d64 <xTaskResumeAll+0x130>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ce0:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <xTaskResumeAll+0x120>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1cb      	bne.n	8003c80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cee:	f000 fb61 	bl	80043b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <xTaskResumeAll+0x134>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d010      	beq.n	8003d20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cfe:	f000 f845 	bl	8003d8c <xTaskIncrementTick>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d08:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <xTaskResumeAll+0x130>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f1      	bne.n	8003cfe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003d1a:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <xTaskResumeAll+0x134>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d20:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <xTaskResumeAll+0x130>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d009      	beq.n	8003d3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <xTaskResumeAll+0x138>)
 8003d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d3c:	f001 f86e 	bl	8004e1c <vPortExitCritical>

	return xAlreadyYielded;
 8003d40:	68bb      	ldr	r3, [r7, #8]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000dec 	.word	0x20000dec
 8003d50:	20000dc4 	.word	0x20000dc4
 8003d54:	20000d84 	.word	0x20000d84
 8003d58:	20000dcc 	.word	0x20000dcc
 8003d5c:	200008f4 	.word	0x200008f4
 8003d60:	200008f0 	.word	0x200008f0
 8003d64:	20000dd8 	.word	0x20000dd8
 8003d68:	20000dd4 	.word	0x20000dd4
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d76:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <xTaskGetTickCount+0x18>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d7c:	687b      	ldr	r3, [r7, #4]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	20000dc8 	.word	0x20000dc8

08003d8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d96:	4b51      	ldr	r3, [pc, #324]	; (8003edc <xTaskIncrementTick+0x150>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f040 808e 	bne.w	8003ebc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003da0:	4b4f      	ldr	r3, [pc, #316]	; (8003ee0 <xTaskIncrementTick+0x154>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003da8:	4a4d      	ldr	r2, [pc, #308]	; (8003ee0 <xTaskIncrementTick+0x154>)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d120      	bne.n	8003df6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003db4:	4b4b      	ldr	r3, [pc, #300]	; (8003ee4 <xTaskIncrementTick+0x158>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	603b      	str	r3, [r7, #0]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <xTaskIncrementTick+0x46>
 8003dd4:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <xTaskIncrementTick+0x158>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	4b43      	ldr	r3, [pc, #268]	; (8003ee8 <xTaskIncrementTick+0x15c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a41      	ldr	r2, [pc, #260]	; (8003ee4 <xTaskIncrementTick+0x158>)
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	4a41      	ldr	r2, [pc, #260]	; (8003ee8 <xTaskIncrementTick+0x15c>)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	4b40      	ldr	r3, [pc, #256]	; (8003eec <xTaskIncrementTick+0x160>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	4a3f      	ldr	r2, [pc, #252]	; (8003eec <xTaskIncrementTick+0x160>)
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	f000 fadf 	bl	80043b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003df6:	4b3e      	ldr	r3, [pc, #248]	; (8003ef0 <xTaskIncrementTick+0x164>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d34e      	bcc.n	8003e9e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e00:	4b38      	ldr	r3, [pc, #224]	; (8003ee4 <xTaskIncrementTick+0x158>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <xTaskIncrementTick+0x82>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <xTaskIncrementTick+0x84>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e14:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <xTaskIncrementTick+0x164>)
 8003e16:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1a:	601a      	str	r2, [r3, #0]
					break;
 8003e1c:	e03f      	b.n	8003e9e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e1e:	4b31      	ldr	r3, [pc, #196]	; (8003ee4 <xTaskIncrementTick+0x158>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d203      	bcs.n	8003e3e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e36:	4a2e      	ldr	r2, [pc, #184]	; (8003ef0 <xTaskIncrementTick+0x164>)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6013      	str	r3, [r2, #0]
						break;
 8003e3c:	e02f      	b.n	8003e9e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe ff86 	bl	8002d54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d004      	beq.n	8003e5a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	3318      	adds	r3, #24
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe ff7d 	bl	8002d54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5e:	4b25      	ldr	r3, [pc, #148]	; (8003ef4 <xTaskIncrementTick+0x168>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d903      	bls.n	8003e6e <xTaskIncrementTick+0xe2>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <xTaskIncrementTick+0x168>)
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <xTaskIncrementTick+0x16c>)
 8003e7c:	441a      	add	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f7fe ff0a 	bl	8002c9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <xTaskIncrementTick+0x170>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d3b3      	bcc.n	8003e00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e9c:	e7b0      	b.n	8003e00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e9e:	4b17      	ldr	r3, [pc, #92]	; (8003efc <xTaskIncrementTick+0x170>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	4914      	ldr	r1, [pc, #80]	; (8003ef8 <xTaskIncrementTick+0x16c>)
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d907      	bls.n	8003ec6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	e004      	b.n	8003ec6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003ebc:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <xTaskIncrementTick+0x174>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	4a0f      	ldr	r2, [pc, #60]	; (8003f00 <xTaskIncrementTick+0x174>)
 8003ec4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <xTaskIncrementTick+0x178>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ed2:	697b      	ldr	r3, [r7, #20]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000dec 	.word	0x20000dec
 8003ee0:	20000dc8 	.word	0x20000dc8
 8003ee4:	20000d7c 	.word	0x20000d7c
 8003ee8:	20000d80 	.word	0x20000d80
 8003eec:	20000ddc 	.word	0x20000ddc
 8003ef0:	20000de4 	.word	0x20000de4
 8003ef4:	20000dcc 	.word	0x20000dcc
 8003ef8:	200008f4 	.word	0x200008f4
 8003efc:	200008f0 	.word	0x200008f0
 8003f00:	20000dd4 	.word	0x20000dd4
 8003f04:	20000dd8 	.word	0x20000dd8

08003f08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f0e:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <vTaskSwitchContext+0xb0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f16:	4b29      	ldr	r3, [pc, #164]	; (8003fbc <vTaskSwitchContext+0xb4>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f1c:	e046      	b.n	8003fac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003f1e:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <vTaskSwitchContext+0xb4>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f24:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <vTaskSwitchContext+0xb8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	e010      	b.n	8003f4e <vTaskSwitchContext+0x46>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <vTaskSwitchContext+0x40>
	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	607b      	str	r3, [r7, #4]
}
 8003f44:	bf00      	nop
 8003f46:	e7fe      	b.n	8003f46 <vTaskSwitchContext+0x3e>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	491d      	ldr	r1, [pc, #116]	; (8003fc4 <vTaskSwitchContext+0xbc>)
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0e4      	beq.n	8003f2c <vTaskSwitchContext+0x24>
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <vTaskSwitchContext+0xbc>)
 8003f6e:	4413      	add	r3, r2
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	3308      	adds	r3, #8
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d104      	bne.n	8003f92 <vTaskSwitchContext+0x8a>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a0b      	ldr	r2, [pc, #44]	; (8003fc8 <vTaskSwitchContext+0xc0>)
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <vTaskSwitchContext+0xb8>)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <vTaskSwitchContext+0xc0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3354      	adds	r3, #84	; 0x54
 8003fa8:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <vTaskSwitchContext+0xc4>)
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000dec 	.word	0x20000dec
 8003fbc:	20000dd8 	.word	0x20000dd8
 8003fc0:	20000dcc 	.word	0x20000dcc
 8003fc4:	200008f4 	.word	0x200008f4
 8003fc8:	200008f0 	.word	0x200008f0
 8003fcc:	20000018 	.word	0x20000018

08003fd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	60fb      	str	r3, [r7, #12]
}
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ff6:	4b07      	ldr	r3, [pc, #28]	; (8004014 <vTaskPlaceOnEventList+0x44>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3318      	adds	r3, #24
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fe fe70 	bl	8002ce4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004004:	2101      	movs	r1, #1
 8004006:	6838      	ldr	r0, [r7, #0]
 8004008:	f000 fa84 	bl	8004514 <prvAddCurrentTaskToDelayedList>
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	200008f0 	.word	0x200008f0

08004018 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	617b      	str	r3, [r7, #20]
}
 800403c:	bf00      	nop
 800403e:	e7fe      	b.n	800403e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <vTaskPlaceOnEventListRestricted+0x54>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3318      	adds	r3, #24
 8004046:	4619      	mov	r1, r3
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7fe fe28 	bl	8002c9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
 8004058:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	68b8      	ldr	r0, [r7, #8]
 800405e:	f000 fa59 	bl	8004514 <prvAddCurrentTaskToDelayedList>
	}
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200008f0 	.word	0x200008f0

08004070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	60fb      	str	r3, [r7, #12]
}
 8004098:	bf00      	nop
 800409a:	e7fe      	b.n	800409a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	3318      	adds	r3, #24
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe fe57 	bl	8002d54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <xTaskRemoveFromEventList+0xb0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d11d      	bne.n	80040ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fe4e 	bl	8002d54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <xTaskRemoveFromEventList+0xb4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d903      	bls.n	80040cc <xTaskRemoveFromEventList+0x5c>
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	4a16      	ldr	r2, [pc, #88]	; (8004124 <xTaskRemoveFromEventList+0xb4>)
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4a13      	ldr	r2, [pc, #76]	; (8004128 <xTaskRemoveFromEventList+0xb8>)
 80040da:	441a      	add	r2, r3
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	3304      	adds	r3, #4
 80040e0:	4619      	mov	r1, r3
 80040e2:	4610      	mov	r0, r2
 80040e4:	f7fe fddb 	bl	8002c9e <vListInsertEnd>
 80040e8:	e005      	b.n	80040f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	3318      	adds	r3, #24
 80040ee:	4619      	mov	r1, r3
 80040f0:	480e      	ldr	r0, [pc, #56]	; (800412c <xTaskRemoveFromEventList+0xbc>)
 80040f2:	f7fe fdd4 	bl	8002c9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fa:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <xTaskRemoveFromEventList+0xc0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	429a      	cmp	r2, r3
 8004102:	d905      	bls.n	8004110 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004104:	2301      	movs	r3, #1
 8004106:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <xTaskRemoveFromEventList+0xc4>)
 800410a:	2201      	movs	r2, #1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e001      	b.n	8004114 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004114:	697b      	ldr	r3, [r7, #20]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000dec 	.word	0x20000dec
 8004124:	20000dcc 	.word	0x20000dcc
 8004128:	200008f4 	.word	0x200008f4
 800412c:	20000d84 	.word	0x20000d84
 8004130:	200008f0 	.word	0x200008f0
 8004134:	20000dd8 	.word	0x20000dd8

08004138 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <vTaskInternalSetTimeOutState+0x24>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <vTaskInternalSetTimeOutState+0x28>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	605a      	str	r2, [r3, #4]
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	20000ddc 	.word	0x20000ddc
 8004160:	20000dc8 	.word	0x20000dc8

08004164 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	613b      	str	r3, [r7, #16]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	60fb      	str	r3, [r7, #12]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80041a6:	f000 fe09 	bl	8004dbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041aa:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <xTaskCheckForTimeOut+0xbc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c2:	d102      	bne.n	80041ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e023      	b.n	8004212 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b15      	ldr	r3, [pc, #84]	; (8004224 <xTaskCheckForTimeOut+0xc0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d007      	beq.n	80041e6 <xTaskCheckForTimeOut+0x82>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d302      	bcc.n	80041e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041e0:	2301      	movs	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	e015      	b.n	8004212 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d20b      	bcs.n	8004208 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	1ad2      	subs	r2, r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff ff9b 	bl	8004138 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	e004      	b.n	8004212 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800420e:	2301      	movs	r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004212:	f000 fe03 	bl	8004e1c <vPortExitCritical>

	return xReturn;
 8004216:	69fb      	ldr	r3, [r7, #28]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3720      	adds	r7, #32
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000dc8 	.word	0x20000dc8
 8004224:	20000ddc 	.word	0x20000ddc

08004228 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <vTaskMissedYield+0x14>)
 800422e:	2201      	movs	r2, #1
 8004230:	601a      	str	r2, [r3, #0]
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000dd8 	.word	0x20000dd8

08004240 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004248:	f000 f852 	bl	80042f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <prvIdleTask+0x28>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d9f9      	bls.n	8004248 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <prvIdleTask+0x2c>)
 8004256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004264:	e7f0      	b.n	8004248 <prvIdleTask+0x8>
 8004266:	bf00      	nop
 8004268:	200008f4 	.word	0x200008f4
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	e00c      	b.n	8004296 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4a12      	ldr	r2, [pc, #72]	; (80042d0 <prvInitialiseTaskLists+0x60>)
 8004288:	4413      	add	r3, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fcdc 	bl	8002c48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3301      	adds	r3, #1
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b37      	cmp	r3, #55	; 0x37
 800429a:	d9ef      	bls.n	800427c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800429c:	480d      	ldr	r0, [pc, #52]	; (80042d4 <prvInitialiseTaskLists+0x64>)
 800429e:	f7fe fcd3 	bl	8002c48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042a2:	480d      	ldr	r0, [pc, #52]	; (80042d8 <prvInitialiseTaskLists+0x68>)
 80042a4:	f7fe fcd0 	bl	8002c48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042a8:	480c      	ldr	r0, [pc, #48]	; (80042dc <prvInitialiseTaskLists+0x6c>)
 80042aa:	f7fe fccd 	bl	8002c48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042ae:	480c      	ldr	r0, [pc, #48]	; (80042e0 <prvInitialiseTaskLists+0x70>)
 80042b0:	f7fe fcca 	bl	8002c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042b4:	480b      	ldr	r0, [pc, #44]	; (80042e4 <prvInitialiseTaskLists+0x74>)
 80042b6:	f7fe fcc7 	bl	8002c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <prvInitialiseTaskLists+0x78>)
 80042bc:	4a05      	ldr	r2, [pc, #20]	; (80042d4 <prvInitialiseTaskLists+0x64>)
 80042be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <prvInitialiseTaskLists+0x7c>)
 80042c2:	4a05      	ldr	r2, [pc, #20]	; (80042d8 <prvInitialiseTaskLists+0x68>)
 80042c4:	601a      	str	r2, [r3, #0]
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200008f4 	.word	0x200008f4
 80042d4:	20000d54 	.word	0x20000d54
 80042d8:	20000d68 	.word	0x20000d68
 80042dc:	20000d84 	.word	0x20000d84
 80042e0:	20000d98 	.word	0x20000d98
 80042e4:	20000db0 	.word	0x20000db0
 80042e8:	20000d7c 	.word	0x20000d7c
 80042ec:	20000d80 	.word	0x20000d80

080042f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042f6:	e019      	b.n	800432c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042f8:	f000 fd60 	bl	8004dbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80042fc:	4b10      	ldr	r3, [pc, #64]	; (8004340 <prvCheckTasksWaitingTermination+0x50>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe fd23 	bl	8002d54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800430e:	4b0d      	ldr	r3, [pc, #52]	; (8004344 <prvCheckTasksWaitingTermination+0x54>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3b01      	subs	r3, #1
 8004314:	4a0b      	ldr	r2, [pc, #44]	; (8004344 <prvCheckTasksWaitingTermination+0x54>)
 8004316:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <prvCheckTasksWaitingTermination+0x58>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3b01      	subs	r3, #1
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <prvCheckTasksWaitingTermination+0x58>)
 8004320:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004322:	f000 fd7b 	bl	8004e1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f810 	bl	800434c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <prvCheckTasksWaitingTermination+0x58>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e1      	bne.n	80042f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000d98 	.word	0x20000d98
 8004344:	20000dc4 	.word	0x20000dc4
 8004348:	20000dac 	.word	0x20000dac

0800434c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3354      	adds	r3, #84	; 0x54
 8004358:	4618      	mov	r0, r3
 800435a:	f001 fa71 	bl	8005840 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004364:	2b00      	cmp	r3, #0
 8004366:	d108      	bne.n	800437a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fee9 	bl	8005144 <vPortFree>
				vPortFree( pxTCB );
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fee6 	bl	8005144 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004378:	e018      	b.n	80043ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004380:	2b01      	cmp	r3, #1
 8004382:	d103      	bne.n	800438c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fedd 	bl	8005144 <vPortFree>
	}
 800438a:	e00f      	b.n	80043ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004392:	2b02      	cmp	r3, #2
 8004394:	d00a      	beq.n	80043ac <prvDeleteTCB+0x60>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	60fb      	str	r3, [r7, #12]
}
 80043a8:	bf00      	nop
 80043aa:	e7fe      	b.n	80043aa <prvDeleteTCB+0x5e>
	}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <prvResetNextTaskUnblockTime+0x40>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <prvResetNextTaskUnblockTime+0x14>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <prvResetNextTaskUnblockTime+0x16>
 80043c8:	2300      	movs	r3, #0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <prvResetNextTaskUnblockTime+0x44>)
 80043d0:	f04f 32ff 	mov.w	r2, #4294967295
 80043d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043d6:	e008      	b.n	80043ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <prvResetNextTaskUnblockTime+0x40>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <prvResetNextTaskUnblockTime+0x44>)
 80043e8:	6013      	str	r3, [r2, #0]
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	20000d7c 	.word	0x20000d7c
 80043f8:	20000de4 	.word	0x20000de4

080043fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <xTaskGetSchedulerState+0x34>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800440a:	2301      	movs	r3, #1
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	e008      	b.n	8004422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004410:	4b08      	ldr	r3, [pc, #32]	; (8004434 <xTaskGetSchedulerState+0x38>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004418:	2302      	movs	r3, #2
 800441a:	607b      	str	r3, [r7, #4]
 800441c:	e001      	b.n	8004422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004422:	687b      	ldr	r3, [r7, #4]
	}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000dd0 	.word	0x20000dd0
 8004434:	20000dec 	.word	0x20000dec

08004438 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d056      	beq.n	80044fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800444e:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <xTaskPriorityDisinherit+0xd0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	429a      	cmp	r2, r3
 8004456:	d00a      	beq.n	800446e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	60fb      	str	r3, [r7, #12]
}
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60bb      	str	r3, [r7, #8]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004490:	1e5a      	subs	r2, r3, #1
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449e:	429a      	cmp	r2, r3
 80044a0:	d02c      	beq.n	80044fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d128      	bne.n	80044fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	3304      	adds	r3, #4
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe fc50 	bl	8002d54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <xTaskPriorityDisinherit+0xd4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d903      	bls.n	80044dc <xTaskPriorityDisinherit+0xa4>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	4a0c      	ldr	r2, [pc, #48]	; (800450c <xTaskPriorityDisinherit+0xd4>)
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <xTaskPriorityDisinherit+0xd8>)
 80044ea:	441a      	add	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f7fe fbd3 	bl	8002c9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044f8:	2301      	movs	r3, #1
 80044fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044fc:	697b      	ldr	r3, [r7, #20]
	}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	200008f0 	.word	0x200008f0
 800450c:	20000dcc 	.word	0x20000dcc
 8004510:	200008f4 	.word	0x200008f4

08004514 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800451e:	4b21      	ldr	r3, [pc, #132]	; (80045a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004524:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3304      	adds	r3, #4
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe fc12 	bl	8002d54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d10a      	bne.n	800454e <prvAddCurrentTaskToDelayedList+0x3a>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453e:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4819      	ldr	r0, [pc, #100]	; (80045ac <prvAddCurrentTaskToDelayedList+0x98>)
 8004548:	f7fe fba9 	bl	8002c9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800454c:	e026      	b.n	800459c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4413      	add	r3, r2
 8004554:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	429a      	cmp	r2, r3
 8004564:	d209      	bcs.n	800457a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f7fe fbb6 	bl	8002ce4 <vListInsert>
}
 8004578:	e010      	b.n	800459c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800457a:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f7fe fbac 	bl	8002ce4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	d202      	bcs.n	800459c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000dc8 	.word	0x20000dc8
 80045a8:	200008f0 	.word	0x200008f0
 80045ac:	20000db0 	.word	0x20000db0
 80045b0:	20000d80 	.word	0x20000d80
 80045b4:	20000d7c 	.word	0x20000d7c
 80045b8:	20000de4 	.word	0x20000de4

080045bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	; 0x28
 80045c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045c6:	f000 facb 	bl	8004b60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045ca:	4b1c      	ldr	r3, [pc, #112]	; (800463c <xTimerCreateTimerTask+0x80>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d021      	beq.n	8004616 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045da:	1d3a      	adds	r2, r7, #4
 80045dc:	f107 0108 	add.w	r1, r7, #8
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fe fb15 	bl	8002c14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	9202      	str	r2, [sp, #8]
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	2302      	movs	r3, #2
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	2300      	movs	r3, #0
 80045fa:	460a      	mov	r2, r1
 80045fc:	4910      	ldr	r1, [pc, #64]	; (8004640 <xTimerCreateTimerTask+0x84>)
 80045fe:	4811      	ldr	r0, [pc, #68]	; (8004644 <xTimerCreateTimerTask+0x88>)
 8004600:	f7ff f8b6 	bl	8003770 <xTaskCreateStatic>
 8004604:	4603      	mov	r3, r0
 8004606:	4a10      	ldr	r2, [pc, #64]	; (8004648 <xTimerCreateTimerTask+0x8c>)
 8004608:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <xTimerCreateTimerTask+0x8c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004612:	2301      	movs	r3, #1
 8004614:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	613b      	str	r3, [r7, #16]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004632:	697b      	ldr	r3, [r7, #20]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20000e20 	.word	0x20000e20
 8004640:	0800682c 	.word	0x0800682c
 8004644:	08004769 	.word	0x08004769
 8004648:	20000e24 	.word	0x20000e24

0800464c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	623b      	str	r3, [r7, #32]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800467a:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <xTimerGenericCommand+0x98>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d02a      	beq.n	80046d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b05      	cmp	r3, #5
 8004692:	dc18      	bgt.n	80046c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004694:	f7ff feb2 	bl	80043fc <xTaskGetSchedulerState>
 8004698:	4603      	mov	r3, r0
 800469a:	2b02      	cmp	r3, #2
 800469c:	d109      	bne.n	80046b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800469e:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <xTimerGenericCommand+0x98>)
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	f107 0110 	add.w	r1, r7, #16
 80046a6:	2300      	movs	r3, #0
 80046a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046aa:	f7fe fc7f 	bl	8002fac <xQueueGenericSend>
 80046ae:	6278      	str	r0, [r7, #36]	; 0x24
 80046b0:	e012      	b.n	80046d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046b2:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <xTimerGenericCommand+0x98>)
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	f107 0110 	add.w	r1, r7, #16
 80046ba:	2300      	movs	r3, #0
 80046bc:	2200      	movs	r2, #0
 80046be:	f7fe fc75 	bl	8002fac <xQueueGenericSend>
 80046c2:	6278      	str	r0, [r7, #36]	; 0x24
 80046c4:	e008      	b.n	80046d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046c6:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <xTimerGenericCommand+0x98>)
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	f107 0110 	add.w	r1, r7, #16
 80046ce:	2300      	movs	r3, #0
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	f7fe fd69 	bl	80031a8 <xQueueGenericSendFromISR>
 80046d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3728      	adds	r7, #40	; 0x28
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000e20 	.word	0x20000e20

080046e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046f2:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <prvProcessExpiredTimer+0x7c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	3304      	adds	r3, #4
 8004700:	4618      	mov	r0, r3
 8004702:	f7fe fb27 	bl	8002d54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d122      	bne.n	8004754 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	18d1      	adds	r1, r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	6978      	ldr	r0, [r7, #20]
 800471c:	f000 f8c8 	bl	80048b0 <prvInsertTimerInActiveList>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d016      	beq.n	8004754 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004726:	2300      	movs	r3, #0
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	2300      	movs	r3, #0
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	2100      	movs	r1, #0
 8004730:	6978      	ldr	r0, [r7, #20]
 8004732:	f7ff ff8b 	bl	800464c <xTimerGenericCommand>
 8004736:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	60fb      	str	r3, [r7, #12]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	6978      	ldr	r0, [r7, #20]
 800475a:	4798      	blx	r3
}
 800475c:	bf00      	nop
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000e18 	.word	0x20000e18

08004768 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004770:	f107 0308 	add.w	r3, r7, #8
 8004774:	4618      	mov	r0, r3
 8004776:	f000 f857 	bl	8004828 <prvGetNextExpireTime>
 800477a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4619      	mov	r1, r3
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f803 	bl	800478c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004786:	f000 f8d5 	bl	8004934 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800478a:	e7f1      	b.n	8004770 <prvTimerTask+0x8>

0800478c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004796:	f7ff fa3f 	bl	8003c18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800479a:	f107 0308 	add.w	r3, r7, #8
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f866 	bl	8004870 <prvSampleTimeNow>
 80047a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d130      	bne.n	800480e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <prvProcessTimerOrBlockTask+0x3c>
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d806      	bhi.n	80047c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047ba:	f7ff fa3b 	bl	8003c34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047be:	68f9      	ldr	r1, [r7, #12]
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff ff91 	bl	80046e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047c6:	e024      	b.n	8004812 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047ce:	4b13      	ldr	r3, [pc, #76]	; (800481c <prvProcessTimerOrBlockTask+0x90>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047e0:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <prvProcessTimerOrBlockTask+0x94>)
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	4619      	mov	r1, r3
 80047ee:	f7fe ff8b 	bl	8003708 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047f2:	f7ff fa1f 	bl	8003c34 <xTaskResumeAll>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047fc:	4b09      	ldr	r3, [pc, #36]	; (8004824 <prvProcessTimerOrBlockTask+0x98>)
 80047fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	f3bf 8f6f 	isb	sy
}
 800480c:	e001      	b.n	8004812 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800480e:	f7ff fa11 	bl	8003c34 <xTaskResumeAll>
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000e1c 	.word	0x20000e1c
 8004820:	20000e20 	.word	0x20000e20
 8004824:	e000ed04 	.word	0xe000ed04

08004828 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004830:	4b0e      	ldr	r3, [pc, #56]	; (800486c <prvGetNextExpireTime+0x44>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d105      	bne.n	800485a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800484e:	4b07      	ldr	r3, [pc, #28]	; (800486c <prvGetNextExpireTime+0x44>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	e001      	b.n	800485e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800485e:	68fb      	ldr	r3, [r7, #12]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20000e18 	.word	0x20000e18

08004870 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004878:	f7ff fa7a 	bl	8003d70 <xTaskGetTickCount>
 800487c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800487e:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <prvSampleTimeNow+0x3c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	429a      	cmp	r2, r3
 8004886:	d205      	bcs.n	8004894 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004888:	f000 f908 	bl	8004a9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e002      	b.n	800489a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800489a:	4a04      	ldr	r2, [pc, #16]	; (80048ac <prvSampleTimeNow+0x3c>)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048a0:	68fb      	ldr	r3, [r7, #12]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000e28 	.word	0x20000e28

080048b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d812      	bhi.n	80048fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	1ad2      	subs	r2, r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d302      	bcc.n	80048ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e01b      	b.n	8004922 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048ea:	4b10      	ldr	r3, [pc, #64]	; (800492c <prvInsertTimerInActiveList+0x7c>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f7fe f9f5 	bl	8002ce4 <vListInsert>
 80048fa:	e012      	b.n	8004922 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d206      	bcs.n	8004912 <prvInsertTimerInActiveList+0x62>
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d302      	bcc.n	8004912 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800490c:	2301      	movs	r3, #1
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	e007      	b.n	8004922 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004912:	4b07      	ldr	r3, [pc, #28]	; (8004930 <prvInsertTimerInActiveList+0x80>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3304      	adds	r3, #4
 800491a:	4619      	mov	r1, r3
 800491c:	4610      	mov	r0, r2
 800491e:	f7fe f9e1 	bl	8002ce4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004922:	697b      	ldr	r3, [r7, #20]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000e1c 	.word	0x20000e1c
 8004930:	20000e18 	.word	0x20000e18

08004934 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08e      	sub	sp, #56	; 0x38
 8004938:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800493a:	e09d      	b.n	8004a78 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	da18      	bge.n	8004974 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004942:	1d3b      	adds	r3, r7, #4
 8004944:	3304      	adds	r3, #4
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	61fb      	str	r3, [r7, #28]
}
 8004960:	bf00      	nop
 8004962:	e7fe      	b.n	8004962 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800496a:	6850      	ldr	r0, [r2, #4]
 800496c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800496e:	6892      	ldr	r2, [r2, #8]
 8004970:	4611      	mov	r1, r2
 8004972:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	db7d      	blt.n	8004a76 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	3304      	adds	r3, #4
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe f9e2 	bl	8002d54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004990:	463b      	mov	r3, r7
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff ff6c 	bl	8004870 <prvSampleTimeNow>
 8004998:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b09      	cmp	r3, #9
 800499e:	d86b      	bhi.n	8004a78 <prvProcessReceivedCommands+0x144>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <prvProcessReceivedCommands+0x74>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049d1 	.word	0x080049d1
 80049b4:	08004a79 	.word	0x08004a79
 80049b8:	08004a2d 	.word	0x08004a2d
 80049bc:	08004a65 	.word	0x08004a65
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	080049d1 	.word	0x080049d1
 80049c8:	08004a79 	.word	0x08004a79
 80049cc:	08004a2d 	.word	0x08004a2d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	18d1      	adds	r1, r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049de:	f7ff ff67 	bl	80048b0 <prvInsertTimerInActiveList>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d047      	beq.n	8004a78 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d13f      	bne.n	8004a78 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	441a      	add	r2, r3
 8004a00:	2300      	movs	r3, #0
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2300      	movs	r3, #0
 8004a06:	2100      	movs	r1, #0
 8004a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a0a:	f7ff fe1f 	bl	800464c <xTimerGenericCommand>
 8004a0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d130      	bne.n	8004a78 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	61bb      	str	r3, [r7, #24]
}
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10a      	bne.n	8004a50 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	617b      	str	r3, [r7, #20]
}
 8004a4c:	bf00      	nop
 8004a4e:	e7fe      	b.n	8004a4e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	18d1      	adds	r1, r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a5e:	f7ff ff27 	bl	80048b0 <prvInsertTimerInActiveList>
					break;
 8004a62:	e009      	b.n	8004a78 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d104      	bne.n	8004a78 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a70:	f000 fb68 	bl	8005144 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a74:	e000      	b.n	8004a78 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a76:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <prvProcessReceivedCommands+0x164>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	1d39      	adds	r1, r7, #4
 8004a7e:	2200      	movs	r2, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fc29 	bl	80032d8 <xQueueReceive>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f47f af57 	bne.w	800493c <prvProcessReceivedCommands+0x8>
	}
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	3730      	adds	r7, #48	; 0x30
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20000e20 	.word	0x20000e20

08004a9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aa2:	e045      	b.n	8004b30 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aa4:	4b2c      	ldr	r3, [pc, #176]	; (8004b58 <prvSwitchTimerLists+0xbc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aae:	4b2a      	ldr	r3, [pc, #168]	; (8004b58 <prvSwitchTimerLists+0xbc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fe f949 	bl	8002d54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d12e      	bne.n	8004b30 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4413      	add	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d90e      	bls.n	8004b02 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004af0:	4b19      	ldr	r3, [pc, #100]	; (8004b58 <prvSwitchTimerLists+0xbc>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f7fe f8f2 	bl	8002ce4 <vListInsert>
 8004b00:	e016      	b.n	8004b30 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b02:	2300      	movs	r3, #0
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	2300      	movs	r3, #0
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff fd9d 	bl	800464c <xTimerGenericCommand>
 8004b12:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	603b      	str	r3, [r7, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <prvSwitchTimerLists+0xbc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1b4      	bne.n	8004aa4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b3a:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <prvSwitchTimerLists+0xbc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <prvSwitchTimerLists+0xc0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <prvSwitchTimerLists+0xbc>)
 8004b46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b48:	4a04      	ldr	r2, [pc, #16]	; (8004b5c <prvSwitchTimerLists+0xc0>)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	6013      	str	r3, [r2, #0]
}
 8004b4e:	bf00      	nop
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000e18 	.word	0x20000e18
 8004b5c:	20000e1c 	.word	0x20000e1c

08004b60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b66:	f000 f929 	bl	8004dbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b6a:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <prvCheckForValidListAndQueue+0x60>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d120      	bne.n	8004bb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b72:	4814      	ldr	r0, [pc, #80]	; (8004bc4 <prvCheckForValidListAndQueue+0x64>)
 8004b74:	f7fe f868 	bl	8002c48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b78:	4813      	ldr	r0, [pc, #76]	; (8004bc8 <prvCheckForValidListAndQueue+0x68>)
 8004b7a:	f7fe f865 	bl	8002c48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b7e:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <prvCheckForValidListAndQueue+0x6c>)
 8004b80:	4a10      	ldr	r2, [pc, #64]	; (8004bc4 <prvCheckForValidListAndQueue+0x64>)
 8004b82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b84:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <prvCheckForValidListAndQueue+0x70>)
 8004b86:	4a10      	ldr	r2, [pc, #64]	; (8004bc8 <prvCheckForValidListAndQueue+0x68>)
 8004b88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <prvCheckForValidListAndQueue+0x74>)
 8004b90:	4a11      	ldr	r2, [pc, #68]	; (8004bd8 <prvCheckForValidListAndQueue+0x78>)
 8004b92:	2110      	movs	r1, #16
 8004b94:	200a      	movs	r0, #10
 8004b96:	f7fe f96f 	bl	8002e78 <xQueueGenericCreateStatic>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <prvCheckForValidListAndQueue+0x60>)
 8004b9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <prvCheckForValidListAndQueue+0x60>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <prvCheckForValidListAndQueue+0x60>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	490b      	ldr	r1, [pc, #44]	; (8004bdc <prvCheckForValidListAndQueue+0x7c>)
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe fd82 	bl	80036b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bb4:	f000 f932 	bl	8004e1c <vPortExitCritical>
}
 8004bb8:	bf00      	nop
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000e20 	.word	0x20000e20
 8004bc4:	20000df0 	.word	0x20000df0
 8004bc8:	20000e04 	.word	0x20000e04
 8004bcc:	20000e18 	.word	0x20000e18
 8004bd0:	20000e1c 	.word	0x20000e1c
 8004bd4:	20000ecc 	.word	0x20000ecc
 8004bd8:	20000e2c 	.word	0x20000e2c
 8004bdc:	08006834 	.word	0x08006834

08004be0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3b04      	subs	r3, #4
 8004bf0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3b04      	subs	r3, #4
 8004bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f023 0201 	bic.w	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3b04      	subs	r3, #4
 8004c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c10:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <pxPortInitialiseStack+0x54>)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3b14      	subs	r3, #20
 8004c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3b20      	subs	r3, #32
 8004c26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c28:	68fb      	ldr	r3, [r7, #12]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr
 8004c34:	08004c39 	.word	0x08004c39

08004c38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c42:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <prvTaskExitError+0x54>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d00a      	beq.n	8004c62 <prvTaskExitError+0x2a>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	60fb      	str	r3, [r7, #12]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <prvTaskExitError+0x28>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	60bb      	str	r3, [r7, #8]
}
 8004c74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c76:	bf00      	nop
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0fc      	beq.n	8004c78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20000014 	.word	0x20000014

08004c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <pxCurrentTCBConst2>)
 8004c92:	6819      	ldr	r1, [r3, #0]
 8004c94:	6808      	ldr	r0, [r1, #0]
 8004c96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c9a:	f380 8809 	msr	PSP, r0
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f380 8811 	msr	BASEPRI, r0
 8004caa:	f04e 0e0d 	orr.w	lr, lr, #13
 8004cae:	4770      	bx	lr

08004cb0 <pxCurrentTCBConst2>:
 8004cb0:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop

08004cb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004cb8:	4806      	ldr	r0, [pc, #24]	; (8004cd4 <prvPortStartFirstTask+0x1c>)
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	6800      	ldr	r0, [r0, #0]
 8004cbe:	f380 8808 	msr	MSP, r0
 8004cc2:	b662      	cpsie	i
 8004cc4:	b661      	cpsie	f
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	df00      	svc	0
 8004cd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cd2:	bf00      	nop
 8004cd4:	e000ed08 	.word	0xe000ed08

08004cd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cde:	4b32      	ldr	r3, [pc, #200]	; (8004da8 <xPortStartScheduler+0xd0>)
 8004ce0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	22ff      	movs	r2, #255	; 0xff
 8004cee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <xPortStartScheduler+0xd4>)
 8004d04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d06:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <xPortStartScheduler+0xd8>)
 8004d08:	2207      	movs	r2, #7
 8004d0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d0c:	e009      	b.n	8004d22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004d0e:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <xPortStartScheduler+0xd8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	4a26      	ldr	r2, [pc, #152]	; (8004db0 <xPortStartScheduler+0xd8>)
 8004d16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2a:	2b80      	cmp	r3, #128	; 0x80
 8004d2c:	d0ef      	beq.n	8004d0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d2e:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <xPortStartScheduler+0xd8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1c3 0307 	rsb	r3, r3, #7
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d00a      	beq.n	8004d50 <xPortStartScheduler+0x78>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	60bb      	str	r3, [r7, #8]
}
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d50:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <xPortStartScheduler+0xd8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <xPortStartScheduler+0xd8>)
 8004d58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <xPortStartScheduler+0xd8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d62:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <xPortStartScheduler+0xd8>)
 8004d64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <xPortStartScheduler+0xdc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a10      	ldr	r2, [pc, #64]	; (8004db4 <xPortStartScheduler+0xdc>)
 8004d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d7a:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <xPortStartScheduler+0xdc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a0d      	ldr	r2, [pc, #52]	; (8004db4 <xPortStartScheduler+0xdc>)
 8004d80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d86:	f000 f8b9 	bl	8004efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d8a:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <xPortStartScheduler+0xe0>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d90:	f7ff ff92 	bl	8004cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d94:	f7ff f8b8 	bl	8003f08 <vTaskSwitchContext>
	prvTaskExitError();
 8004d98:	f7ff ff4e 	bl	8004c38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	e000e400 	.word	0xe000e400
 8004dac:	20000f1c 	.word	0x20000f1c
 8004db0:	20000f20 	.word	0x20000f20
 8004db4:	e000ed20 	.word	0xe000ed20
 8004db8:	20000014 	.word	0x20000014

08004dbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	607b      	str	r3, [r7, #4]
}
 8004dd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dd6:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <vPortEnterCritical+0x58>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	4a0d      	ldr	r2, [pc, #52]	; (8004e14 <vPortEnterCritical+0x58>)
 8004dde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <vPortEnterCritical+0x58>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d10f      	bne.n	8004e08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <vPortEnterCritical+0x5c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <vPortEnterCritical+0x4c>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	603b      	str	r3, [r7, #0]
}
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <vPortEnterCritical+0x4a>
	}
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000014 	.word	0x20000014
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e22:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <vPortExitCritical+0x4c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <vPortExitCritical+0x24>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	607b      	str	r3, [r7, #4]
}
 8004e3c:	bf00      	nop
 8004e3e:	e7fe      	b.n	8004e3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <vPortExitCritical+0x4c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <vPortExitCritical+0x4c>)
 8004e48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e4a:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <vPortExitCritical+0x4c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d105      	bne.n	8004e5e <vPortExitCritical+0x42>
 8004e52:	2300      	movs	r3, #0
 8004e54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	f383 8811 	msr	BASEPRI, r3
}
 8004e5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr
 8004e68:	20000014 	.word	0x20000014
 8004e6c:	00000000 	.word	0x00000000

08004e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e70:	f3ef 8009 	mrs	r0, PSP
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	4b0d      	ldr	r3, [pc, #52]	; (8004eb0 <pxCurrentTCBConst>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e80:	6010      	str	r0, [r2, #0]
 8004e82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004e86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e8a:	f380 8811 	msr	BASEPRI, r0
 8004e8e:	f7ff f83b 	bl	8003f08 <vTaskSwitchContext>
 8004e92:	f04f 0000 	mov.w	r0, #0
 8004e96:	f380 8811 	msr	BASEPRI, r0
 8004e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	6808      	ldr	r0, [r1, #0]
 8004ea2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ea6:	f380 8809 	msr	PSP, r0
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	4770      	bx	lr

08004eb0 <pxCurrentTCBConst>:
 8004eb0:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	607b      	str	r3, [r7, #4]
}
 8004ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ed2:	f7fe ff5b 	bl	8003d8c <xTaskIncrementTick>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <SysTick_Handler+0x40>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f383 8811 	msr	BASEPRI, r3
}
 8004eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f00:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <vPortSetupTimerInterrupt+0x30>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <vPortSetupTimerInterrupt+0x34>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f0c:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <vPortSetupTimerInterrupt+0x38>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a09      	ldr	r2, [pc, #36]	; (8004f38 <vPortSetupTimerInterrupt+0x3c>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	099b      	lsrs	r3, r3, #6
 8004f18:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <vPortSetupTimerInterrupt+0x40>)
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f1e:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <vPortSetupTimerInterrupt+0x30>)
 8004f20:	2207      	movs	r2, #7
 8004f22:	601a      	str	r2, [r3, #0]
}
 8004f24:	bf00      	nop
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr
 8004f2c:	e000e010 	.word	0xe000e010
 8004f30:	e000e018 	.word	0xe000e018
 8004f34:	20000008 	.word	0x20000008
 8004f38:	10624dd3 	.word	0x10624dd3
 8004f3c:	e000e014 	.word	0xe000e014

08004f40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f46:	f3ef 8305 	mrs	r3, IPSR
 8004f4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b0f      	cmp	r3, #15
 8004f50:	d914      	bls.n	8004f7c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f52:	4a16      	ldr	r2, [pc, #88]	; (8004fac <vPortValidateInterruptPriority+0x6c>)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f5c:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <vPortValidateInterruptPriority+0x70>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	7afa      	ldrb	r2, [r7, #11]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d20a      	bcs.n	8004f7c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	607b      	str	r3, [r7, #4]
}
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f7c:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <vPortValidateInterruptPriority+0x74>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <vPortValidateInterruptPriority+0x78>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d90a      	bls.n	8004fa2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	603b      	str	r3, [r7, #0]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <vPortValidateInterruptPriority+0x60>
	}
 8004fa2:	bf00      	nop
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr
 8004fac:	e000e3f0 	.word	0xe000e3f0
 8004fb0:	20000f1c 	.word	0x20000f1c
 8004fb4:	e000ed0c 	.word	0xe000ed0c
 8004fb8:	20000f20 	.word	0x20000f20

08004fbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08a      	sub	sp, #40	; 0x28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fc8:	f7fe fe26 	bl	8003c18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fcc:	4b58      	ldr	r3, [pc, #352]	; (8005130 <pvPortMalloc+0x174>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fd4:	f000 f910 	bl	80051f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fd8:	4b56      	ldr	r3, [pc, #344]	; (8005134 <pvPortMalloc+0x178>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f040 808e 	bne.w	8005102 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01d      	beq.n	8005028 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fec:	2208      	movs	r2, #8
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d014      	beq.n	8005028 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f023 0307 	bic.w	r3, r3, #7
 8005004:	3308      	adds	r3, #8
 8005006:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <pvPortMalloc+0x6c>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	617b      	str	r3, [r7, #20]
}
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d069      	beq.n	8005102 <pvPortMalloc+0x146>
 800502e:	4b42      	ldr	r3, [pc, #264]	; (8005138 <pvPortMalloc+0x17c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	429a      	cmp	r2, r3
 8005036:	d864      	bhi.n	8005102 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005038:	4b40      	ldr	r3, [pc, #256]	; (800513c <pvPortMalloc+0x180>)
 800503a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800503c:	4b3f      	ldr	r3, [pc, #252]	; (800513c <pvPortMalloc+0x180>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005042:	e004      	b.n	800504e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	d903      	bls.n	8005060 <pvPortMalloc+0xa4>
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f1      	bne.n	8005044 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005060:	4b33      	ldr	r3, [pc, #204]	; (8005130 <pvPortMalloc+0x174>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005066:	429a      	cmp	r2, r3
 8005068:	d04b      	beq.n	8005102 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2208      	movs	r2, #8
 8005070:	4413      	add	r3, r2
 8005072:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	1ad2      	subs	r2, r2, r3
 8005084:	2308      	movs	r3, #8
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	429a      	cmp	r2, r3
 800508a:	d91f      	bls.n	80050cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800508c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4413      	add	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <pvPortMalloc+0xf8>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	613b      	str	r3, [r7, #16]
}
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	1ad2      	subs	r2, r2, r3
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050c6:	69b8      	ldr	r0, [r7, #24]
 80050c8:	f000 f8f8 	bl	80052bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050cc:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <pvPortMalloc+0x17c>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	4a18      	ldr	r2, [pc, #96]	; (8005138 <pvPortMalloc+0x17c>)
 80050d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050da:	4b17      	ldr	r3, [pc, #92]	; (8005138 <pvPortMalloc+0x17c>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b18      	ldr	r3, [pc, #96]	; (8005140 <pvPortMalloc+0x184>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d203      	bcs.n	80050ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <pvPortMalloc+0x17c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a15      	ldr	r2, [pc, #84]	; (8005140 <pvPortMalloc+0x184>)
 80050ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	4b10      	ldr	r3, [pc, #64]	; (8005134 <pvPortMalloc+0x178>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005102:	f7fe fd97 	bl	8003c34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <pvPortMalloc+0x16a>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	60fb      	str	r3, [r7, #12]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <pvPortMalloc+0x168>
	return pvReturn;
 8005126:	69fb      	ldr	r3, [r7, #28]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3728      	adds	r7, #40	; 0x28
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20001b2c 	.word	0x20001b2c
 8005134:	20001b38 	.word	0x20001b38
 8005138:	20001b30 	.word	0x20001b30
 800513c:	20001b24 	.word	0x20001b24
 8005140:	20001b34 	.word	0x20001b34

08005144 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d048      	beq.n	80051e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005156:	2308      	movs	r3, #8
 8005158:	425b      	negs	r3, r3
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4413      	add	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	4b21      	ldr	r3, [pc, #132]	; (80051f0 <vPortFree+0xac>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4013      	ands	r3, r2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10a      	bne.n	8005188 <vPortFree+0x44>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	60fb      	str	r3, [r7, #12]
}
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <vPortFree+0x62>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	60bb      	str	r3, [r7, #8]
}
 80051a2:	bf00      	nop
 80051a4:	e7fe      	b.n	80051a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <vPortFree+0xac>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d019      	beq.n	80051e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d115      	bne.n	80051e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <vPortFree+0xac>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	43db      	mvns	r3, r3
 80051c6:	401a      	ands	r2, r3
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051cc:	f7fe fd24 	bl	8003c18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <vPortFree+0xb0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4413      	add	r3, r2
 80051da:	4a06      	ldr	r2, [pc, #24]	; (80051f4 <vPortFree+0xb0>)
 80051dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051de:	6938      	ldr	r0, [r7, #16]
 80051e0:	f000 f86c 	bl	80052bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80051e4:	f7fe fd26 	bl	8003c34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051e8:	bf00      	nop
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20001b38 	.word	0x20001b38
 80051f4:	20001b30 	.word	0x20001b30

080051f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005202:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005204:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <prvHeapInit+0xac>)
 8005206:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00c      	beq.n	800522c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3307      	adds	r3, #7
 8005216:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0307 	bic.w	r3, r3, #7
 800521e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	4a1f      	ldr	r2, [pc, #124]	; (80052a4 <prvHeapInit+0xac>)
 8005228:	4413      	add	r3, r2
 800522a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005230:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <prvHeapInit+0xb0>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005236:	4b1c      	ldr	r3, [pc, #112]	; (80052a8 <prvHeapInit+0xb0>)
 8005238:	2200      	movs	r2, #0
 800523a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	4413      	add	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005244:	2208      	movs	r2, #8
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0307 	bic.w	r3, r3, #7
 8005252:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a15      	ldr	r2, [pc, #84]	; (80052ac <prvHeapInit+0xb4>)
 8005258:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800525a:	4b14      	ldr	r3, [pc, #80]	; (80052ac <prvHeapInit+0xb4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2200      	movs	r2, #0
 8005260:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005262:	4b12      	ldr	r3, [pc, #72]	; (80052ac <prvHeapInit+0xb4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	1ad2      	subs	r2, r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <prvHeapInit+0xb4>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <prvHeapInit+0xb8>)
 8005286:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4a09      	ldr	r2, [pc, #36]	; (80052b4 <prvHeapInit+0xbc>)
 800528e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <prvHeapInit+0xc0>)
 8005292:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005296:	601a      	str	r2, [r3, #0]
}
 8005298:	bf00      	nop
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	20000f24 	.word	0x20000f24
 80052a8:	20001b24 	.word	0x20001b24
 80052ac:	20001b2c 	.word	0x20001b2c
 80052b0:	20001b34 	.word	0x20001b34
 80052b4:	20001b30 	.word	0x20001b30
 80052b8:	20001b38 	.word	0x20001b38

080052bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052c4:	4b27      	ldr	r3, [pc, #156]	; (8005364 <prvInsertBlockIntoFreeList+0xa8>)
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e002      	b.n	80052d0 <prvInsertBlockIntoFreeList+0x14>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d8f7      	bhi.n	80052ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	4413      	add	r3, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d108      	bne.n	80052fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	441a      	add	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	441a      	add	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d118      	bne.n	8005344 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <prvInsertBlockIntoFreeList+0xac>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d00d      	beq.n	800533a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	441a      	add	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e008      	b.n	800534c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <prvInsertBlockIntoFreeList+0xac>)
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e003      	b.n	800534c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	d002      	beq.n	800535a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	20001b24 	.word	0x20001b24
 8005368:	20001b2c 	.word	0x20001b2c

0800536c <__errno>:
 800536c:	4b01      	ldr	r3, [pc, #4]	; (8005374 <__errno+0x8>)
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000018 	.word	0x20000018

08005378 <std>:
 8005378:	2300      	movs	r3, #0
 800537a:	b510      	push	{r4, lr}
 800537c:	4604      	mov	r4, r0
 800537e:	e9c0 3300 	strd	r3, r3, [r0]
 8005382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005386:	6083      	str	r3, [r0, #8]
 8005388:	8181      	strh	r1, [r0, #12]
 800538a:	6643      	str	r3, [r0, #100]	; 0x64
 800538c:	81c2      	strh	r2, [r0, #14]
 800538e:	6183      	str	r3, [r0, #24]
 8005390:	4619      	mov	r1, r3
 8005392:	2208      	movs	r2, #8
 8005394:	305c      	adds	r0, #92	; 0x5c
 8005396:	f000 f91a 	bl	80055ce <memset>
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <std+0x38>)
 800539c:	6224      	str	r4, [r4, #32]
 800539e:	6263      	str	r3, [r4, #36]	; 0x24
 80053a0:	4b04      	ldr	r3, [pc, #16]	; (80053b4 <std+0x3c>)
 80053a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <std+0x40>)
 80053a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <std+0x44>)
 80053aa:	6323      	str	r3, [r4, #48]	; 0x30
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	bf00      	nop
 80053b0:	08005919 	.word	0x08005919
 80053b4:	0800593b 	.word	0x0800593b
 80053b8:	08005973 	.word	0x08005973
 80053bc:	08005997 	.word	0x08005997

080053c0 <_cleanup_r>:
 80053c0:	4901      	ldr	r1, [pc, #4]	; (80053c8 <_cleanup_r+0x8>)
 80053c2:	f000 b8af 	b.w	8005524 <_fwalk_reent>
 80053c6:	bf00      	nop
 80053c8:	08005c69 	.word	0x08005c69

080053cc <__sfmoreglue>:
 80053cc:	2268      	movs	r2, #104	; 0x68
 80053ce:	b570      	push	{r4, r5, r6, lr}
 80053d0:	1e4d      	subs	r5, r1, #1
 80053d2:	4355      	muls	r5, r2
 80053d4:	460e      	mov	r6, r1
 80053d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053da:	f000 f921 	bl	8005620 <_malloc_r>
 80053de:	4604      	mov	r4, r0
 80053e0:	b140      	cbz	r0, 80053f4 <__sfmoreglue+0x28>
 80053e2:	2100      	movs	r1, #0
 80053e4:	e9c0 1600 	strd	r1, r6, [r0]
 80053e8:	300c      	adds	r0, #12
 80053ea:	60a0      	str	r0, [r4, #8]
 80053ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053f0:	f000 f8ed 	bl	80055ce <memset>
 80053f4:	4620      	mov	r0, r4
 80053f6:	bd70      	pop	{r4, r5, r6, pc}

080053f8 <__sfp_lock_acquire>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__sfp_lock_acquire+0x8>)
 80053fa:	f000 b8d8 	b.w	80055ae <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	20001b3d 	.word	0x20001b3d

08005404 <__sfp_lock_release>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__sfp_lock_release+0x8>)
 8005406:	f000 b8d3 	b.w	80055b0 <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	20001b3d 	.word	0x20001b3d

08005410 <__sinit_lock_acquire>:
 8005410:	4801      	ldr	r0, [pc, #4]	; (8005418 <__sinit_lock_acquire+0x8>)
 8005412:	f000 b8cc 	b.w	80055ae <__retarget_lock_acquire_recursive>
 8005416:	bf00      	nop
 8005418:	20001b3e 	.word	0x20001b3e

0800541c <__sinit_lock_release>:
 800541c:	4801      	ldr	r0, [pc, #4]	; (8005424 <__sinit_lock_release+0x8>)
 800541e:	f000 b8c7 	b.w	80055b0 <__retarget_lock_release_recursive>
 8005422:	bf00      	nop
 8005424:	20001b3e 	.word	0x20001b3e

08005428 <__sinit>:
 8005428:	b510      	push	{r4, lr}
 800542a:	4604      	mov	r4, r0
 800542c:	f7ff fff0 	bl	8005410 <__sinit_lock_acquire>
 8005430:	69a3      	ldr	r3, [r4, #24]
 8005432:	b11b      	cbz	r3, 800543c <__sinit+0x14>
 8005434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005438:	f7ff bff0 	b.w	800541c <__sinit_lock_release>
 800543c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005440:	6523      	str	r3, [r4, #80]	; 0x50
 8005442:	4b13      	ldr	r3, [pc, #76]	; (8005490 <__sinit+0x68>)
 8005444:	4a13      	ldr	r2, [pc, #76]	; (8005494 <__sinit+0x6c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	62a2      	str	r2, [r4, #40]	; 0x28
 800544a:	42a3      	cmp	r3, r4
 800544c:	bf08      	it	eq
 800544e:	2301      	moveq	r3, #1
 8005450:	4620      	mov	r0, r4
 8005452:	bf08      	it	eq
 8005454:	61a3      	streq	r3, [r4, #24]
 8005456:	f000 f81f 	bl	8005498 <__sfp>
 800545a:	6060      	str	r0, [r4, #4]
 800545c:	4620      	mov	r0, r4
 800545e:	f000 f81b 	bl	8005498 <__sfp>
 8005462:	60a0      	str	r0, [r4, #8]
 8005464:	4620      	mov	r0, r4
 8005466:	f000 f817 	bl	8005498 <__sfp>
 800546a:	2200      	movs	r2, #0
 800546c:	2104      	movs	r1, #4
 800546e:	60e0      	str	r0, [r4, #12]
 8005470:	6860      	ldr	r0, [r4, #4]
 8005472:	f7ff ff81 	bl	8005378 <std>
 8005476:	2201      	movs	r2, #1
 8005478:	2109      	movs	r1, #9
 800547a:	68a0      	ldr	r0, [r4, #8]
 800547c:	f7ff ff7c 	bl	8005378 <std>
 8005480:	2202      	movs	r2, #2
 8005482:	2112      	movs	r1, #18
 8005484:	68e0      	ldr	r0, [r4, #12]
 8005486:	f7ff ff77 	bl	8005378 <std>
 800548a:	2301      	movs	r3, #1
 800548c:	61a3      	str	r3, [r4, #24]
 800548e:	e7d1      	b.n	8005434 <__sinit+0xc>
 8005490:	080068d8 	.word	0x080068d8
 8005494:	080053c1 	.word	0x080053c1

08005498 <__sfp>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	4607      	mov	r7, r0
 800549c:	f7ff ffac 	bl	80053f8 <__sfp_lock_acquire>
 80054a0:	4b1e      	ldr	r3, [pc, #120]	; (800551c <__sfp+0x84>)
 80054a2:	681e      	ldr	r6, [r3, #0]
 80054a4:	69b3      	ldr	r3, [r6, #24]
 80054a6:	b913      	cbnz	r3, 80054ae <__sfp+0x16>
 80054a8:	4630      	mov	r0, r6
 80054aa:	f7ff ffbd 	bl	8005428 <__sinit>
 80054ae:	3648      	adds	r6, #72	; 0x48
 80054b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	d503      	bpl.n	80054c0 <__sfp+0x28>
 80054b8:	6833      	ldr	r3, [r6, #0]
 80054ba:	b30b      	cbz	r3, 8005500 <__sfp+0x68>
 80054bc:	6836      	ldr	r6, [r6, #0]
 80054be:	e7f7      	b.n	80054b0 <__sfp+0x18>
 80054c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054c4:	b9d5      	cbnz	r5, 80054fc <__sfp+0x64>
 80054c6:	4b16      	ldr	r3, [pc, #88]	; (8005520 <__sfp+0x88>)
 80054c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054cc:	60e3      	str	r3, [r4, #12]
 80054ce:	6665      	str	r5, [r4, #100]	; 0x64
 80054d0:	f000 f86c 	bl	80055ac <__retarget_lock_init_recursive>
 80054d4:	f7ff ff96 	bl	8005404 <__sfp_lock_release>
 80054d8:	2208      	movs	r2, #8
 80054da:	4629      	mov	r1, r5
 80054dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80054e4:	6025      	str	r5, [r4, #0]
 80054e6:	61a5      	str	r5, [r4, #24]
 80054e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054ec:	f000 f86f 	bl	80055ce <memset>
 80054f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054f8:	4620      	mov	r0, r4
 80054fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054fc:	3468      	adds	r4, #104	; 0x68
 80054fe:	e7d9      	b.n	80054b4 <__sfp+0x1c>
 8005500:	2104      	movs	r1, #4
 8005502:	4638      	mov	r0, r7
 8005504:	f7ff ff62 	bl	80053cc <__sfmoreglue>
 8005508:	4604      	mov	r4, r0
 800550a:	6030      	str	r0, [r6, #0]
 800550c:	2800      	cmp	r0, #0
 800550e:	d1d5      	bne.n	80054bc <__sfp+0x24>
 8005510:	f7ff ff78 	bl	8005404 <__sfp_lock_release>
 8005514:	230c      	movs	r3, #12
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	e7ee      	b.n	80054f8 <__sfp+0x60>
 800551a:	bf00      	nop
 800551c:	080068d8 	.word	0x080068d8
 8005520:	ffff0001 	.word	0xffff0001

08005524 <_fwalk_reent>:
 8005524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005528:	4606      	mov	r6, r0
 800552a:	4688      	mov	r8, r1
 800552c:	2700      	movs	r7, #0
 800552e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005536:	f1b9 0901 	subs.w	r9, r9, #1
 800553a:	d505      	bpl.n	8005548 <_fwalk_reent+0x24>
 800553c:	6824      	ldr	r4, [r4, #0]
 800553e:	2c00      	cmp	r4, #0
 8005540:	d1f7      	bne.n	8005532 <_fwalk_reent+0xe>
 8005542:	4638      	mov	r0, r7
 8005544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005548:	89ab      	ldrh	r3, [r5, #12]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d907      	bls.n	800555e <_fwalk_reent+0x3a>
 800554e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005552:	3301      	adds	r3, #1
 8005554:	d003      	beq.n	800555e <_fwalk_reent+0x3a>
 8005556:	4629      	mov	r1, r5
 8005558:	4630      	mov	r0, r6
 800555a:	47c0      	blx	r8
 800555c:	4307      	orrs	r7, r0
 800555e:	3568      	adds	r5, #104	; 0x68
 8005560:	e7e9      	b.n	8005536 <_fwalk_reent+0x12>
	...

08005564 <__libc_init_array>:
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	2600      	movs	r6, #0
 8005568:	4d0c      	ldr	r5, [pc, #48]	; (800559c <__libc_init_array+0x38>)
 800556a:	4c0d      	ldr	r4, [pc, #52]	; (80055a0 <__libc_init_array+0x3c>)
 800556c:	1b64      	subs	r4, r4, r5
 800556e:	10a4      	asrs	r4, r4, #2
 8005570:	42a6      	cmp	r6, r4
 8005572:	d109      	bne.n	8005588 <__libc_init_array+0x24>
 8005574:	f000 ffb0 	bl	80064d8 <_init>
 8005578:	2600      	movs	r6, #0
 800557a:	4d0a      	ldr	r5, [pc, #40]	; (80055a4 <__libc_init_array+0x40>)
 800557c:	4c0a      	ldr	r4, [pc, #40]	; (80055a8 <__libc_init_array+0x44>)
 800557e:	1b64      	subs	r4, r4, r5
 8005580:	10a4      	asrs	r4, r4, #2
 8005582:	42a6      	cmp	r6, r4
 8005584:	d105      	bne.n	8005592 <__libc_init_array+0x2e>
 8005586:	bd70      	pop	{r4, r5, r6, pc}
 8005588:	f855 3b04 	ldr.w	r3, [r5], #4
 800558c:	4798      	blx	r3
 800558e:	3601      	adds	r6, #1
 8005590:	e7ee      	b.n	8005570 <__libc_init_array+0xc>
 8005592:	f855 3b04 	ldr.w	r3, [r5], #4
 8005596:	4798      	blx	r3
 8005598:	3601      	adds	r6, #1
 800559a:	e7f2      	b.n	8005582 <__libc_init_array+0x1e>
 800559c:	08006910 	.word	0x08006910
 80055a0:	08006910 	.word	0x08006910
 80055a4:	08006910 	.word	0x08006910
 80055a8:	08006914 	.word	0x08006914

080055ac <__retarget_lock_init_recursive>:
 80055ac:	4770      	bx	lr

080055ae <__retarget_lock_acquire_recursive>:
 80055ae:	4770      	bx	lr

080055b0 <__retarget_lock_release_recursive>:
 80055b0:	4770      	bx	lr

080055b2 <memcpy>:
 80055b2:	440a      	add	r2, r1
 80055b4:	4291      	cmp	r1, r2
 80055b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80055ba:	d100      	bne.n	80055be <memcpy+0xc>
 80055bc:	4770      	bx	lr
 80055be:	b510      	push	{r4, lr}
 80055c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c4:	4291      	cmp	r1, r2
 80055c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ca:	d1f9      	bne.n	80055c0 <memcpy+0xe>
 80055cc:	bd10      	pop	{r4, pc}

080055ce <memset>:
 80055ce:	4603      	mov	r3, r0
 80055d0:	4402      	add	r2, r0
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d100      	bne.n	80055d8 <memset+0xa>
 80055d6:	4770      	bx	lr
 80055d8:	f803 1b01 	strb.w	r1, [r3], #1
 80055dc:	e7f9      	b.n	80055d2 <memset+0x4>
	...

080055e0 <sbrk_aligned>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	4e0e      	ldr	r6, [pc, #56]	; (800561c <sbrk_aligned+0x3c>)
 80055e4:	460c      	mov	r4, r1
 80055e6:	6831      	ldr	r1, [r6, #0]
 80055e8:	4605      	mov	r5, r0
 80055ea:	b911      	cbnz	r1, 80055f2 <sbrk_aligned+0x12>
 80055ec:	f000 f984 	bl	80058f8 <_sbrk_r>
 80055f0:	6030      	str	r0, [r6, #0]
 80055f2:	4621      	mov	r1, r4
 80055f4:	4628      	mov	r0, r5
 80055f6:	f000 f97f 	bl	80058f8 <_sbrk_r>
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	d00a      	beq.n	8005614 <sbrk_aligned+0x34>
 80055fe:	1cc4      	adds	r4, r0, #3
 8005600:	f024 0403 	bic.w	r4, r4, #3
 8005604:	42a0      	cmp	r0, r4
 8005606:	d007      	beq.n	8005618 <sbrk_aligned+0x38>
 8005608:	1a21      	subs	r1, r4, r0
 800560a:	4628      	mov	r0, r5
 800560c:	f000 f974 	bl	80058f8 <_sbrk_r>
 8005610:	3001      	adds	r0, #1
 8005612:	d101      	bne.n	8005618 <sbrk_aligned+0x38>
 8005614:	f04f 34ff 	mov.w	r4, #4294967295
 8005618:	4620      	mov	r0, r4
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	20001b44 	.word	0x20001b44

08005620 <_malloc_r>:
 8005620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005624:	1ccd      	adds	r5, r1, #3
 8005626:	f025 0503 	bic.w	r5, r5, #3
 800562a:	3508      	adds	r5, #8
 800562c:	2d0c      	cmp	r5, #12
 800562e:	bf38      	it	cc
 8005630:	250c      	movcc	r5, #12
 8005632:	2d00      	cmp	r5, #0
 8005634:	4607      	mov	r7, r0
 8005636:	db01      	blt.n	800563c <_malloc_r+0x1c>
 8005638:	42a9      	cmp	r1, r5
 800563a:	d905      	bls.n	8005648 <_malloc_r+0x28>
 800563c:	230c      	movs	r3, #12
 800563e:	2600      	movs	r6, #0
 8005640:	603b      	str	r3, [r7, #0]
 8005642:	4630      	mov	r0, r6
 8005644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005648:	4e2e      	ldr	r6, [pc, #184]	; (8005704 <_malloc_r+0xe4>)
 800564a:	f000 fbc1 	bl	8005dd0 <__malloc_lock>
 800564e:	6833      	ldr	r3, [r6, #0]
 8005650:	461c      	mov	r4, r3
 8005652:	bb34      	cbnz	r4, 80056a2 <_malloc_r+0x82>
 8005654:	4629      	mov	r1, r5
 8005656:	4638      	mov	r0, r7
 8005658:	f7ff ffc2 	bl	80055e0 <sbrk_aligned>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	4604      	mov	r4, r0
 8005660:	d14d      	bne.n	80056fe <_malloc_r+0xde>
 8005662:	6834      	ldr	r4, [r6, #0]
 8005664:	4626      	mov	r6, r4
 8005666:	2e00      	cmp	r6, #0
 8005668:	d140      	bne.n	80056ec <_malloc_r+0xcc>
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	4631      	mov	r1, r6
 800566e:	4638      	mov	r0, r7
 8005670:	eb04 0803 	add.w	r8, r4, r3
 8005674:	f000 f940 	bl	80058f8 <_sbrk_r>
 8005678:	4580      	cmp	r8, r0
 800567a:	d13a      	bne.n	80056f2 <_malloc_r+0xd2>
 800567c:	6821      	ldr	r1, [r4, #0]
 800567e:	3503      	adds	r5, #3
 8005680:	1a6d      	subs	r5, r5, r1
 8005682:	f025 0503 	bic.w	r5, r5, #3
 8005686:	3508      	adds	r5, #8
 8005688:	2d0c      	cmp	r5, #12
 800568a:	bf38      	it	cc
 800568c:	250c      	movcc	r5, #12
 800568e:	4638      	mov	r0, r7
 8005690:	4629      	mov	r1, r5
 8005692:	f7ff ffa5 	bl	80055e0 <sbrk_aligned>
 8005696:	3001      	adds	r0, #1
 8005698:	d02b      	beq.n	80056f2 <_malloc_r+0xd2>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	442b      	add	r3, r5
 800569e:	6023      	str	r3, [r4, #0]
 80056a0:	e00e      	b.n	80056c0 <_malloc_r+0xa0>
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	1b52      	subs	r2, r2, r5
 80056a6:	d41e      	bmi.n	80056e6 <_malloc_r+0xc6>
 80056a8:	2a0b      	cmp	r2, #11
 80056aa:	d916      	bls.n	80056da <_malloc_r+0xba>
 80056ac:	1961      	adds	r1, r4, r5
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	6025      	str	r5, [r4, #0]
 80056b2:	bf18      	it	ne
 80056b4:	6059      	strne	r1, [r3, #4]
 80056b6:	6863      	ldr	r3, [r4, #4]
 80056b8:	bf08      	it	eq
 80056ba:	6031      	streq	r1, [r6, #0]
 80056bc:	5162      	str	r2, [r4, r5]
 80056be:	604b      	str	r3, [r1, #4]
 80056c0:	4638      	mov	r0, r7
 80056c2:	f104 060b 	add.w	r6, r4, #11
 80056c6:	f000 fb89 	bl	8005ddc <__malloc_unlock>
 80056ca:	f026 0607 	bic.w	r6, r6, #7
 80056ce:	1d23      	adds	r3, r4, #4
 80056d0:	1af2      	subs	r2, r6, r3
 80056d2:	d0b6      	beq.n	8005642 <_malloc_r+0x22>
 80056d4:	1b9b      	subs	r3, r3, r6
 80056d6:	50a3      	str	r3, [r4, r2]
 80056d8:	e7b3      	b.n	8005642 <_malloc_r+0x22>
 80056da:	6862      	ldr	r2, [r4, #4]
 80056dc:	42a3      	cmp	r3, r4
 80056de:	bf0c      	ite	eq
 80056e0:	6032      	streq	r2, [r6, #0]
 80056e2:	605a      	strne	r2, [r3, #4]
 80056e4:	e7ec      	b.n	80056c0 <_malloc_r+0xa0>
 80056e6:	4623      	mov	r3, r4
 80056e8:	6864      	ldr	r4, [r4, #4]
 80056ea:	e7b2      	b.n	8005652 <_malloc_r+0x32>
 80056ec:	4634      	mov	r4, r6
 80056ee:	6876      	ldr	r6, [r6, #4]
 80056f0:	e7b9      	b.n	8005666 <_malloc_r+0x46>
 80056f2:	230c      	movs	r3, #12
 80056f4:	4638      	mov	r0, r7
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	f000 fb70 	bl	8005ddc <__malloc_unlock>
 80056fc:	e7a1      	b.n	8005642 <_malloc_r+0x22>
 80056fe:	6025      	str	r5, [r4, #0]
 8005700:	e7de      	b.n	80056c0 <_malloc_r+0xa0>
 8005702:	bf00      	nop
 8005704:	20001b40 	.word	0x20001b40

08005708 <iprintf>:
 8005708:	b40f      	push	{r0, r1, r2, r3}
 800570a:	4b0a      	ldr	r3, [pc, #40]	; (8005734 <iprintf+0x2c>)
 800570c:	b513      	push	{r0, r1, r4, lr}
 800570e:	681c      	ldr	r4, [r3, #0]
 8005710:	b124      	cbz	r4, 800571c <iprintf+0x14>
 8005712:	69a3      	ldr	r3, [r4, #24]
 8005714:	b913      	cbnz	r3, 800571c <iprintf+0x14>
 8005716:	4620      	mov	r0, r4
 8005718:	f7ff fe86 	bl	8005428 <__sinit>
 800571c:	ab05      	add	r3, sp, #20
 800571e:	4620      	mov	r0, r4
 8005720:	9a04      	ldr	r2, [sp, #16]
 8005722:	68a1      	ldr	r1, [r4, #8]
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	f000 fbcf 	bl	8005ec8 <_vfiprintf_r>
 800572a:	b002      	add	sp, #8
 800572c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005730:	b004      	add	sp, #16
 8005732:	4770      	bx	lr
 8005734:	20000018 	.word	0x20000018

08005738 <_puts_r>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	460e      	mov	r6, r1
 800573c:	4605      	mov	r5, r0
 800573e:	b118      	cbz	r0, 8005748 <_puts_r+0x10>
 8005740:	6983      	ldr	r3, [r0, #24]
 8005742:	b90b      	cbnz	r3, 8005748 <_puts_r+0x10>
 8005744:	f7ff fe70 	bl	8005428 <__sinit>
 8005748:	69ab      	ldr	r3, [r5, #24]
 800574a:	68ac      	ldr	r4, [r5, #8]
 800574c:	b913      	cbnz	r3, 8005754 <_puts_r+0x1c>
 800574e:	4628      	mov	r0, r5
 8005750:	f7ff fe6a 	bl	8005428 <__sinit>
 8005754:	4b2c      	ldr	r3, [pc, #176]	; (8005808 <_puts_r+0xd0>)
 8005756:	429c      	cmp	r4, r3
 8005758:	d120      	bne.n	800579c <_puts_r+0x64>
 800575a:	686c      	ldr	r4, [r5, #4]
 800575c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800575e:	07db      	lsls	r3, r3, #31
 8005760:	d405      	bmi.n	800576e <_puts_r+0x36>
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	0598      	lsls	r0, r3, #22
 8005766:	d402      	bmi.n	800576e <_puts_r+0x36>
 8005768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800576a:	f7ff ff20 	bl	80055ae <__retarget_lock_acquire_recursive>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	0719      	lsls	r1, r3, #28
 8005772:	d51d      	bpl.n	80057b0 <_puts_r+0x78>
 8005774:	6923      	ldr	r3, [r4, #16]
 8005776:	b1db      	cbz	r3, 80057b0 <_puts_r+0x78>
 8005778:	3e01      	subs	r6, #1
 800577a:	68a3      	ldr	r3, [r4, #8]
 800577c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005780:	3b01      	subs	r3, #1
 8005782:	60a3      	str	r3, [r4, #8]
 8005784:	bb39      	cbnz	r1, 80057d6 <_puts_r+0x9e>
 8005786:	2b00      	cmp	r3, #0
 8005788:	da38      	bge.n	80057fc <_puts_r+0xc4>
 800578a:	4622      	mov	r2, r4
 800578c:	210a      	movs	r1, #10
 800578e:	4628      	mov	r0, r5
 8005790:	f000 f906 	bl	80059a0 <__swbuf_r>
 8005794:	3001      	adds	r0, #1
 8005796:	d011      	beq.n	80057bc <_puts_r+0x84>
 8005798:	250a      	movs	r5, #10
 800579a:	e011      	b.n	80057c0 <_puts_r+0x88>
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <_puts_r+0xd4>)
 800579e:	429c      	cmp	r4, r3
 80057a0:	d101      	bne.n	80057a6 <_puts_r+0x6e>
 80057a2:	68ac      	ldr	r4, [r5, #8]
 80057a4:	e7da      	b.n	800575c <_puts_r+0x24>
 80057a6:	4b1a      	ldr	r3, [pc, #104]	; (8005810 <_puts_r+0xd8>)
 80057a8:	429c      	cmp	r4, r3
 80057aa:	bf08      	it	eq
 80057ac:	68ec      	ldreq	r4, [r5, #12]
 80057ae:	e7d5      	b.n	800575c <_puts_r+0x24>
 80057b0:	4621      	mov	r1, r4
 80057b2:	4628      	mov	r0, r5
 80057b4:	f000 f958 	bl	8005a68 <__swsetup_r>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d0dd      	beq.n	8005778 <_puts_r+0x40>
 80057bc:	f04f 35ff 	mov.w	r5, #4294967295
 80057c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057c2:	07da      	lsls	r2, r3, #31
 80057c4:	d405      	bmi.n	80057d2 <_puts_r+0x9a>
 80057c6:	89a3      	ldrh	r3, [r4, #12]
 80057c8:	059b      	lsls	r3, r3, #22
 80057ca:	d402      	bmi.n	80057d2 <_puts_r+0x9a>
 80057cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057ce:	f7ff feef 	bl	80055b0 <__retarget_lock_release_recursive>
 80057d2:	4628      	mov	r0, r5
 80057d4:	bd70      	pop	{r4, r5, r6, pc}
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	da04      	bge.n	80057e4 <_puts_r+0xac>
 80057da:	69a2      	ldr	r2, [r4, #24]
 80057dc:	429a      	cmp	r2, r3
 80057de:	dc06      	bgt.n	80057ee <_puts_r+0xb6>
 80057e0:	290a      	cmp	r1, #10
 80057e2:	d004      	beq.n	80057ee <_puts_r+0xb6>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	6022      	str	r2, [r4, #0]
 80057ea:	7019      	strb	r1, [r3, #0]
 80057ec:	e7c5      	b.n	800577a <_puts_r+0x42>
 80057ee:	4622      	mov	r2, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 f8d5 	bl	80059a0 <__swbuf_r>
 80057f6:	3001      	adds	r0, #1
 80057f8:	d1bf      	bne.n	800577a <_puts_r+0x42>
 80057fa:	e7df      	b.n	80057bc <_puts_r+0x84>
 80057fc:	250a      	movs	r5, #10
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	6022      	str	r2, [r4, #0]
 8005804:	701d      	strb	r5, [r3, #0]
 8005806:	e7db      	b.n	80057c0 <_puts_r+0x88>
 8005808:	08006898 	.word	0x08006898
 800580c:	080068b8 	.word	0x080068b8
 8005810:	08006878 	.word	0x08006878

08005814 <puts>:
 8005814:	4b02      	ldr	r3, [pc, #8]	; (8005820 <puts+0xc>)
 8005816:	4601      	mov	r1, r0
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	f7ff bf8d 	b.w	8005738 <_puts_r>
 800581e:	bf00      	nop
 8005820:	20000018 	.word	0x20000018

08005824 <cleanup_glue>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	460c      	mov	r4, r1
 8005828:	6809      	ldr	r1, [r1, #0]
 800582a:	4605      	mov	r5, r0
 800582c:	b109      	cbz	r1, 8005832 <cleanup_glue+0xe>
 800582e:	f7ff fff9 	bl	8005824 <cleanup_glue>
 8005832:	4621      	mov	r1, r4
 8005834:	4628      	mov	r0, r5
 8005836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800583a:	f000 bad5 	b.w	8005de8 <_free_r>
	...

08005840 <_reclaim_reent>:
 8005840:	4b2c      	ldr	r3, [pc, #176]	; (80058f4 <_reclaim_reent+0xb4>)
 8005842:	b570      	push	{r4, r5, r6, lr}
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4604      	mov	r4, r0
 8005848:	4283      	cmp	r3, r0
 800584a:	d051      	beq.n	80058f0 <_reclaim_reent+0xb0>
 800584c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800584e:	b143      	cbz	r3, 8005862 <_reclaim_reent+0x22>
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d14a      	bne.n	80058ec <_reclaim_reent+0xac>
 8005856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	b111      	cbz	r1, 8005862 <_reclaim_reent+0x22>
 800585c:	4620      	mov	r0, r4
 800585e:	f000 fac3 	bl	8005de8 <_free_r>
 8005862:	6961      	ldr	r1, [r4, #20]
 8005864:	b111      	cbz	r1, 800586c <_reclaim_reent+0x2c>
 8005866:	4620      	mov	r0, r4
 8005868:	f000 fabe 	bl	8005de8 <_free_r>
 800586c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800586e:	b111      	cbz	r1, 8005876 <_reclaim_reent+0x36>
 8005870:	4620      	mov	r0, r4
 8005872:	f000 fab9 	bl	8005de8 <_free_r>
 8005876:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005878:	b111      	cbz	r1, 8005880 <_reclaim_reent+0x40>
 800587a:	4620      	mov	r0, r4
 800587c:	f000 fab4 	bl	8005de8 <_free_r>
 8005880:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005882:	b111      	cbz	r1, 800588a <_reclaim_reent+0x4a>
 8005884:	4620      	mov	r0, r4
 8005886:	f000 faaf 	bl	8005de8 <_free_r>
 800588a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800588c:	b111      	cbz	r1, 8005894 <_reclaim_reent+0x54>
 800588e:	4620      	mov	r0, r4
 8005890:	f000 faaa 	bl	8005de8 <_free_r>
 8005894:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005896:	b111      	cbz	r1, 800589e <_reclaim_reent+0x5e>
 8005898:	4620      	mov	r0, r4
 800589a:	f000 faa5 	bl	8005de8 <_free_r>
 800589e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80058a0:	b111      	cbz	r1, 80058a8 <_reclaim_reent+0x68>
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 faa0 	bl	8005de8 <_free_r>
 80058a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058aa:	b111      	cbz	r1, 80058b2 <_reclaim_reent+0x72>
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 fa9b 	bl	8005de8 <_free_r>
 80058b2:	69a3      	ldr	r3, [r4, #24]
 80058b4:	b1e3      	cbz	r3, 80058f0 <_reclaim_reent+0xb0>
 80058b6:	4620      	mov	r0, r4
 80058b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80058ba:	4798      	blx	r3
 80058bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80058be:	b1b9      	cbz	r1, 80058f0 <_reclaim_reent+0xb0>
 80058c0:	4620      	mov	r0, r4
 80058c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80058c6:	f7ff bfad 	b.w	8005824 <cleanup_glue>
 80058ca:	5949      	ldr	r1, [r1, r5]
 80058cc:	b941      	cbnz	r1, 80058e0 <_reclaim_reent+0xa0>
 80058ce:	3504      	adds	r5, #4
 80058d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d2:	2d80      	cmp	r5, #128	; 0x80
 80058d4:	68d9      	ldr	r1, [r3, #12]
 80058d6:	d1f8      	bne.n	80058ca <_reclaim_reent+0x8a>
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 fa85 	bl	8005de8 <_free_r>
 80058de:	e7ba      	b.n	8005856 <_reclaim_reent+0x16>
 80058e0:	680e      	ldr	r6, [r1, #0]
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 fa80 	bl	8005de8 <_free_r>
 80058e8:	4631      	mov	r1, r6
 80058ea:	e7ef      	b.n	80058cc <_reclaim_reent+0x8c>
 80058ec:	2500      	movs	r5, #0
 80058ee:	e7ef      	b.n	80058d0 <_reclaim_reent+0x90>
 80058f0:	bd70      	pop	{r4, r5, r6, pc}
 80058f2:	bf00      	nop
 80058f4:	20000018 	.word	0x20000018

080058f8 <_sbrk_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	2300      	movs	r3, #0
 80058fc:	4d05      	ldr	r5, [pc, #20]	; (8005914 <_sbrk_r+0x1c>)
 80058fe:	4604      	mov	r4, r0
 8005900:	4608      	mov	r0, r1
 8005902:	602b      	str	r3, [r5, #0]
 8005904:	f7fb f83c 	bl	8000980 <_sbrk>
 8005908:	1c43      	adds	r3, r0, #1
 800590a:	d102      	bne.n	8005912 <_sbrk_r+0x1a>
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	b103      	cbz	r3, 8005912 <_sbrk_r+0x1a>
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	bd38      	pop	{r3, r4, r5, pc}
 8005914:	20001b48 	.word	0x20001b48

08005918 <__sread>:
 8005918:	b510      	push	{r4, lr}
 800591a:	460c      	mov	r4, r1
 800591c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005920:	f000 fd98 	bl	8006454 <_read_r>
 8005924:	2800      	cmp	r0, #0
 8005926:	bfab      	itete	ge
 8005928:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800592a:	89a3      	ldrhlt	r3, [r4, #12]
 800592c:	181b      	addge	r3, r3, r0
 800592e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005932:	bfac      	ite	ge
 8005934:	6563      	strge	r3, [r4, #84]	; 0x54
 8005936:	81a3      	strhlt	r3, [r4, #12]
 8005938:	bd10      	pop	{r4, pc}

0800593a <__swrite>:
 800593a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800593e:	461f      	mov	r7, r3
 8005940:	898b      	ldrh	r3, [r1, #12]
 8005942:	4605      	mov	r5, r0
 8005944:	05db      	lsls	r3, r3, #23
 8005946:	460c      	mov	r4, r1
 8005948:	4616      	mov	r6, r2
 800594a:	d505      	bpl.n	8005958 <__swrite+0x1e>
 800594c:	2302      	movs	r3, #2
 800594e:	2200      	movs	r2, #0
 8005950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005954:	f000 f9c4 	bl	8005ce0 <_lseek_r>
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	4632      	mov	r2, r6
 800595c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005960:	81a3      	strh	r3, [r4, #12]
 8005962:	4628      	mov	r0, r5
 8005964:	463b      	mov	r3, r7
 8005966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800596a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800596e:	f000 b869 	b.w	8005a44 <_write_r>

08005972 <__sseek>:
 8005972:	b510      	push	{r4, lr}
 8005974:	460c      	mov	r4, r1
 8005976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800597a:	f000 f9b1 	bl	8005ce0 <_lseek_r>
 800597e:	1c43      	adds	r3, r0, #1
 8005980:	89a3      	ldrh	r3, [r4, #12]
 8005982:	bf15      	itete	ne
 8005984:	6560      	strne	r0, [r4, #84]	; 0x54
 8005986:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800598a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800598e:	81a3      	strheq	r3, [r4, #12]
 8005990:	bf18      	it	ne
 8005992:	81a3      	strhne	r3, [r4, #12]
 8005994:	bd10      	pop	{r4, pc}

08005996 <__sclose>:
 8005996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800599a:	f000 b8d3 	b.w	8005b44 <_close_r>
	...

080059a0 <__swbuf_r>:
 80059a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a2:	460e      	mov	r6, r1
 80059a4:	4614      	mov	r4, r2
 80059a6:	4605      	mov	r5, r0
 80059a8:	b118      	cbz	r0, 80059b2 <__swbuf_r+0x12>
 80059aa:	6983      	ldr	r3, [r0, #24]
 80059ac:	b90b      	cbnz	r3, 80059b2 <__swbuf_r+0x12>
 80059ae:	f7ff fd3b 	bl	8005428 <__sinit>
 80059b2:	4b21      	ldr	r3, [pc, #132]	; (8005a38 <__swbuf_r+0x98>)
 80059b4:	429c      	cmp	r4, r3
 80059b6:	d12b      	bne.n	8005a10 <__swbuf_r+0x70>
 80059b8:	686c      	ldr	r4, [r5, #4]
 80059ba:	69a3      	ldr	r3, [r4, #24]
 80059bc:	60a3      	str	r3, [r4, #8]
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	071a      	lsls	r2, r3, #28
 80059c2:	d52f      	bpl.n	8005a24 <__swbuf_r+0x84>
 80059c4:	6923      	ldr	r3, [r4, #16]
 80059c6:	b36b      	cbz	r3, 8005a24 <__swbuf_r+0x84>
 80059c8:	6923      	ldr	r3, [r4, #16]
 80059ca:	6820      	ldr	r0, [r4, #0]
 80059cc:	b2f6      	uxtb	r6, r6
 80059ce:	1ac0      	subs	r0, r0, r3
 80059d0:	6963      	ldr	r3, [r4, #20]
 80059d2:	4637      	mov	r7, r6
 80059d4:	4283      	cmp	r3, r0
 80059d6:	dc04      	bgt.n	80059e2 <__swbuf_r+0x42>
 80059d8:	4621      	mov	r1, r4
 80059da:	4628      	mov	r0, r5
 80059dc:	f000 f944 	bl	8005c68 <_fflush_r>
 80059e0:	bb30      	cbnz	r0, 8005a30 <__swbuf_r+0x90>
 80059e2:	68a3      	ldr	r3, [r4, #8]
 80059e4:	3001      	adds	r0, #1
 80059e6:	3b01      	subs	r3, #1
 80059e8:	60a3      	str	r3, [r4, #8]
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	6022      	str	r2, [r4, #0]
 80059f0:	701e      	strb	r6, [r3, #0]
 80059f2:	6963      	ldr	r3, [r4, #20]
 80059f4:	4283      	cmp	r3, r0
 80059f6:	d004      	beq.n	8005a02 <__swbuf_r+0x62>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	07db      	lsls	r3, r3, #31
 80059fc:	d506      	bpl.n	8005a0c <__swbuf_r+0x6c>
 80059fe:	2e0a      	cmp	r6, #10
 8005a00:	d104      	bne.n	8005a0c <__swbuf_r+0x6c>
 8005a02:	4621      	mov	r1, r4
 8005a04:	4628      	mov	r0, r5
 8005a06:	f000 f92f 	bl	8005c68 <_fflush_r>
 8005a0a:	b988      	cbnz	r0, 8005a30 <__swbuf_r+0x90>
 8005a0c:	4638      	mov	r0, r7
 8005a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a10:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <__swbuf_r+0x9c>)
 8005a12:	429c      	cmp	r4, r3
 8005a14:	d101      	bne.n	8005a1a <__swbuf_r+0x7a>
 8005a16:	68ac      	ldr	r4, [r5, #8]
 8005a18:	e7cf      	b.n	80059ba <__swbuf_r+0x1a>
 8005a1a:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <__swbuf_r+0xa0>)
 8005a1c:	429c      	cmp	r4, r3
 8005a1e:	bf08      	it	eq
 8005a20:	68ec      	ldreq	r4, [r5, #12]
 8005a22:	e7ca      	b.n	80059ba <__swbuf_r+0x1a>
 8005a24:	4621      	mov	r1, r4
 8005a26:	4628      	mov	r0, r5
 8005a28:	f000 f81e 	bl	8005a68 <__swsetup_r>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d0cb      	beq.n	80059c8 <__swbuf_r+0x28>
 8005a30:	f04f 37ff 	mov.w	r7, #4294967295
 8005a34:	e7ea      	b.n	8005a0c <__swbuf_r+0x6c>
 8005a36:	bf00      	nop
 8005a38:	08006898 	.word	0x08006898
 8005a3c:	080068b8 	.word	0x080068b8
 8005a40:	08006878 	.word	0x08006878

08005a44 <_write_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4604      	mov	r4, r0
 8005a48:	4608      	mov	r0, r1
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4d05      	ldr	r5, [pc, #20]	; (8005a64 <_write_r+0x20>)
 8005a50:	602a      	str	r2, [r5, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	f7fa fb7c 	bl	8000150 <_write>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d102      	bne.n	8005a62 <_write_r+0x1e>
 8005a5c:	682b      	ldr	r3, [r5, #0]
 8005a5e:	b103      	cbz	r3, 8005a62 <_write_r+0x1e>
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	bd38      	pop	{r3, r4, r5, pc}
 8005a64:	20001b48 	.word	0x20001b48

08005a68 <__swsetup_r>:
 8005a68:	4b32      	ldr	r3, [pc, #200]	; (8005b34 <__swsetup_r+0xcc>)
 8005a6a:	b570      	push	{r4, r5, r6, lr}
 8005a6c:	681d      	ldr	r5, [r3, #0]
 8005a6e:	4606      	mov	r6, r0
 8005a70:	460c      	mov	r4, r1
 8005a72:	b125      	cbz	r5, 8005a7e <__swsetup_r+0x16>
 8005a74:	69ab      	ldr	r3, [r5, #24]
 8005a76:	b913      	cbnz	r3, 8005a7e <__swsetup_r+0x16>
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f7ff fcd5 	bl	8005428 <__sinit>
 8005a7e:	4b2e      	ldr	r3, [pc, #184]	; (8005b38 <__swsetup_r+0xd0>)
 8005a80:	429c      	cmp	r4, r3
 8005a82:	d10f      	bne.n	8005aa4 <__swsetup_r+0x3c>
 8005a84:	686c      	ldr	r4, [r5, #4]
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a8c:	0719      	lsls	r1, r3, #28
 8005a8e:	d42c      	bmi.n	8005aea <__swsetup_r+0x82>
 8005a90:	06dd      	lsls	r5, r3, #27
 8005a92:	d411      	bmi.n	8005ab8 <__swsetup_r+0x50>
 8005a94:	2309      	movs	r3, #9
 8005a96:	6033      	str	r3, [r6, #0]
 8005a98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	e03e      	b.n	8005b22 <__swsetup_r+0xba>
 8005aa4:	4b25      	ldr	r3, [pc, #148]	; (8005b3c <__swsetup_r+0xd4>)
 8005aa6:	429c      	cmp	r4, r3
 8005aa8:	d101      	bne.n	8005aae <__swsetup_r+0x46>
 8005aaa:	68ac      	ldr	r4, [r5, #8]
 8005aac:	e7eb      	b.n	8005a86 <__swsetup_r+0x1e>
 8005aae:	4b24      	ldr	r3, [pc, #144]	; (8005b40 <__swsetup_r+0xd8>)
 8005ab0:	429c      	cmp	r4, r3
 8005ab2:	bf08      	it	eq
 8005ab4:	68ec      	ldreq	r4, [r5, #12]
 8005ab6:	e7e6      	b.n	8005a86 <__swsetup_r+0x1e>
 8005ab8:	0758      	lsls	r0, r3, #29
 8005aba:	d512      	bpl.n	8005ae2 <__swsetup_r+0x7a>
 8005abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005abe:	b141      	cbz	r1, 8005ad2 <__swsetup_r+0x6a>
 8005ac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	d002      	beq.n	8005ace <__swsetup_r+0x66>
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f000 f98d 	bl	8005de8 <_free_r>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	6363      	str	r3, [r4, #52]	; 0x34
 8005ad2:	89a3      	ldrh	r3, [r4, #12]
 8005ad4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ad8:	81a3      	strh	r3, [r4, #12]
 8005ada:	2300      	movs	r3, #0
 8005adc:	6063      	str	r3, [r4, #4]
 8005ade:	6923      	ldr	r3, [r4, #16]
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	f043 0308 	orr.w	r3, r3, #8
 8005ae8:	81a3      	strh	r3, [r4, #12]
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	b94b      	cbnz	r3, 8005b02 <__swsetup_r+0x9a>
 8005aee:	89a3      	ldrh	r3, [r4, #12]
 8005af0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af8:	d003      	beq.n	8005b02 <__swsetup_r+0x9a>
 8005afa:	4621      	mov	r1, r4
 8005afc:	4630      	mov	r0, r6
 8005afe:	f000 f927 	bl	8005d50 <__smakebuf_r>
 8005b02:	89a0      	ldrh	r0, [r4, #12]
 8005b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b08:	f010 0301 	ands.w	r3, r0, #1
 8005b0c:	d00a      	beq.n	8005b24 <__swsetup_r+0xbc>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60a3      	str	r3, [r4, #8]
 8005b12:	6963      	ldr	r3, [r4, #20]
 8005b14:	425b      	negs	r3, r3
 8005b16:	61a3      	str	r3, [r4, #24]
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	b943      	cbnz	r3, 8005b2e <__swsetup_r+0xc6>
 8005b1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b20:	d1ba      	bne.n	8005a98 <__swsetup_r+0x30>
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
 8005b24:	0781      	lsls	r1, r0, #30
 8005b26:	bf58      	it	pl
 8005b28:	6963      	ldrpl	r3, [r4, #20]
 8005b2a:	60a3      	str	r3, [r4, #8]
 8005b2c:	e7f4      	b.n	8005b18 <__swsetup_r+0xb0>
 8005b2e:	2000      	movs	r0, #0
 8005b30:	e7f7      	b.n	8005b22 <__swsetup_r+0xba>
 8005b32:	bf00      	nop
 8005b34:	20000018 	.word	0x20000018
 8005b38:	08006898 	.word	0x08006898
 8005b3c:	080068b8 	.word	0x080068b8
 8005b40:	08006878 	.word	0x08006878

08005b44 <_close_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	2300      	movs	r3, #0
 8005b48:	4d05      	ldr	r5, [pc, #20]	; (8005b60 <_close_r+0x1c>)
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	4608      	mov	r0, r1
 8005b4e:	602b      	str	r3, [r5, #0]
 8005b50:	f7fa fee5 	bl	800091e <_close>
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	d102      	bne.n	8005b5e <_close_r+0x1a>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	b103      	cbz	r3, 8005b5e <_close_r+0x1a>
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	bd38      	pop	{r3, r4, r5, pc}
 8005b60:	20001b48 	.word	0x20001b48

08005b64 <__sflush_r>:
 8005b64:	898a      	ldrh	r2, [r1, #12]
 8005b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b68:	4605      	mov	r5, r0
 8005b6a:	0710      	lsls	r0, r2, #28
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	d457      	bmi.n	8005c20 <__sflush_r+0xbc>
 8005b70:	684b      	ldr	r3, [r1, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	dc04      	bgt.n	8005b80 <__sflush_r+0x1c>
 8005b76:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	dc01      	bgt.n	8005b80 <__sflush_r+0x1c>
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b82:	2e00      	cmp	r6, #0
 8005b84:	d0fa      	beq.n	8005b7c <__sflush_r+0x18>
 8005b86:	2300      	movs	r3, #0
 8005b88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b8c:	682f      	ldr	r7, [r5, #0]
 8005b8e:	602b      	str	r3, [r5, #0]
 8005b90:	d032      	beq.n	8005bf8 <__sflush_r+0x94>
 8005b92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	075a      	lsls	r2, r3, #29
 8005b98:	d505      	bpl.n	8005ba6 <__sflush_r+0x42>
 8005b9a:	6863      	ldr	r3, [r4, #4]
 8005b9c:	1ac0      	subs	r0, r0, r3
 8005b9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ba0:	b10b      	cbz	r3, 8005ba6 <__sflush_r+0x42>
 8005ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ba4:	1ac0      	subs	r0, r0, r3
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bac:	4628      	mov	r0, r5
 8005bae:	6a21      	ldr	r1, [r4, #32]
 8005bb0:	47b0      	blx	r6
 8005bb2:	1c43      	adds	r3, r0, #1
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	d106      	bne.n	8005bc6 <__sflush_r+0x62>
 8005bb8:	6829      	ldr	r1, [r5, #0]
 8005bba:	291d      	cmp	r1, #29
 8005bbc:	d82c      	bhi.n	8005c18 <__sflush_r+0xb4>
 8005bbe:	4a29      	ldr	r2, [pc, #164]	; (8005c64 <__sflush_r+0x100>)
 8005bc0:	40ca      	lsrs	r2, r1
 8005bc2:	07d6      	lsls	r6, r2, #31
 8005bc4:	d528      	bpl.n	8005c18 <__sflush_r+0xb4>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	6062      	str	r2, [r4, #4]
 8005bca:	6922      	ldr	r2, [r4, #16]
 8005bcc:	04d9      	lsls	r1, r3, #19
 8005bce:	6022      	str	r2, [r4, #0]
 8005bd0:	d504      	bpl.n	8005bdc <__sflush_r+0x78>
 8005bd2:	1c42      	adds	r2, r0, #1
 8005bd4:	d101      	bne.n	8005bda <__sflush_r+0x76>
 8005bd6:	682b      	ldr	r3, [r5, #0]
 8005bd8:	b903      	cbnz	r3, 8005bdc <__sflush_r+0x78>
 8005bda:	6560      	str	r0, [r4, #84]	; 0x54
 8005bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bde:	602f      	str	r7, [r5, #0]
 8005be0:	2900      	cmp	r1, #0
 8005be2:	d0cb      	beq.n	8005b7c <__sflush_r+0x18>
 8005be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005be8:	4299      	cmp	r1, r3
 8005bea:	d002      	beq.n	8005bf2 <__sflush_r+0x8e>
 8005bec:	4628      	mov	r0, r5
 8005bee:	f000 f8fb 	bl	8005de8 <_free_r>
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	6360      	str	r0, [r4, #52]	; 0x34
 8005bf6:	e7c2      	b.n	8005b7e <__sflush_r+0x1a>
 8005bf8:	6a21      	ldr	r1, [r4, #32]
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	47b0      	blx	r6
 8005c00:	1c41      	adds	r1, r0, #1
 8005c02:	d1c7      	bne.n	8005b94 <__sflush_r+0x30>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0c4      	beq.n	8005b94 <__sflush_r+0x30>
 8005c0a:	2b1d      	cmp	r3, #29
 8005c0c:	d001      	beq.n	8005c12 <__sflush_r+0xae>
 8005c0e:	2b16      	cmp	r3, #22
 8005c10:	d101      	bne.n	8005c16 <__sflush_r+0xb2>
 8005c12:	602f      	str	r7, [r5, #0]
 8005c14:	e7b2      	b.n	8005b7c <__sflush_r+0x18>
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c1c:	81a3      	strh	r3, [r4, #12]
 8005c1e:	e7ae      	b.n	8005b7e <__sflush_r+0x1a>
 8005c20:	690f      	ldr	r7, [r1, #16]
 8005c22:	2f00      	cmp	r7, #0
 8005c24:	d0aa      	beq.n	8005b7c <__sflush_r+0x18>
 8005c26:	0793      	lsls	r3, r2, #30
 8005c28:	bf18      	it	ne
 8005c2a:	2300      	movne	r3, #0
 8005c2c:	680e      	ldr	r6, [r1, #0]
 8005c2e:	bf08      	it	eq
 8005c30:	694b      	ldreq	r3, [r1, #20]
 8005c32:	1bf6      	subs	r6, r6, r7
 8005c34:	600f      	str	r7, [r1, #0]
 8005c36:	608b      	str	r3, [r1, #8]
 8005c38:	2e00      	cmp	r6, #0
 8005c3a:	dd9f      	ble.n	8005b7c <__sflush_r+0x18>
 8005c3c:	4633      	mov	r3, r6
 8005c3e:	463a      	mov	r2, r7
 8005c40:	4628      	mov	r0, r5
 8005c42:	6a21      	ldr	r1, [r4, #32]
 8005c44:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005c48:	47e0      	blx	ip
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	dc06      	bgt.n	8005c5c <__sflush_r+0xf8>
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295
 8005c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c58:	81a3      	strh	r3, [r4, #12]
 8005c5a:	e790      	b.n	8005b7e <__sflush_r+0x1a>
 8005c5c:	4407      	add	r7, r0
 8005c5e:	1a36      	subs	r6, r6, r0
 8005c60:	e7ea      	b.n	8005c38 <__sflush_r+0xd4>
 8005c62:	bf00      	nop
 8005c64:	20400001 	.word	0x20400001

08005c68 <_fflush_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	690b      	ldr	r3, [r1, #16]
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	b913      	cbnz	r3, 8005c78 <_fflush_r+0x10>
 8005c72:	2500      	movs	r5, #0
 8005c74:	4628      	mov	r0, r5
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	b118      	cbz	r0, 8005c82 <_fflush_r+0x1a>
 8005c7a:	6983      	ldr	r3, [r0, #24]
 8005c7c:	b90b      	cbnz	r3, 8005c82 <_fflush_r+0x1a>
 8005c7e:	f7ff fbd3 	bl	8005428 <__sinit>
 8005c82:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <_fflush_r+0x6c>)
 8005c84:	429c      	cmp	r4, r3
 8005c86:	d11b      	bne.n	8005cc0 <_fflush_r+0x58>
 8005c88:	686c      	ldr	r4, [r5, #4]
 8005c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0ef      	beq.n	8005c72 <_fflush_r+0xa>
 8005c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c94:	07d0      	lsls	r0, r2, #31
 8005c96:	d404      	bmi.n	8005ca2 <_fflush_r+0x3a>
 8005c98:	0599      	lsls	r1, r3, #22
 8005c9a:	d402      	bmi.n	8005ca2 <_fflush_r+0x3a>
 8005c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c9e:	f7ff fc86 	bl	80055ae <__retarget_lock_acquire_recursive>
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	f7ff ff5d 	bl	8005b64 <__sflush_r>
 8005caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cac:	4605      	mov	r5, r0
 8005cae:	07da      	lsls	r2, r3, #31
 8005cb0:	d4e0      	bmi.n	8005c74 <_fflush_r+0xc>
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	059b      	lsls	r3, r3, #22
 8005cb6:	d4dd      	bmi.n	8005c74 <_fflush_r+0xc>
 8005cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cba:	f7ff fc79 	bl	80055b0 <__retarget_lock_release_recursive>
 8005cbe:	e7d9      	b.n	8005c74 <_fflush_r+0xc>
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <_fflush_r+0x70>)
 8005cc2:	429c      	cmp	r4, r3
 8005cc4:	d101      	bne.n	8005cca <_fflush_r+0x62>
 8005cc6:	68ac      	ldr	r4, [r5, #8]
 8005cc8:	e7df      	b.n	8005c8a <_fflush_r+0x22>
 8005cca:	4b04      	ldr	r3, [pc, #16]	; (8005cdc <_fflush_r+0x74>)
 8005ccc:	429c      	cmp	r4, r3
 8005cce:	bf08      	it	eq
 8005cd0:	68ec      	ldreq	r4, [r5, #12]
 8005cd2:	e7da      	b.n	8005c8a <_fflush_r+0x22>
 8005cd4:	08006898 	.word	0x08006898
 8005cd8:	080068b8 	.word	0x080068b8
 8005cdc:	08006878 	.word	0x08006878

08005ce0 <_lseek_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	4608      	mov	r0, r1
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	2200      	movs	r2, #0
 8005cea:	4d05      	ldr	r5, [pc, #20]	; (8005d00 <_lseek_r+0x20>)
 8005cec:	602a      	str	r2, [r5, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f7fa fe39 	bl	8000966 <_lseek>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d102      	bne.n	8005cfe <_lseek_r+0x1e>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	b103      	cbz	r3, 8005cfe <_lseek_r+0x1e>
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	20001b48 	.word	0x20001b48

08005d04 <__swhatbuf_r>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	460e      	mov	r6, r1
 8005d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d0c:	4614      	mov	r4, r2
 8005d0e:	2900      	cmp	r1, #0
 8005d10:	461d      	mov	r5, r3
 8005d12:	b096      	sub	sp, #88	; 0x58
 8005d14:	da08      	bge.n	8005d28 <__swhatbuf_r+0x24>
 8005d16:	2200      	movs	r2, #0
 8005d18:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d1c:	602a      	str	r2, [r5, #0]
 8005d1e:	061a      	lsls	r2, r3, #24
 8005d20:	d410      	bmi.n	8005d44 <__swhatbuf_r+0x40>
 8005d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d26:	e00e      	b.n	8005d46 <__swhatbuf_r+0x42>
 8005d28:	466a      	mov	r2, sp
 8005d2a:	f000 fba5 	bl	8006478 <_fstat_r>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	dbf1      	blt.n	8005d16 <__swhatbuf_r+0x12>
 8005d32:	9a01      	ldr	r2, [sp, #4]
 8005d34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d3c:	425a      	negs	r2, r3
 8005d3e:	415a      	adcs	r2, r3
 8005d40:	602a      	str	r2, [r5, #0]
 8005d42:	e7ee      	b.n	8005d22 <__swhatbuf_r+0x1e>
 8005d44:	2340      	movs	r3, #64	; 0x40
 8005d46:	2000      	movs	r0, #0
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	b016      	add	sp, #88	; 0x58
 8005d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d50 <__smakebuf_r>:
 8005d50:	898b      	ldrh	r3, [r1, #12]
 8005d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d54:	079d      	lsls	r5, r3, #30
 8005d56:	4606      	mov	r6, r0
 8005d58:	460c      	mov	r4, r1
 8005d5a:	d507      	bpl.n	8005d6c <__smakebuf_r+0x1c>
 8005d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	6123      	str	r3, [r4, #16]
 8005d64:	2301      	movs	r3, #1
 8005d66:	6163      	str	r3, [r4, #20]
 8005d68:	b002      	add	sp, #8
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
 8005d6c:	466a      	mov	r2, sp
 8005d6e:	ab01      	add	r3, sp, #4
 8005d70:	f7ff ffc8 	bl	8005d04 <__swhatbuf_r>
 8005d74:	9900      	ldr	r1, [sp, #0]
 8005d76:	4605      	mov	r5, r0
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f7ff fc51 	bl	8005620 <_malloc_r>
 8005d7e:	b948      	cbnz	r0, 8005d94 <__smakebuf_r+0x44>
 8005d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d84:	059a      	lsls	r2, r3, #22
 8005d86:	d4ef      	bmi.n	8005d68 <__smakebuf_r+0x18>
 8005d88:	f023 0303 	bic.w	r3, r3, #3
 8005d8c:	f043 0302 	orr.w	r3, r3, #2
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	e7e3      	b.n	8005d5c <__smakebuf_r+0xc>
 8005d94:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <__smakebuf_r+0x7c>)
 8005d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	6020      	str	r0, [r4, #0]
 8005d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da0:	81a3      	strh	r3, [r4, #12]
 8005da2:	9b00      	ldr	r3, [sp, #0]
 8005da4:	6120      	str	r0, [r4, #16]
 8005da6:	6163      	str	r3, [r4, #20]
 8005da8:	9b01      	ldr	r3, [sp, #4]
 8005daa:	b15b      	cbz	r3, 8005dc4 <__smakebuf_r+0x74>
 8005dac:	4630      	mov	r0, r6
 8005dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005db2:	f000 fb73 	bl	800649c <_isatty_r>
 8005db6:	b128      	cbz	r0, 8005dc4 <__smakebuf_r+0x74>
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	f023 0303 	bic.w	r3, r3, #3
 8005dbe:	f043 0301 	orr.w	r3, r3, #1
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	89a0      	ldrh	r0, [r4, #12]
 8005dc6:	4305      	orrs	r5, r0
 8005dc8:	81a5      	strh	r5, [r4, #12]
 8005dca:	e7cd      	b.n	8005d68 <__smakebuf_r+0x18>
 8005dcc:	080053c1 	.word	0x080053c1

08005dd0 <__malloc_lock>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	; (8005dd8 <__malloc_lock+0x8>)
 8005dd2:	f7ff bbec 	b.w	80055ae <__retarget_lock_acquire_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	20001b3c 	.word	0x20001b3c

08005ddc <__malloc_unlock>:
 8005ddc:	4801      	ldr	r0, [pc, #4]	; (8005de4 <__malloc_unlock+0x8>)
 8005dde:	f7ff bbe7 	b.w	80055b0 <__retarget_lock_release_recursive>
 8005de2:	bf00      	nop
 8005de4:	20001b3c 	.word	0x20001b3c

08005de8 <_free_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4605      	mov	r5, r0
 8005dec:	2900      	cmp	r1, #0
 8005dee:	d040      	beq.n	8005e72 <_free_r+0x8a>
 8005df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df4:	1f0c      	subs	r4, r1, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bfb8      	it	lt
 8005dfa:	18e4      	addlt	r4, r4, r3
 8005dfc:	f7ff ffe8 	bl	8005dd0 <__malloc_lock>
 8005e00:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <_free_r+0x8c>)
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	b933      	cbnz	r3, 8005e14 <_free_r+0x2c>
 8005e06:	6063      	str	r3, [r4, #4]
 8005e08:	6014      	str	r4, [r2, #0]
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e10:	f7ff bfe4 	b.w	8005ddc <__malloc_unlock>
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	d908      	bls.n	8005e2a <_free_r+0x42>
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	1821      	adds	r1, r4, r0
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	bf01      	itttt	eq
 8005e20:	6819      	ldreq	r1, [r3, #0]
 8005e22:	685b      	ldreq	r3, [r3, #4]
 8005e24:	1809      	addeq	r1, r1, r0
 8005e26:	6021      	streq	r1, [r4, #0]
 8005e28:	e7ed      	b.n	8005e06 <_free_r+0x1e>
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b10b      	cbz	r3, 8005e34 <_free_r+0x4c>
 8005e30:	42a3      	cmp	r3, r4
 8005e32:	d9fa      	bls.n	8005e2a <_free_r+0x42>
 8005e34:	6811      	ldr	r1, [r2, #0]
 8005e36:	1850      	adds	r0, r2, r1
 8005e38:	42a0      	cmp	r0, r4
 8005e3a:	d10b      	bne.n	8005e54 <_free_r+0x6c>
 8005e3c:	6820      	ldr	r0, [r4, #0]
 8005e3e:	4401      	add	r1, r0
 8005e40:	1850      	adds	r0, r2, r1
 8005e42:	4283      	cmp	r3, r0
 8005e44:	6011      	str	r1, [r2, #0]
 8005e46:	d1e0      	bne.n	8005e0a <_free_r+0x22>
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4401      	add	r1, r0
 8005e4e:	6011      	str	r1, [r2, #0]
 8005e50:	6053      	str	r3, [r2, #4]
 8005e52:	e7da      	b.n	8005e0a <_free_r+0x22>
 8005e54:	d902      	bls.n	8005e5c <_free_r+0x74>
 8005e56:	230c      	movs	r3, #12
 8005e58:	602b      	str	r3, [r5, #0]
 8005e5a:	e7d6      	b.n	8005e0a <_free_r+0x22>
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	1821      	adds	r1, r4, r0
 8005e60:	428b      	cmp	r3, r1
 8005e62:	bf01      	itttt	eq
 8005e64:	6819      	ldreq	r1, [r3, #0]
 8005e66:	685b      	ldreq	r3, [r3, #4]
 8005e68:	1809      	addeq	r1, r1, r0
 8005e6a:	6021      	streq	r1, [r4, #0]
 8005e6c:	6063      	str	r3, [r4, #4]
 8005e6e:	6054      	str	r4, [r2, #4]
 8005e70:	e7cb      	b.n	8005e0a <_free_r+0x22>
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	20001b40 	.word	0x20001b40

08005e78 <__sfputc_r>:
 8005e78:	6893      	ldr	r3, [r2, #8]
 8005e7a:	b410      	push	{r4}
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	6093      	str	r3, [r2, #8]
 8005e82:	da07      	bge.n	8005e94 <__sfputc_r+0x1c>
 8005e84:	6994      	ldr	r4, [r2, #24]
 8005e86:	42a3      	cmp	r3, r4
 8005e88:	db01      	blt.n	8005e8e <__sfputc_r+0x16>
 8005e8a:	290a      	cmp	r1, #10
 8005e8c:	d102      	bne.n	8005e94 <__sfputc_r+0x1c>
 8005e8e:	bc10      	pop	{r4}
 8005e90:	f7ff bd86 	b.w	80059a0 <__swbuf_r>
 8005e94:	6813      	ldr	r3, [r2, #0]
 8005e96:	1c58      	adds	r0, r3, #1
 8005e98:	6010      	str	r0, [r2, #0]
 8005e9a:	7019      	strb	r1, [r3, #0]
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	bc10      	pop	{r4}
 8005ea0:	4770      	bx	lr

08005ea2 <__sfputs_r>:
 8005ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea4:	4606      	mov	r6, r0
 8005ea6:	460f      	mov	r7, r1
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	18d5      	adds	r5, r2, r3
 8005eac:	42ac      	cmp	r4, r5
 8005eae:	d101      	bne.n	8005eb4 <__sfputs_r+0x12>
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	e007      	b.n	8005ec4 <__sfputs_r+0x22>
 8005eb4:	463a      	mov	r2, r7
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ebc:	f7ff ffdc 	bl	8005e78 <__sfputc_r>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d1f3      	bne.n	8005eac <__sfputs_r+0xa>
 8005ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ec8 <_vfiprintf_r>:
 8005ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ecc:	460d      	mov	r5, r1
 8005ece:	4614      	mov	r4, r2
 8005ed0:	4698      	mov	r8, r3
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	b09d      	sub	sp, #116	; 0x74
 8005ed6:	b118      	cbz	r0, 8005ee0 <_vfiprintf_r+0x18>
 8005ed8:	6983      	ldr	r3, [r0, #24]
 8005eda:	b90b      	cbnz	r3, 8005ee0 <_vfiprintf_r+0x18>
 8005edc:	f7ff faa4 	bl	8005428 <__sinit>
 8005ee0:	4b89      	ldr	r3, [pc, #548]	; (8006108 <_vfiprintf_r+0x240>)
 8005ee2:	429d      	cmp	r5, r3
 8005ee4:	d11b      	bne.n	8005f1e <_vfiprintf_r+0x56>
 8005ee6:	6875      	ldr	r5, [r6, #4]
 8005ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eea:	07d9      	lsls	r1, r3, #31
 8005eec:	d405      	bmi.n	8005efa <_vfiprintf_r+0x32>
 8005eee:	89ab      	ldrh	r3, [r5, #12]
 8005ef0:	059a      	lsls	r2, r3, #22
 8005ef2:	d402      	bmi.n	8005efa <_vfiprintf_r+0x32>
 8005ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ef6:	f7ff fb5a 	bl	80055ae <__retarget_lock_acquire_recursive>
 8005efa:	89ab      	ldrh	r3, [r5, #12]
 8005efc:	071b      	lsls	r3, r3, #28
 8005efe:	d501      	bpl.n	8005f04 <_vfiprintf_r+0x3c>
 8005f00:	692b      	ldr	r3, [r5, #16]
 8005f02:	b9eb      	cbnz	r3, 8005f40 <_vfiprintf_r+0x78>
 8005f04:	4629      	mov	r1, r5
 8005f06:	4630      	mov	r0, r6
 8005f08:	f7ff fdae 	bl	8005a68 <__swsetup_r>
 8005f0c:	b1c0      	cbz	r0, 8005f40 <_vfiprintf_r+0x78>
 8005f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f10:	07dc      	lsls	r4, r3, #31
 8005f12:	d50e      	bpl.n	8005f32 <_vfiprintf_r+0x6a>
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295
 8005f18:	b01d      	add	sp, #116	; 0x74
 8005f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1e:	4b7b      	ldr	r3, [pc, #492]	; (800610c <_vfiprintf_r+0x244>)
 8005f20:	429d      	cmp	r5, r3
 8005f22:	d101      	bne.n	8005f28 <_vfiprintf_r+0x60>
 8005f24:	68b5      	ldr	r5, [r6, #8]
 8005f26:	e7df      	b.n	8005ee8 <_vfiprintf_r+0x20>
 8005f28:	4b79      	ldr	r3, [pc, #484]	; (8006110 <_vfiprintf_r+0x248>)
 8005f2a:	429d      	cmp	r5, r3
 8005f2c:	bf08      	it	eq
 8005f2e:	68f5      	ldreq	r5, [r6, #12]
 8005f30:	e7da      	b.n	8005ee8 <_vfiprintf_r+0x20>
 8005f32:	89ab      	ldrh	r3, [r5, #12]
 8005f34:	0598      	lsls	r0, r3, #22
 8005f36:	d4ed      	bmi.n	8005f14 <_vfiprintf_r+0x4c>
 8005f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f3a:	f7ff fb39 	bl	80055b0 <__retarget_lock_release_recursive>
 8005f3e:	e7e9      	b.n	8005f14 <_vfiprintf_r+0x4c>
 8005f40:	2300      	movs	r3, #0
 8005f42:	9309      	str	r3, [sp, #36]	; 0x24
 8005f44:	2320      	movs	r3, #32
 8005f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f4a:	2330      	movs	r3, #48	; 0x30
 8005f4c:	f04f 0901 	mov.w	r9, #1
 8005f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f54:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006114 <_vfiprintf_r+0x24c>
 8005f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f5c:	4623      	mov	r3, r4
 8005f5e:	469a      	mov	sl, r3
 8005f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f64:	b10a      	cbz	r2, 8005f6a <_vfiprintf_r+0xa2>
 8005f66:	2a25      	cmp	r2, #37	; 0x25
 8005f68:	d1f9      	bne.n	8005f5e <_vfiprintf_r+0x96>
 8005f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8005f6e:	d00b      	beq.n	8005f88 <_vfiprintf_r+0xc0>
 8005f70:	465b      	mov	r3, fp
 8005f72:	4622      	mov	r2, r4
 8005f74:	4629      	mov	r1, r5
 8005f76:	4630      	mov	r0, r6
 8005f78:	f7ff ff93 	bl	8005ea2 <__sfputs_r>
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	f000 80aa 	beq.w	80060d6 <_vfiprintf_r+0x20e>
 8005f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f84:	445a      	add	r2, fp
 8005f86:	9209      	str	r2, [sp, #36]	; 0x24
 8005f88:	f89a 3000 	ldrb.w	r3, [sl]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80a2 	beq.w	80060d6 <_vfiprintf_r+0x20e>
 8005f92:	2300      	movs	r3, #0
 8005f94:	f04f 32ff 	mov.w	r2, #4294967295
 8005f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f9c:	f10a 0a01 	add.w	sl, sl, #1
 8005fa0:	9304      	str	r3, [sp, #16]
 8005fa2:	9307      	str	r3, [sp, #28]
 8005fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8005faa:	4654      	mov	r4, sl
 8005fac:	2205      	movs	r2, #5
 8005fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb2:	4858      	ldr	r0, [pc, #352]	; (8006114 <_vfiprintf_r+0x24c>)
 8005fb4:	f000 fa82 	bl	80064bc <memchr>
 8005fb8:	9a04      	ldr	r2, [sp, #16]
 8005fba:	b9d8      	cbnz	r0, 8005ff4 <_vfiprintf_r+0x12c>
 8005fbc:	06d1      	lsls	r1, r2, #27
 8005fbe:	bf44      	itt	mi
 8005fc0:	2320      	movmi	r3, #32
 8005fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fc6:	0713      	lsls	r3, r2, #28
 8005fc8:	bf44      	itt	mi
 8005fca:	232b      	movmi	r3, #43	; 0x2b
 8005fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd6:	d015      	beq.n	8006004 <_vfiprintf_r+0x13c>
 8005fd8:	4654      	mov	r4, sl
 8005fda:	2000      	movs	r0, #0
 8005fdc:	f04f 0c0a 	mov.w	ip, #10
 8005fe0:	9a07      	ldr	r2, [sp, #28]
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fe8:	3b30      	subs	r3, #48	; 0x30
 8005fea:	2b09      	cmp	r3, #9
 8005fec:	d94e      	bls.n	800608c <_vfiprintf_r+0x1c4>
 8005fee:	b1b0      	cbz	r0, 800601e <_vfiprintf_r+0x156>
 8005ff0:	9207      	str	r2, [sp, #28]
 8005ff2:	e014      	b.n	800601e <_vfiprintf_r+0x156>
 8005ff4:	eba0 0308 	sub.w	r3, r0, r8
 8005ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	46a2      	mov	sl, r4
 8006000:	9304      	str	r3, [sp, #16]
 8006002:	e7d2      	b.n	8005faa <_vfiprintf_r+0xe2>
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	1d19      	adds	r1, r3, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	9103      	str	r1, [sp, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	bfbb      	ittet	lt
 8006010:	425b      	neglt	r3, r3
 8006012:	f042 0202 	orrlt.w	r2, r2, #2
 8006016:	9307      	strge	r3, [sp, #28]
 8006018:	9307      	strlt	r3, [sp, #28]
 800601a:	bfb8      	it	lt
 800601c:	9204      	strlt	r2, [sp, #16]
 800601e:	7823      	ldrb	r3, [r4, #0]
 8006020:	2b2e      	cmp	r3, #46	; 0x2e
 8006022:	d10c      	bne.n	800603e <_vfiprintf_r+0x176>
 8006024:	7863      	ldrb	r3, [r4, #1]
 8006026:	2b2a      	cmp	r3, #42	; 0x2a
 8006028:	d135      	bne.n	8006096 <_vfiprintf_r+0x1ce>
 800602a:	9b03      	ldr	r3, [sp, #12]
 800602c:	3402      	adds	r4, #2
 800602e:	1d1a      	adds	r2, r3, #4
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	9203      	str	r2, [sp, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	bfb8      	it	lt
 8006038:	f04f 33ff 	movlt.w	r3, #4294967295
 800603c:	9305      	str	r3, [sp, #20]
 800603e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006118 <_vfiprintf_r+0x250>
 8006042:	2203      	movs	r2, #3
 8006044:	4650      	mov	r0, sl
 8006046:	7821      	ldrb	r1, [r4, #0]
 8006048:	f000 fa38 	bl	80064bc <memchr>
 800604c:	b140      	cbz	r0, 8006060 <_vfiprintf_r+0x198>
 800604e:	2340      	movs	r3, #64	; 0x40
 8006050:	eba0 000a 	sub.w	r0, r0, sl
 8006054:	fa03 f000 	lsl.w	r0, r3, r0
 8006058:	9b04      	ldr	r3, [sp, #16]
 800605a:	3401      	adds	r4, #1
 800605c:	4303      	orrs	r3, r0
 800605e:	9304      	str	r3, [sp, #16]
 8006060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006064:	2206      	movs	r2, #6
 8006066:	482d      	ldr	r0, [pc, #180]	; (800611c <_vfiprintf_r+0x254>)
 8006068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800606c:	f000 fa26 	bl	80064bc <memchr>
 8006070:	2800      	cmp	r0, #0
 8006072:	d03f      	beq.n	80060f4 <_vfiprintf_r+0x22c>
 8006074:	4b2a      	ldr	r3, [pc, #168]	; (8006120 <_vfiprintf_r+0x258>)
 8006076:	bb1b      	cbnz	r3, 80060c0 <_vfiprintf_r+0x1f8>
 8006078:	9b03      	ldr	r3, [sp, #12]
 800607a:	3307      	adds	r3, #7
 800607c:	f023 0307 	bic.w	r3, r3, #7
 8006080:	3308      	adds	r3, #8
 8006082:	9303      	str	r3, [sp, #12]
 8006084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006086:	443b      	add	r3, r7
 8006088:	9309      	str	r3, [sp, #36]	; 0x24
 800608a:	e767      	b.n	8005f5c <_vfiprintf_r+0x94>
 800608c:	460c      	mov	r4, r1
 800608e:	2001      	movs	r0, #1
 8006090:	fb0c 3202 	mla	r2, ip, r2, r3
 8006094:	e7a5      	b.n	8005fe2 <_vfiprintf_r+0x11a>
 8006096:	2300      	movs	r3, #0
 8006098:	f04f 0c0a 	mov.w	ip, #10
 800609c:	4619      	mov	r1, r3
 800609e:	3401      	adds	r4, #1
 80060a0:	9305      	str	r3, [sp, #20]
 80060a2:	4620      	mov	r0, r4
 80060a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060a8:	3a30      	subs	r2, #48	; 0x30
 80060aa:	2a09      	cmp	r2, #9
 80060ac:	d903      	bls.n	80060b6 <_vfiprintf_r+0x1ee>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0c5      	beq.n	800603e <_vfiprintf_r+0x176>
 80060b2:	9105      	str	r1, [sp, #20]
 80060b4:	e7c3      	b.n	800603e <_vfiprintf_r+0x176>
 80060b6:	4604      	mov	r4, r0
 80060b8:	2301      	movs	r3, #1
 80060ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80060be:	e7f0      	b.n	80060a2 <_vfiprintf_r+0x1da>
 80060c0:	ab03      	add	r3, sp, #12
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	462a      	mov	r2, r5
 80060c6:	4630      	mov	r0, r6
 80060c8:	4b16      	ldr	r3, [pc, #88]	; (8006124 <_vfiprintf_r+0x25c>)
 80060ca:	a904      	add	r1, sp, #16
 80060cc:	f3af 8000 	nop.w
 80060d0:	4607      	mov	r7, r0
 80060d2:	1c78      	adds	r0, r7, #1
 80060d4:	d1d6      	bne.n	8006084 <_vfiprintf_r+0x1bc>
 80060d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060d8:	07d9      	lsls	r1, r3, #31
 80060da:	d405      	bmi.n	80060e8 <_vfiprintf_r+0x220>
 80060dc:	89ab      	ldrh	r3, [r5, #12]
 80060de:	059a      	lsls	r2, r3, #22
 80060e0:	d402      	bmi.n	80060e8 <_vfiprintf_r+0x220>
 80060e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060e4:	f7ff fa64 	bl	80055b0 <__retarget_lock_release_recursive>
 80060e8:	89ab      	ldrh	r3, [r5, #12]
 80060ea:	065b      	lsls	r3, r3, #25
 80060ec:	f53f af12 	bmi.w	8005f14 <_vfiprintf_r+0x4c>
 80060f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060f2:	e711      	b.n	8005f18 <_vfiprintf_r+0x50>
 80060f4:	ab03      	add	r3, sp, #12
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	462a      	mov	r2, r5
 80060fa:	4630      	mov	r0, r6
 80060fc:	4b09      	ldr	r3, [pc, #36]	; (8006124 <_vfiprintf_r+0x25c>)
 80060fe:	a904      	add	r1, sp, #16
 8006100:	f000 f882 	bl	8006208 <_printf_i>
 8006104:	e7e4      	b.n	80060d0 <_vfiprintf_r+0x208>
 8006106:	bf00      	nop
 8006108:	08006898 	.word	0x08006898
 800610c:	080068b8 	.word	0x080068b8
 8006110:	08006878 	.word	0x08006878
 8006114:	080068dc 	.word	0x080068dc
 8006118:	080068e2 	.word	0x080068e2
 800611c:	080068e6 	.word	0x080068e6
 8006120:	00000000 	.word	0x00000000
 8006124:	08005ea3 	.word	0x08005ea3

08006128 <_printf_common>:
 8006128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800612c:	4616      	mov	r6, r2
 800612e:	4699      	mov	r9, r3
 8006130:	688a      	ldr	r2, [r1, #8]
 8006132:	690b      	ldr	r3, [r1, #16]
 8006134:	4607      	mov	r7, r0
 8006136:	4293      	cmp	r3, r2
 8006138:	bfb8      	it	lt
 800613a:	4613      	movlt	r3, r2
 800613c:	6033      	str	r3, [r6, #0]
 800613e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006142:	460c      	mov	r4, r1
 8006144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006148:	b10a      	cbz	r2, 800614e <_printf_common+0x26>
 800614a:	3301      	adds	r3, #1
 800614c:	6033      	str	r3, [r6, #0]
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	0699      	lsls	r1, r3, #26
 8006152:	bf42      	ittt	mi
 8006154:	6833      	ldrmi	r3, [r6, #0]
 8006156:	3302      	addmi	r3, #2
 8006158:	6033      	strmi	r3, [r6, #0]
 800615a:	6825      	ldr	r5, [r4, #0]
 800615c:	f015 0506 	ands.w	r5, r5, #6
 8006160:	d106      	bne.n	8006170 <_printf_common+0x48>
 8006162:	f104 0a19 	add.w	sl, r4, #25
 8006166:	68e3      	ldr	r3, [r4, #12]
 8006168:	6832      	ldr	r2, [r6, #0]
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	42ab      	cmp	r3, r5
 800616e:	dc28      	bgt.n	80061c2 <_printf_common+0x9a>
 8006170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006174:	1e13      	subs	r3, r2, #0
 8006176:	6822      	ldr	r2, [r4, #0]
 8006178:	bf18      	it	ne
 800617a:	2301      	movne	r3, #1
 800617c:	0692      	lsls	r2, r2, #26
 800617e:	d42d      	bmi.n	80061dc <_printf_common+0xb4>
 8006180:	4649      	mov	r1, r9
 8006182:	4638      	mov	r0, r7
 8006184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006188:	47c0      	blx	r8
 800618a:	3001      	adds	r0, #1
 800618c:	d020      	beq.n	80061d0 <_printf_common+0xa8>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	68e5      	ldr	r5, [r4, #12]
 8006192:	f003 0306 	and.w	r3, r3, #6
 8006196:	2b04      	cmp	r3, #4
 8006198:	bf18      	it	ne
 800619a:	2500      	movne	r5, #0
 800619c:	6832      	ldr	r2, [r6, #0]
 800619e:	f04f 0600 	mov.w	r6, #0
 80061a2:	68a3      	ldr	r3, [r4, #8]
 80061a4:	bf08      	it	eq
 80061a6:	1aad      	subeq	r5, r5, r2
 80061a8:	6922      	ldr	r2, [r4, #16]
 80061aa:	bf08      	it	eq
 80061ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061b0:	4293      	cmp	r3, r2
 80061b2:	bfc4      	itt	gt
 80061b4:	1a9b      	subgt	r3, r3, r2
 80061b6:	18ed      	addgt	r5, r5, r3
 80061b8:	341a      	adds	r4, #26
 80061ba:	42b5      	cmp	r5, r6
 80061bc:	d11a      	bne.n	80061f4 <_printf_common+0xcc>
 80061be:	2000      	movs	r0, #0
 80061c0:	e008      	b.n	80061d4 <_printf_common+0xac>
 80061c2:	2301      	movs	r3, #1
 80061c4:	4652      	mov	r2, sl
 80061c6:	4649      	mov	r1, r9
 80061c8:	4638      	mov	r0, r7
 80061ca:	47c0      	blx	r8
 80061cc:	3001      	adds	r0, #1
 80061ce:	d103      	bne.n	80061d8 <_printf_common+0xb0>
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d8:	3501      	adds	r5, #1
 80061da:	e7c4      	b.n	8006166 <_printf_common+0x3e>
 80061dc:	2030      	movs	r0, #48	; 0x30
 80061de:	18e1      	adds	r1, r4, r3
 80061e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061ea:	4422      	add	r2, r4
 80061ec:	3302      	adds	r3, #2
 80061ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061f2:	e7c5      	b.n	8006180 <_printf_common+0x58>
 80061f4:	2301      	movs	r3, #1
 80061f6:	4622      	mov	r2, r4
 80061f8:	4649      	mov	r1, r9
 80061fa:	4638      	mov	r0, r7
 80061fc:	47c0      	blx	r8
 80061fe:	3001      	adds	r0, #1
 8006200:	d0e6      	beq.n	80061d0 <_printf_common+0xa8>
 8006202:	3601      	adds	r6, #1
 8006204:	e7d9      	b.n	80061ba <_printf_common+0x92>
	...

08006208 <_printf_i>:
 8006208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	7e0f      	ldrb	r7, [r1, #24]
 800620e:	4691      	mov	r9, r2
 8006210:	2f78      	cmp	r7, #120	; 0x78
 8006212:	4680      	mov	r8, r0
 8006214:	460c      	mov	r4, r1
 8006216:	469a      	mov	sl, r3
 8006218:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800621a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800621e:	d807      	bhi.n	8006230 <_printf_i+0x28>
 8006220:	2f62      	cmp	r7, #98	; 0x62
 8006222:	d80a      	bhi.n	800623a <_printf_i+0x32>
 8006224:	2f00      	cmp	r7, #0
 8006226:	f000 80d9 	beq.w	80063dc <_printf_i+0x1d4>
 800622a:	2f58      	cmp	r7, #88	; 0x58
 800622c:	f000 80a4 	beq.w	8006378 <_printf_i+0x170>
 8006230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006238:	e03a      	b.n	80062b0 <_printf_i+0xa8>
 800623a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800623e:	2b15      	cmp	r3, #21
 8006240:	d8f6      	bhi.n	8006230 <_printf_i+0x28>
 8006242:	a101      	add	r1, pc, #4	; (adr r1, 8006248 <_printf_i+0x40>)
 8006244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006248:	080062a1 	.word	0x080062a1
 800624c:	080062b5 	.word	0x080062b5
 8006250:	08006231 	.word	0x08006231
 8006254:	08006231 	.word	0x08006231
 8006258:	08006231 	.word	0x08006231
 800625c:	08006231 	.word	0x08006231
 8006260:	080062b5 	.word	0x080062b5
 8006264:	08006231 	.word	0x08006231
 8006268:	08006231 	.word	0x08006231
 800626c:	08006231 	.word	0x08006231
 8006270:	08006231 	.word	0x08006231
 8006274:	080063c3 	.word	0x080063c3
 8006278:	080062e5 	.word	0x080062e5
 800627c:	080063a5 	.word	0x080063a5
 8006280:	08006231 	.word	0x08006231
 8006284:	08006231 	.word	0x08006231
 8006288:	080063e5 	.word	0x080063e5
 800628c:	08006231 	.word	0x08006231
 8006290:	080062e5 	.word	0x080062e5
 8006294:	08006231 	.word	0x08006231
 8006298:	08006231 	.word	0x08006231
 800629c:	080063ad 	.word	0x080063ad
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	1d1a      	adds	r2, r3, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	602a      	str	r2, [r5, #0]
 80062a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0a4      	b.n	80063fe <_printf_i+0x1f6>
 80062b4:	6820      	ldr	r0, [r4, #0]
 80062b6:	6829      	ldr	r1, [r5, #0]
 80062b8:	0606      	lsls	r6, r0, #24
 80062ba:	f101 0304 	add.w	r3, r1, #4
 80062be:	d50a      	bpl.n	80062d6 <_printf_i+0xce>
 80062c0:	680e      	ldr	r6, [r1, #0]
 80062c2:	602b      	str	r3, [r5, #0]
 80062c4:	2e00      	cmp	r6, #0
 80062c6:	da03      	bge.n	80062d0 <_printf_i+0xc8>
 80062c8:	232d      	movs	r3, #45	; 0x2d
 80062ca:	4276      	negs	r6, r6
 80062cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d0:	230a      	movs	r3, #10
 80062d2:	485e      	ldr	r0, [pc, #376]	; (800644c <_printf_i+0x244>)
 80062d4:	e019      	b.n	800630a <_printf_i+0x102>
 80062d6:	680e      	ldr	r6, [r1, #0]
 80062d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	bf18      	it	ne
 80062e0:	b236      	sxthne	r6, r6
 80062e2:	e7ef      	b.n	80062c4 <_printf_i+0xbc>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	6820      	ldr	r0, [r4, #0]
 80062e8:	1d19      	adds	r1, r3, #4
 80062ea:	6029      	str	r1, [r5, #0]
 80062ec:	0601      	lsls	r1, r0, #24
 80062ee:	d501      	bpl.n	80062f4 <_printf_i+0xec>
 80062f0:	681e      	ldr	r6, [r3, #0]
 80062f2:	e002      	b.n	80062fa <_printf_i+0xf2>
 80062f4:	0646      	lsls	r6, r0, #25
 80062f6:	d5fb      	bpl.n	80062f0 <_printf_i+0xe8>
 80062f8:	881e      	ldrh	r6, [r3, #0]
 80062fa:	2f6f      	cmp	r7, #111	; 0x6f
 80062fc:	bf0c      	ite	eq
 80062fe:	2308      	moveq	r3, #8
 8006300:	230a      	movne	r3, #10
 8006302:	4852      	ldr	r0, [pc, #328]	; (800644c <_printf_i+0x244>)
 8006304:	2100      	movs	r1, #0
 8006306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800630a:	6865      	ldr	r5, [r4, #4]
 800630c:	2d00      	cmp	r5, #0
 800630e:	bfa8      	it	ge
 8006310:	6821      	ldrge	r1, [r4, #0]
 8006312:	60a5      	str	r5, [r4, #8]
 8006314:	bfa4      	itt	ge
 8006316:	f021 0104 	bicge.w	r1, r1, #4
 800631a:	6021      	strge	r1, [r4, #0]
 800631c:	b90e      	cbnz	r6, 8006322 <_printf_i+0x11a>
 800631e:	2d00      	cmp	r5, #0
 8006320:	d04d      	beq.n	80063be <_printf_i+0x1b6>
 8006322:	4615      	mov	r5, r2
 8006324:	fbb6 f1f3 	udiv	r1, r6, r3
 8006328:	fb03 6711 	mls	r7, r3, r1, r6
 800632c:	5dc7      	ldrb	r7, [r0, r7]
 800632e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006332:	4637      	mov	r7, r6
 8006334:	42bb      	cmp	r3, r7
 8006336:	460e      	mov	r6, r1
 8006338:	d9f4      	bls.n	8006324 <_printf_i+0x11c>
 800633a:	2b08      	cmp	r3, #8
 800633c:	d10b      	bne.n	8006356 <_printf_i+0x14e>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	07de      	lsls	r6, r3, #31
 8006342:	d508      	bpl.n	8006356 <_printf_i+0x14e>
 8006344:	6923      	ldr	r3, [r4, #16]
 8006346:	6861      	ldr	r1, [r4, #4]
 8006348:	4299      	cmp	r1, r3
 800634a:	bfde      	ittt	le
 800634c:	2330      	movle	r3, #48	; 0x30
 800634e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006352:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006356:	1b52      	subs	r2, r2, r5
 8006358:	6122      	str	r2, [r4, #16]
 800635a:	464b      	mov	r3, r9
 800635c:	4621      	mov	r1, r4
 800635e:	4640      	mov	r0, r8
 8006360:	f8cd a000 	str.w	sl, [sp]
 8006364:	aa03      	add	r2, sp, #12
 8006366:	f7ff fedf 	bl	8006128 <_printf_common>
 800636a:	3001      	adds	r0, #1
 800636c:	d14c      	bne.n	8006408 <_printf_i+0x200>
 800636e:	f04f 30ff 	mov.w	r0, #4294967295
 8006372:	b004      	add	sp, #16
 8006374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006378:	4834      	ldr	r0, [pc, #208]	; (800644c <_printf_i+0x244>)
 800637a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800637e:	6829      	ldr	r1, [r5, #0]
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	f851 6b04 	ldr.w	r6, [r1], #4
 8006386:	6029      	str	r1, [r5, #0]
 8006388:	061d      	lsls	r5, r3, #24
 800638a:	d514      	bpl.n	80063b6 <_printf_i+0x1ae>
 800638c:	07df      	lsls	r7, r3, #31
 800638e:	bf44      	itt	mi
 8006390:	f043 0320 	orrmi.w	r3, r3, #32
 8006394:	6023      	strmi	r3, [r4, #0]
 8006396:	b91e      	cbnz	r6, 80063a0 <_printf_i+0x198>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	f023 0320 	bic.w	r3, r3, #32
 800639e:	6023      	str	r3, [r4, #0]
 80063a0:	2310      	movs	r3, #16
 80063a2:	e7af      	b.n	8006304 <_printf_i+0xfc>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	f043 0320 	orr.w	r3, r3, #32
 80063aa:	6023      	str	r3, [r4, #0]
 80063ac:	2378      	movs	r3, #120	; 0x78
 80063ae:	4828      	ldr	r0, [pc, #160]	; (8006450 <_printf_i+0x248>)
 80063b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063b4:	e7e3      	b.n	800637e <_printf_i+0x176>
 80063b6:	0659      	lsls	r1, r3, #25
 80063b8:	bf48      	it	mi
 80063ba:	b2b6      	uxthmi	r6, r6
 80063bc:	e7e6      	b.n	800638c <_printf_i+0x184>
 80063be:	4615      	mov	r5, r2
 80063c0:	e7bb      	b.n	800633a <_printf_i+0x132>
 80063c2:	682b      	ldr	r3, [r5, #0]
 80063c4:	6826      	ldr	r6, [r4, #0]
 80063c6:	1d18      	adds	r0, r3, #4
 80063c8:	6961      	ldr	r1, [r4, #20]
 80063ca:	6028      	str	r0, [r5, #0]
 80063cc:	0635      	lsls	r5, r6, #24
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	d501      	bpl.n	80063d6 <_printf_i+0x1ce>
 80063d2:	6019      	str	r1, [r3, #0]
 80063d4:	e002      	b.n	80063dc <_printf_i+0x1d4>
 80063d6:	0670      	lsls	r0, r6, #25
 80063d8:	d5fb      	bpl.n	80063d2 <_printf_i+0x1ca>
 80063da:	8019      	strh	r1, [r3, #0]
 80063dc:	2300      	movs	r3, #0
 80063de:	4615      	mov	r5, r2
 80063e0:	6123      	str	r3, [r4, #16]
 80063e2:	e7ba      	b.n	800635a <_printf_i+0x152>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	2100      	movs	r1, #0
 80063e8:	1d1a      	adds	r2, r3, #4
 80063ea:	602a      	str	r2, [r5, #0]
 80063ec:	681d      	ldr	r5, [r3, #0]
 80063ee:	6862      	ldr	r2, [r4, #4]
 80063f0:	4628      	mov	r0, r5
 80063f2:	f000 f863 	bl	80064bc <memchr>
 80063f6:	b108      	cbz	r0, 80063fc <_printf_i+0x1f4>
 80063f8:	1b40      	subs	r0, r0, r5
 80063fa:	6060      	str	r0, [r4, #4]
 80063fc:	6863      	ldr	r3, [r4, #4]
 80063fe:	6123      	str	r3, [r4, #16]
 8006400:	2300      	movs	r3, #0
 8006402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006406:	e7a8      	b.n	800635a <_printf_i+0x152>
 8006408:	462a      	mov	r2, r5
 800640a:	4649      	mov	r1, r9
 800640c:	4640      	mov	r0, r8
 800640e:	6923      	ldr	r3, [r4, #16]
 8006410:	47d0      	blx	sl
 8006412:	3001      	adds	r0, #1
 8006414:	d0ab      	beq.n	800636e <_printf_i+0x166>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	079b      	lsls	r3, r3, #30
 800641a:	d413      	bmi.n	8006444 <_printf_i+0x23c>
 800641c:	68e0      	ldr	r0, [r4, #12]
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	4298      	cmp	r0, r3
 8006422:	bfb8      	it	lt
 8006424:	4618      	movlt	r0, r3
 8006426:	e7a4      	b.n	8006372 <_printf_i+0x16a>
 8006428:	2301      	movs	r3, #1
 800642a:	4632      	mov	r2, r6
 800642c:	4649      	mov	r1, r9
 800642e:	4640      	mov	r0, r8
 8006430:	47d0      	blx	sl
 8006432:	3001      	adds	r0, #1
 8006434:	d09b      	beq.n	800636e <_printf_i+0x166>
 8006436:	3501      	adds	r5, #1
 8006438:	68e3      	ldr	r3, [r4, #12]
 800643a:	9903      	ldr	r1, [sp, #12]
 800643c:	1a5b      	subs	r3, r3, r1
 800643e:	42ab      	cmp	r3, r5
 8006440:	dcf2      	bgt.n	8006428 <_printf_i+0x220>
 8006442:	e7eb      	b.n	800641c <_printf_i+0x214>
 8006444:	2500      	movs	r5, #0
 8006446:	f104 0619 	add.w	r6, r4, #25
 800644a:	e7f5      	b.n	8006438 <_printf_i+0x230>
 800644c:	080068ed 	.word	0x080068ed
 8006450:	080068fe 	.word	0x080068fe

08006454 <_read_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	4611      	mov	r1, r2
 800645c:	2200      	movs	r2, #0
 800645e:	4d05      	ldr	r5, [pc, #20]	; (8006474 <_read_r+0x20>)
 8006460:	602a      	str	r2, [r5, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	f7fa fa3e 	bl	80008e4 <_read>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_read_r+0x1e>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_read_r+0x1e>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	20001b48 	.word	0x20001b48

08006478 <_fstat_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	2300      	movs	r3, #0
 800647c:	4d06      	ldr	r5, [pc, #24]	; (8006498 <_fstat_r+0x20>)
 800647e:	4604      	mov	r4, r0
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	602b      	str	r3, [r5, #0]
 8006486:	f7fa fa55 	bl	8000934 <_fstat>
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	d102      	bne.n	8006494 <_fstat_r+0x1c>
 800648e:	682b      	ldr	r3, [r5, #0]
 8006490:	b103      	cbz	r3, 8006494 <_fstat_r+0x1c>
 8006492:	6023      	str	r3, [r4, #0]
 8006494:	bd38      	pop	{r3, r4, r5, pc}
 8006496:	bf00      	nop
 8006498:	20001b48 	.word	0x20001b48

0800649c <_isatty_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	2300      	movs	r3, #0
 80064a0:	4d05      	ldr	r5, [pc, #20]	; (80064b8 <_isatty_r+0x1c>)
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	602b      	str	r3, [r5, #0]
 80064a8:	f7fa fa53 	bl	8000952 <_isatty>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d102      	bne.n	80064b6 <_isatty_r+0x1a>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	b103      	cbz	r3, 80064b6 <_isatty_r+0x1a>
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	20001b48 	.word	0x20001b48

080064bc <memchr>:
 80064bc:	4603      	mov	r3, r0
 80064be:	b510      	push	{r4, lr}
 80064c0:	b2c9      	uxtb	r1, r1
 80064c2:	4402      	add	r2, r0
 80064c4:	4293      	cmp	r3, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	d101      	bne.n	80064ce <memchr+0x12>
 80064ca:	2000      	movs	r0, #0
 80064cc:	e003      	b.n	80064d6 <memchr+0x1a>
 80064ce:	7804      	ldrb	r4, [r0, #0]
 80064d0:	3301      	adds	r3, #1
 80064d2:	428c      	cmp	r4, r1
 80064d4:	d1f6      	bne.n	80064c4 <memchr+0x8>
 80064d6:	bd10      	pop	{r4, pc}

080064d8 <_init>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr

080064e4 <_fini>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr
